/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/accounts/Gigya.JS.Plugin.screenSet2/app/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/lodash.isempty/index.js":
/*!***********************************************!*\
  !*** ../node_modules/lodash.isempty/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap');

/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' ||
        typeof value.splice == 'function' || isBuffer(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (nonEnumShadows || isPrototype(value)) {
    return !nativeKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = isEmpty;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "../node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "../node_modules/lodash.merge/index.js":
/*!*********************************************!*\
  !*** ../node_modules/lodash.merge/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    asyncTag = '[object AsyncFunction]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    nullTag = '[object Null]',
    objectTag = '[object Object]',
    proxyTag = '[object Proxy]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    undefinedTag = '[object Undefined]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice,
    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeMax = Math.max,
    nativeNow = Date.now;

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map'),
    nativeCreate = getNative(Object, 'create');

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = merge;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "../node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "../node_modules/tslib/tslib.es6.js":
/*!******************************************!*\
  !*** ../node_modules/tslib/tslib.es6.js ***!
  \******************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(__webpack_provided_Object_dot_assign) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldGet", function() { return __classPrivateFieldGet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldSet", function() { return __classPrivateFieldSet; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = __webpack_provided_Object_dot_assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = gigya.Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new gigya.Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? gigya.Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new gigya.Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { gigya.Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js")["__assign"]))

/***/ }),

/***/ "../node_modules/webpack/buildin/global.js":
/*!*************************************************!*\
  !*** ../node_modules/webpack/buildin/global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "../node_modules/webpack/buildin/module.js":
/*!*************************************************!*\
  !*** ../node_modules/webpack/buildin/module.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ApiCountdownHelper.ts":
/*!***************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/ApiCountdownHelper.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var PhoneNumberWidget_1 = __webpack_require__(/*! ./Widgets/PhoneNumberWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneNumberWidget.ts");
var CONSTS = {
    disabledClass: 'gigya-disabled',
    resendCountDownAttr: 'data-countdown-label',
    hiddenClass: 'gigya-hidden'
};
var ApiCountdownHelper = /** @class */ (function () {
    function ApiCountdownHelper(el) {
        this.el = el;
    }
    ApiCountdownHelper.prototype.startCountdown = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.show();
                        return [4 /*yield*/, this.startResendCountDown(10)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ApiCountdownHelper.prototype.startResendCountDown = function (counter) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new gigya.Promise(function (resolve) {
                        _this.show();
                        _this.changeResendBlockedMessage(counter);
                        _this.intervalID = setInterval(function () {
                            if (counter === 1) {
                                clearInterval(_this.intervalID);
                                _this.hide();
                                _this.el.innerHTML = '';
                                resolve();
                            }
                            else {
                                counter -= 1;
                                _this.changeResendBlockedMessage(counter);
                            }
                        }, 1000);
                    })];
            });
        });
    };
    ApiCountdownHelper.prototype.changeResendBlockedMessage = function (count) {
        var countdownLabel = this.el.getAttribute(CONSTS.resendCountDownAttr) || '';
        this.el.innerHTML = countdownLabel === null || countdownLabel === void 0 ? void 0 : countdownLabel.replace(PhoneNumberWidget_1.PhoneNumberWidget_CONSTS.resendCountTemplate, count === null || count === void 0 ? void 0 : count.toString());
    };
    ApiCountdownHelper.prototype.show = function () {
        this.el.classList.remove(CONSTS.hiddenClass);
    };
    ApiCountdownHelper.prototype.hide = function () {
        this.el.classList.add(CONSTS.hiddenClass);
    };
    ApiCountdownHelper.prototype.destroy = function () {
        if (this.intervalID) {
            clearInterval(this.intervalID);
        }
    };
    return ApiCountdownHelper;
}());
exports.ApiCountdownHelper = ApiCountdownHelper;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ApiLinkHelper.ts":
/*!**********************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/ApiLinkHelper.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var PhoneNumberWidget_1 = __webpack_require__(/*! ./Widgets/PhoneNumberWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneNumberWidget.ts");
var CONSTS = {
    disabledClass: 'gigya-disabled',
    resendCountDownAttr: 'data-countdown-label'
};
var ApiLinkHelper = /** @class */ (function () {
    function ApiLinkHelper(el, callApi) {
        var _this = this;
        var _a;
        this.el = el;
        this.callApi = callApi;
        this.onClick = function () {
            _this.callApi();
            _this.temporarilyDisable();
        };
        this.originalText = (_a = this.el) === null || _a === void 0 ? void 0 : _a.innerHTML;
    }
    ApiLinkHelper.prototype.init = function () {
        this.temporarilyDisable();
    };
    ApiLinkHelper.prototype.destroy = function () {
        if (this.resendTimeoutId) {
            clearTimeout(this.resendTimeoutId);
        }
        window.gigya.utils.DOM.removeEventListener(this.el, 'click', this.onClick);
    };
    ApiLinkHelper.prototype.temporarilyDisable = function () {
        this.disable();
        this.startResendCountDown(10);
    };
    ApiLinkHelper.prototype.startResendCountDown = function (count) {
        var _this = this;
        if (count) {
            this.changeResendBlockedMessage(count);
            this.resendTimeoutId = setTimeout(function () { return _this.startResendCountDown(count - 1); }, 1000);
        }
        else {
            this.enableResendCode();
        }
    };
    ApiLinkHelper.prototype.enableResendCode = function () {
        this.el.innerHTML = this.originalText;
        this.enable();
    };
    ApiLinkHelper.prototype.disable = function () {
        this.el.setAttribute('disabled', 'disabled');
        window.gigya.utils.DOM.addClassToElement(this.el, CONSTS.disabledClass);
        window.gigya.utils.DOM.removeEventListener(this.el, 'click', this.onClick);
    };
    ApiLinkHelper.prototype.changeResendBlockedMessage = function (count) {
        var countdownLabel = this.el.getAttribute(CONSTS.resendCountDownAttr) || '';
        this.el.innerHTML = countdownLabel === null || countdownLabel === void 0 ? void 0 : countdownLabel.replace(PhoneNumberWidget_1.PhoneNumberWidget_CONSTS.resendCountTemplate, count === null || count === void 0 ? void 0 : count.toString());
    };
    ApiLinkHelper.prototype.enable = function () {
        this.el.removeAttribute('disabled');
        window.gigya.utils.DOM.removeClassFromElement(this.el, CONSTS.disabledClass);
        window.gigya.utils.DOM.addEventListener(this.el, 'click', this.onClick);
    };
    return ApiLinkHelper;
}());
exports.ApiLinkHelper = ApiLinkHelper;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseAuthMethodWidget.ts":
/*!*****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseAuthMethodWidget.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ./BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var TranslatedWidget_1 = __webpack_require__(/*! ./Widgets/TranslatedWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget.ts");
var BindingWidget_1 = __webpack_require__(/*! ./Widgets/BindingWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/BindingWidget.ts");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var ErrorDisplayElement_1 = __webpack_require__(/*! ./ErrorDisplayElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement.ts");
var expandableWidget_1 = __webpack_require__(/*! ./utils/expandableWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/expandableWidget.ts");
exports.AuthMethod_CONSTS = {
    authMethod: 'data-auth-method',
    isExpandedAttr: 'data-card-expanded',
    containerClass: 'gigya-container',
    containerEnabledClass: 'gigya-container-enabled',
    deps: [TranslatedWidget_1.TranslatedWidget, BindingWidget_1.BindingWidget, ErrorDisplayElement_1.ErrorDisplayElement]
};
utils_1.DeepFreeze(exports.AuthMethod_CONSTS);
var authMethods = {};
// TODO: implement IExpandable widget and use methods to expand/collapse from parent
var BaseAuthMethodWidget = /** @class */ (function (_super) {
    tslib_1.__extends(BaseAuthMethodWidget, _super);
    function BaseAuthMethodWidget(_form, el, resetCSS) {
        var _this = _super.call(this, _form, el, resetCSS) || this;
        _this._form = _form;
        _this.isInitialized = false;
        _this.originalTabIndex = null;
        return _this;
    }
    BaseAuthMethodWidget.prototype.addWidgetToForm = function () {
        if (!authMethods[this._form.ID]) {
            authMethods[this._form.ID] = [];
        }
        authMethods[this._form.ID].push(this);
    };
    BaseAuthMethodWidget.prototype.linkInstanceElement = function (parent) {
        var _this = this;
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.instanceElement) {
            this.addButtonHandler(this.submitButton, function () { return _this.submit(); }, 'submit');
            this.addDomEventListener(this.toggleElement, 'click', function () { return _this.onClick(); });
            this.addDomEventListener(this.formField.instanceElement, 'change', function () { return _this.hideWidgetErrors(); });
            this.addWidgetToForm();
        }
    };
    BaseAuthMethodWidget.prototype.expand = function () {
        this.collapseOtherAuthMethodWidgets();
        this.isExpanded = true;
        this.focusInput();
        this.removeFromTabOrder();
    };
    BaseAuthMethodWidget.prototype.collapse = function () {
        this.isExpanded = false;
        this.addToTabOrder();
    };
    BaseAuthMethodWidget.prototype.onClick = function () {
        this.expand();
    };
    BaseAuthMethodWidget.prototype.submit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                this._screenSet.data.shouldConnectAccounts = true;
                this._form.submit({
                    submitApiParams: this.submitApiParams,
                    customSubmitApi: this.submitApi,
                    onAfterSubmitCallback: function (response) {
                        if (response.errorCode != GSErrors_1.GSErrors.OK) {
                            _this.displayErrorMessage(response);
                        }
                    }
                });
                return [2 /*return*/];
            });
        });
    };
    BaseAuthMethodWidget.prototype.displayErrorMessage = function (response) {
        var text = this.getErrorTextFromResponse(response);
        this.renderWidgetError(response.errorCode, text);
    };
    BaseAuthMethodWidget.prototype.renderWidgetError = function (errorCode, errorMessage) {
        var _a;
        (_a = this._form._errorDisplayElements[this.fieldName]) === null || _a === void 0 ? void 0 : _a.forEach(function (errorElement) {
            errorElement.showError({
                errorMessage: errorMessage, errorCode: errorCode
            });
        });
    };
    BaseAuthMethodWidget.prototype.hideWidgetErrors = function () {
        var _a;
        (_a = this._form._errorDisplayElements[this.fieldName]) === null || _a === void 0 ? void 0 : _a.forEach(function (errorElement) {
            errorElement.hideError();
        });
    };
    BaseAuthMethodWidget.prototype.getErrorKeyFromResponse = function (response) {
        var errorCode = Number(response.errorCode);
        if (errorCode === GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE && response.errorDetails) {
            if (utils_1.endsWith(response.errorDetails, 'Token has been revoked')) {
                return 'otp_code_expired';
            }
            if (utils_1.endsWith(response.errorDetails, 'code')) {
                return 'please_enter_a_valid_code';
            }
        }
        return this._form.getErrorKey(response);
    };
    BaseAuthMethodWidget.prototype.addToTabOrder = function () {
        var _a;
        if (this.originalTabIndex !== null) {
            (_a = this.toggleElement) === null || _a === void 0 ? void 0 : _a.setAttribute('tabindex', this.originalTabIndex);
        }
    };
    BaseAuthMethodWidget.prototype.removeFromTabOrder = function () {
        this.originalTabIndex = this.toggleElement.getAttribute('tabindex');
        this.toggleElement.removeAttribute('tabindex');
    };
    BaseAuthMethodWidget.prototype.focusInput = function () {
        var _this = this;
        setTimeout(function () { var _a, _b; return (_b = (_a = _this.formField) === null || _a === void 0 ? void 0 : _a.instanceElement) === null || _b === void 0 ? void 0 : _b.focus(); });
    };
    BaseAuthMethodWidget.prototype.collapseOtherAuthMethodWidgets = function () {
        var _this = this;
        authMethods[this._form.ID].forEach(function (authMethod) { return authMethod !== _this && authMethod.collapse(); });
    };
    Object.defineProperty(BaseAuthMethodWidget.prototype, "isExpanded", {
        set: function (expanded) {
            expandableWidget_1.changeExpandedState(this.instanceElement, exports.AuthMethod_CONSTS.isExpandedAttr, expanded);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseAuthMethodWidget.prototype, "submitButton", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector('.gigya-input-submit');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseAuthMethodWidget.prototype, "toggleElement", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector('.gigya-card-header');
        },
        enumerable: true,
        configurable: true
    });
    BaseAuthMethodWidget.prototype.getField = function (fieldName) {
        return this._form.getField(fieldName);
    };
    Object.defineProperty(BaseAuthMethodWidget.prototype, "formField", {
        get: function () {
            return this.getField(this.fieldName);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseAuthMethodWidget.prototype, "dataProvider", {
        get: function () {
            return this._form.dataProvider;
        },
        enumerable: true,
        configurable: true
    });
    return BaseAuthMethodWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.BaseAuthMethodWidget = BaseAuthMethodWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts":
/*!*****************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_Object_dot_assign) {Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var apiBootstrap_1 = __webpack_require__(/*! src/core/Gigya.Js/app/apiBootstrap */ "./src/core/Gigya.Js/app/apiBootstrap.ts");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var TemplateElement_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts");
var Errors_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors.ts");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var BaseServerWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseServerWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseServerWidget.ts");
var LoginModes_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes.ts");
var PasswordInputs_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PasswordInputs */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PasswordInputs.ts");
var Consent_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Consent */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Consent.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var FlagService_1 = __webpack_require__(/*! ../../../core/Gigya.Js/app/Services/FlagService */ "./src/core/Gigya.Js/app/Services/FlagService.ts");
var ConsentData_1 = __webpack_require__(/*! ./ConsentData */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ConsentData.ts");
var FormDataProvider_1 = __webpack_require__(/*! ./DataProviders/FormDataProvider */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/FormDataProvider.ts");
exports.Form_CONSTS = {
    originalSuccessScreen: 'data-original-success-screen',
    successScreen: 'data-on-success-screen',
    autoSkipScreen: 'data-on-auto-skip-screen',
    autoSkipFlag: 'data-auto-skip',
    screenSetSkippedScreen: 'data-on-screenset-skipped-screen',
    formErrorClass: 'gigya-form-error',
    defaultCheckedAttribute: 'data-checked',
};
exports.CUSTOM_VALIDATION_TIMEOUT_WARNING = 10000;
utils_1.DeepFreeze(exports.Form_CONSTS);
var NOT_IMPLEMENTED = 'Not implemented';
var BaseForm = /** @class */ (function (_super) {
    tslib_1.__extends(BaseForm, _super);
    function BaseForm(_screen, elForm, gigyaClass) {
        var _this = _super.call(this, elForm, _screen) || this;
        _this._screen = _screen;
        _this.gigyaClass = gigyaClass;
        _this.settings = {
            supportConsentData: false
        };
        // Form inputs
        _this.dataToServer = new Array();
        _this._dynamicInputs = new Array();
        _this._inputs = new Array();
        _this._errorDisplayElements = {};
        _this._widgets = new Array();
        _this._submitButtons = new Array();
        _this._passwordInputs = new Array();
        _this._passwordRetypes = new Array();
        _this._secretQuestions = new Array();
        _this._autoSkipContainers = new Array();
        _this._serverWidgets = new Array();
        _this.filters = new Array();
        _this.isPopulated = false;
        _this.dataStore = _this._screenSet.data;
        _this.behaviorContext = null;
        _this.bindID = _this.publishID ? _this.ID : gigyaClass;
        _this.originalSuccessScreen = elForm.getAttribute(exports.Form_CONSTS.successScreen);
        _this.successScreen = _this._screenSet.chooseNextScreen(_this.originalSuccessScreen);
        _this.autoSkip = elForm.getAttribute(exports.Form_CONSTS.autoSkipFlag) == 'true';
        _this.autoSkipScreen = elForm.getAttribute(exports.Form_CONSTS.autoSkipScreen) || _this.successScreen;
        _this.screenSetSkippedScreen = elForm.getAttribute(exports.Form_CONSTS.screenSetSkippedScreen) || _this.successScreen;
        _this.registerFormInputs();
        _this.registerBoundedErrorElements();
        _this._widgets = BaseFormWidget_1.BaseFormWidget.registerWidgets(_this);
        _this.submitHandler = function (event) {
            window.gigya.utils.DOM.disableDefaultEventHandling(event);
            _this.submit();
        };
        _this.addEventListener('submit', _this.submitHandler);
        _this.fieldChangedHandler = function (event) {
            _this.evaluateConditionalAttributes();
        };
        return _this;
    }
    Object.defineProperty(BaseForm.prototype, "dataProvider", {
        //#region Form library
        get: function () {
            return new FormDataProvider_1.FormDataProvider(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseForm.prototype, "submitButtonClicked", {
        get: function () {
            return this._submitButtonClicked;
        },
        enumerable: true,
        configurable: true
    });
    BaseForm.addFormToLibrary = function (form) {
        BaseForm.FormsLibrary[form.CONSTS.gigyaClass] = form;
    };
    BaseForm.registerForms = function (parent) {
        var forms = new Array();
        utils_1.ForEachProp(BaseForm.FormsLibrary, function (formType, gigyaClass) {
            var elements = parent.templateElement.querySelectorAll("form." + gigyaClass);
            utils_1.ForEach(elements, function (el) {
                // #43904 - Ensure form is never submitted, even in case of initialization error.
                // This works by modifying the HTML attribute of the instance element before initialization.
                // When the element is cloned into an instance, all submissions will be cancelled by default.
                el.setAttribute('onsubmit', 'return false;');
                el.setAttribute('method', 'post');
                forms.push(new formType(parent, el, gigyaClass));
            });
        });
        return forms;
    };
    BaseForm.prototype.registerFormInputs = function () {
        this._inputs = FormInput_1.FormInput.registerFormInputs(this.templateElement.elements, this);
        if (this._passwordInputs.length > 0)
            this._validatedPassword = this._passwordInputs[0];
    };
    BaseForm.prototype.addDataField = function (field) {
        this.dataToServer.push(field);
    };
    BaseForm.prototype.addDynamicWidgets = function (rootEl) {
        var _this = this;
        var newWidgets = BaseFormWidget_1.BaseFormWidget.registerDynamicWidgets(this, rootEl);
        utils_1.ForEach(newWidgets, function (w) { return w.linkInstanceElement(_this.instanceElement); });
        this._widgets = this._widgets.concat(newWidgets);
        return newWidgets;
    };
    BaseForm.prototype.removeDynamicWidgets = function (widgetsToRemove) {
        if (!this._widgets || !this._widgets.length)
            return;
        this._widgets = this._widgets.filter(function (w) { return widgetsToRemove.indexOf(w) < 0; });
        widgetsToRemove.forEach(function (widget) {
            widget.unlinkInstanceElement();
            widget.unlinkTemplate();
        });
    };
    BaseForm.prototype.isFormBoundedElement = function (boundedElement) {
        if (boundedElement.boundedTo === this.bindID)
            return true;
        var el = boundedElement.instanceElement || boundedElement.templateElement;
        var thisEl = this.instanceElement || this.templateElement;
        while (el && el !== thisEl && el !== document.documentElement)
            el = el.parentElement;
        return el === thisEl;
    };
    BaseForm.prototype.linkAndPopulateInputElements = function (items) {
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            item.linkInstanceElement(this.instanceElement);
        }
        this.prePopulate();
    };
    BaseForm.prototype.linkAndPopulateWidgetElements = function (items) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _i, items_2, item;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _i = 0, items_2 = items;
                        _a.label = 1;
                    case 1:
                        if (!(_i < items_2.length)) return [3 /*break*/, 4];
                        item = items_2[_i];
                        return [4 /*yield*/, item.linkInstanceElement(this.instanceElement)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        this.prePopulate();
                        return [2 /*return*/];
                }
            });
        });
    };
    // TODO: remove when newFormLinkInstanceElement cleanup
    BaseForm.prototype.linkAndPopulateElements = function (items) {
        var _this = this;
        var linkItem = function (i) { return i.linkInstanceElement(_this.instanceElement); };
        utils_1.ForEach(items, linkItem);
        this.prePopulate();
    };
    BaseForm.prototype.ignoredFields = function () {
        return {
            'g-recaptcha-response': true,
            'fc-token': true,
            'passkey': true,
        };
    };
    BaseForm.prototype.registerBoundedErrorElements = function () {
        var _this = this;
        // Find all error display elements on the screen in this form.
        var formBoundedElements = new Array();
        this._errorDisplayElements = {};
        utils_1.ForEachProp(this._screen._errorDisplayElements, function (boundedElements) {
            utils_1.ForEach(boundedElements, function (boundedElement) {
                if (_this.isFormBoundedElement(boundedElement)) {
                    formBoundedElements.push(boundedElement);
                }
            });
        });
        // Loop through each error element on this form.
        utils_1.ForEach(formBoundedElements, function (boundedElement) {
            boundedElement._form = _this;
            // Unless bound to this form, normalize field name (for example, "birthYear" becomes "profile.birthYear").
            var boundedTo = boundedElement.boundedTo === _this.bindID ? _this.bindID : _this.getNormalizedFieldName(boundedElement.boundedTo);
            // Add to list of elements bound to specific ID.
            var boundedList = _this._errorDisplayElements[boundedTo];
            if (!boundedList) {
                boundedList = _this._errorDisplayElements[boundedTo] = [];
            }
            boundedList.push(boundedElement);
        });
    };
    BaseForm.prototype.unlinkTemplate = function () {
        this.removeEventListener('submit', this.submitHandler);
        var unlinkItem = function (i) { return i.unlinkTemplate(); };
        utils_1.ForEach(this._widgets, unlinkItem);
        utils_1.ForEach(this._inputs, unlinkItem);
        _super.prototype.unlinkTemplate.call(this);
    };
    // TODO: remove newLinkInstanceElement and take to code from there to this function when newFormLinkInstanceElement cleanup
    BaseForm.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.supportConsentData) {
                            this.setConsentData();
                        }
                        if (!FlagService_1.FlagService.newFormLinkInstanceElement) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.newLinkInstanceElement(parent)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        this.legacyLinkInstanceElement(parent);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    // TODO: when newFormLinkInstanceElement cleanup move code to linkInstanceElement and remove
    BaseForm.prototype.newLinkInstanceElement = function (parent) {
        var _a;
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _super.prototype.linkInstanceElement.call(this, parent);
                        if (!this.instanceElement) return [3 /*break*/, 2];
                        this.linkAndPopulateInputElements(this._inputs);
                        return [4 /*yield*/, this.linkAndPopulateWidgetElements(this._widgets)];
                    case 1:
                        _b.sent();
                        // Add event listener after link to instance elements.
                        this.addEventListener('fieldChanged', this.fieldChangedHandler);
                        _b.label = 2;
                    case 2:
                        (_a = this.behaviorContext) === null || _a === void 0 ? void 0 : _a.startMonitoring();
                        return [2 /*return*/];
                }
            });
        });
    };
    // TODO: remove when newFormLinkInstanceElement cleanup
    BaseForm.prototype.legacyLinkInstanceElement = function (parent) {
        var _a;
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.instanceElement) {
            this.linkAndPopulateElements(this._inputs);
            this.linkAndPopulateElements(this._widgets);
            // Add event listener after link to instance elements.
            this.addEventListener('fieldChanged', this.fieldChangedHandler);
        }
        (_a = this.behaviorContext) === null || _a === void 0 ? void 0 : _a.startMonitoring();
    };
    BaseForm.prototype.getLoginProviders = function () {
        return LoginModes_1.LoginModes.standard.getLoginProviders(this._screenSet.data.apiData, this._screenSet.params, this._screenSet.data.regToken);
    };
    BaseForm.prototype.unlinkInstanceElement = function () {
        var _a;
        // The event listener needs to be removed so that it can't be triggered when instance elements don't exist.
        this.removeEventListener('fieldChanged', this.fieldChangedHandler);
        this.clearDynamicFields(this._dynamicInputs);
        this._dynamicInputs = [];
        if (this.instanceElement) {
            var unlinkItem = function (i) { return i.unlinkInstanceElement(); };
            utils_1.ForEach(this._widgets, unlinkItem);
            utils_1.ForEach(this._inputs, unlinkItem);
        }
        (_a = this.behaviorContext) === null || _a === void 0 ? void 0 : _a.stopMonitoring();
        _super.prototype.unlinkInstanceElement.call(this);
    };
    //#region pre-populate form
    BaseForm.prototype.prePopulateDataFrom = function () {
        return [];
    };
    BaseForm.prototype.prePopulateData = function () {
        var apiData = this._screenSet.getApiData();
        var apiDataForForm = [{}];
        var overriddenData = [];
        utils_1.ForEach(this.prePopulateDataFrom(), function (field) {
            var extractedField = window.gigya.utils.object.getPropertyBySerializedName(apiData, field, false);
            apiDataForForm.push(extractedField);
            if ((field === 'getAccountInfo.preferences' || field === 'getAccountInfo.subscriptions')
                && extractedField && typeof extractedField === 'object') {
                Object.keys(extractedField).forEach(function (key) {
                    if (apiData[key]) {
                        overriddenData.push({ key: key, field: field });
                    }
                });
            }
        });
        if (overriddenData.length) {
            window.gigya.logger.report('pre-populate data overriddden fields', window.gigya.utils.object.merge(overriddenData), false);
        }
        return window.gigya.utils.object.merge(apiDataForForm);
    };
    BaseForm.prototype.getErrorKey = function (response) {
        var errorCode = Number(response.errorCode);
        switch (errorCode) {
            case GSErrors_1.GSErrors.UNAUTHORIZED_USER:
                return 'unauthorized_user';
            case GSErrors_1.GSErrors.PERMISSION_DENIED:
                return 'permission_denied';
            case GSErrors_1.GSErrors.ACCOUNT_TEMPORARILY_LOCKED_OUT:
                return 'account_temporarily_locked_out';
            case GSErrors_1.GSErrors.ACCOUNT_DISABLED:
                return 'account_is_disabled';
            case GSErrors_1.GSErrors.LOGIN_FAILED_CAPTCHA_REQUIRED:
            case GSErrors_1.GSErrors.LOGIN_FAILED_WRONG_CAPTCHA:
                return 'login_captcha_error';
            case GSErrors_1.GSErrors.REQUEST_FAILED_CAPTCHA_REQUIRED:
                return 'request_captcha_error';
            case GSErrors_1.GSErrors.LOGIN_IDENTIFIER_EXISTS:
                return 'login_identifier_exists';
            case GSErrors_1.GSErrors.UNIQUE_IDENTIFIER_EXISTS:
                return 'unique_identifier_exists';
            case GSErrors_1.GSErrors.UNDERAGE_USER:
                return 'sorry_we_are_not_able_to_process_your_registration'; //COPPA
            case GSErrors_1.GSErrors.INVALID_LOGINID:
                return 'invalid_login_or_password';
            case GSErrors_1.GSErrors.LOGINID_DOES_NOT_EXIST:
                return 'there_is_no_user_with_that_username_or_email';
            case GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE: // invalid parameter value
            case GSErrors_1.GSErrors.DUPLICATE_NONCE:
                return 'there_are_errors_in_your_form_please_try_again';
            case GSErrors_1.GSErrors.OLD_PASSWORD_USED:
                return 'old_password_cannot_be_the_same_as_new_password';
            case GSErrors_1.GSErrors.NETWORK_ERROR:
                return 'network_error';
            case GSErrors_1.GSErrors.VALIDATION_ERROR: // Validation_error
                var captchaError = response.validationErrors.filter(function (err) { return err.errorCode === GSErrors_1.GSErrors.CAPTCHA_VERIFICATION_FAILED; })[0];
                return captchaError ? 'register_captcha_error' : 'there_are_errors_in_your_form_please_try_again';
            case GSErrors_1.GSErrors.FORBIDDEN:
                return 'forbidden_error';
            case GSErrors_1.GSErrors.FREQUENCY_LIMIT_REACHED:
                return 'code_frequency_limit_reached';
            case GSErrors_1.GSErrors.ACCOUNT_PENDING_REGISTRATION:
                return 'account_pending_registration';
            case GSErrors_1.GSErrors.OK:
            default:
                // Nothing to do for the error message here
                return '';
        }
    };
    // Pre-populate form data from server or default values.
    BaseForm.prototype.prePopulate = function () {
        var _this = this;
        var populateData = tslib_1.__assign(tslib_1.__assign({}, this.prePopulateData()), this.beforeLoadData);
        this.updateDynamicFields();
        var updateField = function (field) {
            var fieldName = field.getName(true);
            if (fieldName && fieldName !== 'password') {
                var dataValue = null;
                var arrayRootField = field.instanceElement.getAttribute(FormInput_1.FormInput_CONSTS.arrayRootAttribute);
                if (!arrayRootField) {
                    dataValue = window.gigya.utils.object.getPropertyBySerializedName(populateData, fieldName, false);
                }
                else {
                    if (!field.arrayKeyField || !field.arrayKeyValue) {
                        _this.warn('Field not populated because data-array-root provided without data-array-key-field and data-array-key-value', fieldName);
                    }
                    else {
                        var arrayRoot = window.gigya.utils.object.getPropertyBySerializedName(populateData, arrayRootField, false);
                        if (arrayRoot && arrayRoot.constructor === Array && arrayRoot.length) {
                            // Find element.
                            for (var _i = 0, arrayRoot_1 = arrayRoot; _i < arrayRoot_1.length; _i++) {
                                var o = arrayRoot_1[_i];
                                var arrayKeyFieldValue = window.gigya.utils.object.getPropertyBySerializedName(o, field.arrayKeyField, false);
                                if (field.arrayKeyValue === String(arrayKeyFieldValue)) {
                                    dataValue = window.gigya.utils.object.getPropertyBySerializedName(o, fieldName.substr(arrayRootField.length + 1), false);
                                    break;
                                }
                            }
                        }
                    }
                }
                if (dataValue !== null) {
                    field.prePopulate(dataValue);
                }
                else if (field.type === 'checkbox') {
                    var checkboxInstanceElement = field.instanceElement;
                    var defaultCheckedCondition = field.instanceElement.getAttribute(exports.Form_CONSTS.defaultCheckedAttribute);
                    if (defaultCheckedCondition) {
                        checkboxInstanceElement.checked = Boolean(field.evaluateExpression({ condition: defaultCheckedCondition }));
                    }
                    // Set default value to checked property.
                    // This is necessary to trigger conditionals that rely on the checkbox's value.
                    field.setValue(checkboxInstanceElement.checked);
                }
            }
        };
        utils_1.ForEach(this._inputs, updateField);
        utils_1.ForEach(this._dynamicInputs, updateField);
        this.isPopulated = true;
    };
    BaseForm.prototype.getExtraProfileFields = function (missingOnly) {
        var _this = this;
        var alreadyHandledFields = {};
        return this.dataToServer
            .map(function (field) { return field.normalizedFieldName; })
            .concat(this._widgets.reduce(function (res, widget) { return res.concat(widget.getFieldsNames()); }, [])) // get also fieldNames from widgets that may not be filled in dataToServer
            .filter(function (n) { return utils_1.firstPart(n, '.') === _this.profileObjectName(); }) // make sure it is in profile namespace
            .map(function (n) { return utils_1.firstPart(n.replace(_this.profileObjectName() + '.', ''), '.'); }) // get the property name itself
            .reduce(function (fieldNames, fn) {
            if (alreadyHandledFields[fn])
                return fieldNames;
            alreadyHandledFields[fn] = true;
            var profile = _this._screenSet.getProfile();
            if (!missingOnly || !profile || !profile[fn]) {
                fieldNames.push(fn);
            }
            return fieldNames;
        }, []);
    };
    BaseForm.prototype.getNeededData = function (formContext) {
        var neededData = {};
        // Fetch password complexity for the password widget and validation if password field exists on screen.
        var isPasswordPoliciesNeeded = utils_1.Some(this.dataToServer, this.isPasswordPolicyNeededForField);
        if (isPasswordPoliciesNeeded) {
            neededData['getPolicies'] = {
                params: {
                    sections: 'passwordComplexity',
                },
                cache: true,
            };
        }
        if (this.supportConsentData) {
            neededData['getSchema'] = {
                params: {},
            };
            neededData['getSiteConsentDetails'] = {
                params: {},
                shouldExecute: function () {
                    if (!ConsentData_1.hasConsentLicense()) {
                        return gigya.Promise.resolve(false);
                    }
                    return apiBootstrap_1.getConsentStatus()
                        .then(function (res) {
                        var _a;
                        var isMigrated = Boolean((_a = res === null || res === void 0 ? void 0 : res.consentStatus) === null || _a === void 0 ? void 0 : _a.isMigrated);
                        window.gigya._.config.consent.isMigrated = isMigrated;
                        return isMigrated;
                    })
                        .catch(function (e) {
                        window.gigya.logger.error('exception when getting consent status', { e: e });
                        return false;
                    });
                }
            };
        }
        return neededData;
    };
    BaseForm.prototype.setBeforeLoadData = function (eventData) {
        this.beforeLoadData = eventData;
    };
    BaseForm.prototype.isPasswordPolicyNeededForField = function (field) {
        return field instanceof PasswordInputs_1.BasePasswordInput && (field.isPasswordSchemaValidated() || field.isPasswordStrengthWidgetBound());
    };
    //#endregion
    //#region Dynamic fields
    // explicitly add dynamic inputs, more efficient
    BaseForm.prototype.addDynamicInputs = function (rootEl) {
        var _this = this;
        var inputsElements = rootEl.querySelectorAll('input,select,fieldset');
        var inputs = FormInput_1.FormInput.registerFormInputs(inputsElements, this);
        inputs.forEach(function (input) {
            TemplateElement_1.TemplateElement.prepareTemplateInstanceElement(input.templateElement, false);
            input.linkInstanceElement(_this.instanceElement);
        });
        this._inputs = this._inputs.concat(inputs);
        return inputs;
    };
    BaseForm.prototype.removeDynamicInputs = function (inputsToRemove) {
        var _this = this;
        this._inputs = this._inputs.filter(function (i) { return inputsToRemove.indexOf(i) < 0; });
        inputsToRemove.forEach(function (input) {
            var dataIndex = window.gigya.utils.array.indexOf(_this.dataToServer, input);
            if (dataIndex !== -1) {
                _this.dataToServer.splice(dataIndex, 1);
            }
            input.unlinkInstanceElement();
            input.unlinkTemplate();
        });
    };
    BaseForm.prototype.clearDynamicFields = function (dynamics) {
        var _this = this;
        utils_1.ForEach(dynamics, function (old) {
            old.unlinkInstanceElement();
            old.unlinkTemplate();
            var dataIndex = window.gigya.utils.array.indexOf(_this.dataToServer, old);
            if (dataIndex !== -1)
                _this.dataToServer.splice(dataIndex, 1);
        });
    };
    BaseForm.prototype.isDynamicFieldObsolete = function (dynamicElement) {
        var parent = dynamicElement.templateElement.parentElement;
        while (parent && parent !== this.instanceElement && parent !== document.documentElement)
            parent = parent.parentElement;
        return parent !== this.instanceElement;
    };
    BaseForm.prototype.isDynamicFieldToAdd = function (el) {
        var _this = this;
        var ignoredFields = this.ignoredFields();
        var instanceOfArray = el[TemplateElement_1.TemplateElement_CONSTS.instanceOfArray];
        if (instanceOfArray && utils_1.Some(instanceOfArray, function (instance) { return instance instanceof FormInput_1.FormInput && instance._form === _this; }))
            return false;
        var name = el.getAttribute('name');
        if (ignoredFields[name])
            return false;
        return true;
    };
    BaseForm.prototype.updateDynamicFields = function () {
        var _this = this;
        var oldDynamicInputs = new Array();
        var validDynamicInputs = new Array();
        // separate valid from invalid existing dynamics
        utils_1.ForEach(this._dynamicInputs, function (existingDynamicInput) {
            if (_this.isDynamicFieldObsolete(existingDynamicInput))
                oldDynamicInputs.push(existingDynamicInput);
            else
                validDynamicInputs.push(existingDynamicInput);
        });
        // remove invalid dynamics
        this.clearDynamicFields(oldDynamicInputs);
        // add new dynamics
        var newDynamics = new Array();
        // find new dynamic elements
        utils_1.ForEach(this.instanceElement.elements, function (el) {
            if (_this.isDynamicFieldToAdd(el))
                newDynamics.push(el);
        });
        // create instances for new dynamics
        var newDynamicInputs = FormInput_1.FormInput.registerFormInputs(newDynamics, this);
        utils_1.ForEach(newDynamicInputs, function (newDynamicInput) {
            TemplateElement_1.TemplateElement.prepareTemplateInstanceElement(newDynamicInput.templateElement, false);
            newDynamicInput.linkInstanceElement(_this.instanceElement);
            newDynamicInput.dynamicField = true;
            validDynamicInputs.push(newDynamicInput);
        });
        // store new dynamics list
        this._dynamicInputs = validDynamicInputs;
    };
    //#endregion
    //#region validation
    BaseForm.prototype.requiredFields = function () {
        return this.specialFields();
    };
    BaseForm.prototype.onInputChange = function (input, setByScript) {
        var _this = this;
        if (setByScript) {
            window.gigya.utils.DOM.dispatch(this.instanceElement, 'fieldChanged');
            return this.afterInputChange({
                field: input,
                errorCode: GSErrors_1.GSErrors.OK,
                setByScript: setByScript,
            });
        }
        else {
            var value = input.getValue();
            input.validate(function (validationInfo) {
                var _a, _b;
                var fieldChangeEvent = {
                    eventName: 'fieldChanged',
                    screen: (_a = _this._screen) === null || _a === void 0 ? void 0 : _a.requestedScreen,
                    form: _this.bindID,
                    field: input.fieldName,
                    isValid: !validationInfo.errorCode,
                    errMsg: validationInfo.errorCode,
                    value: value,
                };
                if ((_b = _this._screen) === null || _b === void 0 ? void 0 : _b.isScreenVariant) {
                    fieldChangeEvent.abTesting = _this._screen.abTestingData;
                }
                _this._screen.dispatchEvent('fieldChanged', fieldChangeEvent);
                window.gigya.utils.DOM.dispatch(_this.instanceElement, 'fieldChanged');
                _this.afterInputChange(validationInfo);
            });
        }
    };
    BaseForm.prototype.afterInputChange = function (validationInfo) {
        var shouldClearPasswordRetypes = (this._screen.requestedScreen === 'gigya-register-screen' && validationInfo.field.fieldName === 'password') || validationInfo.field.fieldName === 'newPassword';
        if (shouldClearPasswordRetypes) {
            utils_1.ForEach(this._passwordRetypes, function (p) {
                p.setValue('', validationInfo.setByScript);
            });
        }
        var errorInfo = {
            field: validationInfo.field,
            errorCode: validationInfo.errorCode,
            errorType: validationInfo.errorType,
            isWarn: validationInfo.isWarning
        };
        this.renderFieldError(errorInfo, true);
    };
    BaseForm.prototype.isPasswordSchemaValidated = function () {
        return this.schemaValidated();
    };
    BaseForm.prototype.schemaValidated = function () {
        return false;
    };
    BaseForm.prototype.getFieldSchema = function (field) {
        var schema = this.getSchemaOf(field.fieldNamespace || 'profile');
        return schema && schema[field.fieldBaseName];
    };
    BaseForm.prototype.getSchemaOf = function (schemaName) {
        var apiData = this._screenSet.getApiData();
        var schemaRoot = this.getSchemaRoot(schemaName);
        return apiData.getSchema && apiData.getSchema[schemaRoot] && apiData.getSchema[schemaRoot].fields;
    };
    BaseForm.prototype.getSchemaRoot = function (namespace) {
        switch (namespace) {
            case 'data':
                return 'dataSchema';
            case 'profile':
                return 'profileSchema';
            case 'subscriptions':
                return 'subscriptionsSchema';
            case 'preferences':
                return 'preferencesSchema';
            case 'organization':
                return 'organizationSchema';
            case 'requester':
                return 'requesterSchema';
        }
    };
    BaseForm.prototype.renderFieldError = function (errorInfo, isBoundToField, customErrMsg, errorTypeToRender) {
        var field = errorInfo.field ? errorInfo.field : this.getField(errorInfo.fieldName, errorInfo.fieldArrayKeyValue, true);
        errorInfo.errorMessage = customErrMsg || this._screen.getErrorMessage(errorInfo.errorCode, isBoundToField, field);
        var arBoundElements = this._errorDisplayElements[field === null || field === void 0 ? void 0 : field.normalizedFieldName] || [];
        if (errorTypeToRender !== undefined) {
            arBoundElements = arBoundElements.filter(function (el) { return el.getErrorType() === errorTypeToRender; });
        }
        var skipValidityUpdate = errorTypeToRender && arBoundElements.length === 0;
        // display error on bounded error elements
        if (isBoundToField) {
            if (!skipValidityUpdate) {
                this.setFieldValidity(field, errorInfo);
            }
            // Dealing with gigya-error-msg and gigya-error-display within the same form as the input.
            utils_1.ForEach(arBoundElements, function (elBound) {
                // Do not consider the field bound if it's a different array element.
                var fieldArrayKeyValue = field.instanceElement.getAttribute(FormInput_1.FormInput_CONSTS.arrayKeyValueAttribute);
                if (fieldArrayKeyValue && fieldArrayKeyValue !== elBound.instanceElement.getAttribute(FormInput_1.FormInput_CONSTS.arrayKeyValueAttribute)) {
                    return;
                }
                if ((errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.errorMessage) && elBound.isErrorCodeAllowed(errorInfo.errorCode)) {
                    elBound.showError(errorInfo);
                }
                else {
                    elBound.hideError();
                }
            });
        }
        return errorInfo.errorCode !== GSErrors_1.GSErrors.Data_Pending;
    };
    BaseForm.prototype.setFieldValidity = function (field, errorInfo) {
        var fieldValidity;
        switch (errorInfo.errorCode) {
            case 0:
                fieldValidity = FormInput_1.ValidityStates.valid;
                break;
            case GSErrors_1.GSErrors.Data_Pending:
                fieldValidity = FormInput_1.ValidityStates.pending;
                break;
            default:
                fieldValidity = FormInput_1.ValidityStates.error;
                break;
        }
        // Display error on the field itself.
        field.setValidityState(fieldValidity);
    };
    BaseForm.prototype.showCustomFormError = function (errMsg) {
        var errorInfo = {
            errorMessage: errMsg,
            errorCode: GSErrors_1.GSErrors.VALIDATION_ERROR,
            errorType: Errors_1.ErrorType.custom
        };
        this.showErrors([errorInfo], true); // isServerError = true (force the display of the error message)
        window.gigya.utils.DOM.addClassToElement(this.instanceElement, exports.Form_CONSTS.formErrorClass);
    };
    BaseForm.prototype.createFormEvent = function (eventName, eventData) {
        var _a, _b;
        var event = __webpack_provided_Object_dot_assign({
            eventName: eventName,
            data: this._screenSet.getSchemaData(),
            profile: this._screenSet.getProfile(),
            subscriptions: this._screenSet.getSubScriptions(),
            communications: this._screenSet.getCommunications(),
            preferences: this._screenSet.getPreferences(),
            form: this.bindID,
            screen: (_a = this._screen) === null || _a === void 0 ? void 0 : _a.requestedScreen,
        }, eventData);
        if ((_b = this._screen) === null || _b === void 0 ? void 0 : _b.isScreenVariant) {
            event.abTesting = this._screen.abTestingData;
        }
        return event;
    };
    BaseForm.prototype.onAfterValidation = function (errors) {
        var validationErrors = errors.reduce(function (acc, errInfo) {
            acc[errInfo.fieldName] = {
                errorMessage: errInfo.errorMessage,
                errorCode: errInfo.errorCode
            };
            return acc;
        }, {});
        var afterValidationEvent = this.createFormEvent('afterValidation', {
            formData: this.getFlatFormData(true, false),
            validationErrors: validationErrors,
            formErrors: validationErrors // todo: backward compatibility - need to be announced and removed
        });
        this._screen.dispatchEvent(afterValidationEvent.eventName, afterValidationEvent);
    };
    BaseForm.prototype.displayErrors = function (errors) {
        var _this = this;
        utils_1.ForEach(errors, function (errorInfo) {
            if (errorInfo.fieldName === 'form') {
                _this.showCustomFormError(errorInfo.errorMessage);
            }
            else {
                errorInfo.handled = _this.renderFieldError(errorInfo, true, errorInfo.errorMessage);
            }
        });
        this.showErrors(errors, false);
    };
    BaseForm.prototype.getValidationErrors = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var customValidationErrors;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCustomValidationErrors()];
                    case 1:
                        customValidationErrors = _a.sent();
                        if ((customValidationErrors === null || customValidationErrors === void 0 ? void 0 : customValidationErrors.length) > 0) {
                            return [2 /*return*/, customValidationErrors];
                        }
                        return [2 /*return*/, this.getStandardValidationErrors()];
                }
            });
        });
    };
    BaseForm.prototype.getCustomValidationErrors = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var customErrorMessages;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBeforeValidationEventResult()];
                    case 1:
                        customErrorMessages = _a.sent();
                        if (!customErrorMessages || typeof (customErrorMessages) !== 'object') {
                            return [2 /*return*/, []];
                        }
                        return [2 /*return*/, Object.keys(customErrorMessages)
                                .filter(function (fieldName) { return _this.isValidCustomErrorFieldName(fieldName); })
                                .map(function (fieldName) {
                                return fieldName === 'form' ? {
                                    fieldName: fieldName,
                                    errorMessage: customErrorMessages['form']
                                } :
                                    _this.getErrorInfo({
                                        field: _this.getField(fieldName),
                                        errorCode: GSErrors_1.GSErrors.VALIDATION_ERROR,
                                        errorType: Errors_1.ErrorType.custom
                                    }, customErrorMessages[fieldName]);
                            })];
                }
            });
        });
    };
    BaseForm.prototype.isValidCustomErrorFieldName = function (fieldName) {
        return fieldName === 'form' || Boolean(this.getField(fieldName));
    };
    BaseForm.prototype.getStandardValidationErrors = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var formData, validations, widgetValidations;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        formData = this.getFlatFormData(true, true);
                        return [4 /*yield*/, gigya.Promise.all(this.dataToServer.map(function (field) { return field.validateAsync(formData); }))];
                    case 1:
                        validations = _a.sent();
                        return [4 /*yield*/, gigya.Promise.all(this._widgets.map(function (widget) { return widget.validateAsync(formData); }))];
                    case 2:
                        widgetValidations = _a.sent();
                        return [2 /*return*/, tslib_1.__spreadArrays(validations, widgetValidations).map(function (validationInfo) { return _this.getErrorInfo(validationInfo); })
                                .filter(function (errorInfo) { return errorInfo != null; })];
                }
            });
        });
    };
    BaseForm.prototype.getErrorInfo = function (validationInfo, errorMessage) {
        var _a, _b;
        if ((validationInfo === null || validationInfo === void 0 ? void 0 : validationInfo.errorCode) !== GSErrors_1.GSErrors.OK && ((_b = (_a = validationInfo.field) === null || _a === void 0 ? void 0 : _a.fieldName) === null || _b === void 0 ? void 0 : _b.length) > 0) {
            return {
                fieldName: validationInfo.field.fieldName,
                fieldArrayKeyValue: validationInfo.field.arrayKeyValue,
                errorCode: validationInfo.errorCode,
                errorType: validationInfo.errorType,
                errorMessage: errorMessage || this._screen.getErrorMessage(validationInfo.errorCode, true, validationInfo.field)
            };
        }
        if ((validationInfo === null || validationInfo === void 0 ? void 0 : validationInfo.errorCode) !== GSErrors_1.GSErrors.OK && validationInfo.widget) {
            return {
                errorCode: validationInfo.errorCode,
                errorType: validationInfo.errorType,
                errorMessage: errorMessage
            };
        }
        return null;
    };
    BaseForm.prototype.getBeforeValidationEventResult = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var beforeValidationEvent, _customValidationTimeout, validationResult, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        beforeValidationEvent = this.createFormEvent('beforeValidation', {
                            formData: this.getFlatFormData(true, false)
                        });
                        _customValidationTimeout = setTimeout(function () {
                            console.warn("[Gigya]: custom validation did not resolve after more than " + exports.CUSTOM_VALIDATION_TIMEOUT_WARNING + " seconds");
                        }, exports.CUSTOM_VALIDATION_TIMEOUT_WARNING);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this._screen.dispatchEvent(beforeValidationEvent.eventName, beforeValidationEvent)];
                    case 2:
                        validationResult = _a.sent();
                        if (!validationResult || typeof (validationResult) !== 'object') {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, this.normalizeArrayFieldNames(validationResult)];
                    case 3:
                        ex_1 = _a.sent();
                        console.warn("[Gigya]: custom validation threw an error", ex_1);
                        return [2 /*return*/, null];
                    case 4:
                        clearTimeout(_customValidationTimeout);
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    // For arrays fields we need to support both kind of mapped field "data.arrayRoot[0].field" and "data.arrayRoot.0.field".
    // That's why we unflatten array first, and flatten it again with both options
    BaseForm.prototype.normalizeArrayFieldNames = function (dataObj) {
        var errorMessages = window.gigya.utils.object.unflatten(dataObj);
        return __webpack_provided_Object_dot_assign(window.gigya.utils.object.flatten(errorMessages, true), window.gigya.utils.object.flatten(errorMessages));
    };
    BaseForm.prototype.showErrors = function (arErrors, isServerError) {
        this._screen.showErrors(this, arErrors, isServerError);
    };
    BaseForm.prototype.isRequiredField = function (fieldName) {
        var fieldNamespace = utils_1.firstPart(fieldName, '.');
        var schemaName = fieldNamespace == 'data' ? 'dataSchema' : 'profileSchema';
        if (fieldNamespace == 'data' || fieldNamespace == 'profile') {
            fieldName = fieldName.substring(fieldNamespace.length + 1);
        }
        var requiredFields = this.requiredFields();
        if (requiredFields[fieldName]) {
            return true;
        }
        var apiData = this._screenSet.getApiData(); // TODO shouldn't this be dependant on is schemaValidated?
        if (apiData.getSchema && apiData.getSchema[schemaName] && apiData.getSchema[schemaName].fields) {
            var schema = apiData.getSchema[schemaName].fields[fieldName];
            if (schema && schema.required) {
                return true;
            }
        }
        return false;
    };
    //#endregion
    BaseForm.prototype.canAutoSkip = function (formContext) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var validationErrors;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.autoSkip || utils_1.Some(this._autoSkipContainers, function (c) { return !c.canAutoSkip(); }))
                            return [2 /*return*/, false];
                        return [4 /*yield*/, this.getValidationErrors()];
                    case 1:
                        validationErrors = _a.sent();
                        return [2 /*return*/, (validationErrors === null || validationErrors === void 0 ? void 0 : validationErrors.length) === 0];
                }
            });
        });
    };
    //#region form data
    BaseForm.prototype.getNormalizedFieldName = function (fieldName) {
        if (!fieldName) {
            return fieldName;
        }
        // If special field or local field, use as-is.
        var specialFields = this.specialFields();
        if (specialFields[fieldName] || fieldName.indexOf('local.') === 0) {
            return fieldName;
        }
        // Get data and profile namespace.
        var profileNamespace = this.profileObjectName();
        var dataNamespace = this.dataObjectName();
        var subscriptionNamespace = this.subscriptionObjectName();
        var communicationsNamespace = this.communicationsObjectName();
        var preferencesNamespace = this.preferencesObjectName();
        var organizationNamespace = this.organizationObjectName();
        var requesterNamespace = this.requesterObjectName();
        // Default to profile namespace if not provided and not special field.
        var nameParts = fieldName.split('.');
        var ns = nameParts.length > 1 ? nameParts.shift() : profileNamespace;
        // Change "profile.data.field" to "data.field".
        if (ns === profileNamespace && nameParts.length > 1 && nameParts[0] === dataNamespace) {
            ns = nameParts.shift();
        }
        // Default to profile namespace if unknown namespace was provided.
        if ([dataNamespace, profileNamespace, subscriptionNamespace, communicationsNamespace,
            preferencesNamespace, organizationNamespace, requesterNamespace].indexOf(ns) == -1) {
            ns = profileNamespace;
        }
        // Push namespace back onto array of strings.
        if (ns) {
            nameParts.unshift(ns);
        }
        // Return string.
        var normalizedFieldName = nameParts.join('.');
        return normalizedFieldName;
    };
    BaseForm.prototype.getField = function (fieldName, arrayKeyValue, visibleOnly) {
        if (visibleOnly === void 0) { visibleOnly = false; }
        var result;
        fieldName = this.getNormalizedFieldName(fieldName);
        utils_1.Some(this.dataToServer, function (field) {
            if (visibleOnly && field.isInHiddenContainer()) {
                return false;
            }
            if (field.normalizedFieldName === fieldName) {
                if (!arrayKeyValue || arrayKeyValue === field.arrayKeyValue) {
                    result = field;
                    return true;
                }
            }
            return false;
        });
        return result;
    };
    BaseForm.prototype.isSpecialField = function (field) {
        return !!this.specialFields()[field.fieldName];
    };
    BaseForm.prototype.getFormData = function (ignoreHiddenContainers, normalizeFields, replaceEmptyStringWithNull) {
        var _this = this;
        if (replaceEmptyStringWithNull === void 0) { replaceEmptyStringWithNull = false; }
        var oData = {};
        // Get existing account for array merging.
        var accountInfo = this._screenSet.getApiData().getAccountInfo || {};
        var trackCreatedObjKeys = {};
        var isVisibleField = {};
        // Create form data.
        utils_1.ForEach(this.dataToServer, function (field) {
            var _a;
            if ((!field.disabled() || _this.isSpecialField(field)) && (!ignoreHiddenContainers || !field.isInHiddenContainer())) {
                var fieldKey = field.getName(normalizeFields, true);
                var currentValue = window.gigya.utils.object.getPropertyBySerializedName(accountInfo, fieldKey, false);
                var arrayRootField = field.getArrayRoot(true);
                var fieldValue = field.getValue(field.instanceElement, currentValue || oData[fieldKey]);
                if (fieldValue) {
                    // currently we do not support the field's original data-type.
                    fieldValue = window.gigya.utils.object.parseToObject(fieldValue.toString()) || fieldValue;
                }
                // Typical path for non-array fields.
                if (!arrayRootField) {
                    if (fieldValue != null) {
                        // This is used when gathering parameters to send to the server. do not convert empty array to null.
                        if (replaceEmptyStringWithNull && String(fieldValue) === '' && fieldValue.constructor !== Array) {
                            fieldValue = null;
                        }
                        var isVisible = !field.isInHiddenContainer();
                        if (isVisible || !isVisibleField[fieldKey]) {
                            isVisibleField[fieldKey] = isVisible;
                            oData[fieldKey] = fieldValue;
                        }
                    }
                }
                else {
                    // Array root is provided, switch to array mode. Verify all required attributes are provided.
                    var arrayKeyField = field.instanceElement.getAttribute(FormInput_1.FormInput_CONSTS.arrayKeyFieldAttribute);
                    var arrayKeyValue = field.instanceElement.getAttribute(FormInput_1.FormInput_CONSTS.arrayKeyValueAttribute);
                    if (!arrayKeyField || !arrayKeyValue) {
                        _this.warn('Field ignored because data-array-root provided without data-array-key-field and data-array-key-value', fieldKey);
                        return;
                    }
                    if (!oData[arrayRootField] || oData[arrayRootField].constructor !== Array) {
                        var arr = void 0;
                        if (accountInfo) {
                            arr = window.gigya.utils.object.clone(window.gigya.utils.object.getPropertyBySerializedName(accountInfo, arrayRootField, false), false);
                        }
                        if (!arr || arr.constructor !== Array) {
                            arr = [];
                        }
                        oData[arrayRootField] = arr;
                    }
                    var arrayRoot = oData[arrayRootField];
                    // Find or create object inside of array.
                    var obj = void 0;
                    for (var i = 0; i < arrayRoot.length; i++) {
                        var o = arrayRoot[i];
                        if (o[arrayKeyField] && String(o[arrayKeyField]) === arrayKeyValue) {
                            // If object was found from server, remove object from array root and re-create.
                            // The merge logic replaces entire objects but keeps the other elements in the array.
                            if (!trackCreatedObjKeys[arrayRootField] || window.gigya.utils.array.indexOf(trackCreatedObjKeys[arrayRootField], arrayKeyValue) === -1) {
                                arrayRoot.splice(i, 1);
                            }
                            else {
                                obj = o;
                            }
                            break;
                        }
                    }
                    // Create new object or append key to existing object only if a field value is present.
                    // This is what allows an object to be deleted from the array.
                    if (fieldValue) {
                        if (!obj) {
                            obj = (_a = {},
                                _a[arrayKeyField] = arrayKeyValue,
                                _a);
                            arrayRoot.push(obj);
                            if (!trackCreatedObjKeys[arrayRootField]) {
                                trackCreatedObjKeys[arrayRootField] = [];
                            }
                            trackCreatedObjKeys[arrayRootField].push(arrayKeyValue);
                        }
                        // Add value to object.
                        var subKey = fieldKey.substr(arrayRootField.length + 1);
                        obj[subKey] = fieldValue;
                    }
                }
            }
        });
        oData = this.postProcessFormData(oData);
        // The form data may be a mix of flattened and unflattened data. Ensure it is unflattened.
        oData = window.gigya.utils.object.unflatten(oData);
        // Filter the data.
        utils_1.ForEach(this.filters, function (wid) {
            oData = wid.filterOutWidgetsToSend(oData);
        });
        return oData;
    };
    BaseForm.prototype.postProcessFormData = function (oData) {
        var res = window.gigya.utils.object.clone(oData);
        res = Consent_1.postProcessForm(res, this.getSchemaOf(Consent_1.namespace));
        return res;
    };
    BaseForm.prototype.getFlatFormData = function (ignoreHiddenContainers, normalizeFields, replaceEmptyStringWithNull) {
        if (replaceEmptyStringWithNull === void 0) { replaceEmptyStringWithNull = false; }
        return window.gigya.utils.object.flatten(this.getFormData(ignoreHiddenContainers, normalizeFields, replaceEmptyStringWithNull));
    };
    BaseForm.prototype.specialFields = function () {
        return {};
    };
    BaseForm.prototype.subscriptionObjectName = function () {
        return 'subscriptions';
    };
    BaseForm.prototype.communicationsObjectName = function () {
        return 'communications';
    };
    BaseForm.prototype.dataObjectName = function () {
        return 'data';
    };
    BaseForm.prototype.profileObjectName = function () {
        return 'profile';
    };
    BaseForm.prototype.preferencesObjectName = function () {
        return 'preferences';
    };
    BaseForm.prototype.organizationObjectName = function () {
        return 'organization';
    };
    BaseForm.prototype.requesterObjectName = function () {
        return 'requester';
    };
    BaseForm.prototype.queryStringToSubmitParamMap = function () {
        return {};
    };
    BaseForm.prototype.defaultSubmitParams = function () {
        var qsParams = this.queryStringToSubmitParamMap();
        var ret = {};
        Object.keys(qsParams).forEach(function (p) {
            var submitParam = qsParams[p];
            var value = window.gigya.utils.URL.getParamValueFromURL(p, location.search, undefined);
            if (value) {
                ret[submitParam] = value;
            }
        });
        return ret;
    };
    //#endregion
    //#region submit
    BaseForm.prototype.submitApi = function () {
        throw new Error(NOT_IMPLEMENTED);
    };
    BaseForm.prototype._getSubmitApiParams = function (params) {
        return window.gigya.utils.object.removeUndefined(params);
    };
    BaseForm.prototype.performSubmit = function (formData, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, customSubmitApi = _b.customSubmitApi, onAfterSubmitCallback = _b.onAfterSubmitCallback, submitApiParams = _b.submitApiParams;
        this.onBeforeSubmit(formData);
        var submitApi = customSubmitApi || this.submitApi();
        var extraEventData = this._screenSet.data.extraEventData;
        if (this._rememberMe) {
            extraEventData.rememberMe = Boolean(this._rememberMe.getValue());
        }
        var remember = extraEventData.rememberMe;
        // Make sure to use the latest regtoken/aToken if it was set by a child screenset
        if (this._screenSet.data.regToken) {
            this._screenSet.params.regToken = this._screenSet.data.regToken;
        }
        if (this._screenSet.data.aToken) {
            this._screenSet.params.aToken = this._screenSet.data.aToken;
        }
        var apiParams = this._getSubmitApiParams(window.gigya.utils.object.clone(this._screenSet.params, true));
        this._submitButtons.forEach(function (b) { return b.disable(); });
        this._screen.dimScreen();
        var options = {
            dontHandleScreenSet: true,
            callback: function (response) {
                if (onAfterSubmitCallback) {
                    onAfterSubmitCallback(response);
                }
                _this.onAfterSubmit(response);
            },
            remember: remember,
            sessionExpiration: remember && this._screenSet.params.rememberSessionExpiration
                ? this._screenSet.params.rememberSessionExpiration
                : this._screen._screenSet.params.sessionExpiration,
        };
        submitApi(apiParams, formData, options, submitApiParams || this.defaultSubmitParams());
    };
    BaseForm.prototype.onBeforeSubmit = function (formData) { };
    BaseForm.prototype.runFormValidation = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var validationErrors;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._screenSet.dimScreenSet();
                        return [4 /*yield*/, this.getValidationErrors()];
                    case 1:
                        validationErrors = _a.sent();
                        this.onAfterValidation(validationErrors);
                        this._screenSet.undimScreenSet();
                        if ((validationErrors === null || validationErrors === void 0 ? void 0 : validationErrors.length) > 0) {
                            this.displayErrors(validationErrors);
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/, true];
                }
            });
        });
    };
    BaseForm.prototype.submit = function (params) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _c, formDataForServer_1, flatFormDataForEvent, _d, _e, event, eventResult, submitEvent, submitResult, captchaData, e_1, errorInfo;
            var _this = this;
            return tslib_1.__generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        this._submitButtonClicked = true;
                        this.updateDynamicFields();
                        _c = this.shouldWaitForServerResponse();
                        if (_c) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.runFormValidation()];
                    case 1:
                        _c = !(_f.sent());
                        _f.label = 2;
                    case 2:
                        if (_c) {
                            return [2 /*return*/];
                        }
                        _f.label = 3;
                    case 3:
                        _f.trys.push([3, 8, , 9]);
                        formDataForServer_1 = this.getFormData(true, true, true);
                        flatFormDataForEvent = this.getFlatFormData(true, false);
                        if (typeof flatFormDataForEvent['password'] !== 'undefined') {
                            delete flatFormDataForEvent['password']; // meaningless in terms of security but less shocking for clients :)
                        }
                        if (!formDataForServer_1['identifier']) return [3 /*break*/, 5];
                        _e = (_d = this._screenSet).establishAToken;
                        return [4 /*yield*/, this.createAToken(formDataForServer_1['identifier'])];
                    case 4:
                        _e.apply(_d, [_f.sent()]);
                        _f.label = 5;
                    case 5:
                        event = this.createFormEvent('beforeSubmit', {
                            formData: flatFormDataForEvent
                        });
                        eventResult = this._screen.dispatchEvent('beforeSubmit', event);
                        if (!(eventResult !== false)) return [3 /*break*/, 7];
                        submitEvent = {
                            eventName: 'submit',
                            screen: (_a = this._screen) === null || _a === void 0 ? void 0 : _a.requestedScreen,
                            form: this.bindID,
                            accountInfo: {
                                profile: this._screenSet.getProfile(),
                                data: this._screenSet.getSchemaData(),
                                preferences: this._screenSet.getPreferences(),
                                subscriptions: this._screenSet.getSubScriptions(),
                                communications: this._screenSet.getCommunications(),
                            },
                            formModel: formDataForServer_1,
                        };
                        if ((_b = this._screen) === null || _b === void 0 ? void 0 : _b.isScreenVariant) {
                            submitEvent.abTesting = this._screen.abTestingData;
                        }
                        submitResult = this._screen.dispatchEvent('submit', submitEvent);
                        return [4 /*yield*/, this._screen.getCaptchaData()];
                    case 6:
                        captchaData = _f.sent();
                        if (captchaData) {
                            if (typeof captchaData.token === 'string')
                                formDataForServer_1['captchaToken'] = captchaData.token;
                            if (typeof captchaData.type === 'string')
                                formDataForServer_1['captchaType'] = captchaData.type;
                        }
                        if (this.behaviorContext) {
                            this.behaviorContext.onSubmit();
                            formDataForServer_1['riskContext'] = this.behaviorContext.riskContext;
                            this.behaviorContext.reset();
                        }
                        if (submitResult && typeof submitResult.then === 'function') {
                            submitResult.then(function (x) { return _this.performSubmit(window.gigya.utils.object.merge([formDataForServer_1, x]), params); });
                        }
                        else {
                            this.performSubmit(window.gigya.utils.object.merge([formDataForServer_1, submitResult]), params);
                        }
                        _f.label = 7;
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        e_1 = _f.sent();
                        // all other exceptions gets swallowed, also if it happened for example inside form's onAfterSubmit method (!)
                        window.gigya.logger.error('exception when submitting a form', { e: e_1, form: this.gigyaClass });
                        if (e_1 && e_1.message === 'captchaNeeded') {
                            errorInfo = {
                                errorMessage: this._screenSet.getText('login_captcha_error'),
                                errorCode: GSErrors_1.GSErrors.VALIDATION_ERROR,
                                errorFlags: e_1.message,
                            };
                            this.showErrors([errorInfo], true);
                        }
                        return [3 /*break*/, 9];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    BaseForm.prototype.createAToken = function (identifier) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new gigya.Promise(function (resolve) {
                        var _a;
                        window.gigya.accounts.identifier.createToken({
                            identifierType: (_a = _this.getField('identifier')) === null || _a === void 0 ? void 0 : _a.getMetadata()[FormInput_1.FormInput_CONSTS.identifierType],
                            identifier: identifier,
                            callback: function (response) {
                                if (response.errorCode == GSErrors_1.GSErrors.OK) {
                                    return resolve(response['aToken']);
                                }
                                else {
                                    window.gigya.logger.warn('Identifier Create token request filed', response === null || response === void 0 ? void 0 : response.message);
                                    resolve();
                                }
                            }
                        });
                    })];
            });
        });
    };
    //#region - code to be removed: the following code block should be removed when the old photo upload widget will not be supported along with BaseServerWidget
    BaseForm.prototype.shouldWaitForServerResponse = function () {
        if (this.isWaitingForServerResponse)
            return true;
        return this.isWaitingForServerWidget() || this.isWaitingForServerField();
    };
    BaseForm.prototype.isWaitingForServerWidget = function () {
        var _this = this;
        for (var _i = 0, _a = this._serverWidgets; _i < _a.length; _i++) {
            var widget = _a[_i];
            if (widget.serverState === BaseServerWidget_1.ServerStates.InProgress) {
                this.isWaitingForServerResponse = true;
                widget.runOnServerDone(function () { return _this.submitAfterServerResponse(); });
                return true;
            }
        }
    };
    BaseForm.prototype.isWaitingForServerField = function () {
        var _this = this;
        for (var _i = 0, _a = this.dataToServer; _i < _a.length; _i++) {
            var field = _a[_i];
            if (this.isPending(field)) {
                this.isWaitingForServerResponse = true;
                field.runOnServerDone(function () { return _this.submitAfterServerResponse(); });
                return true;
            }
        }
    };
    BaseForm.prototype.submitAfterServerResponse = function () {
        this.isWaitingForServerResponse = false;
        this.submit();
    };
    BaseForm.prototype.isPending = function (field) {
        return field.getValidityState() === FormInput_1.ValidityStates.pending;
    };
    //#endregion
    //#endregion
    BaseForm.prototype.onAfterSubmit = function (response) {
        this._screen.undimScreen();
        this._submitButtons.forEach(function (b) { return b.enable(); });
        if (response.errorCode == GSErrors_1.GSErrors.OK) {
            window.gigya.utils.DOM.removeClassFromElement(this.instanceElement, exports.Form_CONSTS.formErrorClass);
        }
        else {
            window.gigya.utils.DOM.addClassToElement(this.instanceElement, exports.Form_CONSTS.formErrorClass);
        }
        this._screenSet.onScreenResponse(response, this);
    };
    BaseForm.prototype.evaluateConditionalAttributes = function () {
        var _this = this;
        if (!this.hasConditionalAttributes()) {
            return;
        }
        window.gigya.logger.group("form conditional attributes evaluation").endWhen(function () {
            _super.prototype.evaluateConditionalAttributes.call(_this);
            utils_1.ForEach(_this._dynamicInputs, function (dynamicInput) {
                dynamicInput.evaluateConditionalAttributes();
            });
            utils_1.ForEach(_this._widgets, function (widget) {
                widget.evaluateConditionalAttributes();
            });
            utils_1.ForEach(_this._inputs, function (input) {
                input.evaluateConditionalAttributes();
            });
            utils_1.ForEach(_this._passwordInputs, function (passwordInput) {
                passwordInput.evaluateConditionalAttributes();
            });
            utils_1.ForEach(_this._passwordRetypes, function (passwordRetype) {
                passwordRetype.evaluateConditionalAttributes();
            });
            utils_1.ForEach(_this._secretQuestions, function (sec) {
                sec.evaluateConditionalAttributes();
            });
            utils_1.ForEach(_this._autoSkipContainers, function (auto) {
                auto.evaluateConditionalAttributes();
            });
            utils_1.ForEach(_this._serverWidgets, function (serv) {
                serv.evaluateConditionalAttributes();
            });
            if (_this._rememberMe) {
                _this._rememberMe.evaluateConditionalAttributes();
            }
        });
        this.originalSuccessScreen = this.instanceElement.getAttribute(exports.Form_CONSTS.successScreen);
        this.successScreen = this._screenSet.chooseNextScreen(this.originalSuccessScreen);
        this.autoSkip = this.instanceElement.getAttribute(exports.Form_CONSTS.autoSkipFlag) == 'true';
        this.autoSkipScreen = this.instanceElement.getAttribute(exports.Form_CONSTS.autoSkipScreen) || this.successScreen;
        this.screenSetSkippedScreen = this.instanceElement.getAttribute(exports.Form_CONSTS.screenSetSkippedScreen) || this.successScreen;
    };
    BaseForm.prototype.hasConditionalAttributes = function () {
        if (_super.prototype.hasConditionalAttributes.call(this))
            return true;
        var children = [].concat(this._widgets, this._inputs, this._dynamicInputs, this._passwordInputs, this._passwordRetypes, this._secretQuestions, this._autoSkipContainers, this._serverWidgets);
        return window.gigya.utils.array.some(children, function (child) { return child.hasConditionalAttributes(); });
    };
    BaseForm.prototype.resetLastConditionalValues = function () {
        _super.prototype.resetLastConditionalValues.call(this);
        utils_1.ForEach(this._dynamicInputs, function (dynamicInput) {
            dynamicInput.resetLastConditionalValues();
        });
        utils_1.ForEach(this._widgets, function (widget) {
            widget.resetLastConditionalValues();
        });
        utils_1.ForEach(this._inputs, function (input) {
            input.resetLastConditionalValues();
        });
        utils_1.ForEach(this._passwordInputs, function (passwordInput) {
            passwordInput.resetLastConditionalValues();
        });
        utils_1.ForEach(this._passwordRetypes, function (passwordRetype) {
            passwordRetype.resetLastConditionalValues();
        });
        utils_1.ForEach(this._secretQuestions, function (sec) {
            sec.resetLastConditionalValues();
        });
        utils_1.ForEach(this._autoSkipContainers, function (auto) {
            auto.resetLastConditionalValues();
        });
        utils_1.ForEach(this._serverWidgets, function (serv) {
            serv.resetLastConditionalValues();
        });
    };
    Object.defineProperty(BaseForm.prototype, "supportConsentData", {
        get: function () {
            var _a;
            return (_a = this.settings) === null || _a === void 0 ? void 0 : _a.supportConsentData;
        },
        enumerable: true,
        configurable: true
    });
    BaseForm.prototype.setConsentData = function () {
        var apiData = this._screenSet.getApiData();
        if (this._screenSet.data) {
            this._screenSet.data.consentStatements = ConsentData_1.getConsentDataForScreenSet(apiData, this._screenSet.lang) || {};
        }
    };
    BaseForm.FormsLibrary = {};
    return BaseForm;
}(TemplateElement_1.TemplateElement));
exports.BaseForm = BaseForm;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js")["__assign"]))

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts":
/*!***********************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseWidget.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var displayNameAttribute = 'data-display-name';
var BaseFormWidget = /** @class */ (function (_super) {
    tslib_1.__extends(BaseFormWidget, _super);
    function BaseFormWidget(_form, el, resetCSS) {
        var _this = _super.call(this, el, _form, _form._screen, resetCSS) || this;
        _this._form = _form;
        return _this;
    }
    BaseFormWidget.addWidgetToLibrary = function (widget) {
        BaseFormWidget.FormWidgetsLibrary[widget.CONSTS.selector] = widget;
    };
    BaseFormWidget.registerWidgets = function (parent) {
        return BaseWidget_1.BaseWidget.registerTypedWidgets(parent.templateElement, BaseFormWidget.FormWidgetsLibrary, function (type, el) { return new type(parent, el); });
    };
    BaseFormWidget.registerDynamicWidgets = function (parent, rootEl) {
        return BaseWidget_1.BaseWidget.registerTypedWidgets(rootEl, BaseFormWidget.FormWidgetsLibrary, function (type, el) { return new type(parent, el); });
    };
    BaseFormWidget.prototype.getFieldsNames = function () {
        return [];
    };
    BaseFormWidget.prototype.update = function () { };
    BaseFormWidget.prototype.validateAsync = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, gigya.Promise.resolve({
                        errorCode: GSErrors_1.GSErrors.OK,
                        widget: this
                    })];
            });
        });
    };
    BaseFormWidget.prototype.getErrorText = function (errorKey, fieldName) {
        return this._screenSet.getText(errorKey, '%fieldname', fieldName);
    };
    Object.defineProperty(BaseFormWidget.prototype, "displayName", {
        get: function () {
            return this.instanceElement.getAttribute(displayNameAttribute);
        },
        enumerable: true,
        configurable: true
    });
    BaseFormWidget.prototype.getErrorTextFromResponse = function (response, fieldName) {
        if ((response === null || response === void 0 ? void 0 : response.errorCode) === GSErrors_1.GSErrors.Extension_Point_Custom_Error) {
            return response.errorDetails || response.errorMessage;
        }
        var errorKey = this.getErrorKeyFromResponse(response);
        if (errorKey) {
            return this.getErrorText(errorKey, fieldName);
        }
        return response.errorMessage;
    };
    BaseFormWidget.prototype.getErrorKeyFromResponse = function (response) {
        return null;
    };
    Object.defineProperty(BaseFormWidget.prototype, "dataProvider", {
        get: function () {
            return this._form.dataProvider;
        },
        enumerable: true,
        configurable: true
    });
    BaseFormWidget.prototype.validateChildField = function (formField) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var validationInfo;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(formField && this._form)) return [3 /*break*/, 2];
                        return [4 /*yield*/, formField.validateAsync()];
                    case 1:
                        validationInfo = _a.sent();
                        this._form.renderFieldError({
                            errorCode: validationInfo.errorCode,
                            field: formField,
                        }, true);
                        return [2 /*return*/, validationInfo.errorCode === 0];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    BaseFormWidget.FormWidgetsLibrary = {};
    return BaseFormWidget;
}(BaseWidget_1.BaseWidget));
exports.BaseFormWidget = BaseFormWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseOtpAuthMethodWidget.ts":
/*!********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseOtpAuthMethodWidget.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseAuthMethodWidget_1 = __webpack_require__(/*! ./BaseAuthMethodWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseAuthMethodWidget.ts");
var accounts = window.gigya.accounts;
var link_accounts_1 = __webpack_require__(/*! ./Constants/link-accounts */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Constants/link-accounts.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var ApiLinkHelper_1 = __webpack_require__(/*! ./ApiLinkHelper */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ApiLinkHelper.ts");
var promise_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/promise */ "./src/core/Gigya.Js/app/Utils/promise.ts");
exports.CONSTS = {
    inputSelector: '.gigya-input-text',
    resendButtonSelector: '.gigya-otp-resend-button',
    fieldNameAttr: 'name'
};
var BaseOtpAuthMethodWidget = /** @class */ (function (_super) {
    tslib_1.__extends(BaseOtpAuthMethodWidget, _super);
    function BaseOtpAuthMethodWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaseOtpAuthMethodWidget.prototype.linkInstanceElement = function (parent) {
        var _this = this;
        _super.prototype.linkInstanceElement.call(this, parent);
        this.initApiLink = new ApiLinkHelper_1.ApiLinkHelper(this.resendCodeElement, function () { return _this.callInitApi(); });
        this.collapse();
    };
    BaseOtpAuthMethodWidget.prototype.unlinkInstanceElement = function () {
        var _a;
        _super.prototype.unlinkInstanceElement.call(this);
        (_a = this.initApiLink) === null || _a === void 0 ? void 0 : _a.destroy();
    };
    Object.defineProperty(BaseOtpAuthMethodWidget.prototype, "submitApi", {
        get: function () {
            return accounts.otp.login;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseOtpAuthMethodWidget.prototype, "initApi", {
        get: function () {
            return accounts.otp.sendCode;
        },
        enumerable: true,
        configurable: true
    });
    BaseOtpAuthMethodWidget.prototype.onClick = function () {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _super.prototype.onClick.call(this);
                        if (!(this.initApi && !this.isInitialized)) return [3 /*break*/, 2];
                        (_a = this.initApiLink) === null || _a === void 0 ? void 0 : _a.init();
                        return [4 /*yield*/, this.callInitApi()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    BaseOtpAuthMethodWidget.prototype.callInitApi = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, promise_1.promisify(this.initApi, this.initApiParams)];
                    case 1:
                        response = _a.sent();
                        this.handleInitApiResponse(response);
                        return [2 /*return*/, response];
                }
            });
        });
    };
    BaseOtpAuthMethodWidget.prototype.handleInitApiResponse = function (response) {
        this.isInitialized = true;
        if (Number(response === null || response === void 0 ? void 0 : response.errorCode) != GSErrors_1.GSErrors.OK) {
            this.displayErrorMessage(response);
            return;
        }
        if (response === null || response === void 0 ? void 0 : response.vToken) {
            this.vToken = response['vToken'];
        }
        else {
            this.displayErrorMessage(response);
        }
    };
    Object.defineProperty(BaseOtpAuthMethodWidget.prototype, "submitApiParams", {
        get: function () {
            return window.gigya.utils.object.merge([
                this.dataProvider.defaultSubmitParams,
                {
                    include: window.gigya.utils.stringUtils.mergeCommaSeparatedValues(link_accounts_1.LINK_ACCOUNTS_DEFAULT_INCLUDE_PARAM, this.dataProvider.includeParams),
                    suppressLoginEvent: true,
                    code: this.code,
                    vToken: this.vToken
                }
            ]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseOtpAuthMethodWidget.prototype, "codeFieldElement", {
        get: function () {
            return this.instanceElement.querySelector(exports.CONSTS.inputSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseOtpAuthMethodWidget.prototype, "codeFieldName", {
        get: function () {
            var _a;
            return (_a = this.codeFieldElement) === null || _a === void 0 ? void 0 : _a.getAttribute(exports.CONSTS.fieldNameAttr);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseOtpAuthMethodWidget.prototype, "code", {
        get: function () {
            var _a;
            if (!this.codeFieldName) {
                return null;
            }
            return (_a = this._form.getField(this.codeFieldName)) === null || _a === void 0 ? void 0 : _a.getValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseOtpAuthMethodWidget.prototype, "resendCodeElement", {
        get: function () {
            return this.instanceElement.querySelector(exports.CONSTS.resendButtonSelector);
        },
        enumerable: true,
        configurable: true
    });
    return BaseOtpAuthMethodWidget;
}(BaseAuthMethodWidget_1.BaseAuthMethodWidget));
exports.BaseOtpAuthMethodWidget = BaseOtpAuthMethodWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts":
/*!*************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseWidget.ts");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseScreenWidget = /** @class */ (function (_super) {
    tslib_1.__extends(BaseScreenWidget, _super);
    function BaseScreenWidget(_screen, el, resetCSS) {
        var _this = _super.call(this, el, _screen, _screen, resetCSS) || this;
        _this._childWidgets = [];
        return _this;
    }
    BaseScreenWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this.unlinkWidgets();
        this.unlinkChildElements();
    };
    BaseScreenWidget.prototype.unlinkWidgets = function () {
        utils_1.ForEach(this._childWidgets, function (widget) {
            widget.unlinkInstanceElement();
        });
        this._childWidgets = [];
    };
    BaseScreenWidget.prototype.linkWidgets = function () {
        var _this = this;
        // Widgets that render html inside them, must register internal widgets
        if (!this._screen || !this._screen.instanceElement)
            return;
        this._childWidgets =
            BaseScreenWidget.registerDynamicWidgets(this._screen, this.instanceElement)
                .filter(function (childWidget) { return !_this.deps || !_this.deps.some(function (dep) { return childWidget instanceof dep; }); });
        utils_1.ForEach(this._childWidgets, function (widget) {
            widget.linkInstanceElement(_this._screen.instanceElement);
        });
    };
    BaseScreenWidget.addWidgetToLibrary = function (widget) {
        BaseScreenWidget.ScreenWidgetsLibrary[widget.CONSTS.selector] = widget;
    };
    BaseScreenWidget.registerWidgets = function (parent) {
        return BaseWidget_1.BaseWidget.registerTypedWidgets(parent.templateElement, BaseScreenWidget.ScreenWidgetsLibrary, function (type, el) { return new type(parent, el); });
    };
    BaseScreenWidget.registerDynamicWidgets = function (parent, rootEl) {
        return BaseWidget_1.BaseWidget.registerTypedWidgets(rootEl, BaseScreenWidget.ScreenWidgetsLibrary, function (type, el) { return new type(parent, el); });
    };
    BaseScreenWidget.ScreenWidgetsLibrary = {};
    return BaseScreenWidget;
}(BaseWidget_1.BaseWidget));
exports.BaseScreenWidget = BaseScreenWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseServerWidget.ts":
/*!*************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseServerWidget.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var ServerStates;
(function (ServerStates) {
    ServerStates[ServerStates["NotStarted"] = 0] = "NotStarted";
    ServerStates[ServerStates["InProgress"] = 1] = "InProgress";
    ServerStates[ServerStates["Done"] = 2] = "Done";
    ServerStates[ServerStates["Error"] = 3] = "Error";
})(ServerStates = exports.ServerStates || (exports.ServerStates = {}));
utils_1.DeepFreeze(ServerStates);
var BaseServerWidget = /** @class */ (function (_super) {
    tslib_1.__extends(BaseServerWidget, _super);
    function BaseServerWidget(form, el, resetCSS) {
        var _this = _super.call(this, form, el, resetCSS) || this;
        _this.nextServerQueryId = 0;
        _this.serverState = ServerStates.NotStarted;
        _this.callbacks = new Array();
        form._serverWidgets.push(_this);
        return _this;
    }
    BaseServerWidget.prototype.startServerQuery = function () {
        this.serverState = ServerStates.InProgress;
        return ++this.nextServerQueryId;
    };
    BaseServerWidget.prototype.onServerQueryEnd = function (serverQueryId, newState, data) {
        if (serverQueryId === this.nextServerQueryId)
            this.serverQueryDone(newState, data);
        else
            this.warn('Ignoring server response #' + serverQueryId);
    };
    BaseServerWidget.prototype.serverQueryDone = function (newState, data) {
        var _this = this;
        this.serverState = newState;
        utils_1.ForEach(this.callbacks, function (callback) { return callback(newState, _this); });
        this.callbacks = new Array();
    };
    BaseServerWidget.prototype.runOnServerDone = function (callback) {
        if (this.serverState !== ServerStates.InProgress)
            callback(this.serverState, this);
        else
            this.callbacks.push(callback);
    };
    return BaseServerWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.BaseServerWidget = BaseServerWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseUploadWidget.ts":
/*!*************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseUploadWidget.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseServerWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseServerWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseServerWidget.ts");
var NOT_IMPLEMENTED = 'Not Implemented';
exports.BaseUploadWidget_CONSTS = {
    setDimentionsDelay: 500,
    uploadCheckInterval: 500,
    uploading: 'data-upload-status',
    uploadForm: 'screenSetUploadForm',
};
utils_1.DeepFreeze(exports.BaseUploadWidget_CONSTS);
var nextGeneratedId = 0;
var BaseUploadWidget = /** @class */ (function (_super) {
    tslib_1.__extends(BaseUploadWidget, _super);
    function BaseUploadWidget(form, el, resetCSS) {
        var _this = _super.call(this, form, el, resetCSS) || this;
        var uploadId = nextGeneratedId++;
        _this._uploadIframeID = _this._screenSet.params.containerID + '_upload' + uploadId + '_target';
        _this.formDivID = _this._screenSet.params.containerID + '_upload' + uploadId + '_form';
        _this.listenOnIframe = function () {
            var iframeStateName = _this.uploadIframe.getAttribute(exports.BaseUploadWidget_CONSTS.uploading);
            var iframeState = BaseServerWidget_1.ServerStates[iframeStateName];
            if (iframeState !== _this.serverState)
                _this.onServerQueryEnd(_this._lastQueryId, iframeState);
        };
        _this.fileInputChanged = function () { return _this.onFileInputChange(); };
        return _this;
    }
    BaseUploadWidget.prototype.onFileInputChange = function () {
        this.startServerQuery();
    };
    BaseUploadWidget.prototype.linkInstanceElement = function (parent) {
        var _this = this;
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.instanceElement) {
            // add upload iframe
            this.uploadIframe = document.createElement('iframe');
            this.uploadIframe.style.display = 'none';
            this.uploadIframe.id = this._uploadIframeID;
            this.uploadIframe.setAttribute('name', this._uploadIframeID);
            this.uploadIframe.setAttribute(exports.BaseUploadWidget_CONSTS.uploading, BaseServerWidget_1.ServerStates[BaseServerWidget_1.ServerStates.NotStarted]);
            this.uploadIframe.setAttribute('onload', "this.setAttribute('" + exports.BaseUploadWidget_CONSTS.uploading + "','" + BaseServerWidget_1.ServerStates[BaseServerWidget_1.ServerStates.Done] + "')");
            this.instanceElement.appendChild(this.uploadIframe);
            // place form for the user to interfact with
            this._formDiv = document.createElement('div');
            this._formDiv.id = this.formDivID;
            this._formDiv.className = 'gigya-attach-file-upload-form';
            this._formDiv.innerHTML = this.getFormHtml();
            this._formDiv.style.zIndex = '' + window.gigya.utils.DOM.getNextZIndex();
            this.instanceElement.appendChild(this._formDiv);
            // set dimentions
            window.setTimeout(function () { return _this.setFormDimentions(); }, exports.BaseUploadWidget_CONSTS.setDimentionsDelay);
            this._uploadForm = this.getFormElement();
            this.fileInput = this._uploadForm.elements['_profilePhoto'];
            window.gigya.utils.DOM.addClassToElement(this.fileInput, 'gigya-attach-file-upload-file-input'); // TODO Change uses css for ie patch instead of style
            window.gigya.utils.DOM.addEventListener(this.fileInput, 'change', this.fileInputChanged);
        }
    };
    BaseUploadWidget.prototype.getFormHtml = function () {
        throw new Error(NOT_IMPLEMENTED);
    };
    BaseUploadWidget.prototype.getFormElement = function () {
        throw new Error(NOT_IMPLEMENTED);
    };
    BaseUploadWidget.prototype.getFileElement = function () {
        throw new Error(NOT_IMPLEMENTED);
    };
    BaseUploadWidget.prototype.setFormDimentions = function () {
        // TODO behavior change: uses timeout rather than interval
        if (this.instanceElement) {
            if (this.instanceElement.offsetHeight != 0) {
                this._formDiv.style.height = this.instanceElement.offsetHeight + 'px';
                this._formDiv.style.width = this.instanceElement.offsetWidth + 'px';
            }
        }
    };
    BaseUploadWidget.prototype.unlinkInstanceElement = function () {
        if (this.instanceElement) {
            if (this.uploadCheckInterval)
                this.onServerQueryEnd(this._lastQueryId, BaseServerWidget_1.ServerStates.Error);
            window.gigya.utils.DOM.removeEventListener(this.fileInput, 'change', this.onFileInputChange);
            this.fileInput = null;
            this._uploadForm = null;
            this._formDiv.parentElement.removeChild(this._formDiv);
            this._formDiv = null;
            this.instanceElement.removeChild(this.uploadIframe);
            this.uploadIframe = null;
        }
        _super.prototype.unlinkInstanceElement.call(this);
    };
    BaseUploadWidget.prototype.stopUploadCheck = function () {
        if (this.uploadCheckInterval) {
            window.clearInterval(this.uploadCheckInterval);
            this.uploadCheckInterval = 0;
        }
    };
    BaseUploadWidget.prototype.serverQueryDone = function (newState) {
        this.stopUploadCheck();
        _super.prototype.serverQueryDone.call(this, newState);
    };
    BaseUploadWidget.prototype.submitUploadForm = function () {
        this._uploadForm.submit();
    };
    BaseUploadWidget.prototype.startServerQuery = function () {
        this._lastQueryId = _super.prototype.startServerQuery.call(this);
        this.uploadIframe.setAttribute(exports.BaseUploadWidget_CONSTS.uploading, BaseServerWidget_1.ServerStates[this.serverState]);
        if (!this.uploadCheckInterval)
            this.uploadCheckInterval = window.setInterval(this.listenOnIframe, exports.BaseUploadWidget_CONSTS.uploadCheckInterval);
        this.submitUploadForm();
        return this._lastQueryId;
    };
    BaseUploadWidget.prototype.getServerParameters = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var params, webAdapter, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        params = window.gigya.utils.object.extractProperties(this._screenSet.params, {}, 'APIKey|cid|oauth_token|login_token|source|sourceData|regToken');
                        params.authMode = params['oauth_token'] ? 'token' : 'cookie';
                        webAdapter = window.gigya._.apiAdapters.web;
                        if (!webAdapter) return [3 /*break*/, 2];
                        // TODO: remove casting
                        params.login_token = window.gigya._.apiAdapters.web.tokenStore.get(params['APIKey']);
                        _a = params;
                        return [4 /*yield*/, window.gigya._.apiAdapter.getGmidTicket()];
                    case 1:
                        _a.gmidTicket = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!params.APIKey)
                            params.APIKey = window.gigya.thisScript.APIKey;
                        if (this._screenSet.data.regToken)
                            params.regToken = this._screenSet.data.regToken;
                        return [2 /*return*/, params];
                }
            });
        });
    };
    return BaseUploadWidget;
}(BaseServerWidget_1.BaseServerWidget));
exports.BaseUploadWidget = BaseUploadWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseWidget.ts":
/*!*******************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseWidget.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FlagService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Services/FlagService */ "./src/core/Gigya.Js/app/Services/FlagService.ts");
var TemplateElement_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var ScreenConsts_1 = __webpack_require__(/*! ./ScreenConsts */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts.ts");
var BaseWidget = /** @class */ (function (_super) {
    tslib_1.__extends(BaseWidget, _super);
    function BaseWidget(el, parent, _screen, resetCss) {
        if (resetCss === void 0) { resetCss = true; }
        var _this = _super.call(this, el, parent) || this;
        _this._screen = _screen;
        _this.params = {};
        _this.renderWidgetUI = false;
        _this.evaluationCache = {};
        _this._otherElements = [];
        _this.eventListeners = new Map();
        _this.params = _this.getElementParams(el);
        if (resetCss)
            window.gigya.utils.DOM.addClassToElement(el, 'gigya-reset');
        return _this;
    }
    BaseWidget.registerTypedWidgets = function (parentElement, widgetLibrary, factory) {
        var widgets = new Array();
        utils_1.ForEachProp(widgetLibrary, function (type, gigyaClass) {
            var elements = parentElement.querySelectorAll(type.CONSTS.selector);
            utils_1.ForEach(elements, function (el) {
                widgets.push(factory(type, el));
            });
        });
        return widgets;
    };
    //#endregion
    BaseWidget.prototype.getElementParams = function (el) {
        var _this = this;
        var params = {};
        var self = this;
        utils_1.ForEach(el.querySelectorAll('param'), function (param) {
            params[param.name] = param.value;
            var widgetExpressions;
            try {
                widgetExpressions = utils_1.getConditionalAttributeExpressions(param, true);
            }
            catch (e) {
                _this.warn('Error in param conditionals, conditionals ignored');
                widgetExpressions = [];
            }
            if (widgetExpressions.length > 0) {
                self.conditionalExpressions = self.conditionalExpressions.concat(widgetExpressions);
            }
        });
        return params;
    };
    BaseWidget.prototype.evaluateConditionalAttributes = function () {
        if (!this.widgetParams) {
            // first time the widget is loaded.
            this.widgetParams = this.params;
            this.renderWidgetUI = true;
        }
        _super.prototype.evaluateConditionalAttributes.call(this);
        if (this.renderWidgetUI) {
            this.renderWidget();
        }
    };
    BaseWidget.prototype.evaluate = function (text) {
        var _this = this;
        if (text === void 0) { text = ''; }
        var matches = text === null || text === void 0 ? void 0 : text.match(/{{(.*?)}}/g);
        if (!(matches === null || matches === void 0 ? void 0 : matches.length))
            return text;
        return matches.reduce(function (finalStr, m) {
            var val = _this.evaluateExpression({ ignoreError: true, condition: m });
            if (val) {
                if (FlagService_1.FlagService.sanitizeEvaluatedValue && typeof val === 'string' && utils_1.isDOMXSS(val)) {
                    val = window.gigya.utils.sanitize.sanitizeHTML(val);
                }
                _this.evaluationCache[m] = val;
            }
            return finalStr.replace(m, val === undefined ? (_this.evaluationCache[m] === undefined ? '' : _this.evaluationCache[m]) : val);
        }, text);
    };
    BaseWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this.clearDomEventListeners();
    };
    // overrides 'executeConditionalResult' in TemplateElement
    BaseWidget.prototype.executeConditionalResult = function (evaluationResult, conditionalAtt, element) {
        if (!conditionalAtt.isWidgetParamTag) {
            return _super.prototype.executeConditionalResult.call(this, evaluationResult, conditionalAtt, element);
        }
        else {
            if (evaluationResult === '' && conditionalAtt.defaultValue) {
                evaluationResult = conditionalAtt.defaultValue;
            }
            if (!evaluationResult && !conditionalAtt.defaultValue) {
                conditionalAtt.lastAttributeValue = evaluationResult;
                // First check that the param is inside the widget params so
                // I can set the 'reRenderWidget' flag.
                if (this.widgetParams[conditionalAtt.attributeName]) {
                    delete this.widgetParams[conditionalAtt.attributeName];
                    this.renderWidgetUI = true;
                }
            }
            else if (evaluationResult !== conditionalAtt.lastAttributeValue) {
                conditionalAtt.lastAttributeValue = evaluationResult;
                this.widgetParams[conditionalAtt.attributeName] = evaluationResult;
                this.renderWidgetUI = true;
            }
            return evaluationResult;
        }
    };
    BaseWidget.prototype.renderWidget = function () {
        //virtual method - implemented only by widgets who are 'pluginWidgets'
    };
    BaseWidget.prototype.addDomEventListener = function (el, eventName, handler, key) {
        key = key || "event_" + this.eventListeners.size;
        if (this.eventListeners.get(key)) {
            return;
        }
        this.eventListeners.set(key, {
            el: el, eventName: eventName, handler: handler
        });
        window.gigya.utils.DOM.addEventListener(el, eventName, handler);
    };
    BaseWidget.prototype.addButtonHandler = function (el, handler, key) {
        if (!el || !handler)
            return;
        key = key || "event_" + this.eventListeners.size;
        this.addDomEventListener(el, 'click', handler, key + "_click");
        this.addDomEventListener(el, 'keydown', function (event) {
            if (event.code === 'Space' || event.code === 'Enter') {
                handler();
            }
        }, key + "_keydown");
    };
    BaseWidget.prototype.submitOnEnter = function (listenEl, submitElement) {
        var buttonEl = submitElement || listenEl;
        this.addDomEventListener(listenEl, 'keyup', function (event) {
            if (event.key === 'Enter') {
                buttonEl.click();
            }
        });
    };
    BaseWidget.prototype.removeButtonHandler = function (key) {
        this.removeDomEventListener(key + "_click");
        this.removeDomEventListener(key + "_keydown");
    };
    BaseWidget.prototype.removeDomEventListener = function (key) {
        var listener = this.eventListeners.get(key);
        if (listener) {
            window.gigya.utils.DOM.removeEventListener(listener.el, listener.eventName, listener.handler);
            this.eventListeners.delete(key);
        }
    };
    BaseWidget.prototype.clearDomEventListeners = function () {
        var _this = this;
        this.eventListeners.forEach(function (value, key) { return _this.removeDomEventListener(key); });
    };
    BaseWidget.prototype.prepareOtherElements = function () {
        // These elements are evaluated because they have an ID.
        var otherElements = utils_1.getElementsByHavingAttribute(this.instanceElement, '*', 'id');
        // These elements are evaluated because they have conditional attributes.
        var attributePrefixes = [ScreenConsts_1.Screen_CONSTS.conditionalAttributePrefix, ScreenConsts_1.Screen_CONSTS.expressionAttributePrefix];
        var conditionalElements = utils_1.getElementsByHavingAttributePrefix(this.instanceElement, attributePrefixes, ['param']);
        // Combine and de-dup arrays.
        for (var _i = 0, conditionalElements_1 = conditionalElements; _i < conditionalElements_1.length; _i++) {
            var conditionalElement = conditionalElements_1[_i];
            if (window.gigya.utils.array.indexOf(otherElements, conditionalElement) === -1) {
                otherElements.push(conditionalElement);
            }
        }
        // Add TemplateElement to other elements.
        for (var _a = 0, otherElements_1 = otherElements; _a < otherElements_1.length; _a++) {
            var el = otherElements_1[_a];
            this._otherElements.push(new TemplateElement_1.TemplateElement(el, this));
        }
    };
    BaseWidget.prototype.linkOtherElements = function () {
        var _this = this;
        this.prepareOtherElements();
        this._otherElements.forEach(function (element) {
            element.linkInstanceElement(_this.instanceElement);
            element.evaluateConditionalAttributes();
        });
    };
    BaseWidget.prototype.unlinkChildElements = function () {
        this._otherElements.forEach(function (element) { return element.unlinkInstanceElement(); });
    };
    return BaseWidget;
}(TemplateElement_1.TemplateElement));
exports.BaseWidget = BaseWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BehaviorTracking.ts":
/*!*************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/BehaviorTracking.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var LocalInfo_1 = __webpack_require__(/*! src/core/Gigya.Js/app/LocalInfo */ "./src/core/Gigya.Js/app/LocalInfo.ts");
var BehaviorTrackingContext = /** @class */ (function () {
    function BehaviorTrackingContext(document) {
        var _this = this;
        if (document === void 0) { document = window.gigya._.WindowProvider.document(); }
        this.document = document;
        this.startTime = 0;
        this.focusCount = 0;
        this.clickCount = 0;
        this.submitCount = 0;
        this.mouseMovement = [0, 0, 0, 0];
        this.scrolls = [];
        this.increaseFocusCount = function () { return _this.focusCount++; };
        this.increaseClickCount = function () { return _this.clickCount++; };
        this.trackMouseMovement = function () {
            var previousClientX = 0;
            var previousClientY = 0;
            return function (event) {
                if (previousClientX !== null) {
                    var movementX = previousClientX - event.clientX;
                    var movementY = previousClientY - event.clientY;
                    if (movementX > 0)
                        _this.mouseMovement[3]++; // left
                    if (movementX < 0)
                        _this.mouseMovement[1]++; // right
                    if (movementY > 0)
                        _this.mouseMovement[0]++; // top
                    if (movementY < 0)
                        _this.mouseMovement[2]++; // bottom
                }
                previousClientX = event.clientX;
                previousClientY = event.clientY;
            };
        };
        this.trackScrolling = function () {
            var timer, start, end, distance, timeElapsed;
            end = 0;
            return function (_) {
                if (!start) {
                    start = end;
                    timeElapsed = Date.now();
                }
                clearTimeout(timer);
                timer = setTimeout(function () {
                    end = window.scrollY;
                    distance = end - start;
                    if (distance !== 0) {
                        var velocity = distance / (Date.now() - timeElapsed);
                        var res = -distance + "|" + Math.abs(velocity).toFixed(3);
                        _this.scrolls.push(res);
                        if (_this.scrolls.length > 10) {
                            _this.scrolls.shift();
                        }
                    }
                    start = distance = timeElapsed = null;
                }, 60);
            };
        };
    }
    Object.defineProperty(BehaviorTrackingContext.prototype, "riskContext", {
        get: function () {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            return {
                b0: Date.now() - this.startTime,
                b1: this.mouseMovement,
                b2: this.focusCount,
                b3: this.scrolls,
                b4: this.clickCount,
                b5: this.submitCount,
                b6: (_a = this.clientFeatures) === null || _a === void 0 ? void 0 : _a.userAgent,
                b7: (_b = this.clientFeatures) === null || _b === void 0 ? void 0 : _b.plugins,
                b8: (_c = this.clientFeatures) === null || _c === void 0 ? void 0 : _c.localTime,
                b9: (_d = this.clientFeatures) === null || _d === void 0 ? void 0 : _d.timezoneOffset,
                b10: (_e = this.clientFeatures) === null || _e === void 0 ? void 0 : _e.permissionStatus,
                b11: (_f = this.clientFeatures) === null || _f === void 0 ? void 0 : _f.webdriver,
                b12: (_g = this.clientFeatures) === null || _g === void 0 ? void 0 : _g.batteryInfo,
                b13: (_h = this.clientFeatures) === null || _h === void 0 ? void 0 : _h.features
            };
        },
        enumerable: true,
        configurable: true
    });
    BehaviorTrackingContext.prototype.addFields = function (fields) {
        this.fieldsToTrack = fields;
    };
    BehaviorTrackingContext.prototype.startMonitoring = function () {
        var _this = this;
        var _a, _b, _c;
        // Clear all registered event
        BehaviorTrackingContext.removeAllEvents();
        // Register new events
        this.startTime = Date.now();
        BehaviorTrackingContext.registerEvent((_a = this.document) === null || _a === void 0 ? void 0 : _a.body, 'click', this.increaseClickCount);
        BehaviorTrackingContext.registerEvent((_b = this.document) === null || _b === void 0 ? void 0 : _b.body, 'mousemove', this.trackMouseMovement());
        BehaviorTrackingContext.registerEvent(this.document, 'scroll', this.trackScrolling());
        (_c = this.fieldsToTrack) === null || _c === void 0 ? void 0 : _c.forEach(function (field) {
            BehaviorTrackingContext.registerEvent(field === null || field === void 0 ? void 0 : field.instanceElement, 'focus', _this.increaseFocusCount);
            BehaviorTrackingContext.registerEvent(field === null || field === void 0 ? void 0 : field.instanceElement, 'blur', _this.increaseFocusCount);
        });
        this.clientFeatures = new LocalInfo_1.ClientFeature();
    };
    BehaviorTrackingContext.prototype.stopMonitoring = function () {
        BehaviorTrackingContext.removeAllEvents();
    };
    BehaviorTrackingContext.prototype.reset = function () {
        this.startTime = Date.now();
        this.focusCount = 0;
        this.clickCount = 0;
    };
    //#region events
    BehaviorTrackingContext.prototype.onSubmit = function () {
        this.submitCount++;
    };
    //#endregion
    BehaviorTrackingContext.removeAllEvents = function () {
        for (var _i = 0, _a = BehaviorTrackingContext.registeredEvents; _i < _a.length; _i++) {
            var _b = _a[_i], element = _b.element, eventType = _b.eventType, handler = _b.handler;
            window.gigya.utils.DOM.removeEventListener(element, eventType, handler);
        }
        BehaviorTrackingContext.registeredEvents = [];
    };
    BehaviorTrackingContext.registerEvent = function (element, eventType, handler) {
        BehaviorTrackingContext.registeredEvents.push({ element: element, eventType: eventType, handler: handler });
        window.gigya.utils.DOM.addEventListener(element, eventType, handler);
    };
    BehaviorTrackingContext.registeredEvents = [];
    return BehaviorTrackingContext;
}());
exports.BehaviorTrackingContext = BehaviorTrackingContext;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Captcha.ts":
/*!****************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Captcha.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/CardListFormWidget.ts":
/*!***************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/CardListFormWidget.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var CardListWidget_1 = __webpack_require__(/*! ./Widgets/CardListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CardListWidget.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ./BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var CardListFormWidget = /** @class */ (function (_super) {
    tslib_1.__extends(CardListFormWidget, _super);
    function CardListFormWidget(_form, el, _domUtils) {
        if (_domUtils === void 0) { _domUtils = window.gigya.utils.DOM; }
        var _this = _super.call(this, _form, el, false) || this;
        _this._domUtils = _domUtils;
        _this.formWidgets = [];
        _this.createItemTemplate(el);
        return _this;
    }
    Object.defineProperty(CardListFormWidget.prototype, "emptyItemElem", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(CardListWidget_1.CardList_CONSTS.emptyListItemSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardListFormWidget.prototype, "itemTemplate", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector('template')) === null || _b === void 0 ? void 0 : _b.innerHTML;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardListFormWidget.prototype, "cardListElem", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(CardListWidget_1.CardList_CONSTS.listSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardListFormWidget.prototype, "items", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelectorAll(CardListWidget_1.CardList_CONSTS.cardSelector);
        },
        enumerable: true,
        configurable: true
    });
    CardListFormWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _super.prototype.linkInstanceElement.call(this, parent);
                        return [4 /*yield*/, this.reloadList()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CardListFormWidget.prototype.createItemTemplate = function (el) {
        if (!el.querySelector('template')) {
            var item = el.querySelector(CardListWidget_1.CardList_CONSTS.cardSelector);
            var templateElem = document.createElement('template');
            templateElem.content.append(item === null || item === void 0 ? void 0 : item.cloneNode(true));
            el.append(templateElem);
            item.remove();
        }
    };
    CardListFormWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this._form.removeDynamicWidgets(this.formWidgets);
    };
    CardListFormWidget.prototype.reloadList = function () {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var items, i, card;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this._screen.dimScreen();
                        return [4 /*yield*/, this.reloadData()];
                    case 1:
                        items = _b.sent();
                        this.clearList();
                        if (items === null || items === void 0 ? void 0 : items.length) {
                            (_a = this.emptyItemElem) === null || _a === void 0 ? void 0 : _a.classList.remove(CardListWidget_1.CardList_CONSTS.emptyListItemActiveClass);
                            for (i = 0; i < items.length; i++) {
                                card = this._domUtils.createElementFromTemplate(this.itemTemplate);
                                card.setAttribute(CardListWidget_1.CardList_CONSTS.indexAttribute, i.toString());
                                card.setAttribute(CardListWidget_1.CardList_CONSTS.idAttribute, items[i][this.itemId]);
                                this.cardListElem.append(card);
                            }
                            this.formWidgets = this._form.addDynamicWidgets(this.instanceElement);
                        }
                        this._screen.undimScreen();
                        return [2 /*return*/];
                }
            });
        });
    };
    CardListFormWidget.prototype.clearList = function () {
        var _a;
        this.cardListElem
            .querySelectorAll(CardListWidget_1.CardList_CONSTS.cardSelector)
            .forEach(function (elem) { return elem.remove(); });
        (_a = this.emptyItemElem) === null || _a === void 0 ? void 0 : _a.classList.add(CardListWidget_1.CardList_CONSTS.emptyListItemActiveClass);
    };
    CardListFormWidget.prototype.showList = function () {
        if (this.instanceElement) {
            this.instanceElement.style.display = 'block';
        }
    };
    return CardListFormWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.CardListFormWidget = CardListFormWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Consent.ts":
/*!****************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Consent.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.consentFieldName = 'isConsentGranted';
exports.namespace = 'preferences';
function postProcessForm(formData, preferencesSchema) {
    var displayedPreferences = getDisplayedPreferences(formData, preferencesSchema);
    if (displayedPreferences) {
        formData = window.gigya.utils.object.merge([formData, { displayedPreferences: displayedPreferences }]);
    }
    return formData;
}
exports.postProcessForm = postProcessForm;
function getDisplayedPreferences(formData, preferencesSchema) {
    if (!formData)
        return undefined;
    if (!preferencesSchema) {
        // gigya.logger.error(`form has preferences - but it doesn't exist in schema`);
        return undefined;
    }
    var consents = Object.keys(formData)
        .filter(isConsentField)
        .map(toConsentName);
    if (!consents.length)
        return undefined;
    return consents.reduce(function (res, curr) {
        var consent = preferencesSchema[curr];
        if (!consent) {
            window.gigya.logger.warn("form input bound to " + exports.namespace + "." + curr + " but it doesn't exist on schema");
        }
        else {
            res[curr] = {
                docVersion: consent.currentDocVersion,
                docDate: consent.currentDocDate,
            };
        }
        return res;
    }, {});
}
function isConsentField(fieldName) {
    // todo: after ie11 deprecation, replace with startsWith & endsWith.
    return fieldName.indexOf(exports.namespace + ".") == 0 && fieldName.substr(fieldName.length - exports.consentFieldName.length, fieldName.length) === exports.consentFieldName;
}
function toConsentName(consentFieldName) {
    // removing preferences namespace and isConsentGranted
    var fieldParts = consentFieldName.split('.');
    return fieldParts.slice(1, fieldParts.length - 1).join('.');
}


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ConsentData.ts":
/*!********************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/ConsentData.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Consent_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Consent */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Consent.ts");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
function getConsentDataForScreenSet(apiData, lang) {
    var _a, _b;
    var getSiteConsentDetails = apiData === null || apiData === void 0 ? void 0 : apiData.getSiteConsentDetails;
    if ((getSiteConsentDetails === null || getSiteConsentDetails === void 0 ? void 0 : getSiteConsentDetails.errorCode) === GSErrors_1.GSErrors.OK && (getSiteConsentDetails === null || getSiteConsentDetails === void 0 ? void 0 : getSiteConsentDetails.siteConsentDetails)) {
        return getConsentDataForCurrentLanguage(getSiteConsentDetails === null || getSiteConsentDetails === void 0 ? void 0 : getSiteConsentDetails.siteConsentDetails, lang);
    }
    var legacyConsentData = (_b = (_a = apiData.getSchema) === null || _a === void 0 ? void 0 : _a.preferencesSchema) === null || _b === void 0 ? void 0 : _b.fields;
    if (!legacyConsentData) {
        return null;
    }
    return getConsentDataForCurrentLanguage(legacyConsentData, lang);
}
exports.getConsentDataForScreenSet = getConsentDataForScreenSet;
function isConsentMigrated() {
    var _a, _b;
    return (_b = (_a = window.gigya._.config.consent) === null || _a === void 0 ? void 0 : _a.isMigrated) !== null && _b !== void 0 ? _b : false;
}
exports.isConsentMigrated = isConsentMigrated;
function hasConsentLicense() {
    var _a, _b;
    return (_b = (_a = window.gigya._.config.consent) === null || _a === void 0 ? void 0 : _a.hasLicense) !== null && _b !== void 0 ? _b : false;
}
exports.hasConsentLicense = hasConsentLicense;
/**
 * @description determines when consent type is not terms or privacy
 */
function isConsentTypeOther(fieldName) {
    if (!isConsentField(fieldName)) {
        return false;
    }
    var fieldNameParts = fieldName.split('.');
    var consentType = fieldNameParts[1];
    if (consentType === 'privacy' || consentType === 'terms') {
        return false;
    }
    return true;
}
exports.isConsentTypeOther = isConsentTypeOther;
function isConsentField(fieldName) {
    if (tooShortName(fieldName)) {
        return false;
    }
    return fieldName.startsWith(Consent_1.namespace) && fieldName.endsWith(Consent_1.consentFieldName);
}
exports.isConsentField = isConsentField;
var CONSENT_FIELD_MINIMUM_LENGTH = 3;
function tooShortName(fieldName) {
    var _a;
    var fieldNameParts = (_a = fieldName === null || fieldName === void 0 ? void 0 : fieldName.split('.')) !== null && _a !== void 0 ? _a : [];
    if (fieldNameParts.length < CONSENT_FIELD_MINIMUM_LENGTH) {
        return true;
    }
}
function getConsentDataForCurrentLanguage(consentMap, lang) {
    return Object.keys(consentMap).reduce(function (statements, key) {
        var consent = consentMap[key];
        var defaultLang = consent.defaultLang;
        var legalStatements = consent.legalStatements;
        statements[key] = (legalStatements === null || legalStatements === void 0 ? void 0 : legalStatements[lang]) || (legalStatements === null || legalStatements === void 0 ? void 0 : legalStatements[defaultLang]) || {};
        return statements;
    }, {});
}


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Constants/link-accounts.ts":
/*!********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Constants/link-accounts.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.LINK_ACCOUNTS_DEFAULT_INCLUDE_PARAM = 'profile,data,subscriptions,preferences';


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Constants/magic-link.ts":
/*!*****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Constants/magic-link.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(/*! src/accounts/constants */ "./src/accounts/constants.ts");
exports.MAGIC_LINK_UNACCEPTABLE_PARAMS_REGEX = new RegExp(constants_1.GIGYA_INTERNAL_PARAM_PREFIX + "|" + constants_1.GIGYA_INTERNAL_PARAMS);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/FormDataProvider.ts":
/*!***************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/FormDataProvider.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var FormDataProvider = /** @class */ (function () {
    function FormDataProvider(form) {
        this._form = form;
    }
    Object.defineProperty(FormDataProvider.prototype, "defaultSubmitParams", {
        get: function () {
            return this._form.defaultSubmitParams();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormDataProvider.prototype, "hasProviderSessionInfo", {
        get: function () {
            return this._form._screenSet.hasProviderSessionInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormDataProvider.prototype, "includeParams", {
        get: function () {
            return this._form._screenSet.params.include;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormDataProvider.prototype, "lang", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this._form._screenSet) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.lang;
        },
        enumerable: true,
        configurable: true
    });
    return FormDataProvider;
}());
exports.FormDataProvider = FormDataProvider;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/IFormDataProvider.ts":
/*!****************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/IFormDataProvider.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/ILoginDataProvider.ts":
/*!*****************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/ILoginDataProvider.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/LinkAccountsDataProvider.ts":
/*!***********************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/LinkAccountsDataProvider.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FormDataProvider_1 = __webpack_require__(/*! ./FormDataProvider */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/FormDataProvider.ts");
var linkAccountsHelper_1 = __webpack_require__(/*! src/core/Gigya.Js.Plugin/app/Utils/general/linkAccountsHelper */ "./src/core/Gigya.Js.Plugin/app/Utils/general/linkAccountsHelper.ts");
var link_accounts_1 = __webpack_require__(/*! ../Constants/link-accounts */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Constants/link-accounts.ts");
var LoginModes_1 = __webpack_require__(/*! ../LoginModes */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes.ts");
var LinkAccountsDataProvider = /** @class */ (function (_super) {
    tslib_1.__extends(LinkAccountsDataProvider, _super);
    function LinkAccountsDataProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(LinkAccountsDataProvider.prototype, "loginID", {
        get: function () {
            return linkAccountsHelper_1.getLoginId(this.conflictingAccount);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkAccountsDataProvider.prototype, "phone", {
        get: function () {
            return linkAccountsHelper_1.getPhone(this.conflictingAccount);
        },
        enumerable: true,
        configurable: true
    });
    LinkAccountsDataProvider.prototype.getPasswordLoginParams = function (password) {
        var loginParams = {
            loginID: this.loginID,
            include: window.gigya.utils.stringUtils.mergeCommaSeparatedValues(link_accounts_1.LINK_ACCOUNTS_DEFAULT_INCLUDE_PARAM, this.includeParams)
        };
        if (password) {
            loginParams['password'] = password;
        }
        if (this.hasProviderSessionInfo) {
            return tslib_1.__assign(tslib_1.__assign({}, loginParams), { suppressLoginEvent: true, regToken: null });
        }
        return tslib_1.__assign(tslib_1.__assign({}, loginParams), { loginMode: LoginModes_1.LoginModes.link.name });
    };
    Object.defineProperty(LinkAccountsDataProvider.prototype, "conflictingAccount", {
        get: function () {
            var _a;
            var apiData = this._form._screenSet.getApiData();
            return (_a = apiData === null || apiData === void 0 ? void 0 : apiData.getConflictingAccount) === null || _a === void 0 ? void 0 : _a.conflictingAccount;
        },
        enumerable: true,
        configurable: true
    });
    return LinkAccountsDataProvider;
}(FormDataProvider_1.FormDataProvider));
exports.LinkAccountsDataProvider = LinkAccountsDataProvider;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/index.ts":
/*!****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/index.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./FormDataProvider */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/FormDataProvider.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./IFormDataProvider */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/IFormDataProvider.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./ILoginDataProvider */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/ILoginDataProvider.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./LinkAccountsDataProvider */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/LinkAccountsDataProvider.ts"), exports);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Debug.ts":
/*!**************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Debug.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function warn(screensetID, msg) {
    // TODO: this probably should use some general debug warn method or in the base plugin
    if (typeof console == 'object' && console.warn)
        console.warn('Gigya Screenset (' + screensetID + ') - ' + msg);
}
exports.warn = warn;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement.ts":
/*!****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var TemplateElement_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts");
var Errors_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var FormInput_1 = __webpack_require__(/*! ./Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var ErrorElementPolicies = {
    'gigya-error-display': {
        showError: function (el, errorMessage) {
            if (!el)
                return;
            el.classList.add('gigya-error-display-active');
        },
        hideError: function (el) {
            if (!el)
                return;
            el.classList.remove('gigya-error-display-active');
        },
    },
    'gigya-error-msg': {
        showError: function (el, errorMessage) {
            if (!el)
                return;
            el.classList.add('gigya-error-msg-active');
            el.setAttribute('role', 'alert');
            el.innerHTML = errorMessage;
        },
        hideError: function (el) {
            if (!el)
                return;
            el.classList.remove('gigya-error-msg-active');
            el.removeAttribute('role');
            el.innerHTML = '';
        },
    },
};
utils_1.DeepFreeze(ErrorElementPolicies);
var ErrorScopes;
(function (ErrorScopes) {
    ErrorScopes[ErrorScopes["boundObjectError"] = 0] = "boundObjectError";
    ErrorScopes[ErrorScopes["firstError"] = 1] = "firstError";
    ErrorScopes[ErrorScopes["anyError"] = 2] = "anyError";
    ErrorScopes[ErrorScopes["allErrors"] = 3] = "allErrors";
    ErrorScopes[ErrorScopes["bound-object-error"] = 0] = "bound-object-error";
    ErrorScopes[ErrorScopes["first-error"] = 1] = "first-error";
    ErrorScopes[ErrorScopes["any-error"] = 2] = "any-error";
    ErrorScopes[ErrorScopes["all-errors"] = 3] = "all-errors";
})(ErrorScopes = exports.ErrorScopes || (exports.ErrorScopes = {}));
utils_1.DeepFreeze(ErrorScopes);
exports.ErrorDisplayElement_CONSTS = {
    gigyaClasses: ['gigya-error-display', 'gigya-error-msg'],
    boundedTo: 'data-bound-to',
    errorCodes: 'data-error-codes',
    scope: 'data-scope',
    flags: 'data-error-flags',
    errorClassPrefix: 'gigya-error-code-',
    errorType: 'gigya-error-type-',
};
utils_1.DeepFreeze(exports.ErrorDisplayElement_CONSTS);
var ErrorDisplayElement = /** @class */ (function (_super) {
    tslib_1.__extends(ErrorDisplayElement, _super);
    function ErrorDisplayElement(el, _screen) {
        var _this = _super.call(this, el, _screen) || this;
        _this._screen = _screen;
        _this.boundedTo = el.getAttribute(exports.ErrorDisplayElement_CONSTS.boundedTo);
        _this.scope = ErrorScopes[el.getAttribute(exports.ErrorDisplayElement_CONSTS.scope)] || ErrorScopes.boundObjectError;
        var errorCodes = el.getAttribute(exports.ErrorDisplayElement_CONSTS.errorCodes);
        if (errorCodes)
            _this.allowedErrorCodes = utils_1.Map(errorCodes.split(','), function (code) { return parseInt(code); });
        else
            _this.allowedErrorCodes = [];
        var flags = el.getAttribute(exports.ErrorDisplayElement_CONSTS.flags);
        if (flags)
            _this.allowedFlags = flags.split(',');
        else
            _this.allowedFlags = [];
        for (var className in ErrorElementPolicies) {
            if (window.gigya.utils.DOM.isElementClass(el, className)) {
                _this.policy = ErrorElementPolicies[className];
                break;
            }
        }
        _this.policy.hideError(el); // clear error as initial appearance
        // WCAG: Set role=alert and aria-atomic so that screen readers will automatically read updated error text.
        // See: https://www.w3.org/TR/WCAG20-TECHS/ARIA19.html
        el.setAttribute('aria-atomic', 'true');
        return _this;
    }
    ErrorDisplayElement.prototype.isErrorCodeAllowed = function (errorCode, flags) {
        var _this = this;
        if (flags === void 0) { flags = null; }
        var allowedCode = (this.allowedErrorCodes.length === 0 && errorCode !== GSErrors_1.GSErrors.Data_Pending) || window.gigya.utils.array.indexOf(this.allowedErrorCodes, errorCode) !== -1;
        var allowedFlag = this.allowedFlags.length === 0; // Allow all flags if flags are not specified
        if (this.allowedFlags.length && flags) {
            var arFlags = flags.split(',');
            allowedFlag = utils_1.Some(arFlags, function (flag) {
                if (window.gigya.utils.array.indexOf(_this.allowedFlags, flag) !== -1) {
                    allowedFlag = true;
                    return true;
                }
                return false;
            });
        }
        return allowedCode && allowedFlag;
    };
    ErrorDisplayElement.prototype.showError = function (error) {
        this.setLastError(error);
        this.policy.showError(this.instanceElement, error.errorMessage);
        this._screenSet.centerModal();
    };
    ErrorDisplayElement.prototype.hideError = function () {
        this.policy.hideError(this.instanceElement);
        this.removeLastError();
    };
    ErrorDisplayElement.prototype.setLastError = function (error) {
        var _this = this;
        this.removeLastError();
        this.lastError = error;
        if (this.instanceElement) {
            var classes = [
                exports.ErrorDisplayElement_CONSTS.errorClassPrefix + error.errorCode,
                error.errorType && "" + exports.ErrorDisplayElement_CONSTS.errorType + Errors_1.ErrorType[error.errorType],
                error.isWarn && FormInput_1.FormInput_CONSTS.warnClass,
            ];
            classes.forEach(function (c) { return c && window.gigya.utils.DOM.addClassToElement(_this.instanceElement, c); });
            this._screenSet.centerModal();
        }
    };
    ErrorDisplayElement.prototype.removeLastError = function () {
        var _this = this;
        if (this.lastError) {
            if (this.instanceElement) {
                var classes = [
                    exports.ErrorDisplayElement_CONSTS.errorClassPrefix + this.lastError.errorCode,
                    this.lastError.errorType && "" + exports.ErrorDisplayElement_CONSTS.errorType + Errors_1.ErrorType[this.lastError.errorType],
                    this.lastError.isWarn && FormInput_1.FormInput_CONSTS.warnClass,
                ];
                classes.forEach(function (c) { return c && window.gigya.utils.DOM.removeClassFromElement(_this.instanceElement, c); });
                this._screenSet.centerModal();
            }
            this.lastError = null;
        }
    };
    ErrorDisplayElement.prototype.getErrorType = function () {
        var _a;
        return (_a = this.lastError) === null || _a === void 0 ? void 0 : _a.errorType;
    };
    ErrorDisplayElement.prototype.evaluateConditionalAttributes = function () {
        _super.prototype.evaluateConditionalAttributes.call(this);
        this.boundedTo = this.instanceElement.getAttribute(exports.ErrorDisplayElement_CONSTS.boundedTo);
        var errorCodes = this.instanceElement.getAttribute(exports.ErrorDisplayElement_CONSTS.errorCodes);
        if (errorCodes)
            this.allowedErrorCodes = utils_1.Map(errorCodes.split(','), function (code) { return parseInt(code); });
        else
            this.allowedErrorCodes = [];
        this.scope = ErrorScopes[this.instanceElement.getAttribute(exports.ErrorDisplayElement_CONSTS.scope)] || ErrorScopes.boundObjectError;
        var flags = this.instanceElement.getAttribute(exports.ErrorDisplayElement_CONSTS.flags);
        if (flags)
            this.allowedFlags = flags.split(',');
        else
            this.allowedFlags = [];
    };
    return ErrorDisplayElement;
}(TemplateElement_1.TemplateElement));
exports.ErrorDisplayElement = ErrorDisplayElement;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors.ts":
/*!***************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var ScreenOptions_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var ErrorType;
(function (ErrorType) {
    ErrorType[ErrorType["client"] = 0] = "client";
    ErrorType[ErrorType["custom"] = 1] = "custom";
    ErrorType[ErrorType["server"] = 2] = "server";
})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));
exports.PendingErrorAttributes = {};
exports.PendingErrorAttributes[GSErrors_1.GSErrors.ACCOUNTS_LINKED] = {
    name: ScreenOptions_1.ScreenOptions_CONSTS.accountsLinkedScreen,
    nextScreen: function (form) { return form._screen.accountsLinkedScreen || '_finish'; },
    requiresFinalize: true,
};
exports.PendingErrorAttributes[GSErrors_1.GSErrors.ACCOUNT_PENDING_REGISTRATION] = {
    name: ScreenOptions_1.ScreenOptions_CONSTS.pendingRegistrationScreen,
    nextScreen: function (form) {
        var apiData = form._screenSet.getApiData();
        delete apiData.getSchema; // cleaning cached schema
        return form._screen.pendingRegistrationScreen;
    },
    requiresFinalize: true,
};
exports.PendingErrorAttributes[GSErrors_1.GSErrors.LOGIN_IDENTIFIER_EXISTS] = exports.PendingErrorAttributes[GSErrors_1.GSErrors.OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS] = {
    name: ScreenOptions_1.ScreenOptions_CONSTS.existingLoginIdentifierScreen,
    nextScreen: function (form) {
        return form._screenSet.data.regToken && form._screen.existingLoginIdentifierScreen;
    },
    requiresFinalize: true,
};
exports.PendingErrorAttributes[GSErrors_1.GSErrors.FORCE_LINK_LOGIN_IDENTIFIER_EXISTS] = {
    name: ScreenOptions_1.ScreenOptions_CONSTS.existingLoginIdentifierScreen,
    nextScreen: function (form) {
        var _a;
        var screenData = form._screenSet.data;
        return screenData.regToken && ((_a = form._screenSet) === null || _a === void 0 ? void 0 : _a.providerSessionInfo) && form._screen.existingLoginIdentifierScreen;
    },
    requiresFinalize: true,
};
exports.PendingErrorAttributes[GSErrors_1.GSErrors.ACCOUNT_PENDING_VERIFICATION] = {
    name: ScreenOptions_1.ScreenOptions_CONSTS.pendingVerificationScreen,
    nextScreen: function (form) { return form._screen.pendingVerificationScreen; },
    resetFinalizeNeededState: true,
};
exports.PendingErrorAttributes[GSErrors_1.GSErrors.ACCOUNT_MISSING_LOGINID] = {
    name: ScreenOptions_1.ScreenOptions_CONSTS.missingLoginIdScreen,
    nextScreen: function (form) { return form._screen.missingLoginIdScreen; },
};
exports.PendingErrorAttributes[GSErrors_1.GSErrors.PENDING_PASSWORD_CHANGE] = {
    name: ScreenOptions_1.ScreenOptions_CONSTS.pendingPasswordChangeScreen,
    nextScreen: function (form) { return form._screen.pendingPasswordChangeScreen; },
    requiresFinalize: true,
};
exports.PendingErrorAttributes[GSErrors_1.GSErrors.ACCOUNT_PENDING_TFA_VERIFICATION] = {
    name: ScreenOptions_1.ScreenOptions_CONSTS.pendingTfaVerificationScreen,
    nextScreen: function (form) { return form._screen.pendingTfaVerificationScreen; },
    requiresFinalize: true,
};
exports.PendingErrorAttributes[GSErrors_1.GSErrors.ACCOUNT_PENDING_TFA_REGISTRATION] = {
    name: ScreenOptions_1.ScreenOptions_CONSTS.pendingTfaRegistrationScreen,
    nextScreen: function (form) { return form._screen.pendingTfaRegistrationScreen; },
    requiresFinalize: true,
};
exports.PendingErrorAttributes[GSErrors_1.GSErrors.ACCOUNT_PENDING_RECENT_LOGIN] = {
    name: ScreenOptions_1.ScreenOptions_CONSTS.pendingReAuthenticationScreen,
    nextScreen: function (form) { return form._screen.pendingReAuthenticationScreen; },
};
exports.PendingErrorAttributes[GSErrors_1.GSErrors.PENDING_CODE_VERIFICATION] = {
    name: ScreenOptions_1.ScreenOptions_CONSTS.pendingCodeVerificationScreen,
    requiresFinalize: true,
    nextScreen: function (form) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!window.gigya.utils.toggles.isOn('preventSendingCodeVerification')) return [3 /*break*/, 2];
                    return [4 /*yield*/, sendVerificationCode(form)];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2: return [2 /*return*/, form._screen.pendingCodeVerificationScreen];
            }
        });
    }); }
};
function sendVerificationCode(form) {
    var _a, _b;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var formData, apiData, accountInfo;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    formData = form.getFormData && form.getFormData();
                    apiData = form._screenSet.getApiData();
                    accountInfo = apiData.getAccountInfo = apiData.getAccountInfo || {};
                    if (!(!accountInfo.email && !(accountInfo.profile && accountInfo.profile.email))) return [3 /*break*/, 2];
                    return [4 /*yield*/, new gigya.Promise(function (r) { return form._screenSet.updateAccountInfo(r); })];
                case 1:
                    accountInfo = _c.sent();
                    _c.label = 2;
                case 2:
                    if (((_b = (_a = accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.emails) === null || _a === void 0 ? void 0 : _a.unverified) === null || _b === void 0 ? void 0 : _b.indexOf(formData === null || formData === void 0 ? void 0 : formData.loginID)) >= 0) {
                        accountInfo.email = formData.loginID;
                    }
                    else {
                        accountInfo.email = accountInfo.email || (accountInfo.profile && accountInfo.profile.email);
                    }
                    window.gigya.accounts.otp.sendCode({
                        lang: form._screenSet.params.communicationLang,
                        regToken: form._screenSet.data.regToken,
                        email: accountInfo.email,
                        ignoreApiQueue: true,
                        callback: function (res) {
                            if (res.errorCode == GSErrors_1.GSErrors.OK) {
                                form._screenSet.data.otpData.vToken = res.vToken;
                            }
                        }
                    });
                    return [2 /*return*/];
            }
        });
    });
}
utils_1.DeepFreeze(exports.PendingErrorAttributes);
function notImplementerAbstract() {
    throw new Error('NOT IMPLEMENTED');
}
exports.notImplementerAbstract = notImplementerAbstract;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/AuthMethodsForm.ts":
/*!******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/AuthMethodsForm.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var SwitchScreenWidget_1 = __webpack_require__(/*! ../SwitchScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/SwitchScreenWidget.ts");
var getAttribute = window.gigya._.plugins.utils.DOM.getAttribute;
exports.AuthMethodsForm_CONSTS = {
    gigyaClass: 'gigya-auth-methods-form',
    authMethodSelector: '[data-auth-method]',
    authMethod: 'data-auth-method'
};
utils_1.DeepFreeze(exports.AuthMethodsForm_CONSTS);
var AuthMethodsForm = /** @class */ (function (_super) {
    tslib_1.__extends(AuthMethodsForm, _super);
    function AuthMethodsForm() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._authMethodToScreenMap = {};
        return _this;
    }
    AuthMethodsForm.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        this.instanceElement.querySelectorAll(exports.AuthMethodsForm_CONSTS.authMethodSelector)
                            .forEach(function (el) {
                            var methods = _this.getAuthMethods().methods;
                            if (!window.gigya.utils.array.includes(methods, getAttribute(el, exports.AuthMethodsForm_CONSTS.authMethod))) {
                                window.gigya.utils.DOM.removeElement(el.parentElement);
                            }
                            _this._authMethodToScreenMap[getAttribute(el, exports.AuthMethodsForm_CONSTS.authMethod)] = getAttribute(el, SwitchScreenWidget_1.SwitchScreen_CONSTS.switchScreen);
                        });
                        this.autoSkipScreen = this.getDefaultAuthScreen();
                        return [2 /*return*/];
                }
            });
        });
    };
    AuthMethodsForm.prototype.canAutoSkip = function (formContext) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, methods, preferredMethod, hasPasskey, canSkipToDefaultAuthMethod, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.getAuthMethods(), methods = _a.methods, preferredMethod = _a.preferredMethod;
                        hasPasskey = methods.some(function (x) { return x.startsWith('passkey'); });
                        canSkipToDefaultAuthMethod = methods.length <= 1 || (preferredMethod && !formContext.explicitSwitchScreen);
                        _b = !hasPasskey && canSkipToDefaultAuthMethod;
                        if (!_b) return [3 /*break*/, 2];
                        return [4 /*yield*/, _super.prototype.canAutoSkip.call(this, formContext)];
                    case 1:
                        _b = (_c.sent());
                        _c.label = 2;
                    case 2: return [2 /*return*/, _b];
                }
            });
        });
    };
    AuthMethodsForm.prototype.getDefaultAuthScreen = function () {
        var _a = this.getAuthMethods(), methods = _a.methods, preferredMethod = _a.preferredMethod;
        if (!methods || !methods.length) {
            window.gigya.logger.warn('could not find default auth method');
            return '_finish';
        }
        if (methods.length === 1) {
            return this._authMethodToScreenMap[methods[0]];
        }
        if (preferredMethod && this._authMethodToScreenMap[preferredMethod]) {
            return this._authMethodToScreenMap[preferredMethod];
        }
        return null;
    };
    AuthMethodsForm.prototype.getAuthMethods = function () {
        var apiData = this._screenSet.getApiData();
        var methods = tslib_1.__spreadArrays(((apiData === null || apiData === void 0 ? void 0 : apiData.authMethods) || []));
        return {
            methods: methods,
            preferredMethod: this.getPreferredMethod(methods, apiData === null || apiData === void 0 ? void 0 : apiData.identifier)
        };
    };
    AuthMethodsForm.prototype.getPreferredMethod = function (methods, identifier) {
        var preferredMethod = window.gigya.accounts.auth.getPreferredLoginMethod(identifier);
        if (window.gigya.utils.array.includes(methods, preferredMethod))
            return preferredMethod;
        if (window.gigya.utils.array.containsOnly(methods, ['password', 'push'])) {
            return 'push';
        }
        return null;
    };
    AuthMethodsForm.CONSTS = exports.AuthMethodsForm_CONSTS;
    return AuthMethodsForm;
}(BaseForm_1.BaseForm));
exports.AuthMethodsForm = AuthMethodsForm;
BaseForm_1.BaseForm.addFormToLibrary(AuthMethodsForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/BaseLoginForm.ts":
/*!****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/BaseLoginForm.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var BaseLoginForm = /** @class */ (function (_super) {
    tslib_1.__extends(BaseLoginForm, _super);
    function BaseLoginForm(screen, elForm, gigyaClass) {
        return _super.call(this, screen, elForm, gigyaClass) || this;
    }
    BaseLoginForm.prototype.submitApi = function () {
        return window.gigya.accounts.login;
    };
    BaseLoginForm.prototype.getErrorKey = function (response) {
        var errorCode = Number(response.errorCode);
        if (errorCode === GSErrors_1.GSErrors.OLD_PASSWORD_USED) {
            return 'old_password_used';
        }
        return _super.prototype.getErrorKey.call(this, response);
    };
    return BaseLoginForm;
}(BaseForm_1.BaseForm));
exports.BaseLoginForm = BaseLoginForm;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ChangeOrganizationContextForm.ts":
/*!********************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ChangeOrganizationContextForm.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var Errors_1 = __webpack_require__(/*! ../Errors */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
exports.ChangeOrganizationContextFormConsts = {
    gigyaClass: 'gigya-change-organization-context-form',
};
utils_1.DeepFreeze(exports.ChangeOrganizationContextFormConsts);
var ChangeOrganizationContextForm = /** @class */ (function (_super) {
    tslib_1.__extends(ChangeOrganizationContextForm, _super);
    function ChangeOrganizationContextForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeOrganizationContextForm.prototype.submitApi = function () {
        return window.gigya.accounts.b2b.setOrganizationContext;
    };
    ChangeOrganizationContextForm.prototype.getCustomValidationErrors = function () {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var errors, bpid;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, _super.prototype.getCustomValidationErrors.call(this)];
                    case 1:
                        errors = _c.sent();
                        bpid = (_b = (_a = this._screenSet.data) === null || _a === void 0 ? void 0 : _a.apiData) === null || _b === void 0 ? void 0 : _b.selectedBpid;
                        if (!bpid) {
                            if (!errors)
                                errors = [];
                            errors.push({
                                fieldName: null,
                                fieldArrayKeyValue: null,
                                errorCode: GSErrors_1.GSErrors.REQUIRED_VALUE_VALIDATION_ERROR,
                                errorType: Errors_1.ErrorType.client,
                                errorMessage: this._screen.getErrorMessage(GSErrors_1.GSErrors.REQUIRED_VALUE_VALIDATION_ERROR, false, null)
                            });
                        }
                        return [2 /*return*/, errors];
                }
            });
        });
    };
    ChangeOrganizationContextForm.prototype.performSubmit = function (oParams) {
        var bpid = this._screenSet.data.apiData.selectedBpid;
        return _super.prototype.performSubmit.call(this, tslib_1.__assign(tslib_1.__assign({}, oParams), { bpid: bpid }));
    };
    ChangeOrganizationContextForm.CONSTS = exports.ChangeOrganizationContextFormConsts;
    return ChangeOrganizationContextForm;
}(BaseForm_1.BaseForm));
exports.ChangeOrganizationContextForm = ChangeOrganizationContextForm;
BaseForm_1.BaseForm.addFormToLibrary(ChangeOrganizationContextForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/CustomForm.ts":
/*!*************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/CustomForm.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
exports.CustomForm_CONSTS = {
    gigyaClass: 'gigya-custom-form',
};
var CustomForm = /** @class */ (function (_super) {
    tslib_1.__extends(CustomForm, _super);
    function CustomForm(screen, elForm, gigyaClass) {
        return _super.call(this, screen, elForm, gigyaClass) || this;
    }
    CustomForm.CONSTS = exports.CustomForm_CONSTS;
    return CustomForm;
}(BaseForm_1.BaseForm));
exports.CustomForm = CustomForm;
BaseForm_1.BaseForm.addFormToLibrary(CustomForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/DeviceCodeForm.ts":
/*!*****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/DeviceCodeForm.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var RegisterDeviceRequestParam;
(function (RegisterDeviceRequestParam) {
    RegisterDeviceRequestParam["UserCode"] = "user_code";
})(RegisterDeviceRequestParam = exports.RegisterDeviceRequestParam || (exports.RegisterDeviceRequestParam = {}));
var RegisterDeviceFormParam;
(function (RegisterDeviceFormParam) {
    RegisterDeviceFormParam["UserCode"] = "userCode";
})(RegisterDeviceFormParam = exports.RegisterDeviceFormParam || (exports.RegisterDeviceFormParam = {}));
exports.DeviceCodeForm_CONSTS = {
    gigyaClass: 'gigya-device-code-form',
};
utils_1.DeepFreeze(exports.DeviceCodeForm_CONSTS);
var DeviceCodeForm = /** @class */ (function (_super) {
    tslib_1.__extends(DeviceCodeForm, _super);
    function DeviceCodeForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeviceCodeForm.prototype.specialFields = function () {
        var _a;
        return window.gigya.utils.object.merge([
            _super.prototype.specialFields.call(this),
            (_a = {},
                _a[RegisterDeviceFormParam.UserCode] = true,
                _a),
        ]);
    };
    DeviceCodeForm.prototype.prePopulateData = function () {
        var _a;
        var _b;
        return _a = {},
            _a[RegisterDeviceFormParam.UserCode] = (_b = this.getUserCodeFromURL()) !== null && _b !== void 0 ? _b : '',
            _a;
    };
    DeviceCodeForm.prototype.submitApi = function () {
        return window.gigya.fidm.oidc.op.deviceContinue;
    };
    DeviceCodeForm.prototype.performSubmit = function (formData) {
        var _a;
        var requestParams = (_a = {},
            _a[RegisterDeviceRequestParam.UserCode] = formData[RegisterDeviceFormParam.UserCode],
            _a);
        return _super.prototype.performSubmit.call(this, requestParams);
    };
    DeviceCodeForm.prototype.getErrorKey = function (response) {
        var errorCode = Number(response.errorCode);
        if (errorCode === GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE) {
            return 'device_code_incorrect';
        }
        return _super.prototype.getErrorKey.call(this, response);
    };
    DeviceCodeForm.prototype.getUserCodeFromURL = function () {
        var params = window.gigya.utils.URL.getParamsFromURL(document.location.href);
        return params[RegisterDeviceRequestParam.UserCode];
    };
    DeviceCodeForm.CONSTS = exports.DeviceCodeForm_CONSTS;
    return DeviceCodeForm;
}(BaseForm_1.BaseForm));
exports.DeviceCodeForm = DeviceCodeForm;
BaseForm_1.BaseForm.addFormToLibrary(DeviceCodeForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/EmailCodeAuthMethodForm.ts":
/*!**************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/EmailCodeAuthMethodForm.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var OtpVerificationBaseForm_1 = __webpack_require__(/*! ./OtpVerificationBaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpVerificationBaseForm.ts");
var FlagService_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/Services/FlagService */ "./src/core/Gigya.Js/app/Services/FlagService.ts");
exports.EmaiLCodeAuthMethodForm_CONSTS = {
    gigyaClass: 'gigya-email-code-auth-method-form',
    authMethod: 'emailOtp'
};
utils_1.DeepFreeze(exports.EmaiLCodeAuthMethodForm_CONSTS);
var EmailCodeAuthMethodForm = /** @class */ (function (_super) {
    tslib_1.__extends(EmailCodeAuthMethodForm, _super);
    function EmailCodeAuthMethodForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EmailCodeAuthMethodForm.prototype.linkInstanceElement = function (parent) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var apiData, lang;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _c.sent();
                        apiData = this._screenSet.getApiData();
                        lang = FlagService_1.FlagService.sendLangForEmailOTP ? (_b = (_a = this._screenSet) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.lang : null;
                        if (apiData === null || apiData === void 0 ? void 0 : apiData.identifier) {
                            this.sendEmailOTP(apiData === null || apiData === void 0 ? void 0 : apiData.identifier, lang);
                        }
                        window.gigya.accounts.auth.setPreferredLoginMethod(exports.EmaiLCodeAuthMethodForm_CONSTS.authMethod, apiData === null || apiData === void 0 ? void 0 : apiData.identifier);
                        return [2 /*return*/];
                }
            });
        });
    };
    EmailCodeAuthMethodForm.prototype.submitApi = function () {
        return window.gigya.accounts.auth.otp.email.login;
    };
    EmailCodeAuthMethodForm.prototype.sendEmailOTP = function (identifier, lang) {
        var _this = this;
        window.gigya.accounts.auth.otp.email.sendCode({
            email: identifier,
            lang: lang,
            callback: function (res) { return _this.onCodeSent(res); }
        });
    };
    EmailCodeAuthMethodForm.CONSTS = exports.EmaiLCodeAuthMethodForm_CONSTS;
    return EmailCodeAuthMethodForm;
}(OtpVerificationBaseForm_1.OtpVerificationBaseForm));
exports.EmailCodeAuthMethodForm = EmailCodeAuthMethodForm;
BaseForm_1.BaseForm.addFormToLibrary(EmailCodeAuthMethodForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LinkAccountsForm.ts":
/*!*******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LinkAccountsForm.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var LoginModes_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes.ts");
var BaseLoginForm_1 = __webpack_require__(/*! ./BaseLoginForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/BaseLoginForm.ts");
var promise_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/promise */ "./src/core/Gigya.Js/app/Utils/promise.ts");
var linkAccountsHelper_1 = __webpack_require__(/*! src/core/Gigya.Js.Plugin/app/Utils/general/linkAccountsHelper */ "./src/core/Gigya.Js.Plugin/app/Utils/general/linkAccountsHelper.ts");
var LinkAccountsDataProvider_1 = __webpack_require__(/*! ../DataProviders/LinkAccountsDataProvider */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/LinkAccountsDataProvider.ts");
exports.LinkAccountsForm_CONSTS = {
    gigyaClass: 'gigya-link-accounts-form'
};
utils_1.DeepFreeze(exports.LinkAccountsForm_CONSTS);
var LinkAccountsForm = /** @class */ (function (_super) {
    tslib_1.__extends(LinkAccountsForm, _super);
    function LinkAccountsForm(screen, elForm, gigyaClass) {
        return _super.call(this, screen, elForm, gigyaClass) || this;
    }
    LinkAccountsForm.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        this.setScreenSetData();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(LinkAccountsForm.prototype, "dataProvider", {
        get: function () {
            return new LinkAccountsDataProvider_1.LinkAccountsDataProvider(this);
        },
        enumerable: true,
        configurable: true
    });
    LinkAccountsForm.prototype.prePopulateData = function () {
        var populateData = _super.prototype.prePopulateData.call(this);
        if (this.loginId) {
            populateData.loginID = this.loginId;
        }
        return populateData;
    };
    LinkAccountsForm.prototype.specialFields = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.specialFields.call(this),
            {
                loginID: true,
                password: true,
                sitePassword: true,
                emailCode: true,
                phoneCode: true
            }
        ]);
    };
    LinkAccountsForm.prototype.getNeededData = function () {
        var neededData = _super.prototype.getNeededData.call(this);
        if (this._screenSet.data.regToken) {
            neededData = window.gigya.utils.object.merge([
                neededData,
                {
                    getConflictingAccount: {
                        params: {
                            regToken: this._screenSet.data.regToken
                        },
                    }
                }
            ]);
        }
        return neededData;
    };
    LinkAccountsForm.prototype.defaultSubmitParams = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.defaultSubmitParams.call(this),
            this.dataProvider.getPasswordLoginParams(),
        ]);
    };
    LinkAccountsForm.prototype.getLoginProviders = function () {
        return LoginModes_1.LoginModes.link.getLoginProviders(this._screenSet.data.apiData, this._screenSet.params, this._screenSet.data.regToken);
    };
    LinkAccountsForm.prototype.onBeforeSkipped = function () {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this._screenSet.data.shouldConnectAccounts = false;
                        if (!this._screenSet.hasProviderSessionInfo) return [3 /*break*/, 3];
                        window.gigya.utils.queue.hold('new-account', 'API');
                        return [4 /*yield*/, promise_1.promisify(window.gigya.accounts.notifySocialLogin, {
                                ignoreApiQueue: true,
                                ignoreInterruptions: true,
                                loginMode: LoginModes_1.LoginModes.standard.name,
                                providerSessions: linkAccountsHelper_1.extractProviderSessions((_a = this._screenSet) === null || _a === void 0 ? void 0 : _a.providerSessionInfo),
                                sessionExpiration: this._screenSet.params.sessionExpiration
                            })];
                    case 1:
                        response = _b.sent();
                        return [4 /*yield*/, promise_1.promisify(window.gigya.accounts.finalizeRegistration, {
                                ignoreApiQueue: true,
                                regToken: response['regToken'],
                                allowAccountsLinking: true,
                                sessionExpiration: this._screenSet.params.sessionExpiration
                            })];
                    case 2:
                        _b.sent();
                        this._screenSet.data.finalizeRegistrationNeeded = false;
                        window.gigya.utils.queue.release('new-account', 'API');
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    LinkAccountsForm.prototype.onBeforeSubmit = function () {
        this._screenSet.data.shouldConnectAccounts = true;
    };
    LinkAccountsForm.prototype.onSkipped = function () {
        this._screenSet.data.extraEventData.allowAccountsLinking = true;
    };
    LinkAccountsForm.prototype.setScreenSetData = function () {
        this.setOtpIdentifierData({
            email: linkAccountsHelper_1.getLoginId(this.conflictingAccount),
            phone: linkAccountsHelper_1.getObfuscatedPhone(this.conflictingAccount)
        });
        if (this._screenSet.hasProviderSessionInfo) {
            this._screenSet.data.finalizeRegistrationNeeded = false;
        }
    };
    Object.defineProperty(LinkAccountsForm.prototype, "conflictingAccount", {
        get: function () {
            var _a;
            var apiData = this._screenSet.getApiData();
            return (_a = apiData === null || apiData === void 0 ? void 0 : apiData.getConflictingAccount) === null || _a === void 0 ? void 0 : _a.conflictingAccount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkAccountsForm.prototype, "loginId", {
        get: function () {
            return linkAccountsHelper_1.getLoginId(this.conflictingAccount);
        },
        enumerable: true,
        configurable: true
    });
    LinkAccountsForm.prototype.setOtpIdentifierData = function (data) {
        var _a;
        if ((_a = this._screenSet.data) === null || _a === void 0 ? void 0 : _a.authMethodData) {
            this._screenSet.data.authMethodData.identifiers = data;
        }
    };
    LinkAccountsForm.CONSTS = exports.LinkAccountsForm_CONSTS;
    return LinkAccountsForm;
}(BaseLoginForm_1.BaseLoginForm));
exports.LinkAccountsForm = LinkAccountsForm;
BaseForm_1.BaseForm.addFormToLibrary(LinkAccountsForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LoginForm.ts":
/*!************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LoginForm.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var LoginModes_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes.ts");
var BaseLoginForm_1 = __webpack_require__(/*! ./BaseLoginForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/BaseLoginForm.ts");
var BehaviorTracking_1 = __webpack_require__(/*! ../BehaviorTracking */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BehaviorTracking.ts");
exports.LoginForm_CONSTS = {
    gigyaClass: 'gigya-login-form',
};
utils_1.DeepFreeze(exports.LoginForm_CONSTS);
var LoginForm = /** @class */ (function (_super) {
    tslib_1.__extends(LoginForm, _super);
    function LoginForm(screen, elForm, gigyaClass) {
        return _super.call(this, screen, elForm, gigyaClass) || this;
    }
    LoginForm.prototype.specialFields = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.specialFields.call(this),
            {
                loginID: true,
                password: true,
                captchaText: true,
                captchaToken: true,
                identifier: true
            }
        ]);
    };
    LoginForm.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.behaviorContext = new BehaviorTracking_1.BehaviorTrackingContext();
                        this.behaviorContext.addFields(['loginID', 'password'].map(function (field) { return _this.getField(field); }));
                        return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    LoginForm.prototype._getSubmitApiParams = function (params) {
        params = LoginModes_1.LoginModes.standard.filterParams(params);
        return _super.prototype._getSubmitApiParams.call(this, params);
    };
    LoginForm.prototype.defaultSubmitParams = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.defaultSubmitParams.call(this),
            {
                loginMode: LoginModes_1.LoginModes.standard.name,
                include: window.gigya.utils.stringUtils.mergeCommaSeparatedValues('profile,data,emails,subscriptions,preferences', this._screenSet.params.include)
            }
        ]);
    };
    LoginForm.CONSTS = exports.LoginForm_CONSTS;
    return LoginForm;
}(BaseLoginForm_1.BaseLoginForm));
exports.LoginForm = LoginForm;
BaseForm_1.BaseForm.addFormToLibrary(LoginForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/MagicLinkAuthMethodForm.ts":
/*!**************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/MagicLinkAuthMethodForm.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var constants_1 = __webpack_require__(/*! ./../../../constants */ "./src/accounts/constants.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var magic_link_1 = __webpack_require__(/*! ../Constants/magic-link */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Constants/magic-link.ts");
exports.MagicLinkMethodForm_CONSTS = {
    gigyaClass: 'gigya-magic-link-auth-method-form',
    authMethod: 'magicLink'
};
utils_1.DeepFreeze(exports.MagicLinkMethodForm_CONSTS);
var MagicLinkAuthMethodForm = /** @class */ (function (_super) {
    tslib_1.__extends(MagicLinkAuthMethodForm, _super);
    function MagicLinkAuthMethodForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MagicLinkAuthMethodForm.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var apiData;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        apiData = this._screenSet.getApiData();
                        if (apiData === null || apiData === void 0 ? void 0 : apiData.identifier) {
                            this.sendMagicLink(apiData === null || apiData === void 0 ? void 0 : apiData.identifier);
                        }
                        window.gigya.accounts.auth.setPreferredLoginMethod(exports.MagicLinkMethodForm_CONSTS.authMethod, apiData === null || apiData === void 0 ? void 0 : apiData.identifier);
                        return [2 /*return*/];
                }
            });
        });
    };
    MagicLinkAuthMethodForm.prototype.sendMagicLink = function (identifier) {
        var _this = this;
        var _a, _b;
        var requestParam = {
            lang: (_b = (_a = this._screenSet) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.lang,
            email: identifier,
            callback: function (res) { return _this.displayMagicLinkErrors(res); }
        };
        requestParam['context'] = this.getContextObject();
        window.gigya.accounts.auth.magiclink.email.send(requestParam);
    };
    MagicLinkAuthMethodForm.prototype.displayMagicLinkErrors = function (response) {
        if (Number(response === null || response === void 0 ? void 0 : response.errorCode) !== GSErrors_1.GSErrors.OK) {
            this._screenSet.displayServerErrors(response, this);
        }
    };
    MagicLinkAuthMethodForm.prototype.getContextObject = function () {
        var lang = this._screenSet.params.lang;
        var context = window.gigya.utils.object.merge([
            { lang: lang },
            this._screenSet.params.context,
            window.gigya.utils.URL.getContextParamsFromUrl({ url: document.location.href, unacceptableParams: magic_link_1.MAGIC_LINK_UNACCEPTABLE_PARAMS_REGEX })
        ]);
        return window.gigya.utils.object.addPrefixToProperties(context, constants_1.GIGYA_PARAM_PREFIX);
    };
    MagicLinkAuthMethodForm.CONSTS = exports.MagicLinkMethodForm_CONSTS;
    return MagicLinkAuthMethodForm;
}(BaseForm_1.BaseForm));
exports.MagicLinkAuthMethodForm = MagicLinkAuthMethodForm;
BaseForm_1.BaseForm.addFormToLibrary(MagicLinkAuthMethodForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/NewsletterSignupForm.ts":
/*!***********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/NewsletterSignupForm.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
exports.NewsletterSignup_CONSTS = {
    gigyaClass: 'gigya-subscribe-with-email-form',
};
utils_1.DeepFreeze(exports.NewsletterSignup_CONSTS);
var NewsletterSignupForm = /** @class */ (function (_super) {
    tslib_1.__extends(NewsletterSignupForm, _super);
    function NewsletterSignupForm(screen, elForm, gigyaClass) {
        var _this = _super.call(this, screen, elForm, gigyaClass) || this;
        _this.settings = {
            supportConsentData: true
        };
        return _this;
    }
    NewsletterSignupForm.prototype.prePopulateDataFrom = function () {
        return ['getAccountInfo', 'getAccountInfo.profile'];
    };
    NewsletterSignupForm.prototype.getNeededData = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.getNeededData.call(this),
            {
                getSchema: {
                    params: {},
                },
                getAccountInfo: {
                    params: {
                        include: 'emails,profile,data,subscriptions,preferences',
                        includeCommunications: 'all',
                    },
                },
            },
        ]);
    };
    NewsletterSignupForm.prototype.performSubmit = function (oParams) {
        var _this = this;
        var regTok = this._screenSet.params.regToken || this._screenSet.data.regToken;
        if (this._screenSet.getApiData().getAccountInfo.status === 'OK' || regTok) {
            oParams = this.setSubscriptions(oParams, regTok);
            _super.prototype.performSubmit.call(this, oParams);
        }
        else {
            window.gigya.accounts.initRegistration({
                isLite: true,
                callback: function (res) {
                    if (res.regToken) {
                        oParams = _this.setSubscriptions(oParams, res.regToken);
                    }
                    _super.prototype.performSubmit.call(_this, oParams);
                },
            });
        }
    };
    NewsletterSignupForm.prototype.setSubscriptions = function (oParams, regToken) {
        if (regToken) {
            oParams['regToken'] = regToken;
            // this should store the regToken for future screens in the same screen set...
            this._screenSet.params.regToken = regToken;
            this._screenSet.data.regToken = regToken;
        }
        return oParams;
    };
    NewsletterSignupForm.prototype.submitApi = function () {
        return window.gigya.accounts.setAccountInfo;
    };
    NewsletterSignupForm.prototype.onAfterSubmit = function (response) {
        if (response.errorCode == GSErrors_1.GSErrors.OK) {
            var formData = this.getFormData(true, false);
            if (formData.email) {
                if (!formData.profile)
                    formData.profile = {};
                formData.profile.email = formData.email;
                delete formData.email;
            }
            this._screenSet.onAccountInfo(formData);
        }
        _super.prototype.onAfterSubmit.call(this, response);
    };
    NewsletterSignupForm.prototype.requiredFields = function () {
        var requiredFields = _super.prototype.requiredFields.call(this);
        requiredFields['email'] = true;
        return requiredFields;
    };
    NewsletterSignupForm.prototype.schemaValidated = function () {
        return true;
    };
    NewsletterSignupForm.CONSTS = exports.NewsletterSignup_CONSTS;
    return NewsletterSignupForm;
}(BaseForm_1.BaseForm));
exports.NewsletterSignupForm = NewsletterSignupForm;
BaseForm_1.BaseForm.addFormToLibrary(NewsletterSignupForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OneAccountSubscriptionForm.ts":
/*!*****************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OneAccountSubscriptionForm.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
exports.OneAccountSubscription_CONSTS = {
    gigyaClass: 'gigya-subscribe-one-account-form',
    authorization_details_locations: 'accounts/update',
    authorization_details_type: 'guest:signup',
    authorization_details_grant_type: 'gigya.com/identifier'
};
utils_1.DeepFreeze(exports.OneAccountSubscription_CONSTS);
var OneAccountSubscriptionForm = /** @class */ (function (_super) {
    tslib_1.__extends(OneAccountSubscriptionForm, _super);
    function OneAccountSubscriptionForm(screen, elForm, gigyaClass) {
        var _this = _super.call(this, screen, elForm, gigyaClass) || this;
        _this.settings = {
            supportConsentData: true
        };
        return _this;
    }
    OneAccountSubscriptionForm.prototype.prePopulateDataFrom = function () {
        return ['getAccountInfo', 'getAccountInfo.profile'];
    };
    OneAccountSubscriptionForm.prototype.getNeededData = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.getNeededData.call(this),
            {
                getSchema: {
                    params: {},
                },
                getAccountInfo: {
                    params: {
                        include: 'emails,profile,data,subscriptions,preferences',
                        includeCommunications: 'all',
                    },
                },
            },
        ]);
    };
    OneAccountSubscriptionForm.prototype.performSubmit = function (oParams) {
        var _this = this;
        var regTok = this._screenSet.params.regToken || this._screenSet.data.regToken;
        if (this._screenSet.getApiData().getAccountInfo.status === 'OK' || regTok) {
            oParams = this.setSubscriptions(oParams, regTok);
            _super.prototype.performSubmit.call(this, oParams);
        }
        else {
            var formData = this.getFormData(true, false, true);
            if (formData && formData.profile) {
                window.gigya.accounts.identity.authorize({
                    authorization_details: [
                        {
                            account: {
                                profile: tslib_1.__assign(tslib_1.__assign({}, formData.profile), { email: this.getValueOrNull(formData.email) }),
                                subscriptions: formData.subscriptions ? tslib_1.__assign({}, formData.subscriptions) : undefined,
                                data: formData.data ? tslib_1.__assign({}, formData.data) : undefined,
                            },
                            locations: [
                                exports.OneAccountSubscription_CONSTS.authorization_details_locations
                            ],
                            type: exports.OneAccountSubscription_CONSTS.authorization_details_type
                        }
                    ],
                    grant_type: exports.OneAccountSubscription_CONSTS.authorization_details_grant_type,
                    callback: function (res) {
                        if (res.access_token) {
                            window.gigya._.apiAdapters.web.tokenStore.setBearerToken(res.access_token);
                            oParams = _this.setSubscriptions(oParams, res.access_token);
                        }
                        _super.prototype.performSubmit.call(_this, oParams);
                    },
                });
            }
        }
    };
    OneAccountSubscriptionForm.prototype.setSubscriptions = function (oParams, regToken) {
        if (regToken) {
            oParams['regToken'] = regToken;
            // this should store the regToken for future screens in the same screen set...
            this._screenSet.params.regToken = regToken;
            this._screenSet.data.regToken = regToken;
        }
        return oParams;
    };
    OneAccountSubscriptionForm.prototype.submitApi = function () {
        return window.gigya.accounts.setAccountInfo;
    };
    OneAccountSubscriptionForm.prototype.onAfterSubmit = function (response) {
        if (response.errorCode == GSErrors_1.GSErrors.OK) {
            var formData = this.getFormData(true, false);
            if (formData.email) {
                if (!formData.profile)
                    formData.profile = {};
                formData.profile.email = formData.email;
                formData.profile.firstName = this.getValueOrNull(formData.firstName);
                formData.profile.lastName = this.getValueOrNull(formData.lastName);
                delete formData.email;
                delete formData.firstName;
                delete formData.lastName;
            }
            this._screenSet.onAccountInfo(formData);
        }
        window.gigya._.apiAdapters.web.tokenStore.removeBearerToken();
        _super.prototype.onAfterSubmit.call(this, response);
    };
    OneAccountSubscriptionForm.prototype.requiredFields = function () {
        var requiredFields = _super.prototype.requiredFields.call(this);
        requiredFields['email'] = true;
        requiredFields['firstaName'] = true;
        return requiredFields;
    };
    OneAccountSubscriptionForm.prototype.schemaValidated = function () {
        return true;
    };
    OneAccountSubscriptionForm.prototype.getValueOrNull = function (value) {
        return value !== '' ? value : null;
    };
    OneAccountSubscriptionForm.CONSTS = exports.OneAccountSubscription_CONSTS;
    return OneAccountSubscriptionForm;
}(BaseForm_1.BaseForm));
exports.OneAccountSubscriptionForm = OneAccountSubscriptionForm;
BaseForm_1.BaseForm.addFormToLibrary(OneAccountSubscriptionForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OrganizationRegistrationForm.ts":
/*!*******************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OrganizationRegistrationForm.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
exports.OrgRegisterForm_CONSTS = {
    gigyaClass: 'gigya-org-register-form',
};
utils_1.DeepFreeze(exports.OrgRegisterForm_CONSTS);
var OrgRegisterForm = /** @class */ (function (_super) {
    tslib_1.__extends(OrgRegisterForm, _super);
    function OrgRegisterForm(screen, elForm, gigyaClass) {
        var _this = _super.call(this, screen, elForm, gigyaClass) || this;
        _this.settings = {
            supportConsentData: true
        };
        return _this;
    }
    // merges the "organizationSchema" and "requesterSchema" fields
    // from the getOrganizationSchema response
    // into the "general" schema (getSchema response)
    OrgRegisterForm.prototype.mergeOrgSchemaIntoMainSchema = function (mainSchema, orgSchema) {
        return window.gigya.utils.object.merge([mainSchema, {
                organizationSchema: orgSchema.organizationSchema,
                requesterSchema: orgSchema.requesterSchema
            }], true);
    };
    OrgRegisterForm.prototype.prePopulateDataFrom = function () {
        return ['getOrganizationSchema'];
    };
    OrgRegisterForm.prototype.getNeededData = function () {
        var _this = this;
        return window.gigya.utils.object.merge([
            _super.prototype.getNeededData.call(this),
            {
                getOrganizationSchema: {
                    params: {},
                    responseHandler: function (orgSchema) {
                        var mainSchema = _this._screenSet.getApiData().getSchema;
                        if (mainSchema)
                            _this._screenSet.getApiData().getSchema = _this.mergeOrgSchemaIntoMainSchema(mainSchema, orgSchema);
                        return orgSchema; // return getOrgSchemaResponse
                    },
                },
                getSchema: {
                    params: {},
                    responseHandler: function (mainSchema) {
                        var orgSchema = _this._screenSet.getApiData().getOrganizationSchema;
                        return _this.mergeOrgSchemaIntoMainSchema(mainSchema, orgSchema || {}); // return the merged schema
                    }
                }
            },
        ]);
    };
    OrgRegisterForm.prototype.schemaValidated = function () {
        return true;
    };
    OrgRegisterForm.prototype.submitApi = function () {
        return window.gigya.accounts.b2b.registerOrganization;
    };
    OrgRegisterForm.CONSTS = exports.OrgRegisterForm_CONSTS;
    return OrgRegisterForm;
}(BaseForm_1.BaseForm));
exports.OrgRegisterForm = OrgRegisterForm;
BaseForm_1.BaseForm.addFormToLibrary(OrgRegisterForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpLoginForm.ts":
/*!***************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpLoginForm.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var OtpVerificationBaseForm_1 = __webpack_require__(/*! ./OtpVerificationBaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpVerificationBaseForm.ts");
exports.OtpLoginForm_CONSTS = {
    gigyaClass: 'gigya-otp-login-form',
};
utils_1.DeepFreeze(exports.OtpLoginForm_CONSTS);
var OtpLoginForm = /** @class */ (function (_super) {
    tslib_1.__extends(OtpLoginForm, _super);
    function OtpLoginForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OtpLoginForm.prototype.submitApi = function () {
        return window.gigya.accounts.otp.login;
    };
    OtpLoginForm.prototype.performSubmit = function (oParams) {
        this._screenSet.data.finalizeRegistrationNeeded = true;
        return _super.prototype.performSubmit.call(this, oParams);
    };
    OtpLoginForm.CONSTS = exports.OtpLoginForm_CONSTS;
    return OtpLoginForm;
}(OtpVerificationBaseForm_1.OtpVerificationBaseForm));
exports.OtpLoginForm = OtpLoginForm;
BaseForm_1.BaseForm.addFormToLibrary(OtpLoginForm);
// region mobile-login backward compatibility
// for old screen sets that uses 'gigya-mobile-verification-form'
exports.MobileLoginVerificationForm_CONSTS = {
    gigyaClass: 'gigya-mobile-verification-form',
};
utils_1.DeepFreeze(exports.MobileLoginVerificationForm_CONSTS);
var MobileLoginVerificationForm = /** @class */ (function (_super) {
    tslib_1.__extends(MobileLoginVerificationForm, _super);
    function MobileLoginVerificationForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MobileLoginVerificationForm.CONSTS = exports.MobileLoginVerificationForm_CONSTS;
    return MobileLoginVerificationForm;
}(OtpLoginForm));
exports.MobileLoginVerificationForm = MobileLoginVerificationForm;
BaseForm_1.BaseForm.addFormToLibrary(MobileLoginVerificationForm);
// endregion


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpSendCodeForm.ts":
/*!******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpSendCodeForm.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_Object_dot_assign) {Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
exports.OtpSendCodeForm_CONSTS = {
    gigyaClass: 'gigya-otp-send-code-form',
};
utils_1.DeepFreeze(exports.OtpSendCodeForm_CONSTS);
var OtpSendCodeForm = /** @class */ (function (_super) {
    tslib_1.__extends(OtpSendCodeForm, _super);
    function OtpSendCodeForm() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.settings = {
            supportConsentData: true
        };
        return _this;
    }
    OtpSendCodeForm.prototype.submitApi = function () {
        return window.gigya.accounts.otp.sendCode;
    };
    OtpSendCodeForm.prototype.prePopulateDataFrom = function () {
        return ['getAccountInfo'];
    };
    OtpSendCodeForm.prototype.onAfterSubmit = function (response) {
        this._screenSet.data.otpData.vToken = response['vToken'];
        _super.prototype.onAfterSubmit.call(this, response);
    };
    OtpSendCodeForm.prototype.specialFields = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.specialFields.call(this),
            {
                phoneNumber: true,
                email: true
            },
        ]);
    };
    OtpSendCodeForm.prototype.performSubmit = function (oParams) {
        this._saveSpecialFieldsInCache();
        _super.prototype.performSubmit.call(this, oParams);
    };
    OtpSendCodeForm.prototype._saveSpecialFieldsInCache = function () {
        var _this = this;
        var formData = this.getFormData(true, true, true);
        this._screenSet.getApiData().getAccountInfo = this._screenSet.getApiData().getAccountInfo || {};
        var specialFields = this.specialFields();
        Object.keys(specialFields)
            .filter(function (specialField) { return Boolean(specialFields[specialField]); })
            .forEach(function (specialField) {
            var _a;
            __webpack_provided_Object_dot_assign(_this._screenSet.getApiData().getAccountInfo, (_a = {}, _a[specialField] = formData[specialField], _a));
        });
    };
    OtpSendCodeForm.prototype.defaultSubmitParams = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.defaultSubmitParams.call(this),
            { lang: this._screenSet.params.communicationLang }
        ]);
    };
    OtpSendCodeForm.prototype.schemaValidated = function () {
        return true;
    };
    OtpSendCodeForm.prototype.getNeededData = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.getNeededData.call(this),
            {
                getSchema: {
                    params: {},
                }
            },
        ]);
    };
    OtpSendCodeForm.CONSTS = exports.OtpSendCodeForm_CONSTS;
    return OtpSendCodeForm;
}(BaseForm_1.BaseForm));
exports.OtpSendCodeForm = OtpSendCodeForm;
BaseForm_1.BaseForm.addFormToLibrary(OtpSendCodeForm);
// region mobile-login backward compatibility
// for old screen sets that uses 'gigya-mobile-verification-form'
exports.MobileLoginForm_CONSTS = {
    gigyaClass: 'gigya-mobile-login-form',
};
utils_1.DeepFreeze(exports.MobileLoginForm_CONSTS);
var MobileLoginForm = /** @class */ (function (_super) {
    tslib_1.__extends(MobileLoginForm, _super);
    function MobileLoginForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MobileLoginForm.CONSTS = exports.MobileLoginForm_CONSTS;
    return MobileLoginForm;
}(OtpSendCodeForm));
exports.MobileLoginForm = MobileLoginForm;
BaseForm_1.BaseForm.addFormToLibrary(MobileLoginForm);
// endregion

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js")["__assign"]))

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpUpdateForm.ts":
/*!****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpUpdateForm.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var OtpVerificationBaseForm_1 = __webpack_require__(/*! ./OtpVerificationBaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpVerificationBaseForm.ts");
exports.OtpUpdateForm_CONSTS = {
    gigyaClass: 'gigya-otp-update-form',
};
utils_1.DeepFreeze(exports.OtpUpdateForm_CONSTS);
var OtpUpdateForm = /** @class */ (function (_super) {
    tslib_1.__extends(OtpUpdateForm, _super);
    function OtpUpdateForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OtpUpdateForm.prototype.submitApi = function () {
        return window.gigya.accounts.otp.update;
    };
    OtpUpdateForm.prototype.performSubmit = function (oParams) {
        this._screenSet.data.finalizeRegistrationNeeded = true;
        return _super.prototype.performSubmit.call(this, oParams);
    };
    OtpUpdateForm.CONSTS = exports.OtpUpdateForm_CONSTS;
    return OtpUpdateForm;
}(OtpVerificationBaseForm_1.OtpVerificationBaseForm));
exports.OtpUpdateForm = OtpUpdateForm;
BaseForm_1.BaseForm.addFormToLibrary(OtpUpdateForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpVerificationBaseForm.ts":
/*!**************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpVerificationBaseForm.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var OtpVerificationBaseForm = /** @class */ (function (_super) {
    tslib_1.__extends(OtpVerificationBaseForm, _super);
    function OtpVerificationBaseForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OtpVerificationBaseForm.prototype.specialFields = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.specialFields.call(this),
            {
                code: true
            },
        ]);
    };
    OtpVerificationBaseForm.prototype.getErrorKey = function (response) {
        var errorCode = Number(response.errorCode);
        if (errorCode === GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE && response.errorDetails) {
            if (utils_1.endsWith(response.errorDetails, 'Token has been revoked')) {
                return 'otp_code_expired';
            }
            if (utils_1.endsWith(response.errorDetails, 'phoneNumber already exists')) {
                return 'phone_number_exists';
            }
            if (utils_1.endsWith(response.errorDetails, 'code')) {
                return 'please_enter_a_valid_code';
            }
        }
        return _super.prototype.getErrorKey.call(this, response);
    };
    OtpVerificationBaseForm.prototype.defaultSubmitParams = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.defaultSubmitParams.call(this),
            { vToken: this._screenSet.data.otpData.vToken }
        ]);
    };
    OtpVerificationBaseForm.prototype.onCodeSent = function (response) {
        if (Number(response === null || response === void 0 ? void 0 : response.errorCode) !== GSErrors_1.GSErrors.OK) {
            this._screenSet.displayServerErrors(response, this);
            return;
        }
        if (response === null || response === void 0 ? void 0 : response.vToken) {
            this._screenSet.data.otpData.vToken = response['vToken'];
            return;
        }
        this._screenSet.displayServerErrors({
            errorCode: GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE
        }, this);
    };
    return OtpVerificationBaseForm;
}(BaseForm_1.BaseForm));
exports.OtpVerificationBaseForm = OtpVerificationBaseForm;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpVerifyForm.ts":
/*!****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpVerifyForm.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var OtpVerificationBaseForm_1 = __webpack_require__(/*! ./OtpVerificationBaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpVerificationBaseForm.ts");
exports.OtpVerifyForm_CONSTS = {
    gigyaClass: 'gigya-otp-verify-form',
};
utils_1.DeepFreeze(exports.OtpVerifyForm_CONSTS);
var OtpVerifyForm = /** @class */ (function (_super) {
    tslib_1.__extends(OtpVerifyForm, _super);
    function OtpVerifyForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OtpVerifyForm.prototype.submitApi = function () {
        return window.gigya.accounts.auth.otp.authenticate;
    };
    OtpVerifyForm.prototype.onAfterSubmit = function (response) {
        this._screenSet.data.otpData.accessToken = response['access_token'];
        _super.prototype.onAfterSubmit.call(this, response);
    };
    OtpVerifyForm.CONSTS = exports.OtpVerifyForm_CONSTS;
    return OtpVerifyForm;
}(OtpVerificationBaseForm_1.OtpVerificationBaseForm));
exports.OtpVerifyForm = OtpVerifyForm;
BaseForm_1.BaseForm.addFormToLibrary(OtpVerifyForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordAuthMethodForm.ts":
/*!*************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordAuthMethodForm.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var LoginForm_1 = __webpack_require__(/*! ./LoginForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LoginForm.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
exports.PasswordAuthMethodForm_CONSTS = {
    gigyaClass: 'gigya-password-auth-method-form',
    authMethod: 'password'
};
utils_1.DeepFreeze(exports.PasswordAuthMethodForm_CONSTS);
var PasswordAuthMethodForm = /** @class */ (function (_super) {
    tslib_1.__extends(PasswordAuthMethodForm, _super);
    function PasswordAuthMethodForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PasswordAuthMethodForm.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var apiData;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        apiData = this._screenSet.getApiData();
                        window.gigya.accounts.auth.setPreferredLoginMethod(exports.PasswordAuthMethodForm_CONSTS.authMethod, apiData === null || apiData === void 0 ? void 0 : apiData.identifier);
                        return [2 /*return*/];
                }
            });
        });
    };
    PasswordAuthMethodForm.prototype.submitApi = function () {
        var _this = this;
        return function (params, formData, options, defaultParams) {
            var _a, _b, _c, _d;
            var apiData = _this._screenSet.getApiData();
            if ((_b = (_a = _this._screenSet) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.aToken) {
                formData = window.gigya.utils.object.merge([formData, {
                        aToken: (_d = (_c = _this._screenSet) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.aToken,
                        password: formData.password
                    }]);
            }
            else {
                formData = window.gigya.utils.object.merge([formData, {
                        loginID: (apiData === null || apiData === void 0 ? void 0 : apiData.loginID) || (apiData === null || apiData === void 0 ? void 0 : apiData.identifier),
                        password: formData.password
                    }]);
            }
            window.gigya.accounts.login(params, formData, options, defaultParams);
        };
    };
    PasswordAuthMethodForm.CONSTS = exports.PasswordAuthMethodForm_CONSTS;
    return PasswordAuthMethodForm;
}(LoginForm_1.LoginForm));
exports.PasswordAuthMethodForm = PasswordAuthMethodForm;
BaseForm_1.BaseForm.addFormToLibrary(PasswordAuthMethodForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessForm.ts":
/*!*******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessForm.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_Object_dot_assign) {Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var PasswordlessForm = /** @class */ (function (_super) {
    tslib_1.__extends(PasswordlessForm, _super);
    function PasswordlessForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PasswordlessForm.prototype.specialFields = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.specialFields.call(this),
            {
                loginID: true,
                identifier: true
            }
        ]);
    };
    PasswordlessForm.prototype.submitApi = function () {
        var _this = this;
        return function (params, formData, options, defaultParams) {
            var _a, _b;
            _this.saveInApiData({
                identifier: (formData === null || formData === void 0 ? void 0 : formData.loginID) || (formData === null || formData === void 0 ? void 0 : formData.identifier),
                loginID: formData === null || formData === void 0 ? void 0 : formData.loginID,
            });
            window.gigya.accounts.auth.getMethods({
                aToken: (_b = (_a = _this._screenSet) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.aToken,
                identifier: (formData === null || formData === void 0 ? void 0 : formData.loginID) || (formData === null || formData === void 0 ? void 0 : formData.identifier),
                callback: options.callback
            });
        };
    };
    PasswordlessForm.prototype.getErrorKey = function (response) {
        return response.errorCode === GSErrors_1.GSErrors.NOT_FOUND
            ? 'invalid_login_identifier'
            : _super.prototype.getErrorKey.call(this, response);
    };
    PasswordlessForm.prototype.onAfterSubmit = function (response) {
        this.saveInApiData({ authMethods: response.methods });
        _super.prototype.onAfterSubmit.call(this, response);
    };
    PasswordlessForm.prototype.saveInApiData = function (obj) {
        var apiData = this._screenSet.getApiData() || {};
        __webpack_provided_Object_dot_assign(apiData, obj);
    };
    return PasswordlessForm;
}(BaseForm_1.BaseForm));
exports.PasswordlessForm = PasswordlessForm;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js")["__assign"]))

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessLoginForm.ts":
/*!************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessLoginForm.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var PasswordlessForm_1 = __webpack_require__(/*! ./PasswordlessForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessForm.ts");
exports.PasswordlessLoginForm_CONSTS = {
    gigyaClass: 'gigya-passwordless-login-form',
};
utils_1.DeepFreeze(exports.PasswordlessLoginForm_CONSTS);
var PasswordlessLoginForm = /** @class */ (function (_super) {
    tslib_1.__extends(PasswordlessLoginForm, _super);
    function PasswordlessLoginForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PasswordlessLoginForm.CONSTS = exports.PasswordlessLoginForm_CONSTS;
    return PasswordlessLoginForm;
}(PasswordlessForm_1.PasswordlessForm));
exports.PasswordlessLoginForm = PasswordlessLoginForm;
BaseForm_1.BaseForm.addFormToLibrary(PasswordlessLoginForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessRegisterForm.ts":
/*!***************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessRegisterForm.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var PasswordlessForm_1 = __webpack_require__(/*! ./PasswordlessForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessForm.ts");
exports.PasswordlessRegisterForm_CONSTS = {
    gigyaClass: 'gigya-passwordless-register-form',
};
utils_1.DeepFreeze(exports.PasswordlessRegisterForm_CONSTS);
var PasswordlessRegisterForm = /** @class */ (function (_super) {
    tslib_1.__extends(PasswordlessRegisterForm, _super);
    function PasswordlessRegisterForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PasswordlessRegisterForm.CONSTS = exports.PasswordlessRegisterForm_CONSTS;
    return PasswordlessRegisterForm;
}(PasswordlessForm_1.PasswordlessForm));
exports.PasswordlessRegisterForm = PasswordlessRegisterForm;
BaseForm_1.BaseForm.addFormToLibrary(PasswordlessRegisterForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProfileForm.ts":
/*!**************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProfileForm.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var LoginModes_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes.ts");
var GSErrors = window.gigya.GSErrors;
exports.ProfileForm_CONSTS = {
    gigyaClass: 'gigya-profile-form',
    specialFields: {
        username: true,
        oldPassword: true,
        password: true,
        newPassword: true,
        passwordRetype: true,
        secretQuestion: true,
        secretAnswer: true,
        addLoginEmails: true,
        removeLoginEmails: true,
        phoneNumber: true
    },
};
utils_1.DeepFreeze(exports.ProfileForm_CONSTS);
var ProfileForm = /** @class */ (function (_super) {
    tslib_1.__extends(ProfileForm, _super);
    function ProfileForm(screen, elForm, gigyaClass) {
        var _this = _super.call(this, screen, elForm, gigyaClass) || this;
        _this.requiredProfileFields = ['samlData', 'locale'];
        _this.settings = {
            supportConsentData: true
        };
        return _this;
    }
    ProfileForm.prototype.prePopulateDataFrom = function () {
        if (window.gigya.utils.toggles.isOn('mappedFieldsNoConflicts')) {
            return ['getAccountInfo', 'getAccountInfo.profile', 'getAccountInfo.loginIDs'];
        }
        return ['getAccountInfo', 'getAccountInfo.profile', 'getAccountInfo.subscriptions', 'getAccountInfo.loginIDs', 'getAccountInfo.preferences'];
    };
    ProfileForm.prototype.getNeededData = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.getNeededData.call(this),
            {
                getSchema: {
                    params: {},
                },
                getAccountInfo: {
                    params: {
                        include: 'loginIDs,emails,profile,data,subscriptions,preferences',
                        includeCommunications: 'all'
                    },
                },
                getProviders: {
                    params: {
                        sections: 'activeProviders',
                    },
                },
            },
        ]);
    };
    ProfileForm.prototype.schemaValidated = function () {
        return true;
    };
    ProfileForm.prototype.specialFields = function () {
        return window.gigya.utils.object.merge([_super.prototype.specialFields.call(this), exports.ProfileForm_CONSTS.specialFields]);
    };
    ProfileForm.prototype.getLoginProviders = function () {
        return LoginModes_1.LoginModes.reAuth.getLoginProviders(this._screenSet.data.apiData, this._screenSet.params, this._screenSet.data.regToken);
    };
    ProfileForm.prototype.submitApi = function () {
        return window.gigya.accounts.setAccountInfo;
    };
    ProfileForm.prototype.defaultSubmitParams = function () {
        var _a;
        var conflictHandling = this._screenSet.params.conflictHandling
            || LoginModes_1.ConflictHandling[this._screenSet.data.regToken ? LoginModes_1.ConflictHandling.saveProfileAndFail : LoginModes_1.ConflictHandling.fail];
        var lang = (_a = this._screenSet.params.lang) !== null && _a !== void 0 ? _a : null;
        if (window.gigya.utils.toggles.isOn('useFullLangCode')) {
            if (lang !== this._screenSet.getLangForScreenSet()) {
                window.gigya.logger.report('useFullLangCode usage with different language', {
                    paramLang: lang,
                    screenSetLang: this._screenSet.getLangForScreenSet()
                });
            }
            lang = this._screenSet.getLangForScreenSet();
        }
        return window.gigya.utils.object.merge([
            _super.prototype.defaultSubmitParams.call(this),
            {
                conflictHandling: conflictHandling,
                lang: lang
            },
        ]);
    };
    ProfileForm.prototype.getErrorKey = function (response) {
        var errorCode = Number(response.errorCode);
        if (errorCode === GSErrors.INVALID_PARAMETER_VALUE && response.validationErrors) {
            var isSubscriptionError = response.validationErrors.find(function (error) { return error.fieldName.startsWith('communication'); });
            if (isSubscriptionError) {
                return 'subscription_missing_dependson_fields';
            }
        }
        return _super.prototype.getErrorKey.call(this, response);
    };
    ProfileForm.prototype.isPasswordSchemaValidated = function () {
        return false;
    };
    ProfileForm.prototype.getExtraProfileFields = function (missingOnly) {
        var missingFields = _super.prototype.getExtraProfileFields.call(this, missingOnly);
        this.requiredProfileFields.forEach(function (field) {
            if (window.gigya.utils.array.indexOf(missingFields, field) === -1) {
                missingFields.push(field);
            }
        });
        return missingFields;
    };
    ProfileForm.CONSTS = exports.ProfileForm_CONSTS;
    return ProfileForm;
}(BaseForm_1.BaseForm));
exports.ProfileForm = ProfileForm;
BaseForm_1.BaseForm.addFormToLibrary(ProfileForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProgressionForm.ts":
/*!******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProgressionForm.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var RegisterForm_1 = __webpack_require__(/*! ./RegisterForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/RegisterForm.ts");
exports.ProgressionForm_CONSTS = {
    gigyaClass: 'gigya-lite-account-progression-form',
};
utils_1.DeepFreeze(exports.ProgressionForm_CONSTS);
var ProgressionForm = /** @class */ (function (_super) {
    tslib_1.__extends(ProgressionForm, _super);
    function ProgressionForm(screen, elForm, gigyaClass) {
        var _this = _super.call(this, screen, elForm, gigyaClass) || this;
        _this.initApiName = "initProgression";
        return _this;
    }
    ProgressionForm.prototype.defaultSubmitParams = function () {
        var _a;
        return window.gigya.utils.object.merge([
            _super.prototype.defaultSubmitParams.call(this),
            { email: (_a = this._screenSet.getApiData().initProgression) === null || _a === void 0 ? void 0 : _a.email }
        ]);
    };
    ProgressionForm.CONSTS = exports.ProgressionForm_CONSTS;
    return ProgressionForm;
}(RegisterForm_1.RegisterForm));
exports.ProgressionForm = ProgressionForm;
BaseForm_1.BaseForm.addFormToLibrary(ProgressionForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PushAuthMethodForm.ts":
/*!*********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PushAuthMethodForm.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
exports.PushAuthMethodForm_CONSTS = {
    gigyaClass: 'gigya-push-auth-method-form',
    authMethod: 'push'
};
utils_1.DeepFreeze(exports.PushAuthMethodForm_CONSTS);
var PushAuthMethodForm = /** @class */ (function (_super) {
    tslib_1.__extends(PushAuthMethodForm, _super);
    function PushAuthMethodForm() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._pollingStartTime = 0;
        _this._pollingLimit = _this._screenSet.params['isVerifiedPollingLimit'] || 1000 * 60 * 2; // default 2 min
        _this._pollingInterval = _this._screenSet.params['isVerifiedPollingInterval'] || 1000 * 3; // default 3 sec
        return _this;
    }
    PushAuthMethodForm.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var apiData;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        this.startPushVerificationFlow();
                        apiData = this._screenSet.getApiData();
                        window.gigya.accounts.auth.setPreferredLoginMethod(exports.PushAuthMethodForm_CONSTS.authMethod, apiData === null || apiData === void 0 ? void 0 : apiData.identifier);
                        return [2 /*return*/];
                }
            });
        });
    };
    PushAuthMethodForm.prototype.unlinkInstanceElement = function () {
        this.stopPolling();
        _super.prototype.unlinkInstanceElement.call(this);
    };
    PushAuthMethodForm.prototype.startPushVerificationFlow = function () {
        var _this = this;
        var apiData = this._screenSet.getApiData();
        window.gigya.accounts.auth.push.sendVerification({
            identifier: apiData === null || apiData === void 0 ? void 0 : apiData.identifier,
            callback: function (res) { return _this.onSendVerificationResponse(res); }
        });
        this.startPolling();
    };
    PushAuthMethodForm.prototype.submitApi = function () {
        var _this = this;
        return function (params, data, options, defaultParams) {
            window.gigya.accounts.auth.login({
                accessToken: _this._accessToken,
                callback: options.callback
            });
        };
    };
    PushAuthMethodForm.prototype.stopPolling = function () {
        this._pollingStartTime = 0;
        clearTimeout(this._timeoutId);
    };
    PushAuthMethodForm.prototype.onSendVerificationResponse = function (res) {
        if (res.errorCode == 0 && res.vToken) {
            this.dataStore.pushData.vToken = res.vToken;
        }
        else {
            window.gigya.logger.error('gigya.accounts.auth.push.sendVerification failed', { res: res });
        }
    };
    PushAuthMethodForm.prototype.checkIsVerified = function () {
        var _this = this;
        // vToken may change in the data-store by the form's controls ("resend" button)
        var vToken = this.dataStore.pushData.vToken;
        if (vToken) {
            window.gigya.accounts.auth.push.isVerified({ vToken: vToken, callback: function (res) { return _this.onIsVerifiedResponse(res); } });
        }
        else {
            this.onIsVerifiedResponse({ errorCode: GSErrors_1.GSErrors.OK });
        }
    };
    ;
    PushAuthMethodForm.prototype.onPushVerified = function (accessToken) {
        this._accessToken = accessToken;
        this.stopPolling();
        this.submit(); // automatically submits the form so it'll send the accounts.auth.login request
    };
    PushAuthMethodForm.prototype.onIsVerifiedResponse = function (res) {
        var _this = this;
        // success
        if (res.accessToken)
            return this.onPushVerified(res.accessToken);
        // error
        if (res.errorCode != GSErrors_1.GSErrors.OK)
            window.gigya.logger.error('gigya.accounts.auth.push.isVerified failed', { res: res });
        // keep polling
        this._timeoutId = window.setTimeout(function () {
            if (_this.shouldContinuePolling())
                _this.checkIsVerified();
        }, this._pollingInterval);
    };
    PushAuthMethodForm.prototype.shouldContinuePolling = function () {
        var now = window.gigya.utils.date.now();
        return (now - this._pollingStartTime) < this._pollingLimit; // polling limit not reached
    };
    PushAuthMethodForm.prototype.startPolling = function () {
        this._pollingStartTime = window.gigya.utils.date.now();
        this.checkIsVerified();
    };
    PushAuthMethodForm.CONSTS = exports.PushAuthMethodForm_CONSTS;
    return PushAuthMethodForm;
}(BaseForm_1.BaseForm));
exports.PushAuthMethodForm = PushAuthMethodForm;
BaseForm_1.BaseForm.addFormToLibrary(PushAuthMethodForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ReauthenticationForm.ts":
/*!***********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ReauthenticationForm.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var LoginModes_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes.ts");
exports.ReauthenticationForm_CONSTS = {
    gigyaClass: 'gigya-reauthentication-form',
};
utils_1.DeepFreeze(exports.ReauthenticationForm_CONSTS);
var ReauthenticationForm = /** @class */ (function (_super) {
    tslib_1.__extends(ReauthenticationForm, _super);
    function ReauthenticationForm(screen, elForm, gigyaClass) {
        var _this = _super.call(this, screen, elForm, gigyaClass) || this;
        _this.settings = {
            supportConsentData: true
        };
        return _this;
    }
    ReauthenticationForm.prototype.prePopulateData = function () {
        var populateData = _super.prototype.prePopulateData.call(this);
        var apiData = this._screenSet.getApiData();
        var loginIDs = apiData && apiData.getAccountInfo && apiData.getAccountInfo.loginIDs;
        if (loginIDs)
            populateData.loginID = loginIDs.username || (loginIDs.emails && loginIDs.emails[0]);
        return populateData;
    };
    ReauthenticationForm.prototype.submitApi = function () {
        return window.gigya.accounts.login;
    };
    ReauthenticationForm.prototype.getNeededData = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.getNeededData.call(this),
            {
                getSchema: {
                    params: {},
                },
                getAccountInfo: {
                    params: {
                        include: 'identities-active,loginIDs',
                    },
                    cache: false,
                },
            },
        ]);
    };
    ReauthenticationForm.prototype.getLoginProviders = function () {
        return LoginModes_1.LoginModes.reAuth.getLoginProviders(this._screenSet.data.apiData, this._screenSet.params, this._screenSet.data.regToken);
    };
    ReauthenticationForm.prototype.defaultSubmitParams = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.defaultSubmitParams.call(this),
            {
                loginMode: LoginModes_1.LoginModes.reAuth.name,
                loginID: 'no-one',
            },
        ]);
    };
    ReauthenticationForm.prototype.specialFields = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.specialFields.call(this),
            {
                password: true,
                captchaText: true,
                captchaToken: true,
                loginID: true,
            },
        ]);
    };
    ReauthenticationForm.CONSTS = exports.ReauthenticationForm_CONSTS;
    return ReauthenticationForm;
}(BaseForm_1.BaseForm));
exports.ReauthenticationForm = ReauthenticationForm;
BaseForm_1.BaseForm.addFormToLibrary(ReauthenticationForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/RegisterForm.ts":
/*!***************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/RegisterForm.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
exports.RegisterForm_CONSTS = {
    gigyaClass: 'gigya-register-form',
};
utils_1.DeepFreeze(exports.RegisterForm_CONSTS);
var RegisterForm = /** @class */ (function (_super) {
    tslib_1.__extends(RegisterForm, _super);
    function RegisterForm(screen, elForm, gigyaClass) {
        var _this = _super.call(this, screen, elForm, gigyaClass) || this;
        _this.initApiName = 'initRegistration';
        _this.settings = {
            supportConsentData: true
        };
        return _this;
    }
    RegisterForm.prototype.requiredFields = function () {
        var requiredFields = _super.prototype.requiredFields.call(this);
        requiredFields = window.gigya.utils.object.merge([requiredFields, this.specialFields()]);
        requiredFields['username'] = requiredFields['email'] = true;
        return requiredFields;
    };
    RegisterForm.prototype.prePopulateDataFrom = function () {
        return ['getAccountInfo', 'getAccountInfo.profile', 'getAccountInfo.loginIDs'];
    };
    RegisterForm.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // In the case when the user returns to the registration page without completing the "Complete registration" flow,
                        // the "Complete registration" flow still active and because of it "onAfterSubmit" event does not fire.
                        // Since we don't interesting in "Complete registration" flow anymore we need to cancel it, to get "onAfterSubmit" event
                        if (this.isFinalizeRegistrationFlowActive()) {
                            this.abortFinalizeRegistrationFlow();
                        }
                        return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RegisterForm.prototype.getNeededData = function () {
        var _a;
        var _this = this;
        return window.gigya.utils.object.merge([
            _super.prototype.getNeededData.call(this),
            (_a = {},
                _a[this.initApiName] = {
                    cache: false,
                    params: {},
                    responseHandler: function (res) {
                        window.gigya.logger.info("clearing account info from screenset cache");
                        var apiData = _this._screenSet.getApiData();
                        delete apiData.getAccountInfo;
                        return res; // pass result on to the screenSet
                    },
                },
                _a),
            {
                getSchema: {
                    params: {},
                },
            }
        ]);
    };
    RegisterForm.prototype.schemaValidated = function () {
        return true;
    };
    RegisterForm.prototype.specialFields = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.specialFields.call(this),
            {
                username: true,
                email: true,
                password: true,
                passwordRetype: true,
                secretQuestion: true,
                secretAnswer: true,
                captchaText: true,
                captchaToken: true,
                regSource: true,
                siteUID: true,
            },
        ]);
    };
    RegisterForm.prototype.performSubmit = function (oParams) {
        if (!this._screenSet.doesScreenHaveForms(this.successScreen)) {
            oParams.finalizeRegistration = true;
        }
        else {
            this._screenSet.data.finalizeRegistrationNeeded = true;
        }
        return _super.prototype.performSubmit.call(this, oParams);
    };
    RegisterForm.prototype.submitApi = function () {
        return window.gigya.accounts.register;
    };
    RegisterForm.prototype.queryStringToSubmitParamMap = function () {
        return {
            gig_email: 'email',
        };
    };
    RegisterForm.prototype.defaultSubmitParams = function () {
        // initial accounts.register submit params
        var registerFormSubmitParams = {
            include: window.gigya.utils.stringUtils.mergeCommaSeparatedValues('profile,data,emails,loginIDs,subscriptions,preferences', this._screenSet.params.include),
        };
        // use full lang-code is opted-in
        if (window.gigya.utils.toggles.isOn('useFullLangCodeInRegistration') || window.gigya.utils.toggles.isOn('useFullLangCode')) {
            var screenSetLang = this._screenSet.getLangForScreenSet();
            if (this._screenSet.params.lang !== screenSetLang) {
                window.gigya.logger.report('useFullLangCode usage with different language', {
                    paramLang: this._screenSet.params.lang,
                    screenSetLang: screenSetLang
                });
            }
            registerFormSubmitParams.lang = screenSetLang;
        }
        return window.gigya.utils.object.merge([
            _super.prototype.defaultSubmitParams.call(this),
            registerFormSubmitParams
        ]);
    };
    RegisterForm.prototype.isFinalizeRegistrationFlowActive = function () {
        var _a, _b;
        return (_b = (_a = this._screenSet) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.finalizeRegistrationNeeded;
    };
    RegisterForm.prototype.abortFinalizeRegistrationFlow = function () {
        this._screenSet.data.finalizeRegistrationNeeded = false;
    };
    RegisterForm.CONSTS = exports.RegisterForm_CONSTS;
    return RegisterForm;
}(BaseForm_1.BaseForm));
exports.RegisterForm = RegisterForm;
BaseForm_1.BaseForm.addFormToLibrary(RegisterForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ResendVerificationCodeForm.ts":
/*!*****************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ResendVerificationCodeForm.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
exports.ResendVerificationCodeForm_CONSTS = {
    gigyaClass: 'gigya-resend-verification-code-form',
};
utils_1.DeepFreeze(exports.ResendVerificationCodeForm_CONSTS);
var ResendVerificationCodeForm = /** @class */ (function (_super) {
    tslib_1.__extends(ResendVerificationCodeForm, _super);
    function ResendVerificationCodeForm(screen, elForm, gigyaClass) {
        return _super.call(this, screen, elForm, gigyaClass) || this;
    }
    ResendVerificationCodeForm.prototype.getNeededData = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.getNeededData.call(this),
            {
                getAccountInfo: {
                    params: {
                        include: 'emails',
                    },
                },
            },
        ]);
    };
    ResendVerificationCodeForm.prototype.specialFields = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.specialFields.call(this),
            {
                email: true,
            },
        ]);
    };
    ResendVerificationCodeForm.prototype.submitApi = function () {
        return window.gigya.accounts.resendVerificationCode;
    };
    ResendVerificationCodeForm.CONSTS = exports.ResendVerificationCodeForm_CONSTS;
    return ResendVerificationCodeForm;
}(BaseForm_1.BaseForm));
exports.ResendVerificationCodeForm = ResendVerificationCodeForm;
BaseForm_1.BaseForm.addFormToLibrary(ResendVerificationCodeForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ResetPasswordForm.ts":
/*!********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ResetPasswordForm.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var arrayUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/array */ "./src/core/Gigya.Js/app/Utils/array.ts");
exports.ResetPasswordForm_CONSTS = {
    gigyaClass: 'gigya-reset-password-form'
};
utils_1.DeepFreeze(exports.ResetPasswordForm_CONSTS);
var ResetPasswordForm = /** @class */ (function (_super) {
    tslib_1.__extends(ResetPasswordForm, _super);
    function ResetPasswordForm(screen, elForm, gigyaClass) {
        var _this = _super.call(this, screen, elForm, gigyaClass) || this;
        _this.filters.push({
            filterOutWidgetsToSend: function (formData) {
                if (formData['securityFields'] && formData['securityFields']['passwordRetype'])
                    delete formData['securityFields']['passwordRetype'];
                return formData;
            }
        });
        return _this;
    }
    ResetPasswordForm.prototype.specialFields = function () {
        return window.gigya.utils.object.merge([
            _super.prototype.specialFields.call(this),
            {
                loginID: true,
                newPassword: true,
                email: true,
                secretAnswer: true
            }
        ]);
    };
    ResetPasswordForm.prototype.getErrorKey = function (response) {
        if (response.errorCode === GSErrors_1.GSErrors.INVALID_TOKEN) {
            return 'invalid_password_reset_token';
        }
        return _super.prototype.getErrorKey.call(this, response);
    };
    ResetPasswordForm.prototype.schemaValidated = function () {
        // Necessary to show error message for password complexity.
        // PasswordInputs.ts will not generate password complexity error callback if schemaValidated returns false.
        return !!this.getField('newPassword');
    };
    ResetPasswordForm.prototype.profileObjectName = function () {
        return 'securityFields';
    };
    ResetPasswordForm.prototype.submitApi = function () {
        return window.gigya.accounts.resetPassword;
    };
    ResetPasswordForm.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        this._screenSet.data.finalizeRegistrationNeeded = false;
                        return [2 /*return*/];
                }
            });
        });
    };
    ResetPasswordForm.prototype.prePopulateData = function () {
        var populateData = _super.prototype.prePopulateData.call(this);
        populateData.loginID = this._screenSet.getConflictingAccount() ? this.getConflictingAccountLoginId() : this.getLoginId();
        return populateData;
    };
    ResetPasswordForm.prototype.defaultSubmitParams = function () {
        var params = _super.prototype.defaultSubmitParams.call(this);
        // Check for password field in form. Return default submit params if password field is not present in form.
        // In the future, we may divide into separate forms.
        if (!this.getField('newPassword')) {
            return params;
        }
        // Password field is in form, so we care about the password reset token.
        if (this.passwordResetToken) {
            params.passwordResetToken = this.passwordResetToken;
        }
        return params;
    };
    ResetPasswordForm.prototype.getLoginId = function () {
        var _a, _b, _c;
        var loginIDs = this._screenSet.getLoginIds();
        if (!loginIDs) {
            return null;
        }
        var profileEmail = (_a = this._screenSet.getProfile()) === null || _a === void 0 ? void 0 : _a.email;
        return (_c = (_b = loginIDs.username) !== null && _b !== void 0 ? _b : arrayUtils.first(loginIDs.emails, function (e) { return e === profileEmail; })) !== null && _c !== void 0 ? _c : loginIDs.emails[0];
    };
    ResetPasswordForm.prototype.getConflictingAccountLoginId = function () {
        var _a;
        var conflictingAccount = this._screenSet.getConflictingAccount();
        return conflictingAccount.loginID || ((_a = conflictingAccount.emails) === null || _a === void 0 ? void 0 : _a[0]);
    };
    Object.defineProperty(ResetPasswordForm.prototype, "passwordResetToken", {
        get: function () {
            var _a, _b, _c, _d, _e;
            return ((_b = (_a = this._screenSet) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.passwordResetToken) || ((_e = (_d = (_c = this._screenSet) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.otpData) === null || _e === void 0 ? void 0 : _e.accessToken) ||
                window.gigya.utils.URL.getParamValueFromURL('pwrt', window.location.search, undefined);
        },
        enumerable: true,
        configurable: true
    });
    ResetPasswordForm.CONSTS = exports.ResetPasswordForm_CONSTS;
    return ResetPasswordForm;
}(BaseForm_1.BaseForm));
exports.ResetPasswordForm = ResetPasswordForm;
BaseForm_1.BaseForm.addFormToLibrary(ResetPasswordForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/TfaForm.ts":
/*!**********************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/TfaForm.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var CustomForm_1 = __webpack_require__(/*! ./CustomForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/CustomForm.ts");
exports.TfaForm_CONSTS = {
    gigyaClass: 'gigya-tfa-form',
};
var TfaForm = /** @class */ (function (_super) {
    tslib_1.__extends(TfaForm, _super);
    function TfaForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TfaForm.CONSTS = exports.TfaForm_CONSTS;
    return TfaForm;
}(CustomForm_1.CustomForm));
exports.TfaForm = TfaForm;
BaseForm_1.BaseForm.addFormToLibrary(TfaForm);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/index.ts":
/*!********************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/index.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
exports.LinkAccountsForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LinkAccountsForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LinkAccountsForm.ts");
exports.LoginForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LoginForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LoginForm.ts");
exports.PasswordlessLoginForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessLoginForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessLoginForm.ts");
exports.PasswordlessRegisterForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessRegisterForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessRegisterForm.ts");
exports.AuthMethodsForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/AuthMethodsForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/AuthMethodsForm.ts");
exports.PasswordAuthMethodForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordAuthMethodForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordAuthMethodForm.ts");
exports.PushAuthMethodForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PushAuthMethodForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PushAuthMethodForm.ts");
exports.MagicLinkAuthMethodForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/MagicLinkAuthMethodForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/MagicLinkAuthMethodForm.ts");
exports.EmailCodeAuthMethodForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/EmailCodeAuthMethodForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/EmailCodeAuthMethodForm.ts");
exports.NewsletterSignupForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/NewsletterSignupForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/NewsletterSignupForm.ts");
exports.ProfileForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProfileForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProfileForm.ts");
exports.ReAuthenticationForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ReauthenticationForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ReauthenticationForm.ts");
exports.RegisterForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/RegisterForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/RegisterForm.ts");
exports.ProgressionForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProgressionForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProgressionForm.ts");
exports.ResendVerificationCodeForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ResendVerificationCodeForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ResendVerificationCodeForm.ts");
exports.ResetPasswordForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ResetPasswordForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ResetPasswordForm.ts");
exports.OrgRegisterForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OrganizationRegistrationForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OrganizationRegistrationForm.ts");
exports.OtpSendCodeForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpSendCodeForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpSendCodeForm.ts");
exports.OtpUpdateForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpUpdateForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpUpdateForm.ts");
exports.OtpVerifyForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpVerifyForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpVerifyForm.ts");
exports.OtpLoginForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpLoginForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpLoginForm.ts");
exports.DeviceCodeForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/DeviceCodeForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/DeviceCodeForm.ts");
exports.CustomForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/CustomForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/CustomForm.ts");
exports.TfaForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/TfaForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/TfaForm.ts");
exports.OneAccountSubscriptionForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OneAccountSubscriptionForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OneAccountSubscriptionForm.ts");


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/GroupVariantProvider.ts":
/*!*****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/GroupVariantProvider.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(/*! ./utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var _isEmpty = __webpack_require__(/*! lodash.isempty */ "../node_modules/lodash.isempty/index.js");
var SiteData_1 = __webpack_require__(/*! ../../../core/Gigya.Js/app/Services/SiteData */ "./src/core/Gigya.Js/app/Services/SiteData.ts");
function getGroupVariant(screens, screenSetId, isGroupActive, groupId) {
    var groupScreens = {};
    var originalGroupScreen;
    // Extract all screens associated with the groupId
    utils_1.ForEachProp(screens, function (screen) {
        if (screen.variantGroupId === groupId && screen.variantPercentage) {
            groupScreens[screen.ID] = { weight: screen.variantPercentage, testId: screen.abTestId };
            if (screen.isOriginalVariant) {
                originalGroupScreen = screen;
            }
        }
    });
    // If there are no screen return
    if (_isEmpty(groupScreens))
        return;
    if (!isGroupActive) {
        return originalGroupScreen;
    }
    // If variant exist in the user preferences return the screen
    var testId = Object.values(groupScreens)[0].testId;
    var screenVariant = SiteData_1.siteData === null || SiteData_1.siteData === void 0 ? void 0 : SiteData_1.siteData.getScreenVariant(screenSetId, groupId, testId);
    if (screenVariant && groupScreens[screenVariant]) {
        return screens[screenVariant];
    }
    // Evaluate new variant and save it in the user preferences
    var variantScreenId = evaluateNewVariant(groupScreens);
    SiteData_1.siteData === null || SiteData_1.siteData === void 0 ? void 0 : SiteData_1.siteData.setScreenVariant(screenSetId, groupId, testId, variantScreenId);
    return screens[variantScreenId];
}
exports.getGroupVariant = getGroupVariant;
function evaluateNewVariant(groupScreens) {
    var _a, _b;
    var total = Object.keys(groupScreens).reduce(function (acc, screen) { var _a; return acc + ((_a = groupScreens[screen]) === null || _a === void 0 ? void 0 : _a.weight); }, 0);
    var random = Math.random();
    var currentValue = 0;
    for (var screen in groupScreens) {
        if (currentValue < random && random < (currentValue + ((_a = groupScreens[screen]) === null || _a === void 0 ? void 0 : _a.weight) / total)) {
            return screen;
        }
        currentValue += ((_b = groupScreens[screen]) === null || _b === void 0 ? void 0 : _b.weight) / total;
    }
}
exports.evaluateNewVariant = evaluateNewVariant;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/BaseApiHandler.ts":
/*!*******************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/BaseApiHandler.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_Object_dot_assign) {Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var ApiLinkWidget_1 = __webpack_require__(/*! ../../Widgets/ApiLinkWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ApiLinkWidget.ts");
var BaseApiHandler = /** @class */ (function () {
    function BaseApiHandler(screen, _serverApi) {
        this.screen = screen;
        this._serverApi = _serverApi;
    }
    BaseApiHandler.prototype.send = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var reqParams, captchaData;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        reqParams = __webpack_provided_Object_dot_assign({}, this.screen._screenSet.data.params || {}, this.getRequestParams());
                        return [4 /*yield*/, this.screen.getCaptchaData()];
                    case 1:
                        captchaData = _a.sent();
                        if (captchaData) {
                            reqParams['captchaType'] = captchaData.type;
                            reqParams['captchaToken'] = captchaData.token;
                        }
                        return [2 /*return*/, new gigya.Promise(function (resolve, reject) {
                                reqParams['callback'] = function (response) {
                                    _this.handleResponse(response);
                                    resolve(response);
                                };
                                try {
                                    _this._serverApi.run(reqParams);
                                }
                                catch (e) {
                                    reject(e);
                                }
                            })];
                }
            });
        });
    };
    Object.defineProperty(BaseApiHandler.prototype, "methodName", {
        get: function () {
            return this._serverApi.methodName;
        },
        enumerable: true,
        configurable: true
    });
    BaseApiHandler.getHandler = function (methodName, screen, serverApis) {
        var handler = this._handlers[methodName] || this._defaultHandler;
        if (handler) {
            var serverApi = serverApis.filter(function (api) { return api.methodName === methodName; })[0];
            if (!serverApi) {
                window.gigya.logger.warn("[" + ApiLinkWidget_1.ApiLink_CONSTS.attributeName + "]: unable to create api link for: \"" + methodName + "\", the method is not supported");
                return null;
            }
            return new handler(screen, serverApi);
        }
        return null;
    };
    BaseApiHandler.addHandler = function (methodName, handler) {
        if (this._handlers[methodName]) {
            throw new Error("Can't re-register api link handler, " + methodName + " handler already exist");
        }
        this._handlers[methodName] = handler;
    };
    BaseApiHandler.addDefaultHandler = function (handler) {
        if (this._defaultHandler) {
            window.gigya.logger.error("Can't register default API handler, one is already registered");
            return;
        }
        this._defaultHandler = handler;
    };
    BaseApiHandler._handlers = {};
    return BaseApiHandler;
}());
exports.BaseApiHandler = BaseApiHandler;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js")["__assign"]))

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/SendMagicLinkHandler.ts":
/*!*************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/SendMagicLinkHandler.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var constants_1 = __webpack_require__(/*! src/accounts/constants */ "./src/accounts/constants.ts");
var magic_link_1 = __webpack_require__(/*! ../../Constants/magic-link */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Constants/magic-link.ts");
var BaseApiHandler_1 = __webpack_require__(/*! ./BaseApiHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/BaseApiHandler.ts");
var SendMagicLinkHandler = /** @class */ (function (_super) {
    tslib_1.__extends(SendMagicLinkHandler, _super);
    function SendMagicLinkHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SendMagicLinkHandler.prototype.getRequestParams = function () {
        var apiData = this.screen._screenSet.getApiData() || {};
        var params = {
            email: apiData === null || apiData === void 0 ? void 0 : apiData.identifier
        };
        params['context'] = this.getContextObject();
        return params;
    };
    SendMagicLinkHandler.prototype.getContextObject = function () {
        var lang = this.screen._screenSet.params.lang;
        var context = window.gigya.utils.object.merge([
            { lang: lang },
            this.screen._screenSet.params.context,
            window.gigya.utils.URL.getContextParamsFromUrl({ url: document.location.href, unacceptableParams: magic_link_1.MAGIC_LINK_UNACCEPTABLE_PARAMS_REGEX })
        ]);
        return window.gigya.utils.object.addPrefixToProperties(context, constants_1.GIGYA_PARAM_PREFIX);
    };
    SendMagicLinkHandler.prototype.handleResponse = function (response) { };
    return SendMagicLinkHandler;
}(BaseApiHandler_1.BaseApiHandler));
exports.SendMagicLinkHandler = SendMagicLinkHandler;
BaseApiHandler_1.BaseApiHandler.addHandler('accounts.auth.magiclink.email.send', SendMagicLinkHandler);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/SendOtpCodeHandler.ts":
/*!***********************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/SendOtpCodeHandler.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseApiHandler_1 = __webpack_require__(/*! ./BaseApiHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/BaseApiHandler.ts");
var SendOtpCodeHandler = /** @class */ (function (_super) {
    tslib_1.__extends(SendOtpCodeHandler, _super);
    function SendOtpCodeHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SendOtpCodeHandler.prototype.getRequestParams = function () {
        var _a;
        var apiData = this.screen._screenSet.getApiData();
        var accountInfo = (apiData === null || apiData === void 0 ? void 0 : apiData.getAccountInfo) || {};
        accountInfo.email = (apiData === null || apiData === void 0 ? void 0 : apiData.identifier) || (accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.email) || ((_a = accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.profile) === null || _a === void 0 ? void 0 : _a.email);
        var reqParams = {};
        if (accountInfo.phoneNumber) {
            reqParams['phoneNumber'] = accountInfo.phoneNumber;
        }
        else if (accountInfo.email) {
            reqParams['email'] = accountInfo.email;
        }
        return reqParams;
    };
    SendOtpCodeHandler.prototype.handleResponse = function (response) {
        // Only override vToken when it is received in the response
        if (response && response['vToken'])
            this.screen._screenSet.data.otpData.vToken = response['vToken'];
    };
    return SendOtpCodeHandler;
}(BaseApiHandler_1.BaseApiHandler));
exports.SendOtpCodeHandler = SendOtpCodeHandler;
BaseApiHandler_1.BaseApiHandler.addHandler('accounts.otp.sendCode', SendOtpCodeHandler);
BaseApiHandler_1.BaseApiHandler.addHandler('accounts.auth.otp.email.sendCode', SendOtpCodeHandler);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/SendVerificationHandler.ts":
/*!****************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/SendVerificationHandler.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseApiHandler_1 = __webpack_require__(/*! ./BaseApiHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/BaseApiHandler.ts");
var SendVerificationHandler = /** @class */ (function (_super) {
    tslib_1.__extends(SendVerificationHandler, _super);
    function SendVerificationHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SendVerificationHandler.prototype.getRequestParams = function () {
        var apiData = this.screen._screenSet.getApiData() || {};
        return { identifier: apiData === null || apiData === void 0 ? void 0 : apiData.identifier };
    };
    SendVerificationHandler.prototype.handleResponse = function (response) {
        if (response.errorCode == 0 && response.vToken) {
            this.screen._screenSet.data.pushData.vToken = response.vToken;
        }
        else {
            window.gigya.logger.error('gigya.accounts.auth.push.sendVerification failed');
        }
    };
    return SendVerificationHandler;
}(BaseApiHandler_1.BaseApiHandler));
exports.SendVerificationHandler = SendVerificationHandler;
BaseApiHandler_1.BaseApiHandler.addHandler('accounts.auth.push.sendVerification', SendVerificationHandler);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/StandardHandler.ts":
/*!********************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/StandardHandler.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseApiHandler_1 = __webpack_require__(/*! ./BaseApiHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/BaseApiHandler.ts");
var StandardApiHandler = /** @class */ (function (_super) {
    tslib_1.__extends(StandardApiHandler, _super);
    function StandardApiHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StandardApiHandler.prototype.getRequestParams = function () {
        return {};
    };
    StandardApiHandler.prototype.handleResponse = function (response) { };
    return StandardApiHandler;
}(BaseApiHandler_1.BaseApiHandler));
exports.StandardApiHandler = StandardApiHandler;
BaseApiHandler_1.BaseApiHandler.addDefaultHandler(StandardApiHandler);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/index.ts":
/*!**********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/index.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./BaseApiHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/BaseApiHandler.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./StandardHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/StandardHandler.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./SendOtpCodeHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/SendOtpCodeHandler.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./SendVerificationHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/SendVerificationHandler.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./SendMagicLinkHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/SendMagicLinkHandler.ts"), exports);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/BaseCaptchaHandler.ts":
/*!***************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/BaseCaptchaHandler.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var CaptchaProvider;
(function (CaptchaProvider) {
    CaptchaProvider["GOOGLE"] = "Google";
    CaptchaProvider["FUNCAPTCHA"] = "FunCaptcha";
})(CaptchaProvider = exports.CaptchaProvider || (exports.CaptchaProvider = {}));
exports.CaptchaHandlers = {};
var CaptchaMode;
(function (CaptchaMode) {
    CaptchaMode["visible"] = "visible";
    CaptchaMode["invisible"] = "invisible";
})(CaptchaMode = exports.CaptchaMode || (exports.CaptchaMode = {}));
var nextCaptchaID = 0;
var BaseCaptchaHandler = /** @class */ (function () {
    function BaseCaptchaHandler(params) {
        if (params === void 0) { params = {}; }
        this.params = params;
        this._ID = "gig_captcha_" + ++nextCaptchaID;
    }
    BaseCaptchaHandler.prototype.init = function (hostElement) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.siteKey) {
                            window.gigya.logger.warn('Missing captcha configuration');
                            return [2 /*return*/, false];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.loadProvider()];
                    case 2:
                        _a.sent();
                        this.render(hostElement);
                        return [2 /*return*/, true];
                    case 3:
                        e_1 = _a.sent();
                        window.gigya.logger.warn(e_1.message || e_1);
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    BaseCaptchaHandler.prototype.getID = function () {
        return this._ID;
    };
    BaseCaptchaHandler.prototype.getToken = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.captchaToken;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.lazyExecuteOrFail()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2: return [2 /*return*/, _a];
                }
            });
        });
    };
    BaseCaptchaHandler.prototype.getType = function () {
        return this.captchaType;
    };
    BaseCaptchaHandler.prototype.reset = function () {
        this.captchaToken = null;
    };
    Object.defineProperty(BaseCaptchaHandler.prototype, "siteKey", {
        get: function () {
            return this.isInvisible ? this.invisibleSiteKey : this.visibleSiteKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseCaptchaHandler.prototype, "isInvisible", {
        get: function () {
            return this.params.mode === CaptchaMode.invisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseCaptchaHandler.prototype, "callbackID", {
        get: function () {
            return "gig_" + this.provider + "_onLoad";
        },
        enumerable: true,
        configurable: true
    });
    return BaseCaptchaHandler;
}());
exports.BaseCaptchaHandler = BaseCaptchaHandler;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/FunCaptchaHandler.ts":
/*!**************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/FunCaptchaHandler.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseCaptchaHandler_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/BaseCaptchaHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/BaseCaptchaHandler.ts");
var global = window;
var funCaptchaLoad;
var FunCaptchaHandler = /** @class */ (function (_super) {
    tslib_1.__extends(FunCaptchaHandler, _super);
    function FunCaptchaHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FunCaptchaHandler.prototype.render = function (hostElement) {
        var _this = this;
        this.challengeExecutor = new gigya.Promise(function (resolve) {
            var callback = function () {
                var tokenInput = hostElement.querySelector('[name="fc-token"]');
                _this.captchaToken = tokenInput && tokenInput.value;
                resolve(_this.captchaToken);
            };
            var id = _this.getID() + "_" + Date.now();
            hostElement.innerHTML = "<div id=\"" + id + "\"></div>";
            _this.challengeRef = new FunCaptcha({
                public_key: _this.siteKey,
                language: _this.params.lang,
                target_html: id,
                callback: callback,
            });
        });
    };
    FunCaptchaHandler.prototype.reset = function () {
        if (typeof FunCaptcha != 'undefined' && this.challengeRef && this.captchaToken) {
            this.challengeRef.refresh_session();
        }
        _super.prototype.reset.call(this);
    };
    FunCaptchaHandler.prototype.loadProvider = function () {
        var _this = this;
        if (typeof FunCaptcha !== 'undefined')
            return;
        else if (!funCaptchaLoad) {
            funCaptchaLoad = new gigya.Promise(function (resolve, reject) {
                global[_this.callbackID] = function () {
                    delete global[_this.callbackID];
                    typeof FunCaptcha !== 'undefined' ? resolve() : reject("error while trying to load FunCaptcha");
                };
                window.gigya.utils.script.load(_this.providerURL, reject);
            });
        }
        return funCaptchaLoad;
    };
    FunCaptchaHandler.prototype.lazyExecuteOrFail = function () {
        // FunCaptcha don't have lazy execution as - for example - google's invisible captcha
        throw new Error('captchaNeeded');
    };
    Object.defineProperty(FunCaptchaHandler.prototype, "provider", {
        get: function () {
            return BaseCaptchaHandler_1.CaptchaProvider.FUNCAPTCHA;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunCaptchaHandler.prototype, "captchaType", {
        get: function () {
            return "FunCaptcha";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunCaptchaHandler.prototype, "providerURL", {
        get: function () {
            return "//funcaptcha.com/fc/api/?onload=" + this.callbackID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunCaptchaHandler.prototype, "invisibleSiteKey", {
        get: function () {
            return window.gigya.partnerSettings.funCaptcha && window.gigya.partnerSettings.funCaptcha.siteKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FunCaptchaHandler.prototype, "visibleSiteKey", {
        get: function () {
            return window.gigya.partnerSettings.funCaptcha && window.gigya.partnerSettings.funCaptcha.siteKey;
        },
        enumerable: true,
        configurable: true
    });
    return FunCaptchaHandler;
}(BaseCaptchaHandler_1.BaseCaptchaHandler));
exports.FunCaptchaHandler = FunCaptchaHandler;
BaseCaptchaHandler_1.CaptchaHandlers[BaseCaptchaHandler_1.CaptchaProvider.FUNCAPTCHA] = FunCaptchaHandler;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/GoogleCaptchaHandler.ts":
/*!*****************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/GoogleCaptchaHandler.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseCaptchaHandler_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/BaseCaptchaHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/BaseCaptchaHandler.ts");
var uniqueGoogleLocaleCodes = {
    br: 'bg',
    he: 'iw',
    'es-mx': 'es-419',
    tl: 'fil',
};
var GoogleCaptchaHandler = /** @class */ (function (_super) {
    tslib_1.__extends(GoogleCaptchaHandler, _super);
    function GoogleCaptchaHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoogleCaptchaHandler.prototype.render = function (hostElement) {
        var _this = this;
        var callback = function (token) {
            _this.captchaToken = token;
            _this._challengeResolver(token);
        };
        var recaptchaParams = {
            sitekey: this.siteKey,
            callback: callback,
            type: this.params['type'],
            theme: this.params['theme'],
            size: this.params['size'],
            lang: this._lang,
            'expired-callback': function () {
                _this.reset();
            }
        };
        if (this.isInvisible) {
            recaptchaParams.badge = this.params['badge'];
            recaptchaParams.size = 'invisible';
        }
        var id = this.getID() + "_" + Date.now();
        hostElement.innerHTML = "<div id=\"" + id + "\"></div>";
        this._createChallengeExecutor();
        this.challengeRef = window.gigya.utils.recaptcha.getInstance({
            isEnterprise: this.isEnterprise
        }).render(id, recaptchaParams);
    };
    GoogleCaptchaHandler.prototype.reset = function () {
        var params = {
            isEnterprise: this.isEnterprise
        };
        var instance = window.gigya.utils.recaptcha.getInstance(params);
        if (typeof (instance) !== 'undefined' && typeof this.challengeRef !== 'undefined') {
            instance.reset(this.challengeRef);
            this._createChallengeExecutor();
        }
        _super.prototype.reset.call(this);
    };
    GoogleCaptchaHandler.prototype.loadProvider = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, window.gigya.utils.recaptcha.load({
                            siteKey: this.captchaEnterpriseKey || this.captchaV3Key || this.siteKey,
                            type: this.LoadingCaptchaType,
                            callbackID: this.callbackID,
                            lang: this._lang,
                            isEnterprise: this.isEnterprise
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    GoogleCaptchaHandler.prototype.lazyExecuteOrFail = function () {
        if (this.isInvisible) {
            window.gigya.utils.recaptcha.getInstance({
                isEnterprise: this.isEnterprise
            }).execute(this.challengeRef);
            return this.challengeExecutor;
        }
        throw new Error('captchaNeeded');
    };
    Object.defineProperty(GoogleCaptchaHandler.prototype, "provider", {
        get: function () {
            return BaseCaptchaHandler_1.CaptchaProvider.GOOGLE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleCaptchaHandler.prototype, "captchaType", {
        get: function () {
            return this.isInvisible ? 'invisible' : "reCaptchaV2";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleCaptchaHandler.prototype, "LoadingCaptchaType", {
        get: function () {
            if (this.captchaEnterpriseKey) {
                return GoogleCaptchaHandler.CAPTCHA_ENTERPRISE_TYPE;
            }
            if (this.captchaV3Key) {
                return GoogleCaptchaHandler.CAPTCHA_V3_TYPE;
            }
            return this.captchaType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleCaptchaHandler.prototype, "providerURL", {
        get: function () {
            return "//" + this._domain + "/recaptcha/api.js?" + this.loadQueryParams;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleCaptchaHandler.prototype, "loadQueryParams", {
        get: function () {
            if (this.captchaV3Key) {
                return "render=" + this.captchaV3Key;
            }
            return "render=explicit&onload=" + this.callbackID + "&hl=" + this._lang;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleCaptchaHandler.prototype, "isEnterprise", {
        get: function () {
            return !!this.captchaEnterpriseKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleCaptchaHandler.prototype, "invisibleSiteKey", {
        get: function () {
            var _a, _b;
            return (_b = (_a = window.gigya.partnerSettings.invisibleRecaptcha) === null || _a === void 0 ? void 0 : _a.siteKey) === null || _b === void 0 ? void 0 : _b.trim();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleCaptchaHandler.prototype, "visibleSiteKey", {
        get: function () {
            var _a, _b;
            return (_b = (_a = window.gigya.partnerSettings.recaptchaV2) === null || _a === void 0 ? void 0 : _a.siteKey) === null || _b === void 0 ? void 0 : _b.trim();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleCaptchaHandler.prototype, "captchaV3Key", {
        get: function () {
            var _a, _b;
            return (_b = (_a = window.gigya.partnerSettings.recaptchaV3) === null || _a === void 0 ? void 0 : _a.siteKey) === null || _b === void 0 ? void 0 : _b.trim();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleCaptchaHandler.prototype, "captchaEnterpriseKey", {
        get: function () {
            var _a, _b, _c;
            return (_c = (_b = (_a = window.gigya.partnerSettings) === null || _a === void 0 ? void 0 : _a.recaptchaEnterprise) === null || _b === void 0 ? void 0 : _b.siteKey) === null || _c === void 0 ? void 0 : _c.trim();
        },
        enumerable: true,
        configurable: true
    });
    GoogleCaptchaHandler.prototype._createChallengeExecutor = function () {
        var _this = this;
        this.challengeExecutor = new gigya.Promise(function (resolve) {
            _this._challengeResolver = resolve;
        });
    };
    Object.defineProperty(GoogleCaptchaHandler.prototype, "_domain", {
        get: function () {
            var isCNDataCenter = window.gigya.dataCenter.toLowerCase().indexOf('cn1') === 0;
            return this.params['googleCaptchaDomain'] || (isCNDataCenter ? GoogleCaptchaHandler.RECAPTCHA_DOMAIN : GoogleCaptchaHandler.GOOGLE_DOMAIN);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleCaptchaHandler.prototype, "_lang", {
        get: function () {
            return uniqueGoogleLocaleCodes[this.params.lang] || this.params.lang;
        },
        enumerable: true,
        configurable: true
    });
    GoogleCaptchaHandler.RECAPTCHA_DOMAIN = 'www.recaptcha.net';
    GoogleCaptchaHandler.GOOGLE_DOMAIN = 'www.google.com';
    GoogleCaptchaHandler.CAPTCHA_ENTERPRISE_TYPE = 'reCaptchaEnterpriseScore';
    GoogleCaptchaHandler.CAPTCHA_V3_TYPE = 'reCaptchaV3';
    return GoogleCaptchaHandler;
}(BaseCaptchaHandler_1.BaseCaptchaHandler));
exports.GoogleCaptchaHandler = GoogleCaptchaHandler;
BaseCaptchaHandler_1.CaptchaHandlers[BaseCaptchaHandler_1.CaptchaProvider.GOOGLE] = GoogleCaptchaHandler;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/index.ts":
/*!***********************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/index.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! ./ApiHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/ApiHandler/index.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./CaptchaHandler/BaseCaptchaHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/BaseCaptchaHandler.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./CaptchaHandler/FunCaptchaHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/FunCaptchaHandler.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./CaptchaHandler/GoogleCaptchaHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/GoogleCaptchaHandler.ts"), exports);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/AddressInput.ts":
/*!****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/AddressInput.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var Errors_1 = __webpack_require__(/*! ../Errors */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors.ts");
var typeahead_input_1 = __webpack_require__(/*! ../typeahead/typeahead-input */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/typeahead/typeahead-input.ts");
var geo_location_1 = __webpack_require__(/*! ../typeahead/geo-location */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/typeahead/geo-location.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var AddressInputConsts = {
    gigyaAddressInputAttr: "typeahead",
    allowTypeAheadLocation: "typeahead-location",
    defaultCountrySchemaField: "typeahead-country-schema"
};
var AddressInput = /** @class */ (function (_super) {
    tslib_1.__extends(AddressInput, _super);
    function AddressInput(context) {
        var _this = _super.call(this, context) || this;
        _this.currentSuggestions = [];
        _this.geolocation = new geo_location_1.GeoLocation();
        _this.minCharactersBeforeServer = 3;
        context.element.setAttribute("autocomplete", "off");
        return _this;
    }
    AddressInput.FORM_TYPE_CRITERIA = function (context) {
        return context.element.getAttribute(AddressInputConsts.gigyaAddressInputAttr) === 'true';
    };
    AddressInput.prototype.allowGeolocation = function () {
        var _a;
        return ((_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.getAttribute(AddressInputConsts.allowTypeAheadLocation)) === 'true';
    };
    AddressInput.prototype.linkInstanceElement = function (parent) {
        var _this = this;
        var _a;
        _super.prototype.linkInstanceElement.call(this, parent);
        if (!this.isSubTypAddress) {
            this.geolocation = null;
            //how to deactivate typeahead
        }
        this.init(this.instanceElement, function () { return _this._form.onInputChange(_this, false); }, {
            minimumCharacters: this.minCharactersBeforeServer,
            afterSelectCallback: this.onAfterSelectCallback.bind(this)
        });
        if (this.allowGeolocation()) {
            (_a = this.geolocation) === null || _a === void 0 ? void 0 : _a.init();
        }
    };
    Object.defineProperty(AddressInput.prototype, "isSubTypAddress", {
        get: function () {
            var schemaField = this._form.getFieldSchema(this);
            return (schemaField === null || schemaField === void 0 ? void 0 : schemaField.subType) === "address";
        },
        enumerable: true,
        configurable: true
    });
    AddressInput.prototype.onAfterSelectCallback = function () {
        if (this.isSelectedAddress(this.fieldValue)) {
            var address = this.findAddress(this.fieldValue);
            this.selectedAddress(address);
        }
    };
    AddressInput.prototype.prePopulate = function (value) {
        _super.prototype.prePopulate.call(this, value);
        if (this.isSubTypAddress) {
            this.fetchSuggestions(value);
        }
    };
    AddressInput.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this.removeListeners();
    };
    AddressInput.prototype.onFieldChange = function (setByScript) {
        if (!!this.fieldValue && this.fieldValue !== this.previousValue
            && !this.isSelectedAddress(this.fieldValue)) {
            this.previousValue = undefined;
            this.isAddressChanged = true;
            if (this.isSubTypAddress) {
                this.fetchSuggestions(this.getValue(), true);
            }
        }
        _super.prototype.onFieldChange.call(this, setByScript);
    };
    Object.defineProperty(AddressInput.prototype, "fieldValue", {
        get: function () {
            var _a;
            return (_a = this.getValue()) !== null && _a !== void 0 ? _a : "";
        },
        enumerable: true,
        configurable: true
    });
    AddressInput.prototype.findAddress = function (fieldValue) {
        var _a;
        return (_a = this.currentSuggestions) === null || _a === void 0 ? void 0 : _a.find(function (entry) { return entry.address === fieldValue; });
    };
    AddressInput.prototype.fetchSuggestions = function (fieldValue, showLoading) {
        var _this = this;
        if (showLoading === void 0) { showLoading = false; }
        if (!this.instanceElement || (fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.length) < this.minCharactersBeforeServer) {
            return;
        }
        this.startServerQuery();
        if (showLoading)
            this.setLoading(true);
        this.clearServerError();
        this.instanceElement.removeAttribute(FormInput_1.FormInput_CONSTS.serverValidation);
        var country = this.getDefaultLocationParam();
        var geoLocation = this.getCoordinates();
        window.gigya.accounts.address.suggestions.get({
            address: fieldValue,
            country: country,
            longitude: geoLocation === null || geoLocation === void 0 ? void 0 : geoLocation.longitude,
            latitude: geoLocation === null || geoLocation === void 0 ? void 0 : geoLocation.latitude,
            callback: function (res) { return _this.serverQueryDone(res, fieldValue, _this.handleServerDataError); },
        });
    };
    AddressInput.prototype.getCoordinates = function () {
        var _a;
        if (this.allowGeolocation()) {
            return (_a = this.geolocation) === null || _a === void 0 ? void 0 : _a.getPosition();
        }
        return null;
    };
    AddressInput.prototype.getDefaultLocationParam = function () {
        var _a, _b;
        var schemaField = this.instanceElement.getAttribute(AddressInputConsts.defaultCountrySchemaField);
        var accountInfo = this._form._screenSet.data.apiData["getAccountInfo"];
        if (schemaField) {
            var field = this._form.dataToServer.find(function (field) { var _a; return ((_a = field.instanceElement) === null || _a === void 0 ? void 0 : _a.getAttribute('name')) === schemaField; });
            var fieldValue = field ? field.getValue() : '';
            if (fieldValue && typeof fieldValue === 'string' && utils_1.isDOMXSS(fieldValue)) {
                fieldValue = window.gigya.utils.sanitize.sanitizeHTML(fieldValue);
            }
            return fieldValue;
        }
        return (_b = (_a = accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.profile) === null || _a === void 0 ? void 0 : _a.country) !== null && _b !== void 0 ? _b : "";
    };
    AddressInput.prototype.selectedAddress = function (selectedAddress) {
        var _this = this;
        selectedAddress &&
            selectedAddress.id &&
            this.isSubTypAddress &&
            window.gigya.accounts.address.suggestions.get({
                address: selectedAddress.address,
                suggestionreply: [selectedAddress.id],
                callback: function (res) {
                    return _this.handleServerDataError({
                        errorCode: res.errorCode,
                        field: _this,
                        errorType: Errors_1.ErrorType.server,
                    });
                },
            });
    };
    //Server response handling
    AddressInput.prototype.serverQueryDone = function (res, checkedValue, callback) {
        var _a;
        // response is no longer relevant due to screen going out of view
        if (!this.instanceElement) {
            return;
        }
        // response is no longer relevant due to value change
        if (this.getValue() !== checkedValue) {
            return;
        }
        var errorCode = res.errorCode;
        var errorMessage = "";
        var noDataMessage = "";
        switch (errorCode) {
            case GSErrors_1.GSErrors.OK:
                if (!((_a = res.suggestions) === null || _a === void 0 ? void 0 : _a.length)) {
                    errorMessage = this._screenSet.getText("dqm_selection_error");
                    noDataMessage = "no_dqm_results_found";
                }
                break;
            case GSErrors_1.GSErrors.UNAUTHORIZED_ACCESS_ERROR:
                errorMessage = this._screenSet.getText("missing_dqm_credentials");
                noDataMessage = "dqm_general_error";
                break;
            default:
                errorMessage = this._screenSet.getText("dqm_general_error");
                noDataMessage = errorMessage;
                break;
        }
        this.currentSuggestions = res.suggestions || [];
        var isWarning = !this.currentSuggestions.length;
        this.setOptions(this.currentSuggestions.map(function (e) { return e.address; }));
        this.onServerEnd(errorCode);
        callback({
            errorCode: errorCode,
            field: this,
            errorMessage: this._screenSet.getText(errorMessage),
            errorType: Errors_1.ErrorType.server,
            isWarning: isWarning,
        });
    };
    AddressInput.prototype.handleServerDataError = function (validationInfo) {
        var errorInfo = {
            field: validationInfo.field,
            errorCode: validationInfo.errorCode,
            errorType: validationInfo.errorType,
            customMessage: validationInfo.errorMessage,
            isWarn: validationInfo.isWarning,
        };
        if (errorInfo.errorCode !== GSErrors_1.GSErrors.OK) {
            window.gigya.logger.warn("Response failed for fetch suggestion", errorInfo);
        }
    };
    // Validations
    AddressInput.prototype.isSelectedAddress = function (fieldValue) {
        return !!this.findAddress(fieldValue);
    };
    AddressInput.prototype.serverValidated = function () {
        return false;
    };
    AddressInput.prototype.validateValue = function (formData, fieldValue, callback) {
        this.clearServerError();
        if (!this.shouldValidate(fieldValue)) {
            this._validityState = FormInput_1.ValidityStates._undefined;
            return callback({ errorCode: GSErrors_1.GSErrors.OK, field: this });
        }
        if (this.shouldValidateWithWarning(fieldValue)) {
            this.showWarning();
            this._validityState = FormInput_1.ValidityStates.error;
            return callback({
                errorCode: GSErrors_1.GSErrors.INVALID_TYPE_VALIDATION_ERROR,
                field: this,
                errorType: Errors_1.ErrorType.server,
                isWarning: true,
            });
        }
        if (this.shouldValidateWithErrors() && !this.isSelectedAddress(fieldValue)) {
            this._validityState = FormInput_1.ValidityStates.error;
            return callback({
                errorCode: GSErrors_1.GSErrors.INVALID_TYPE_VALIDATION_ERROR,
                field: this,
                errorType: Errors_1.ErrorType.server,
            });
        }
        return _super.prototype.validateValue.call(this, formData, fieldValue, callback);
    };
    AddressInput.prototype.getAddressValidityState = function (validityState) {
        // field is empty or less than minimum characters
        if (validityState === FormInput_1.ValidityStates.valid && !this.isSelectedAddress(this.fieldValue)) {
            return FormInput_1.ValidityStates._undefined;
        }
        // field is populated with selected address
        if (this.isSelectedAddress(this.getValue())) {
            return FormInput_1.ValidityStates.valid;
        }
        // field not populated with selected address and submit button was pressed
        if (!this.isSelectedAddress(this.fieldValue) && this._form.submitButtonClicked) {
            return FormInput_1.ValidityStates.error;
        }
        return validityState;
    };
    AddressInput.prototype.setValidityState = function (validityState, fromServer) {
        if (fromServer === void 0) { fromServer = false; }
        validityState = this.getAddressValidityState(validityState);
        _super.prototype.setValidityState.call(this, validityState, fromServer);
    };
    //when click on submit should show error
    AddressInput.prototype.shouldValidateWithErrors = function () {
        return this._form.submitButtonClicked && (this.isDirty() || this.required());
    };
    // when clickoutside should show warning
    AddressInput.prototype.shouldValidateWithWarning = function (fieldValue) {
        return this.isDirty() && !this.isSelectedAddress(fieldValue) && this.clickedOutside && !this._form.submitButtonClicked;
    };
    AddressInput.prototype.isDirty = function () {
        var _a;
        return this.isAddressChanged && !!((_a = String(this.fieldValue)) === null || _a === void 0 ? void 0 : _a.length);
    };
    AddressInput.prototype.shouldValidate = function (fieldValue) {
        return this.isSubTypAddress && (this.shouldValidateWithErrors() || this.shouldValidateWithWarning(fieldValue));
    };
    return AddressInput;
}(typeahead_input_1.TypeaheadInput));
exports.AddressInput = AddressInput;
FormInput_1.FormInput.addInputToLibrary(AddressInput);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/ButtonInput.ts":
/*!***************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/ButtonInput.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var ButtonInput = /** @class */ (function (_super) {
    tslib_1.__extends(ButtonInput, _super);
    function ButtonInput(context) {
        var _this = _super.call(this, context, false) || this;
        _this._form._submitButtons.push(_this);
        return _this;
    }
    ButtonInput.FORM_TYPE_CRITERIA = function (context) {
        return context.type === 'submit' || context.type === 'reset' || context.type === 'button' || context.element.nodeName.toLowerCase() === 'button';
    };
    ButtonInput.prototype.setValue = function () {
        return; // our form should never set value to buttons
    };
    ButtonInput.prototype.disable = function () {
        this.instanceElement && this.instanceElement.setAttribute('disabled', 'true');
    };
    ButtonInput.prototype.enable = function () {
        this.instanceElement && this.instanceElement.removeAttribute('disabled');
    };
    return ButtonInput;
}(FormInput_1.FormInput));
exports.ButtonInput = ButtonInput;
FormInput_1.FormInput.addInputToLibrary(ButtonInput);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CheckboxInput.ts":
/*!*****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CheckboxInput.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var ConsentData_1 = __webpack_require__(/*! ../ConsentData */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ConsentData.ts");
exports.CheckboxInput_CONSTS = {
    errorClass: 'gigya-terms-error',
    validClass: 'gigya-terms-valid',
    dataValueInArray: 'data-value-in-array',
};
var CheckboxInput = /** @class */ (function (_super) {
    tslib_1.__extends(CheckboxInput, _super);
    function CheckboxInput(context) {
        return _super.call(this, context) || this;
    }
    CheckboxInput.FORM_TYPE_CRITERIA = function (context) {
        return context.type === 'checkbox';
    };
    CheckboxInput.prototype.required = function () {
        // See #44030.
        if (/^(.+\.)?terms$/.test(this.fieldName)) {
            return _super.prototype.required.call(this);
        }
        if (this.isClientRequired()) {
            return true;
        }
        if (ConsentData_1.isConsentField(this.fieldName) &&
            ConsentData_1.isConsentTypeOther(this.fieldName) &&
            ConsentData_1.isConsentMigrated()) {
            if (this.instanceElement.getAttribute(FormInput_1.FormInput_CONSTS.required)) {
                return true;
            }
        }
        return false;
    };
    CheckboxInput.prototype.isClientRequired = function () {
        var _a;
        return ((_a = this.schemaFormat) === null || _a === void 0 ? void 0 : _a.toLowerCase()) == 'true';
    };
    CheckboxInput.prototype._isValueEmpty = function (value) {
        return !value; // override default handling of checkboxes
    };
    CheckboxInput.prototype.validateValue = function (formData, fieldValue, callback) {
        if (this.required() && !fieldValue) {
            return callback({
                errorCode: GSErrors_1.GSErrors.REQUIRED_VALUE_VALIDATION_ERROR,
                field: this,
            });
        }
        _super.prototype.validateValue.call(this, formData, fieldValue, callback);
    };
    CheckboxInput.prototype._showValidityOnInput = function () {
        this.setValitidyClass(this.instanceElement.parentElement, this._validityState, exports.CheckboxInput_CONSTS.validClass, exports.CheckboxInput_CONSTS.errorClass);
    };
    CheckboxInput.prototype.evaluateConditionalAttributes = function () {
        _super.prototype.evaluateConditionalAttributes.call(this);
        this.setValitidyClass(this.instanceElement.parentElement, this._validityState, exports.CheckboxInput_CONSTS.validClass, exports.CheckboxInput_CONSTS.errorClass);
    };
    CheckboxInput.prototype.prePopulate = function (value) {
        var el = this.instanceElement;
        var dataValueInArray = el.getAttribute(exports.CheckboxInput_CONSTS.dataValueInArray);
        if (!dataValueInArray)
            _super.prototype.prePopulate.call(this, value);
        else if (value instanceof Array) {
            var pos = value.indexOf(dataValueInArray);
            _super.prototype.prePopulate.call(this, pos >= 0);
        }
        else {
            //todo : warn about illegal value (undefiend, null..)
            _super.prototype.prePopulate.call(this, false);
        }
    };
    CheckboxInput.prototype.setValue = function (dataValue, setByScript) {
        if (setByScript === void 0) { setByScript = true; }
        // Set new value directly on the DOM.
        var el = this.instanceElement;
        el.checked = dataValue && dataValue !== 'false'; // Boolean can be saved as "true" or "false" (string).
        // Trigger change.
        this.onFieldChange(setByScript);
    };
    CheckboxInput.prototype.getValue = function (el, currentValue) {
        if (el === void 0) { el = this.instanceElement; }
        var value = el.checked;
        var arrayItemValue = el.getAttribute(exports.CheckboxInput_CONSTS.dataValueInArray);
        if (arrayItemValue) {
            if (!currentValue)
                currentValue = [];
            var pos = currentValue.indexOf(arrayItemValue);
            if (el.checked && pos < 0) {
                currentValue.push(arrayItemValue);
            }
            else if (!el.checked && pos >= 0) {
                currentValue.splice(pos, 1);
            }
            value = currentValue;
        }
        return value;
    };
    return CheckboxInput;
}(FormInput_1.FormInput));
exports.CheckboxInput = CheckboxInput;
FormInput_1.FormInput.addInputToLibrary(CheckboxInput);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CommunicationCheckboxInput.ts":
/*!******************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CommunicationCheckboxInput.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var CheckboxInput_1 = __webpack_require__(/*! ./CheckboxInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CheckboxInput.ts");
var CommunicationWidget_1 = __webpack_require__(/*! ../Widgets/CommunicationWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CommunicationWidget.ts");
var BaseForm_1 = __webpack_require__(/*! ../BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var CommunicationCheckboxInput = /** @class */ (function (_super) {
    tslib_1.__extends(CommunicationCheckboxInput, _super);
    function CommunicationCheckboxInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommunicationCheckboxInput.FORM_TYPE_CRITERIA = function (context) {
        var _a;
        return (_a = context === null || context === void 0 ? void 0 : context.fieldName) === null || _a === void 0 ? void 0 : _a.startsWith(CommunicationWidget_1.CommunicationWidget_CONSTS.communicationsPrefix);
    };
    CommunicationCheckboxInput.prototype.setValue = function (dataValue, setByScript) {
        if (setByScript === void 0) { setByScript = true; }
        var el = this.instanceElement;
        el.checked = this.isChecked(dataValue, el);
        this.onFieldChange(setByScript);
    };
    CommunicationCheckboxInput.prototype.getValue = function (el, currentValue) {
        if (el === void 0) { el = this.instanceElement; }
        return {
            channel: el === null || el === void 0 ? void 0 : el.getAttribute(CommunicationWidget_1.CommunicationWidget_CONSTS.channel),
            status: this.evaluateStatus(el),
            topic: el === null || el === void 0 ? void 0 : el.getAttribute(CommunicationWidget_1.CommunicationWidget_CONSTS.topic),
        };
    };
    CommunicationCheckboxInput.prototype.evaluateStatus = function (el) {
        var checked = el.checked;
        var previousStatus = el === null || el === void 0 ? void 0 : el.getAttribute(CommunicationWidget_1.CommunicationWidget_CONSTS.status);
        this.sendLoggerReport(previousStatus);
        if (checked) {
            return CommunicationWidget_1.Channel_Status.optIn;
        }
        if (this.isChannelStatusOptIn(previousStatus) && !checked) {
            return CommunicationWidget_1.Channel_Status.optOut;
        }
        return CommunicationWidget_1.Channel_Status.noticed;
    };
    CommunicationCheckboxInput.prototype.sendLoggerReport = function (previousStatus) {
        if (previousStatus === CommunicationWidget_1.Channel_Status.OptIn || previousStatus === CommunicationWidget_1.Channel_Status.OptOut) {
            window.gigya.logger.report('Received communication status uppercase', previousStatus);
        }
    };
    CommunicationCheckboxInput.prototype.isChannelStatusOptIn = function (status) {
        return status && (status === CommunicationWidget_1.Channel_Status.optIn || status === CommunicationWidget_1.Channel_Status.OptIn);
    };
    CommunicationCheckboxInput.prototype.isChecked = function (dataValue, el) {
        var status = this.getCommunicationWidgetAttribute(dataValue, 'status');
        return this.isChannelStatusOptIn(status) ||
            ((el === null || el === void 0 ? void 0 : el.hasAttribute(BaseForm_1.Form_CONSTS.defaultCheckedAttribute)) && !status);
    };
    CommunicationCheckboxInput.prototype.getCommunicationWidgetAttribute = function (obj, key) {
        return obj[key] || obj[this.capitalize(key)];
    };
    CommunicationCheckboxInput.prototype.capitalize = function (str) {
        var _a;
        return ((_a = str === null || str === void 0 ? void 0 : str.charAt(0)) === null || _a === void 0 ? void 0 : _a.toUpperCase()) + (str === null || str === void 0 ? void 0 : str.slice(1));
    };
    return CommunicationCheckboxInput;
}(CheckboxInput_1.CheckboxInput));
exports.CommunicationCheckboxInput = CommunicationCheckboxInput;
FormInput_1.FormInput.addInputToLibrary(CommunicationCheckboxInput, FormInput_1.FormInputPriorities.Important);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/EmailInput.ts":
/*!**************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/EmailInput.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var LoginForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LoginForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LoginForm.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var EmailInput = /** @class */ (function (_super) {
    tslib_1.__extends(EmailInput, _super);
    function EmailInput(context) {
        return _super.call(this, context) || this;
    }
    EmailInput.FORM_TYPE_CRITERIA = function (context) {
        return !(context.form instanceof LoginForm_1.LoginForm) && (context.fieldName === 'email' || context.type === 'email');
    };
    EmailInput.prototype.validateValue = function (formData, fieldValue, callback) {
        if (fieldValue && !window.gigya.pluginUtils.validation.isValidEmailLoginID(fieldValue))
            return callback({
                errorCode: GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE,
                field: this,
            });
        return _super.prototype.validateValue.call(this, formData, fieldValue, callback);
    };
    return EmailInput;
}(FormInput_1.FormInput));
exports.EmailInput = EmailInput;
FormInput_1.FormInput.addInputToLibrary(EmailInput);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts":
/*!*************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var TemplateElement_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts");
var Consent_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Consent */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Consent.ts");
var ArrayManagerWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ArrayManagerWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ArrayManagerWidget.ts");
var Errors_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var SchemaTypeConverter_1 = __webpack_require__(/*! ../SchemaTypeConverter */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/SchemaTypeConverter.ts");
var PasskeyService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Passkey/PasskeyService */ "./src/core/Gigya.Js/app/Passkey/PasskeyService.ts");
var ValidityStates;
(function (ValidityStates) {
    ValidityStates[ValidityStates["_undefined"] = 0] = "_undefined";
    ValidityStates[ValidityStates["valid"] = 1] = "valid";
    ValidityStates[ValidityStates["error"] = 2] = "error";
    ValidityStates[ValidityStates["pending"] = 3] = "pending";
})(ValidityStates = exports.ValidityStates || (exports.ValidityStates = {}));
utils_1.DeepFreeze(ValidityStates);
exports.fieldsNameData = {
    loginID: { autoFillName: 'username', paramName: 'loginID' },
    passwordRetype: { autoFillName: '', paramName: '' },
};
utils_1.DeepFreeze(exports.fieldsNameData);
var fieldsDisplayNames = {
    loginID: 'username',
    secretQuestion: 'secret question',
    secretAnswer: 'secret answer',
};
utils_1.DeepFreeze(fieldsDisplayNames);
var WriteAccessModes;
(function (WriteAccessModes) {
    WriteAccessModes[WriteAccessModes["clientModify"] = 0] = "clientModify";
    WriteAccessModes[WriteAccessModes["clientCreate"] = 1] = "clientCreate";
})(WriteAccessModes = exports.WriteAccessModes || (exports.WriteAccessModes = {}));
exports.FormInput_CONSTS = {
    fieldName: 'data-gigya-name',
    displayName: 'data-display-name',
    captcha: 'gigya-captcha',
    allowEmpty: 'data-allow-empty',
    required: 'data-required',
    originalValue: 'data-original-value',
    serverValidation: 'data-invalid-error-code',
    showValidCheckmark: 'show-valid-checkmark',
    showCheckmarkClass: 'gigya-show-checkmark',
    errorClass: 'gigya-error',
    warnClass: 'gigya-warn',
    validClass: 'gigya-valid',
    pendingClass: 'gigya-pending',
    emptyClass: 'gigya-empty',
    placeholderAttribute: 'data-gigya-placeholder',
    arrayRootAttribute: 'data-array-root',
    arrayKeyFieldAttribute: 'data-array-key-field',
    arrayKeyValueAttribute: 'data-array-key-value',
    identifierType: 'data-identifier-type'
};
utils_1.DeepFreeze(exports.FormInput_CONSTS);
var FormInputsLibrary = {};
var FormInputPriorities;
(function (FormInputPriorities) {
    FormInputPriorities[FormInputPriorities["_start"] = 0] = "_start";
    FormInputPriorities[FormInputPriorities["Important"] = 1] = "Important";
    FormInputPriorities[FormInputPriorities["Normal"] = 2] = "Normal";
    FormInputPriorities[FormInputPriorities["Fallback"] = 3] = "Fallback";
    FormInputPriorities[FormInputPriorities["_end"] = 4] = "_end";
})(FormInputPriorities = exports.FormInputPriorities || (exports.FormInputPriorities = {}));
var FormInput = /** @class */ (function (_super) {
    tslib_1.__extends(FormInput, _super);
    //#endregion
    function FormInput(context, isDataField, keypressValidationDelay) {
        if (isDataField === void 0) { isDataField = true; }
        if (keypressValidationDelay === void 0) { keypressValidationDelay = 1000; }
        var _this = _super.call(this, context.element, context.form) || this;
        _this.isDataField = isDataField;
        _this.dynamicField = false;
        _this.isCaptcha = false;
        _this._validityState = ValidityStates._undefined;
        _this._showValidityMarker = {};
        _this.isCurrnetValuePlaceholderText = true;
        _this.isCtrlKeyUp = false;
        _this.KEY_CODE_DELETE = 46;
        _this.KEY_CODE_BACKSPACE = 8;
        _this.KEYCODE_LETTER_X = 88;
        _this.previousValue = null;
        _this.intervalID = 0;
        _this.valueConverter = SchemaTypeConverter_1.schemaTypeToConverter('string');
        _this.validityStateListeners = new Array();
        _this._form = context.form;
        _this.type = context.type;
        _this._screen = _this._form._screen;
        _this.update(context.element, context.fieldName, isDataField);
        if (_this.showValidCheckmark(_this.templateElement)) {
            _this._showValidityMarker[ValidityStates.valid] = _this._showValidityMarker[ValidityStates.pending] = true;
        }
        // Ensure the onFieldChanged event isn't fired for every keypress.
        _this.onFieldChangeDebounced = window.gigya.utils.functions.debounce(function () { return _this.onFieldChange(); }, _this._screenSet.params['debounceDelay'] || keypressValidationDelay);
        return _this;
    }
    FormInput.prototype.hasPreviousValue = function () {
        return !!this.previousValue;
    };
    FormInput.prototype.setValidityMarker = function (key, val) {
        this._showValidityMarker[key] = val;
    };
    Object.defineProperty(FormInput.prototype, "arrayKeyField", {
        get: function () {
            return this.instanceElement.getAttribute(exports.FormInput_CONSTS.arrayKeyFieldAttribute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormInput.prototype, "arrayKeyValue", {
        get: function () {
            return this.instanceElement.getAttribute(exports.FormInput_CONSTS.arrayKeyValueAttribute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormInput.prototype, "schemaFormat", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this._schema) === null || _a === void 0 ? void 0 : _a.format) === null || _b === void 0 ? void 0 : _b.toString();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormInput.prototype, "autocomplete", {
        get: function () {
            return this.instanceElement.getAttribute('autocomplete');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormInput.prototype, "isSchemaValid", {
        get: function () {
            var _this = this;
            return !utils_1.Some(this.schemaChecks, function (c) { return c(_this.getValue()) !== GSErrors_1.GSErrors.OK; });
        },
        enumerable: true,
        configurable: true
    });
    //#region formInput library
    FormInput.addInputToLibrary = function (type, priority) {
        if (priority === void 0) { priority = FormInputPriorities.Normal; }
        var inputList = FormInputsLibrary[priority] || [];
        inputList.push(type);
        FormInputsLibrary[priority] = inputList;
    };
    FormInput.inputLibraryByPriority = function () {
        var lib = new Array();
        for (var priority = FormInputPriorities._start; priority <= FormInputPriorities._end; ++priority) {
            var priorityList = FormInputsLibrary[priority];
            if (priorityList)
                lib = lib.concat(priorityList);
        }
        return lib;
    };
    FormInput.registerFormInputs = function (elements, parent) {
        var inputs = new Array();
        var lib = FormInput.inputLibraryByPriority();
        var ignoredFields = parent.ignoredFields();
        utils_1.ForEach(elements, function (el) {
            var type;
            var fieldName = el.getAttribute(exports.FormInput_CONSTS.fieldName) || el.getAttribute('name');
            // ignore fields that are on the form ignore list
            if (ignoredFields[fieldName]) {
                return;
            }
            // ignore fields that are part of a fieldset (in case of composition of inputs the fieldset will represent its inputs as a whole)
            if (window.gigya.utils.DOM.isBelongToGigyaFieldset(el)) {
                return;
            }
            var context = {
                form: parent,
                fieldName: fieldName,
                element: el,
                type: el.getAttribute('type'),
                params: parent._screenSet.params,
            };
            utils_1.Some(lib, function (t) {
                var match = t.FORM_TYPE_CRITERIA(context);
                if (match)
                    type = t;
                return match;
            });
            if (type)
                inputs.push(new type(context));
        });
        return inputs;
    };
    FormInput.FORM_TYPE_CRITERIA = function (context) {
        return true;
    };
    FormInput.prototype.onKeyUp = function (e) {
        // Ignore tab, ctrl, windows key, escape, caps lock, etc.
        if (e.keyCode !== 9 &&
            e.keyCode !== 13 &&
            e.keyCode !== 16 &&
            e.keyCode !== 17 &&
            e.keyCode !== 91 &&
            e.keyCode !== 92 &&
            e.keyCode !== 20 &&
            e.keyCode !== 27) {
            this.onFieldChangeDebounced();
        }
    };
    /**
     * Called when an element's value MAY have changed.
     */
    FormInput.prototype.onFieldChange = function (setByScript) {
        if (setByScript === void 0) { setByScript = false; }
        // May be called after a small delay, ensure the element still exists.
        // Specifically check to ensure the screen-set container still exists to handle the case where container is killed with the escape key.
        if (!this.instanceElement || !this._screenSet.container) {
            return;
        }
        // Avoid triggering twice when a user finishes typing (triggering keydown) and then leaves the field (triggering change).
        // Exempt radio type because each individual element is unique instance, so it can't track state. Regardless, it's not necessary.
        var value = this.getValue();
        if (this.previousValue === value && this.type !== 'radio') {
            return;
        }
        this.previousValue = value;
        // Triggered when field is changed:
        this.updateCssClasses();
        this._form.onInputChange(this, setByScript);
    };
    FormInput.prototype.updateCssClasses = function () {
        if (this.isEmpty()) {
            window.gigya.utils.DOM.addClassToElement(this.instanceElement, exports.FormInput_CONSTS.emptyClass);
        }
        else {
            window.gigya.utils.DOM.removeClassFromElement(this.instanceElement, exports.FormInput_CONSTS.emptyClass);
        }
    };
    FormInput.prototype.update = function (element, fieldName, isDataField) {
        var _this = this;
        if (element === void 0) { element = this.instanceElement; }
        if (fieldName === void 0) { fieldName = this.instanceElement.getAttribute('name'); }
        this.fieldName = fieldName;
        this.normalizedFieldName = this._form.getNormalizedFieldName(this.fieldName);
        if (this.normalizedFieldName) {
            // calculate field name parts
            var fieldNameParts = this.normalizedFieldName.split('.');
            if (fieldNameParts.length > 1) {
                this.fieldNamespace = fieldNameParts.shift();
            }
            // when binding to the consent's grant field, we need to treat the base name as the consent itself (schema validations mainly)
            if (this.fieldNamespace == Consent_1.namespace && fieldNameParts[fieldNameParts.length - 1] == Consent_1.consentFieldName) {
                fieldNameParts.pop();
            }
            this.fieldBaseName = fieldNameParts.join('.').replace(ArrayManagerWidget_1.ArrayManager_CONST.indexMatcher, '');
            // Keep name saved for future screenset instances
            if (this.fieldName !== element.getAttribute(exports.FormInput_CONSTS.fieldName)) {
                element.setAttribute(exports.FormInput_CONSTS.fieldName, this.fieldName);
            }
        }
        var fieldData = exports.fieldsNameData[this.fieldBaseName];
        this.paramName = fieldData ? fieldData.paramName : this.normalizedFieldName;
        if (fieldData && fieldData.autoFillName) {
            element.setAttribute('name', fieldData.autoFillName);
        }
        if (isDataField && this.normalizedFieldName) {
            this._form.addDataField(this);
            // save the original value
            element.setAttribute(exports.FormInput_CONSTS.originalValue, String(this.getValue(element)));
            this.keyUpHandler = function (e) { return _this.onKeyUp(e); };
            this.addEventListener('keyup', this.keyUpHandler);
            this.changeHandler = function () { return _this.onFieldChange(); };
            this.addEventListener('change', this.changeHandler);
        }
        this.updateDisplayName(element);
    };
    FormInput.prototype.updateDisplayName = function (element) {
        if (element === void 0) { element = this.templateElement; }
        this.displayName = element.getAttribute(exports.FormInput_CONSTS.displayName) || this.fieldBaseName;
    };
    FormInput.prototype.getArrayRoot = function (flatten) {
        if (flatten === void 0) { flatten = false; }
        var arrayRoot = this.instanceElement ? this.instanceElement.getAttribute(exports.FormInput_CONSTS.arrayRootAttribute) : '';
        if (arrayRoot && flatten) {
            arrayRoot = arrayRoot.replace(ArrayManagerWidget_1.ArrayManager_CONST.indexMatcher, '.$1');
        }
        return arrayRoot;
    };
    FormInput.prototype.getName = function (isNormalized, flatten) {
        if (flatten === void 0) { flatten = false; }
        var name = !isNormalized ? this.fieldName : this.normalizedFieldName;
        return flatten ? name.replace(ArrayManagerWidget_1.ArrayManager_CONST.indexMatcher, '.$1') : name;
    };
    FormInput.prototype.isEmpty = function (value) {
        if (value === void 0) { value = this.getValue(); }
        return this._isValueEmpty(value);
    };
    FormInput.prototype._isValueEmpty = function (value) {
        return !value || value === false;
    };
    FormInput.prototype.allowEmpty = function () {
        return Boolean(this.instanceElement && this.instanceElement.getAttribute(exports.FormInput_CONSTS.allowEmpty)); // hasAttribute is not supported in IE9
    };
    FormInput.prototype.getTruncatedValue = function (val) {
        return window.gigya.utils.stringUtils.trim(String(val));
    };
    FormInput.prototype.validate = function (callback, formData) {
        if (formData === void 0) { formData = this._form.getFlatFormData(false, true); }
        if (this.isInHiddenContainer()) {
            return callback({
                errorCode: GSErrors_1.GSErrors.OK,
                field: this
            });
        }
        this.validateValue(formData, this.getValidateValue(formData), callback);
    };
    FormInput.prototype.validateAsync = function (formData) {
        if (formData === void 0) { formData = this._form.getFlatFormData(false, true); }
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new gigya.Promise(function (resolve) {
                        _this.validate(function (validationInfo) { return resolve(validationInfo); }, formData);
                    })];
            });
        });
    };
    FormInput.prototype.getValidateValue = function (formData) {
        return this.getValue();
    };
    FormInput.prototype.clearServerError = function () {
        this.instanceElement.removeAttribute(exports.FormInput_CONSTS.serverValidation);
    };
    FormInput.prototype.getServerError = function () {
        var code = this.instanceElement.getAttribute(exports.FormInput_CONSTS.serverValidation);
        if (code)
            return parseInt(code);
        return GSErrors_1.GSErrors.OK;
    };
    FormInput.prototype.setServerError = function (errorCode) {
        var validityState = errorCode == GSErrors_1.GSErrors.OK ? ValidityStates.valid : ValidityStates.error;
        this.instanceElement.setAttribute(exports.FormInput_CONSTS.serverValidation, errorCode + '');
        this.setValidityState(validityState, true);
    };
    FormInput.prototype.validateValue = function (formData, fieldValue, callback) {
        var fieldIsEmpty = fieldValue == null || this.getTruncatedValue(fieldValue) === '';
        if (this.required() && fieldIsEmpty)
            return callback({
                errorCode: GSErrors_1.GSErrors.REQUIRED_VALUE_VALIDATION_ERROR,
                field: this,
                errorType: Errors_1.ErrorType.server
            });
        // schema validation
        if (this._schema) {
            var schemaError = GSErrors_1.GSErrors.OK;
            utils_1.Some(this.schemaChecks, function (check) {
                schemaError = check(fieldValue);
                return schemaError != GSErrors_1.GSErrors.OK;
            });
            if (schemaError !== GSErrors_1.GSErrors.OK)
                return callback({
                    errorCode: schemaError,
                    field: this,
                    errorType: Errors_1.ErrorType.server
                });
        }
        // Server validation
        if (this.instanceElement) {
            var serverCode = this.instanceElement.getAttribute(exports.FormInput_CONSTS.serverValidation); // hasAttribute is not supported in IE9
            if (serverCode) {
                // serverValidation already returned
                var serverValidationErrorCode = this.getServerError();
                if (serverValidationErrorCode != GSErrors_1.GSErrors.OK)
                    return callback({
                        errorCode: serverValidationErrorCode,
                        field: this,
                        errorType: Errors_1.ErrorType.server
                    });
            }
            else {
                // initiate server validation
                if (this.serverValidated())
                    return this.startServerValidation(fieldValue, callback);
            }
        }
        return callback({
            errorCode: GSErrors_1.GSErrors.OK,
            field: this
        });
    };
    FormInput.prototype.serverValidated = function () {
        return false;
    };
    FormInput.prototype.startServerValidation = function (fieldValue, callback) {
        Errors_1.notImplementerAbstract();
    };
    FormInput.prototype.required = function () {
        // Schema requires this field.
        if (this._schemaRequired) {
            return true;
        }
        // Form requires this field.
        if (!this.allowEmpty() && this._form.requiredFields()[this.fieldName]) {
            return true;
        }
        // Field is required on this screen.
        if (this.instanceElement.getAttribute(exports.FormInput_CONSTS.required)) {
            return true;
        }
        return false;
    };
    //#endregion
    //#region show error
    FormInput.prototype.showValidCheckmark = function (element) {
        if (element === void 0) { element = this.instanceElement; }
        return (Boolean(element.getAttribute(exports.FormInput_CONSTS.showValidCheckmark)) && // ie9 has no hasAttribute
            !window.gigya.utils.validation.isExplicitFalse(element.getAttribute(exports.FormInput_CONSTS.showValidCheckmark)));
    };
    FormInput.prototype.addValidityStateListener = function (listener) {
        if (listener)
            this.validityStateListeners.push(listener);
    };
    FormInput.prototype.removeValidityStateListener = function (listener) {
        if (listener)
            this.validityStateListeners.splice(window.gigya.utils.array.indexOf(this.validityStateListeners, listener), 1);
    };
    FormInput.prototype.triggerValidityStateChange = function (validityState, fromServer) {
        var _this = this;
        utils_1.ForEach(this.validityStateListeners, function (listener) { return listener(validityState, fromServer, _this); });
    };
    FormInput.prototype.getValidityState = function () {
        return this._validityState;
    };
    FormInput.prototype.setValidityState = function (validityState, fromServer) {
        if (fromServer === void 0) { fromServer = false; }
        if (validityState !== this._validityState) {
            this._validityState = validityState;
            this._showValidityOnInput();
            this.triggerValidityStateChange(this._validityState, fromServer);
        }
    };
    FormInput.prototype._showValidityOnInput = function (element, validityState, allowValidityMarker) {
        if (element === void 0) { element = this.instanceElement; }
        if (validityState === void 0) { validityState = this._validityState; }
        if (allowValidityMarker === void 0) { allowValidityMarker = true; }
        this.setValitidyClass(element, validityState);
        if (this._showValidityMarker[validityState] && allowValidityMarker)
            window.gigya.utils.DOM.addClassToElement(element, exports.FormInput_CONSTS.showCheckmarkClass);
        else
            window.gigya.utils.DOM.removeClassFromElement(element, exports.FormInput_CONSTS.showCheckmarkClass);
    };
    FormInput.prototype.setValitidyClass = function (element, validityState, validClass, errorClass, pendingClass) {
        if (validClass === void 0) { validClass = exports.FormInput_CONSTS.validClass; }
        if (errorClass === void 0) { errorClass = exports.FormInput_CONSTS.errorClass; }
        if (pendingClass === void 0) { pendingClass = exports.FormInput_CONSTS.pendingClass; }
        if (!element)
            return;
        var currentClass;
        switch (validityState) {
            case ValidityStates.valid:
                currentClass = validClass;
                break;
            case ValidityStates.error:
                currentClass = errorClass;
                break;
            case ValidityStates.pending:
                currentClass = pendingClass;
                break;
        }
        this.setElementValidationClass(element, currentClass, validClass, errorClass, pendingClass);
        if (this.placeHolderElement) {
            this.setElementValidationClass(this.placeHolderElement, currentClass, validClass, errorClass, pendingClass);
        }
    };
    FormInput.prototype.setElementValidationClass = function (element, validationClass, validClass, errorClass, pendingClass) {
        if (validClass === void 0) { validClass = exports.FormInput_CONSTS.validClass; }
        if (errorClass === void 0) { errorClass = exports.FormInput_CONSTS.errorClass; }
        if (pendingClass === void 0) { pendingClass = exports.FormInput_CONSTS.pendingClass; }
        window.gigya.utils.DOM.removeClassFromElement(element, validClass);
        window.gigya.utils.DOM.removeClassFromElement(element, errorClass);
        window.gigya.utils.DOM.removeClassFromElement(element, pendingClass);
        if (validationClass) {
            window.gigya.utils.DOM.addClassToElement(element, validationClass);
        }
        if (validationClass === errorClass) {
            // Validation failed.
            element.setAttribute('aria-invalid', 'true');
        }
        else {
            // No errors detected.
            element.setAttribute('aria-invalid', 'false');
        }
    };
    //#endregion
    FormInput.prototype.unlinkTemplate = function () {
        if (this.changeHandler) {
            this.removeEventListener('change', this.changeHandler);
        }
        if (this.keyUpHandler) {
            this.removeEventListener('keydown', this.keyUpHandler);
        }
        _super.prototype.unlinkTemplate.call(this);
    };
    FormInput.prototype.linkInstanceElement = function (parent) {
        var _a;
        _super.prototype.linkInstanceElement.call(this, parent);
        this._schemaWriteAccessMode = WriteAccessModes.clientModify;
        this._schemaRequired = false;
        if (this.instanceElement) {
            if (this._form.schemaValidated()) {
                this._schema = this._form.getFieldSchema(this);
                if (this._schema) {
                    this.valueConverter = SchemaTypeConverter_1.schemaTypeToConverter(this._schema.type);
                    this.schemaChecks = new Array();
                    if (this._schema.type) {
                        var typeCheck = SchemaTypeChecks[this._schema.type];
                        if (typeCheck)
                            this.schemaChecks.push(typeCheck);
                    }
                    // currently we support only regex format checks - will change.
                    if ((_a = this.schemaFormat) === null || _a === void 0 ? void 0 : _a.match(formatPattern)) {
                        this.schemaChecks.push(schemaFormatCheck(this.schemaFormat));
                    }
                    this._schemaRequired = this._schema.required || utils_1.Some(this.schemaChecks, function (check) { return check('') != GSErrors_1.GSErrors.OK; }); // schema define this field as required // schema checks do not pass if there is no value
                    this._schemaWriteAccessMode = WriteAccessModes[this._schema.writeAccess] || WriteAccessModes.clientModify;
                }
            }
            this.setPlaceholderValue();
            this.setAriaRequired();
            this.wcagEvaluation();
            this.initPasskeyAutoComplete(true);
            // Set input's default value as previous value.
            // prePopulate will override this if a value exists.
            this.previousValue = this.getValue();
        }
    };
    FormInput.prototype.initPasskeyAutoComplete = function (abort) {
        if (abort === void 0) { abort = false; }
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var shouldReinit, _b, result, err_1;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        shouldReinit = true;
                        _b = ((_a = this.autocomplete) === null || _a === void 0 ? void 0 : _a.indexOf('webauthn')) >= 0;
                        if (!_b) return [3 /*break*/, 2];
                        return [4 /*yield*/, PasskeyService_1.default.isConditionalMediationAvailable()];
                    case 1:
                        _b = (_c.sent());
                        _c.label = 2;
                    case 2:
                        if (!(_b && (window.gigya.localInfo.isChrome || window.gigya.localInfo.isIOSChrome))) return [3 /*break*/, 7];
                        _c.label = 3;
                    case 3:
                        _c.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, PasskeyService_1.default.authenticate({
                                mediation: 'conditional',
                                abortCurrentCeremony: abort,
                                dontHandleScreenSet: false,
                                sessionExpiration: this._screenSet.params.sessionExpiration
                            })];
                    case 4:
                        result = _c.sent();
                        this._screenSet.onScreenResponse(tslib_1.__assign({}, result), this._form);
                        return [3 /*break*/, 6];
                    case 5:
                        err_1 = _c.sent();
                        switch (err_1.errorCode) {
                            case GSErrors_1.GSErrors.PASSKEY_ABORTED:
                                break;
                            case GSErrors_1.GSErrors.NOT_SUPPORTED:
                            case GSErrors_1.GSErrors.INVALID_SITE_CONFIGURATION_ERROR:
                                shouldReinit = false;
                            default:
                                err_1.errorMessage = this._screenSet.getErrorMessageNew(err_1.errorCode);
                                this._screenSet.onScreenResponse(err_1, this._form);
                        }
                        return [3 /*break*/, 6];
                    case 6:
                        if (shouldReinit && this.instanceElement && document.body.contains(this.instanceElement)) {
                            this.initPasskeyAutoComplete();
                        }
                        _c.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    FormInput.prototype.wcagEvaluation = function () {
        var _a, _b;
        var hasMultipleInputs = ((_b = (_a = this.instanceElement.parentElement) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.instanceElement.tagName)) === null || _b === void 0 ? void 0 : _b.length) > 1;
        if (this.type != 'submit' && !hasMultipleInputs) {
            this.fixLabel();
        }
    };
    FormInput.prototype.fixLabel = function () {
        var _a;
        var label = (_a = this.instanceElement.parentElement) === null || _a === void 0 ? void 0 : _a.querySelector('label');
        if (label && label.htmlFor !== this.ID) {
            label.htmlFor = this.ID;
        }
        if (this.ID === 'gigya-textbox-code') {
            this.instanceElement.setAttribute('aria-label', 'Code');
        }
    };
    /**
     * Used for browsers that do not support native placeholders.
     */
    FormInput.prototype.createPlaceholderElement = function (elName, elType) {
        if (elName === 'input' && elType !== 'checkbox' && elType !== 'radio') {
            this.placeHolderElement = window.gigya.utils.DOM.createElement('input', '');
        }
        else if (elName === 'textarea') {
            this.placeHolderElement = window.gigya.utils.DOM.createElement('textarea', '');
        }
        if (window.gigya.localInfo.isIE8) {
            this.placeHolderElement.style.width = this.instanceElement['currentStyle'].width;
        }
        else {
            this.placeHolderElement.style.width = window.getComputedStyle(this.instanceElement).width;
        }
        if (elName === 'input' || elName === 'textarea') {
            this.placeHolderElement['screenSetInstanceOf'] = [this];
            this.placeHolderElement.setAttribute('value', this.placeholderAttributeValue);
            this.placeHolderElement.setAttribute('style', window.gigya._.plugins.utils.DOM.getAttribute(this.instanceElement, 'style'));
            this.placeHolderElement.setAttribute('class', window.gigya._.plugins.utils.DOM.getAttribute(this.instanceElement, 'class') + ' gigya-placeholder');
            this.instanceElement.parentNode.insertBefore(this.placeHolderElement, this.instanceElement);
            // the following line is for vertically aligning the text inside the element
            window.gigya.pluginUtils.DOM.hideElement(this.instanceElement);
        }
        // Attach events.
        if (elName === 'textarea' || (elName === 'input' && elType !== 'checkbox' && elType !== 'radio')) {
            this.placeHolderElement['attachEvent']('onkeydown', this.onPlaceholderKeyDown);
            //this.placeHolderElement.attachEvent('onselectstart', this.onTextSelectionStart);
            this.addEventListener('keydown', this.onKeyDownForPlaceholder);
            this.addEventListener('blur', this.onBlurForPlaceholder);
            this.placeHolderElement['attachEvent']('oncontextmenu', this.onContextMenuOpened);
            this.placeHolderElement['attachEvent']('onfocus', this.onPlaceholderFocused);
            //this.addEventListener('select', this.onTextSelected);
            this.addEventListener('keyup', this.onKeyUpForPlaceholder);
            this.togglePlaceholderStateView(true);
        }
        // WCAG: Hide placeholder input from screen readers.
        this.placeHolderElement.setAttribute('aria-hidden', 'true');
    };
    FormInput.prototype.unlinkInstanceElement = function () {
        if (this.instanceElement) {
            this._schemaRequired = false;
            this.schemaChecks = this._schema = null;
            this.setValue('');
            this.setValidityState(ValidityStates._undefined);
        }
        PasskeyService_1.default.abortCurrentCeremony();
        _super.prototype.unlinkInstanceElement.call(this);
    };
    FormInput.prototype.getValue = function (el, currentValue) {
        if (el === void 0) { el = this.instanceElement; }
        var _a;
        if (el.value === undefined)
            return '';
        var val = window.gigya.utils.stringUtils.trim(el.value);
        if (val && ((_a = this._schema) === null || _a === void 0 ? void 0 : _a.encryptedNonSearchable)) {
            try {
                val = this.valueConverter(val);
            }
            catch (_b) {
                window.gigya.logger.warn("failed to convert value to schema type", { value: val });
            }
        }
        return val;
    };
    FormInput.prototype.prePopulate = function (value) {
        this.previousValue = value;
        // Hidden fields are not pre-populated because it may overwrite a static value.
        if (this.type !== 'hidden') {
            this.setValue(value);
        }
        if (this._schemaWriteAccessMode === WriteAccessModes.clientCreate && !this.isEmpty(value)) {
            this.instanceElement.setAttribute('disabled', 'disabled');
        }
    };
    FormInput.prototype.disabled = function () {
        return Boolean(this.instanceElement && this.instanceElement.getAttribute('disabled'));
    };
    FormInput.prototype.setValue = function (dataValue, setByScript) {
        if (setByScript === void 0) { setByScript = true; }
        // Set new value directly on the DOM.
        var el = this.instanceElement;
        if (el.value !== dataValue) {
            el.value = String(dataValue);
        }
        // Trigger change.
        this.onFieldChange(setByScript);
    };
    Object.defineProperty(FormInput.prototype, "placeholderAttributeValue", {
        get: function () {
            var placeholderText = this.instanceElement.getAttribute(exports.FormInput_CONSTS.placeholderAttribute);
            if (placeholderText) {
                return placeholderText + (this.required() ? ' *' : '');
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    FormInput.prototype.isHidden = function () {
        return utils_1.isHidden(this.instanceElement);
    };
    FormInput.prototype.isInHiddenContainer = function () {
        return utils_1.isFieldInHiddenContainer(this.instanceElement);
    };
    FormInput.prototype.evaluateConditionalAttributes = function () {
        var _this = this;
        _super.prototype.evaluateConditionalAttributes.call(this);
        this.updateDisplayName(this.instanceElement || this.templateElement);
        if (this.showValidCheckmark(this.templateElement)) {
            this._showValidityMarker[ValidityStates.valid] = this._showValidityMarker[ValidityStates.pending] = true;
            this._showValidityOnInput();
        }
        if (this.getValidityState() === ValidityStates.error) {
            this.validate(function (validationInfo) {
                var errorInfo = {
                    field: validationInfo.field,
                    errorCode: validationInfo.errorCode,
                    errorType: validationInfo.errorType
                };
                _this._form.renderFieldError(errorInfo, true, undefined, Errors_1.ErrorType.server);
            });
        }
    };
    FormInput.prototype.executeConditionalResult = function (evaluationResult, conditionalAtt, element) {
        // Grab the last attribute value before it's set to the new value.
        var lastAttributeValue = conditionalAtt.lastAttributeValue;
        // Set new attributes in the DOM.
        evaluationResult = _super.prototype.executeConditionalResult.call(this, evaluationResult, conditionalAtt, element);
        // Only interested in changes.
        if (evaluationResult === lastAttributeValue) {
            return lastAttributeValue;
        }
        if (conditionalAtt.attributeName === exports.FormInput_CONSTS.required) {
            // The field may have been marked as required in the UI and triggered an error.
            // Triggering the field change event will clear the error if it was caused by the required status.
            if (this.getValidityState() === ValidityStates.error) {
                this.onFieldChange();
            }
            // WCAG compliance.
            this.setAriaRequired();
        }
        // Placeholder value updated via conditional attribute.
        this.setPlaceholderValue();
        return evaluationResult;
    };
    FormInput.prototype.setAriaRequired = function () {
        // #69533
        if (this.type === 'submit' || this.type === 'button' || this.type === 'gigya-phone-number-input') {
            return;
        }
        this.instanceElement.setAttribute('aria-required', this.required() ? 'true' : 'false');
    };
    FormInput.prototype.setPlaceholderValue = function () {
        if (this.placeholderAttributeValue) {
            var elementName = this.instanceElement.tagName.toLowerCase();
            var elementType = this.instanceElement.getAttribute('type');
            if (window.gigya.localInfo.isIE8 || window.gigya.localInfo.isIE9) {
                if (!this.placeHolderElement) {
                    this.createPlaceholderElement(elementName, elementType);
                }
                else {
                    window.gigya._.plugins.utils.DOM.setAttribute(this.placeHolderElement, 'value', this.placeholderAttributeValue);
                }
            }
            else {
                if ((elementName === 'input' && elementType !== 'checkbox' && elementType !== 'radio') || elementName === 'textarea') {
                    this.instanceElement.setAttribute('placeholder', this.placeholderAttributeValue);
                }
            }
        }
    };
    FormInput.prototype.onKeyUpForPlaceholder = function (e) {
        var input = e.srcElement['screenSetInstanceOf'][0];
        if (input.isCtrlKeyUp) {
            var keycode = e.keyCode;
            if (keycode === this.KEYCODE_LETTER_X) {
                // x character, backspace or delete
                input.togglePlaceholderStateView(true);
            }
        }
    };
    FormInput.prototype.onBlurForPlaceholder = function (event) {
        var el = event.srcElement;
        var currentValue = el['value'];
        var input = event.srcElement['screenSetInstanceOf'][0];
        if (!currentValue) {
            input.togglePlaceholderStateView(true);
        }
    };
    // this handler is for suppressing the text selection on the placeholder
    //public onTextSelectionStart(e)
    //{
    //    var input = e.srcElement['screenSetInstanceOf'][0] as FormInput;
    //    if (input.isCurrnetValuePlaceholderText) {
    //        event.returnValue = false;
    //    }
    //}
    FormInput.prototype.onContextMenuOpened = function (e) {
        event.returnValue = false;
    };
    FormInput.prototype.onPlaceholderFocused = function (e) {
        var element = e.srcElement;
        var input = element['screenSetInstanceOf'][0];
        input.togglePlaceholderStateView(false, e);
        event.cancelBubble = true;
        if (input._screenSet._placeholderIntervalID === -1) {
            input.togglePlaceholderStateView(false, e);
            input._screenSet._placeholderIntervalID = setInterval(function () {
                if (input._screenSet._placeholderIntervalID === -1) {
                    input.togglePlaceholderStateView(false, e);
                }
                else {
                    clearInterval(input._screenSet._placeholderIntervalID);
                }
            }, 100);
        }
    };
    //this handler is for cases where the user selects the text inside the element (in order to delete part of it)
    //public onTextSelected() {
    //    var el = event.srcElement as HTMLElement;
    //    var input = event.srcElement['screenSetInstanceOf'][0] as FormInput;
    //    input.isTextSelected = true;
    //}
    FormInput.prototype.onPlaceholderKeyDown = function (e) {
        var keycode = e.keyCode;
        var isEnteredValueDisplayable = utils_1.isKeyCodeDisplayable(keycode);
        var element = e.srcElement;
        var input = element['screenSetInstanceOf'][0];
        if (isEnteredValueDisplayable) {
            // hide the placeholder element and show the actual element
            input.togglePlaceholderStateView(false);
        }
        else if (keycode === input.KEY_CODE_BACKSPACE || keycode === input.KEY_CODE_DELETE) {
            event.returnValue = false;
        }
    };
    FormInput.prototype.onKeyDownForPlaceholder = function (e) {
        var keycode = e.keyCode;
        var isEnteredValueDisplayable = utils_1.isKeyCodeDisplayable(keycode);
        var input = e.srcElement['screenSetInstanceOf'][0];
        var lastValue = input.instanceElement.getAttribute('value');
        if (!isEnteredValueDisplayable && input.isCurrnetValuePlaceholderText && keycode == input.KEY_CODE_BACKSPACE) {
            event.returnValue = false;
        }
        else if (lastValue && lastValue.length == 1 && keycode == input.KEY_CODE_BACKSPACE) {
            // @ts-ignore
            e.srcElement.setAttribute('value', '');
            event.returnValue = false;
        }
        else if (input.isTextSelected && (keycode == input.KEY_CODE_DELETE || keycode == input.KEY_CODE_BACKSPACE)) {
            input.isTextSelected = false;
            input.togglePlaceholderStateView(true, event);
        }
        else if (e.ctrlKey) {
            input.isCtrlKeyUp = true;
        }
        else if (isEnteredValueDisplayable && input.isCurrnetValuePlaceholderText) {
            input.togglePlaceholderStateView(false);
        }
        else if (input.isCurrnetValuePlaceholderText && keycode == input.KEY_CODE_DELETE) {
            event.returnValue = false;
        }
    };
    FormInput.prototype.togglePlaceholderStateView = function (showPlaceholder, e) {
        var _this = this;
        if (e === void 0) { e = null; }
        // e: MSEventObj
        if (showPlaceholder) {
            if (e) {
                //this is to handle the select event where the text is erased and the placeholder value isn't set
                e.returnValue = false;
            }
            window.gigya.pluginUtils.DOM.showElement(this.placeHolderElement);
            window.gigya.pluginUtils.DOM.hideElement(this.instanceElement);
            window.gigya._.plugins.utils.DOM.setAttribute(this.instanceElement, 'value', '');
            if (!this.placeHolderElement) {
                setTimeout(function () {
                    _this.placeHolderElement.focus();
                }, 1000);
            }
        }
        else {
            window.gigya.pluginUtils.DOM.hideElement(this.placeHolderElement);
            window.gigya.pluginUtils.DOM.showElement(this.instanceElement);
            window.gigya._.plugins.utils.DOM.setAttribute(this.placeHolderElement, 'value', this.placeholderAttributeValue);
            this.instanceElement.focus();
        }
        this.isCurrnetValuePlaceholderText = showPlaceholder;
        this.isCtrlKeyUp = false;
        this.isTextSelected = false;
    };
    FormInput.prototype.getLoggerName = function () {
        return this.fieldName || _super.prototype.getLoggerName.call(this);
    };
    FormInput.prototype.getArrayKeyField = function () {
        return this.instanceElement.getAttribute(exports.FormInput_CONSTS.arrayKeyFieldAttribute);
    };
    FormInput.prototype.getArrayKeyValue = function () {
        return this.instanceElement.getAttribute(exports.FormInput_CONSTS.arrayKeyValueAttribute);
    };
    FormInput.prototype.getStoredInArrayValue = function () {
        var item = this.getStoredInArrayItem();
        var fieldName = this.getStoredInArrayFieldName();
        return item === null || item === void 0 ? void 0 : item[fieldName];
    };
    FormInput.prototype.getStoredInArrayFieldName = function () {
        var _a;
        return (_a = this.fieldName.split('.')) === null || _a === void 0 ? void 0 : _a.pop();
    };
    FormInput.prototype.getStoredInArrayItem = function () {
        var arrayKeyValue = this.getArrayKeyValue();
        var arrayKeyField = this.getArrayKeyField();
        var arrayData = this.getParentArray();
        return window.gigya.utils.array.first(arrayData, function (obj) { return obj[arrayKeyField] === arrayKeyValue; });
    };
    FormInput.prototype.getParentArray = function () {
        var nestedFormData = this._form.getFormData(false, true);
        var arrayRoot = this.getArrayRoot(true);
        return window.gigya.utils.object.getPropertyBySerializedName(nestedFormData, arrayRoot, true);
    };
    FormInput.prototype.runOnServerDone = function (callback) {
        Errors_1.notImplementerAbstract();
    };
    return FormInput;
}(TemplateElement_1.TemplateElement));
exports.FormInput = FormInput;
function integerCheck(fieldValue) {
    if (fieldValue && isNaN(parseInt(fieldValue)))
        return GSErrors_1.GSErrors.VALIDATION_ERROR;
    return GSErrors_1.GSErrors.OK;
}
function floatCheck(fieldValue) {
    if (fieldValue && isNaN(parseFloat(fieldValue)))
        return GSErrors_1.GSErrors.VALIDATION_ERROR;
    return GSErrors_1.GSErrors.OK;
}
function booleanCheck(fieldValue) {
    if (fieldValue == null)
        return GSErrors_1.GSErrors.VALIDATION_ERROR;
    return GSErrors_1.GSErrors.OK;
}
function dateCheck(fieldValue) {
    if (fieldValue) {
        var dateResult = window.gigya.global.date.getISODate(fieldValue); // Format is always ISO
        if (!dateResult)
            return GSErrors_1.GSErrors.VALIDATION_ERROR;
    }
    return GSErrors_1.GSErrors.OK;
}
var SchemaTypeChecks = {
    integer: integerCheck,
    long: integerCheck,
    float: floatCheck,
    boolean: booleanCheck,
    date: dateCheck,
};
utils_1.DeepFreeze(SchemaTypeChecks);
var formatPattern = /(.*?)\(['"](.*?)['"]\)$/;
function schemaFormatCheck(format) {
    var arFormat = format.match(formatPattern);
    if (arFormat) {
        var formatType = arFormat[1];
        var formatValue = arFormat[2];
        if (formatType && formatValue) {
            if (formatType === 'regex') {
                try {
                    // this regex = /^\/?(.*?)(?:\/((?:[dgimsuy](?!.*\1))*)?)?$/ is finding if a given value is one of the following format
                    // {regex_expression} or /{regex_expression}/ or /{regex_expression}/{flags}
                    var regexParts = formatValue.match(/^\/?(.*?)(?:\/((?:[dgimsuy](?!.*\1))*)?)?$/);
                    var regexExp = regexParts[1];
                    var regexFlags = regexParts[2];
                    var regexFormat_1 = new RegExp(regexExp, regexFlags);
                    regexFormat_1.test(''); // Run regex to make sure that regex will crush if necesary during schema load
                    return function (fieldValue) {
                        if (fieldValue) {
                            if (regexFormat_1.global) {
                                regexFormat_1.lastIndex = 0;
                            }
                            var test = regexFormat_1.test(fieldValue);
                            if (!test)
                                return GSErrors_1.GSErrors.VALIDATION_ERROR;
                        }
                        return GSErrors_1.GSErrors.OK;
                    };
                }
                catch (e) {
                    throw new Error('Unsupported regEx pattern: ' + e);
                }
            }
        }
    }
    throw new Error('Unsupported format: ' + format);
}
FormInput.addInputToLibrary(FormInput, FormInputPriorities.Fallback);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/LoginIdInput.ts":
/*!****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/LoginIdInput.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var RegisterForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/RegisterForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/RegisterForm.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var Errors_1 = __webpack_require__(/*! ../Errors */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors.ts");
var ServerFormInput_1 = __webpack_require__(/*! ./ServerFormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/ServerFormInput.ts");
var LoginIdInput = /** @class */ (function (_super) {
    tslib_1.__extends(LoginIdInput, _super);
    function LoginIdInput(context) {
        var _this = _super.call(this, context) || this;
        _this.isServerValidationEnabled = true;
        _this._serverValidateAvaliability = _this.showValidCheckmark(context.element);
        _this.loginIdMustBeEmail = context.fieldName === 'email';
        return _this;
    }
    LoginIdInput.FORM_TYPE_CRITERIA = function (context) {
        return context.form instanceof RegisterForm_1.RegisterForm && (context.fieldName === 'email' || context.fieldName === 'username');
    };
    LoginIdInput.prototype.showDataPending = function () {
        if (this.instanceElement) {
            this._form.renderFieldError({ field: this, errorCode: GSErrors_1.GSErrors.Data_Pending }, true);
        }
    };
    LoginIdInput.prototype.onKeyUp = function (e) {
        if (this.getValue() !== this.previousValue) {
            // Force all events to be fired because we've touched the field error status.
            this.previousValue = undefined;
            this.lastCheck = undefined;
            this.startServerQuery();
            this.showDataPending();
        }
        _super.prototype.onKeyUp.call(this, e);
    };
    LoginIdInput.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        var email = this.getEmailFromQueryParams();
        if (email) {
            this.prePopulate(email);
            this.instanceElement.setAttribute('disabled', 'disabled');
        }
    };
    LoginIdInput.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this.lastCheck = null;
    };
    LoginIdInput.prototype.serverValidated = function () {
        return this._serverValidateAvaliability;
    };
    LoginIdInput.prototype.startServerValidation = function (fieldValue, callback) {
        var _this = this;
        if (!this.instanceElement) {
            return;
        }
        if (fieldValue === this.lastCheck) {
            // Nothing has changed since last check, no need to query the server again
            return;
        }
        this.showDataPending();
        this.lastCheck = fieldValue;
        this.clearServerError();
        this.instanceElement.removeAttribute(FormInput_1.FormInput_CONSTS.serverValidation);
        this.setValidityState(FormInput_1.ValidityStates.pending);
        if (this.isServerValidationEnabled === false) {
            // We've already tried to use the server-side validation and discovered that it's disabled.
            // Save API calls and don't try again.
            callback({
                errorCode: GSErrors_1.GSErrors.OK,
                field: this
            });
        }
        else {
            window.gigya.accounts.isAvailableLoginID({
                loginID: fieldValue,
                callback: function (res) { return _this.serverQueryDone(res, fieldValue, callback); },
            });
        }
    };
    LoginIdInput.prototype.serverQueryDone = function (res, checkedValue, callback) {
        // response is no longer relevant due to screen going out of view
        if (!this.instanceElement) {
            return;
        }
        // response is no longer relevant due to value change
        if (this.getValue() !== checkedValue) {
            return;
        }
        var errorCode = res.errorCode;
        switch (errorCode) {
            case GSErrors_1.GSErrors.OK:
                if (!window.gigya.utils.validation.isExplicitTrue(res.isAvailable)) {
                    errorCode = GSErrors_1.GSErrors.UNIQUE_IDENTIFIER_EXISTS;
                }
                break;
            // Console Site Settings has "Protect against login identifier harvesting" option.
            // This causes error code 403026 to be returned for all isAvailableLoginID calls.
            // This shouldn't show any error to the client, so transform to an "OK" response.
            case GSErrors_1.GSErrors.UNAUTHORIZED_ACCESS_ERROR:
                this.isServerValidationEnabled = false;
                errorCode = GSErrors_1.GSErrors.OK;
                break;
        }
        this.setServerError(errorCode);
        this.onServerEnd(errorCode);
        this._form.onInputChange(this, false); // triggers revalidation
        callback({
            errorCode: errorCode,
            field: this,
            errorType: Errors_1.ErrorType.server
        });
    };
    LoginIdInput.prototype.validateValue = function (formData, fieldValue, callback) {
        if (this.isServerValidationEnabled &&
            fieldValue !== this.lastCheck) {
            this.clearServerError();
        }
        if (fieldValue) {
            if (this.loginIdMustBeEmail &&
                (!this.schemaFormat) && // continue to hard coded email validation only if schema lacks format
                !window.gigya.pluginUtils.validation.isValidEmailLoginID(fieldValue)) {
                return callback({
                    errorCode: 400006 /* INVALID_PARAMETER_VALUE */,
                    field: this,
                    errorType: Errors_1.ErrorType.client
                });
            }
        }
        return _super.prototype.validateValue.call(this, formData, fieldValue, callback);
    };
    LoginIdInput.prototype.getEmailFromQueryParams = function () {
        return window.gigya.utils.URL.getParamValueFromURL('gig_email', window.location.search, undefined);
    };
    return LoginIdInput;
}(ServerFormInput_1.ServerFormInput));
exports.LoginIdInput = LoginIdInput;
FormInput_1.FormInput.addInputToLibrary(LoginIdInput, FormInput_1.FormInputPriorities.Important);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PasswordInputs.ts":
/*!******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PasswordInputs.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var PasswordStrengthWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordStrengthWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordStrengthWidget.ts");
var TemplateElement_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts");
var ScreenConsts_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
exports.BasePasswordInput_CONSTS = {
    showPasswordStrength: 'show-password-strength',
};
utils_1.DeepFreeze(exports.BasePasswordInput_CONSTS);
var BasePasswordInput = /** @class */ (function (_super) {
    tslib_1.__extends(BasePasswordInput, _super);
    function BasePasswordInput(context) {
        var _this = _super.call(this, context) || this;
        _this.showPasswordStrengthConditionalExists = false;
        _this.showPasswordStrengthAttribute = '';
        utils_1.ForEach(_this.conditionalExpressions, function (el) {
            if (el.attributeName == exports.BasePasswordInput_CONSTS.showPasswordStrength) {
                _this.showPasswordStrengthConditionalExists = true;
                _this.showPasswordStrengthConditional = el;
            }
        });
        _this.showPasswordStrengthAttribute = window.gigya._.plugins.utils.DOM.getAttribute(_this.templateElement, exports.BasePasswordInput_CONSTS.showPasswordStrength);
        if (_this.showPasswordStrengthAttribute != null && _this.showPasswordStrengthAttribute.length) {
            _this.passwordStrengthOrientation = PasswordStrengthWidget_1.BubbleOrientations[_this.showPasswordStrengthAttribute];
            if (typeof _this.passwordStrengthOrientation === 'undefined')
                _this.passwordStrengthOrientation = _this._screenSet.isModal ? PasswordStrengthWidget_1.BubbleOrientations.left : PasswordStrengthWidget_1.BubbleOrientations.up;
            _this.showPasswordStrength =
                (typeof _this.passwordStrengthOrientation !== 'undefined' && _this.passwordStrengthOrientation != PasswordStrengthWidget_1.BubbleOrientations.none) ||
                    _this.showPasswordStrengthConditionalExists;
        }
        else {
            _this.showPasswordStrength = false;
        }
        return _this;
    }
    BasePasswordInput.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.showPasswordStrength) {
            var bubbleHtml = '';
            if (this.showPasswordStrengthAttribute &&
                typeof this.passwordStrengthOrientation !== 'undefined' &&
                this.passwordStrengthOrientation !== PasswordStrengthWidget_1.BubbleOrientations.none) {
                bubbleHtml = window.gigya.utils.templates.fill(this._screenSet.getTemplates().inlinedPasswordStrength, {
                    orientation: PasswordStrengthWidget_1.BubbleOrientations[this.passwordStrengthOrientation],
                });
            }
            else {
                bubbleHtml = window.gigya.utils.templates.fill(this._screenSet.getTemplates().inlinedPasswordStrength, {
                    orientation: PasswordStrengthWidget_1.BubbleOrientations[PasswordStrengthWidget_1.BubbleOrientations.none],
                });
            }
            this.instanceElement.insertAdjacentHTML('afterend', bubbleHtml);
            var bubbleElement = (this.instanceElement.nextElementSibling
                ? this.instanceElement.nextElementSibling
                : this.instanceElement.nextSibling); // IE8 compatability
            this.passwordStrengthWidget = new PasswordStrengthWidget_1.PasswordStrengthWidget(this._form, bubbleElement);
            if (this.showPasswordStrengthConditionalExists) {
                this.passwordStrengthWidget.templateElement.setAttribute(ScreenConsts_1.Screen_CONSTS.conditionalAttributePrefix + 'data-bubble-orientation', this.showPasswordStrengthConditional.condition);
                var conditional = {
                    attributeName: 'data-bubble-orientation',
                    condition: this.showPasswordStrengthConditional.condition,
                    defaultValue: this.showPasswordStrengthConditional.defaultValue,
                    lastAttributeValue: this.showPasswordStrengthConditional.defaultValue,
                    isWidgetParamTag: false,
                };
                this.passwordStrengthWidget.conditionalExpressions.push(conditional);
            }
            this.passwordStrengthWidget._passwordField = this; // bind to this password field
            TemplateElement_1.TemplateElement.prepareTemplateInstanceElement(bubbleElement, false);
            this.passwordStrengthWidget.linkInstanceElement(bubbleElement.parentElement);
        }
    };
    BasePasswordInput.prototype.unlinkInstanceElement = function () {
        if (this.showPasswordStrength) {
            this.passwordStrengthWidget.unlinkInstanceElement();
            this.passwordStrengthWidget.unlinkTemplate();
            this.passwordStrengthWidget = null;
        }
        _super.prototype.unlinkInstanceElement.call(this);
    };
    BasePasswordInput.prototype.getTruncatedValue = function (val) {
        return String(val);
    };
    BasePasswordInput.prototype.validateValue = function (formData, fieldValue, callback) {
        var _this = this;
        _super.prototype.validateValue.call(this, formData, fieldValue, function (validationInfo) {
            if (validationInfo.errorCode !== GSErrors_1.GSErrors.OK)
                return callback(validationInfo);
            if (_this.isPasswordSchemaValidated()) {
                var apiData = _this._screenSet.getApiData();
                if (apiData.getPolicies && apiData.getPolicies.passwordComplexity && _this.shouldValidatePasswordComplexity(fieldValue)) {
                    var oComplexity = apiData.getPolicies.passwordComplexity || {};
                    var oPassStrength = PasswordStrengthWidget_1.getPasswordStrengthData(fieldValue);
                    if (!PasswordStrengthWidget_1.isPasswordStrengthValid(fieldValue, oPassStrength, oComplexity))
                        return callback({
                            errorCode: GSErrors_1.GSErrors.VALIDATION_ERROR,
                            field: _this,
                        });
                }
            }
            callback(validationInfo);
        });
    };
    BasePasswordInput.prototype.getValue = function (el, currentValue) {
        if (el === void 0) { el = this.instanceElement; }
        return el.value === undefined ? '' : el.value;
    };
    BasePasswordInput.prototype.isPasswordSchemaValidated = function () {
        return this._form.isPasswordSchemaValidated();
    };
    BasePasswordInput.prototype.evaluateConditionalAttributes = function () {
        _super.prototype.evaluateConditionalAttributes.call(this);
        if (this.passwordStrengthWidget) {
            this.passwordStrengthWidget.evaluateConditionalAttributes();
        }
    };
    BasePasswordInput.prototype.isPasswordStrengthWidgetBound = function () {
        return this.showPasswordStrength;
    };
    BasePasswordInput.prototype.shouldValidatePasswordComplexity = function (fieldValue) {
        return this.required() || !this.isEmpty(fieldValue);
    };
    return BasePasswordInput;
}(FormInput_1.FormInput));
exports.BasePasswordInput = BasePasswordInput;
var PasswordInput = /** @class */ (function (_super) {
    tslib_1.__extends(PasswordInput, _super);
    function PasswordInput(context) {
        var _this = _super.call(this, context) || this;
        _this._form._passwordInputs.push(_this);
        return _this;
    }
    PasswordInput.FORM_TYPE_CRITERIA = function (context) {
        return context.fieldName === 'password';
    };
    PasswordInput.prototype.isPasswordSchemaValidated = function () {
        return _super.prototype.isPasswordSchemaValidated.call(this);
    };
    return PasswordInput;
}(BasePasswordInput));
exports.PasswordInput = PasswordInput;
FormInput_1.FormInput.addInputToLibrary(PasswordInput);
var NewPasswordInput = /** @class */ (function (_super) {
    tslib_1.__extends(NewPasswordInput, _super);
    function NewPasswordInput(context) {
        var _this = _super.call(this, context) || this;
        _this._form._passwordInputs.unshift(_this);
        return _this;
    }
    NewPasswordInput.FORM_TYPE_CRITERIA = function (context) {
        return context.fieldName === 'newPassword';
    };
    NewPasswordInput.prototype.isPasswordSchemaValidated = function () {
        return true;
    };
    return NewPasswordInput;
}(BasePasswordInput));
exports.NewPasswordInput = NewPasswordInput;
FormInput_1.FormInput.addInputToLibrary(NewPasswordInput);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PhoneNumberInput.ts":
/*!********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PhoneNumberInput.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FormInput_1 = __webpack_require__(/*! ./FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var FlagService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Services/FlagService */ "./src/core/Gigya.Js/app/Services/FlagService.ts");
var extendedRegex = /^\+?[1-9]{1,4}?(\(\d{1,3}?\))?[- ]?\d{1,4}([- ]?\d{1,4}[- ]?\d{1,9})?$/;
var noSpecialSymbolsRegex = /^\+?[1-9]\d{1,14}$/;
exports.gigyaPhoneNumberInput = 'gigya-phone-number-input';
exports.PhoneInput_Attributes = {
    countryCodesSelection: 'data-country-codes-selection',
    countryCodes: 'data-country-codes'
};
var CountryCodeSelection;
(function (CountryCodeSelection) {
    CountryCodeSelection["All"] = "all";
    CountryCodeSelection["Specific"] = "specific";
})(CountryCodeSelection = exports.CountryCodeSelection || (exports.CountryCodeSelection = {}));
var PhoneNumberInput = /** @class */ (function (_super) {
    tslib_1.__extends(PhoneNumberInput, _super);
    function PhoneNumberInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.countryCodesDataStructure = {};
        _this.countryCodesList = [];
        _this.onCountryCodeSelected = function (setByScript) {
            _this.countryCodeSelectHadChanged = true;
            var selectedValue = _this.countryCodeSelect.value;
            if (selectedValue === '0') // the default value - it represents no value
                return;
            _this.countryCodeSelect.options[0].value = selectedValue;
            _this.countryCodeSelect.options[0].text = selectedValue;
            _this.countryCodeSelect.selectedIndex = 0;
            // Trigger change.
            _this.onFieldChange(setByScript);
        };
        _this.onSubscriberNumberChanged = function () {
            _this.subscriberNumberHadChanged = true;
        };
        return _this;
    }
    PhoneNumberInput.prototype.hasCountryCodeSelectChanged = function () {
        return this.countryCodeSelectHadChanged;
    };
    PhoneNumberInput.prototype.hasSubscriberNumberChanged = function () {
        return this.subscriberNumberHadChanged;
    };
    PhoneNumberInput.FORM_TYPE_CRITERIA = function (context) {
        return context.element instanceof HTMLFieldSetElement
            && context.type === exports.gigyaPhoneNumberInput;
    };
    PhoneNumberInput.prototype.setPlaceholderValue = function () {
        if (this.subscriberNumber) {
            this.subscriberNumber.setAttribute('placeholder', this.placeholderAttributeValue);
        }
    };
    PhoneNumberInput.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.isSpecificCountryCodes) {
            this.filterCountryCodes();
        }
        this.countryCodeSelect = this.instanceElement.querySelector('select');
        this.subscriberNumber = this.instanceElement.querySelector('input');
        if (!this.countryCodeSelect || !this.subscriberNumber) {
            window.gigya.logger.warn("Phone Number Input: missing country select or mobile phone text box");
            return;
        }
        this.setCountryCodeSelectAriaLabel();
        this.generateCountryCodesDataStructure();
        this.setupChangeEventHandler();
    };
    PhoneNumberInput.prototype._showValidityOnInput = function (element) {
        if (element === void 0) { element = this.instanceElement; }
        if (!this.shouldValidate())
            return;
        var countryCodeValidityState = this.getCountryCodeValidityState();
        _super.prototype._showValidityOnInput.call(this, this.countryCodeSelect, countryCodeValidityState, false);
        if (countryCodeValidityState === FormInput_1.ValidityStates.error) {
            this.countryCodeSelect.blur();
        }
        var subscriberNumberValidityState = this.getSubscriberNumberValidityState();
        var allowValidityMarker = (countryCodeValidityState === FormInput_1.ValidityStates.valid && subscriberNumberValidityState === FormInput_1.ValidityStates.valid);
        _super.prototype._showValidityOnInput.call(this, this.subscriberNumber, subscriberNumberValidityState, allowValidityMarker);
    };
    PhoneNumberInput.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this.removeChangeEventHandler();
    };
    PhoneNumberInput.prototype.setValidityState = function (validityState, fromServer) {
        if (fromServer === void 0) { fromServer = false; }
        if (this.countryCodeSelect.value !== this.countryCodeSelectPreviousValue
            || this.subscriberNumber.value !== this.subscriberNumberPreviousValue) {
            this.countryCodeSelectPreviousValue = this.countryCodeSelect.value;
            this.subscriberNumberPreviousValue = this.subscriberNumber.value;
            this._validityState = FormInput_1.ValidityStates._undefined;
        }
        _super.prototype.setValidityState.call(this, validityState, fromServer);
    };
    PhoneNumberInput.prototype.validateValue = function (formData, fieldValue, callback) {
        var _this = this;
        if (!this.shouldValidate())
            return callback({ errorCode: GSErrors_1.GSErrors.OK, field: this });
        if (!this.countryCodeSelect.value || this.countryCodeSelect.value === '0' || !this.subscriberNumber.value)
            fieldValue = '';
        return _super.prototype.validateValue.call(this, formData, fieldValue, function (validationInfo) {
            if (validationInfo.errorCode !== GSErrors_1.GSErrors.OK || _this.schemaFormat)
                return callback(validationInfo); // basic validation failed
            var errorCode = _this.regExMatchingForE164.test(fieldValue) ?
                GSErrors_1.GSErrors.OK : // valid phone number in e.164 format
                GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE;
            return callback({
                errorCode: errorCode, field: _this,
            });
        });
    };
    PhoneNumberInput.prototype.getValue = function (el, currentValue) {
        if (el === void 0) { el = this.instanceElement; }
        if (!this.countryCodeSelect || !this.subscriberNumber)
            return '';
        var countryCode = this.countryCodeSelect.value === '0' ? "" : this.countryCodeSelect.value;
        var subscriberNumber = this.subscriberNumber.value.replace(/\s/gm, ''); // removes any whitespace character
        if (countryCode !== '+39') { // Italy (phone must start with 0)
            subscriberNumber = subscriberNumber.replace(/^0+/, '');
        }
        return "" + countryCode + subscriberNumber;
    };
    PhoneNumberInput.prototype.setValue = function (phoneNumber, setByScript) {
        if (setByScript === void 0) { setByScript = true; }
        if (!this.countryCodeSelect || !this.subscriberNumber) {
            return;
        }
        if (this.getValue() !== phoneNumber) {
            var countryCode = this.getCountryCode(phoneNumber);
            var subscriberNumber = this.getSubscriberNumber(phoneNumber, countryCode);
            this.countryCodeSelect.value = countryCode;
            this.subscriberNumber.value = subscriberNumber;
            this.onCountryCodeSelected(setByScript);
        }
    };
    PhoneNumberInput.prototype.markAsDirty = function () {
        this.countryCodeSelectHadChanged = true;
        this.subscriberNumberHadChanged = true;
    };
    PhoneNumberInput.prototype.markAsPristine = function () {
        this.countryCodeSelectHadChanged = false;
        this.subscriberNumberHadChanged = false;
    };
    PhoneNumberInput.prototype.shouldValidate = function () {
        if (this.schemaFormat) {
            return true;
        }
        if (this.required() && (this._form.submitButtonClicked || this.areBothInputsDirty())) {
            return true;
        }
        return this.hasPreviousValue() && this._form.submitButtonClicked && this.isDirty();
    };
    PhoneNumberInput.prototype.focus = function () {
        var _a;
        (_a = this.countryCodeSelect) === null || _a === void 0 ? void 0 : _a.focus();
    };
    PhoneNumberInput.prototype.getConditionalExpression = function (el) {
        return tslib_1.__spreadArrays(_super.prototype.getConditionalExpression.call(this, el), utils_1.getConditionalAttributeExpressions(this.subscriberNumber), utils_1.getConditionalAttributeExpressions(this.countryCodeSelect));
    };
    PhoneNumberInput.prototype.generateCountryCodesDataStructure = function () {
        var _this = this;
        var _a;
        // get all option with value attr except the one with value "0"
        var countryCodeOptions = (_a = this.countryCodeSelect) === null || _a === void 0 ? void 0 : _a.querySelectorAll('option[value]:not([value="0"])');
        countryCodeOptions === null || countryCodeOptions === void 0 ? void 0 : countryCodeOptions.forEach(function (countryCodeOption) {
            var ds = _this.countryCodesDataStructure;
            for (var _i = 0, _a = countryCodeOption.value; _i < _a.length; _i++) {
                var digit = _a[_i];
                if (!ds[digit]) {
                    ds[digit] = {};
                }
                ds = ds[digit];
            }
        });
        this.countryCodesList = Array.prototype.slice.call(countryCodeOptions)
            .map(function (option) { return option.value; });
    };
    PhoneNumberInput.prototype.filterCountryCodes = function () {
        if (!this.specificCountryCodes.length) {
            return;
        }
        var specificCountryCodes = ['0'].concat(this.specificCountryCodes); //  add default value and split the specific country codes
        this.instanceElement.querySelector('optgroup').remove(); // Remove the first options group
        for (var _i = 0, _a = this.countryCodesOptions; _i < _a.length; _i++) {
            var countryCodesOption = _a[_i];
            if (countryCodesOption.value && specificCountryCodes.indexOf(countryCodesOption.value) === -1) {
                countryCodesOption.remove();
            }
        }
    };
    Object.defineProperty(PhoneNumberInput.prototype, "isSpecificCountryCodes", {
        get: function () {
            var _a;
            return ((_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.getAttribute(exports.PhoneInput_Attributes.countryCodesSelection)) === CountryCodeSelection.Specific;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberInput.prototype, "specificCountryCodes", {
        get: function () {
            var _a;
            var specificCountryCodes = (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.getAttribute(exports.PhoneInput_Attributes.countryCodes);
            return specificCountryCodes.length ? specificCountryCodes === null || specificCountryCodes === void 0 ? void 0 : specificCountryCodes.split(',') : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberInput.prototype, "countryCodesOptions", {
        get: function () {
            var _a, _b;
            return Array.from(((_b = (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector('select')) === null || _b === void 0 ? void 0 : _b.options) || []);
        },
        enumerable: true,
        configurable: true
    });
    PhoneNumberInput.prototype.getCountryCode = function (phoneNumber) {
        var res = "";
        var temp = "";
        var ds = this.countryCodesDataStructure;
        for (var _i = 0, phoneNumber_1 = phoneNumber; _i < phoneNumber_1.length; _i++) {
            var digit = phoneNumber_1[_i];
            if (!ds[digit]) {
                break;
            }
            temp = "" + temp + digit;
            if (this.countryCodesList.includes(temp)) {
                res = temp;
            }
            ds = ds[digit];
        }
        return res;
    };
    PhoneNumberInput.prototype.getSubscriberNumber = function (phoneNumber, countryCode) {
        countryCode = countryCode.replace('\+', '\\+');
        var regExp = new RegExp("^" + countryCode);
        return phoneNumber.replace(regExp, '');
    };
    PhoneNumberInput.prototype.setupChangeEventHandler = function () {
        this.countryCodeSelect.addEventListener('change', this.onCountryCodeSelected);
        this.subscriberNumber.addEventListener('input', this.onSubscriberNumberChanged);
    };
    PhoneNumberInput.prototype.removeChangeEventHandler = function () {
        this.countryCodeSelect.removeEventListener('change', this.onCountryCodeSelected);
        this.subscriberNumber.removeEventListener('input', this.onSubscriberNumberChanged);
    };
    PhoneNumberInput.prototype.getCountryCodeValidityState = function () {
        if (this._validityState === FormInput_1.ValidityStates._undefined) {
            return FormInput_1.ValidityStates._undefined;
        }
        return (!this.countryCodeSelect.value || this.countryCodeSelect.value === '0')
            ? FormInput_1.ValidityStates.error
            : FormInput_1.ValidityStates.valid;
    };
    PhoneNumberInput.prototype.getSubscriberNumberValidityState = function () {
        if (this._validityState === FormInput_1.ValidityStates._undefined) {
            return FormInput_1.ValidityStates._undefined;
        }
        if (!this.subscriberNumber.value || this.getCountryCodeValidityState() !== FormInput_1.ValidityStates.valid) {
            return FormInput_1.ValidityStates.error;
        }
        if (this.schemaFormat) {
            return this.isSchemaValid ?
                FormInput_1.ValidityStates.valid :
                FormInput_1.ValidityStates.error;
        }
        return this.regExMatchingForE164.test(this.getValue()) ?
            FormInput_1.ValidityStates.valid :
            FormInput_1.ValidityStates.error;
    };
    PhoneNumberInput.prototype.areBothInputsDirty = function () {
        return this.hasCountryCodeSelectChanged() && this.hasSubscriberNumberChanged();
    };
    PhoneNumberInput.prototype.isDirty = function () {
        return this.hasCountryCodeSelectChanged() || this.hasSubscriberNumberChanged();
    };
    PhoneNumberInput.prototype.setCountryCodeSelectAriaLabel = function () {
        var _a, _b;
        var label = (_a = this.countryCodeSelect) === null || _a === void 0 ? void 0 : _a.querySelector('[value="0"]');
        (_b = this.countryCodeSelect) === null || _b === void 0 ? void 0 : _b.setAttribute('aria-label', label === null || label === void 0 ? void 0 : label.innerText);
    };
    Object.defineProperty(PhoneNumberInput.prototype, "regExMatchingForE164", {
        get: function () {
            return FlagService_1.FlagService.useExtendedPhoneNumberRegex ? extendedRegex : noSpecialSymbolsRegex;
        },
        enumerable: true,
        configurable: true
    });
    return PhoneNumberInput;
}(FormInput_1.FormInput));
exports.PhoneNumberInput = PhoneNumberInput;
FormInput_1.FormInput.addInputToLibrary(PhoneNumberInput);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RadioInput.ts":
/*!**************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RadioInput.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var DOM_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/Utils/DOM */ "./src/core/Gigya.Js/app/Utils/DOM.ts");
var ScreenConsts_1 = __webpack_require__(/*! ../ScreenConsts */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts.ts");
exports.RadioInput_CONSTS = {
    wrapperSelector: '.gigya-composite-control-multi-choice',
    displayNameExpressionAttr: ScreenConsts_1.Screen_CONSTS.expressionAttributePrefix + ":" + FormInput_1.FormInput_CONSTS.displayName
};
var RadioInput = /** @class */ (function (_super) {
    tslib_1.__extends(RadioInput, _super);
    function RadioInput(context) {
        return _super.call(this, context) || this;
    }
    RadioInput.FORM_TYPE_CRITERIA = function (context) {
        return context.type === 'radio';
    };
    // getValue only returns value of current single radio button.
    // To validate radio group, we need to get value of the selected button - value the field mapped to radio group currently has
    RadioInput.prototype.getValidateValue = function (formData) {
        var arrayKeyValue = this.getArrayKeyValue();
        var arrayKeyField = this.getArrayKeyField();
        if (arrayKeyValue && arrayKeyField) {
            return this.getStoredInArrayValue();
        }
        return formData[this.getName(false, true)];
    };
    RadioInput.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        this._schema = undefined; // disable schema checks for radio buttons
        this.groupRadioButtonArrayFields();
        this.addDisplayName();
    };
    RadioInput.prototype.setValue = function (dataValue, setByScript) {
        if (setByScript === void 0) { setByScript = true; }
        // Set new value directly on the DOM.
        var el = this.instanceElement;
        el.checked = dataValue.toString() === el.value;
        // Trigger change.
        this.onFieldChange(setByScript);
    };
    RadioInput.prototype.getValue = function (el) {
        if (el === void 0) { el = this.instanceElement; }
        var value = _super.prototype.getValue.call(this, el);
        return el.checked ? value : null;
    };
    RadioInput.prototype.groupRadioButtonArrayFields = function () {
        if (this.instanceElement) {
            // #44366 - Group radio buttons by schema field name and array key field.
            var name = this.instanceElement.getAttribute('name');
            var arrayKeyValue = this.instanceElement.getAttribute(FormInput_1.FormInput_CONSTS.arrayKeyValueAttribute);
            if (name && arrayKeyValue) {
                this.instanceElement.setAttribute('name', name + "[" + arrayKeyValue + "]");
            }
        }
    };
    RadioInput.prototype.addDisplayName = function () {
        if (this.instanceElement) {
            var radioWrapper = DOM_1.getClosestElement(this.instanceElement, exports.RadioInput_CONSTS.wrapperSelector);
            var firstRadioInput = radioWrapper === null || radioWrapper === void 0 ? void 0 : radioWrapper.querySelector('input');
            var displayName = firstRadioInput === null || firstRadioInput === void 0 ? void 0 : firstRadioInput.getAttribute(exports.RadioInput_CONSTS.displayNameExpressionAttr);
            if (displayName) {
                this.instanceElement.setAttribute(exports.RadioInput_CONSTS.displayNameExpressionAttr, displayName);
            }
        }
    };
    return RadioInput;
}(FormInput_1.FormInput));
exports.RadioInput = RadioInput;
FormInput_1.FormInput.addInputToLibrary(RadioInput);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RememeberInput.ts":
/*!******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RememeberInput.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var CheckboxInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CheckboxInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CheckboxInput.ts");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var RememeberInput = /** @class */ (function (_super) {
    tslib_1.__extends(RememeberInput, _super);
    function RememeberInput(context) {
        var _this = _super.call(this, context) || this;
        _this._form._rememberMe = _this;
        return _this;
    }
    RememeberInput.FORM_TYPE_CRITERIA = function (context) {
        return context.fieldName === 'remember';
    };
    return RememeberInput;
}(CheckboxInput_1.CheckboxInput));
exports.RememeberInput = RememeberInput;
FormInput_1.FormInput.addInputToLibrary(RememeberInput, FormInput_1.FormInputPriorities.Important);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RetypePasswordInput.ts":
/*!***********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RetypePasswordInput.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var RetypePasswordInput = /** @class */ (function (_super) {
    tslib_1.__extends(RetypePasswordInput, _super);
    function RetypePasswordInput(context) {
        var _this = _super.call(this, context) || this;
        _this._form._passwordRetypes.push(_this);
        return _this;
    }
    RetypePasswordInput.FORM_TYPE_CRITERIA = function (context) {
        return context.fieldName === 'passwordRetype';
    };
    RetypePasswordInput.prototype.validateValue = function (formData, fieldValue, callback) {
        if (this._form._validatedPassword) {
            var passwordValue = this._form._validatedPassword.getValue();
            if (passwordValue !== '' && passwordValue !== fieldValue)
                return callback({
                    field: this,
                    errorCode: GSErrors_1.GSErrors.VALIDATION_ERROR,
                });
        }
        _super.prototype.validateValue.call(this, formData, fieldValue, callback);
    };
    return RetypePasswordInput;
}(FormInput_1.FormInput));
exports.RetypePasswordInput = RetypePasswordInput;
FormInput_1.FormInput.addInputToLibrary(RetypePasswordInput);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/ServerFormInput.ts":
/*!*******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/ServerFormInput.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var FormInput_1 = __webpack_require__(/*! ./FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var GSErrors = window.gigya.GSErrors;
var ServerFieldStates;
(function (ServerFieldStates) {
    ServerFieldStates[ServerFieldStates["NotStarted"] = 0] = "NotStarted";
    ServerFieldStates[ServerFieldStates["InProgress"] = 1] = "InProgress";
    ServerFieldStates[ServerFieldStates["Done"] = 2] = "Done";
    ServerFieldStates[ServerFieldStates["Error"] = 3] = "Error";
})(ServerFieldStates = exports.ServerFieldStates || (exports.ServerFieldStates = {}));
var ServerFormInput = /** @class */ (function (_super) {
    tslib_1.__extends(ServerFormInput, _super);
    function ServerFormInput(context) {
        var _this = _super.call(this, context) || this;
        _this.serverState = ServerFieldStates.NotStarted;
        _this.callbacks = new Array();
        return _this;
    }
    ServerFormInput.prototype.startServerQuery = function () {
        this.serverState = ServerFieldStates.InProgress;
    };
    ServerFormInput.prototype.onServerEnd = function (errorCode) {
        var _this = this;
        this.serverState = errorCode == GSErrors.OK ? ServerFieldStates.Done : ServerFieldStates.Error;
        if (this.callbacks.length) {
            utils_1.ForEach(this.callbacks, function (callback) { return callback(_this.serverState, _this); });
            this.callbacks = new Array();
        }
    };
    ServerFormInput.prototype.runOnServerDone = function (callback) {
        if (this.serverState !== ServerFieldStates.InProgress)
            callback(this.serverState, this);
        else
            this.callbacks.push(callback);
    };
    return ServerFormInput;
}(FormInput_1.FormInput));
exports.ServerFormInput = ServerFormInput;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/index.ts":
/*!*********************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/index.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordInputs = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PasswordInputs */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PasswordInputs.ts");
exports.ButtonInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/ButtonInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/ButtonInput.ts");
exports.CheckboxInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CheckboxInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CheckboxInput.ts");
exports.CommunicationCheckboxInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CommunicationCheckboxInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CommunicationCheckboxInput.ts");
exports.EmailInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/EmailInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/EmailInput.ts");
exports.FormInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
exports.AddressInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/AddressInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/AddressInput.ts");
exports.LoginIdInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/LoginIdInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/LoginIdInput.ts");
exports.PhoneNumberInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PhoneNumberInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PhoneNumberInput.ts");
exports.RadioInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RadioInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RadioInput.ts");
exports.RememberInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RememeberInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RememeberInput.ts");
exports.RetypePasswordInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RetypePasswordInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RetypePasswordInput.ts");


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes.ts":
/*!*******************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var ConflictHandling;
(function (ConflictHandling) {
    ConflictHandling[ConflictHandling["fail"] = 0] = "fail";
    ConflictHandling[ConflictHandling["saveProfileAndFail"] = 1] = "saveProfileAndFail";
})(ConflictHandling = exports.ConflictHandling || (exports.ConflictHandling = {}));
exports.LoginModes = {
    connect: {
        name: 'connect'
    },
    standard: {
        name: 'standard',
        getLoginProviders: function (apiData, params, regToken) {
            var enabledProviders = params['enabledProviders'];
            if (typeof enabledProviders !== 'string')
                return null;
            return enabledProviders.toLowerCase();
        },
        filterParams: function (params) {
            delete params.regToken;
            delete params.instanceID;
            delete params.getInstance;
            return params;
        },
    },
    reAuth: {
        name: 'reAuth',
        getLoginProviders: function (apiData, params, regToken) {
            var currentProviders = apiData.getAccountInfo && apiData.getAccountInfo.socialProviders;
            var identities = apiData.getAccountInfo && apiData.getAccountInfo.identities;
            if (!currentProviders)
                return null;
            currentProviders = currentProviders.toLowerCase();
            var providers = currentProviders.split(',');
            if (identities) {
                // remove identities that are allowLogin false
                utils_1.ForEach(identities, function (identity) {
                    if (!identity.allowsLogin) {
                        var idx = providers.indexOf(identity.provider.toLowerCase());
                        if (idx > -1)
                            providers.splice(idx, 1);
                    }
                });
            }
            return providers.join(',');
        },
        filterParams: function (params) {
            delete params.instanceID;
            delete params.getInstance;
            return params;
        },
    },
    link: {
        name: 'link',
        getLoginProviders: function (apiData, params, regToken) {
            var _a, _b, _c, _d;
            if (!regToken)
                return null;
            return (_d = (_c = (_b = (_a = apiData === null || apiData === void 0 ? void 0 : apiData.getConflictingAccount) === null || _a === void 0 ? void 0 : _a.conflictingAccount) === null || _b === void 0 ? void 0 : _b.loginProviders) === null || _c === void 0 ? void 0 : _c.join(',')) === null || _d === void 0 ? void 0 : _d.toLowerCase();
        },
        filterParams: function (params) {
            delete params.instanceID;
            delete params.getInstance;
            return params;
        },
    },
};
utils_1.DeepFreeze(exports.LoginModes);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/SchemaTypeConverter.ts":
/*!****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/SchemaTypeConverter.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var stringConverter = function (value) { return window.gigya.utils.stringUtils.trim(value); };
var numberConverter = function (value) { return parseInt(value, 10); };
var floatConverter = function (value) { return parseFloat(value); };
var booleanConverter = function (value) { return String(value) === 'true'; };
var schemaTypeConverterMapping = {
    'string': stringConverter,
    'basic-string': stringConverter,
    'encrypted-string': stringConverter,
    'text': stringConverter,
    'date': stringConverter,
    'integer': numberConverter,
    'long': numberConverter,
    'float': floatConverter,
    'boolean': booleanConverter,
};
exports.schemaTypeToConverter = function (schemaType) {
    return schemaTypeConverterMapping[schemaType] || stringConverter;
};


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Screen.ts":
/*!***************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Screen.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var TemplateElement_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts");
var ScreenOptions_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var ErrorDisplayElement_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement.ts");
var BaseScreenWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var ScreenConsts_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts.ts");
var PluginStyles_1 = __webpack_require__(/*! src/core/Gigya.Js.Plugin/app/PluginStyles */ "./src/core/Gigya.Js.Plugin/app/PluginStyles.ts");
var Screen = /** @class */ (function (_super) {
    tslib_1.__extends(Screen, _super);
    function Screen(_screenSet, templateElement) {
        var _this = _super.call(this, templateElement, _screenSet) || this;
        _this._screenSet = _screenSet;
        _this.templateElement = templateElement;
        _this._errorDisplayElements = {};
        _this._profilePhotos = new Array();
        _this._captchas = new Array();
        _this._others = new Array();
        if (!_this.ID)
            _this.warn('screen is missing an id');
        if (/[^-_0-9a-zA-Z]/.test(_this.ID))
            _this.warn('screen id contains special characters that may contain special meaning');
        ScreenOptions_1.ScreenOptions.call(_this, templateElement, _screenSet.screenOptions);
        _this.prepareBoundedToFormElements();
        _this._forms = BaseForm_1.BaseForm.registerForms(_this);
        _this._widgets = BaseScreenWidget_1.BaseScreenWidget.registerWidgets(_this);
        // handling of normal DOM elements that use gigya logic
        // Another check if the group is active from the screenset plugin
        _this.prepareOtherElements();
        _this.setCssClass();
        // replacing all "for" attribute from the screen template
        utils_1.replaceAttribute(_this.templateElement, 'for', TemplateElement_1.TemplateElement_CONSTS.elementFor);
        return _this;
    }
    Screen.prototype.prepareBoundedToFormElements = function () {
        var _this = this;
        var boundedElements = new Array();
        Screen.utils.ForEach(ErrorDisplayElement_1.ErrorDisplayElement_CONSTS.gigyaClasses, function (gigyaClass) {
            boundedElements = boundedElements.concat(Array.prototype.slice.call(_this.templateElement.querySelectorAll("." + gigyaClass)));
        });
        Screen.utils.ForEach(boundedElements, function (el) {
            var boundedElement = new ErrorDisplayElement_1.ErrorDisplayElement(el, _this);
            var boundedList = _this._errorDisplayElements[boundedElement.boundedTo];
            if (!boundedList)
                boundedList = _this._errorDisplayElements[boundedElement.boundedTo] = [];
            boundedList.push(boundedElement);
        });
    };
    Object.defineProperty(Screen.prototype, "variantGroupId", {
        get: function () {
            var _a;
            return (_a = this.templateElement) === null || _a === void 0 ? void 0 : _a.getAttribute(ScreenConsts_1.Screen_CONSTS.dataVariantGroup);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Screen.prototype, "abTestId", {
        get: function () {
            var _a;
            return (_a = this.templateElement) === null || _a === void 0 ? void 0 : _a.getAttribute(ScreenConsts_1.Screen_CONSTS.dataVariantTestId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Screen.prototype, "abTestingData", {
        get: function () {
            return {
                testId: this.abTestId,
                variantId: this.ID,
                requestedScreenId: this.requestedScreenId
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Screen.prototype, "variantPercentage", {
        get: function () {
            var _a;
            var variantPercentage = parseInt((_a = this.templateElement) === null || _a === void 0 ? void 0 : _a.getAttribute(ScreenConsts_1.Screen_CONSTS.dataVariantPercentage));
            if (!isNaN(variantPercentage)) {
                return variantPercentage;
            }
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Screen.prototype, "isOriginalVariant", {
        get: function () {
            var _a;
            return (_a = this.templateElement) === null || _a === void 0 ? void 0 : _a.hasAttribute(ScreenConsts_1.Screen_CONSTS.dataVariantOriginalScreen);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Screen.prototype, "isScreenVariant", {
        get: function () {
            return this.requestedScreen !== this.ID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Screen.prototype, "requestedScreen", {
        get: function () {
            return this.requestedScreenId || this.ID;
        },
        enumerable: true,
        configurable: true
    });
    Screen.prototype.addSpecificErrorBinds = function (boundedElements) {
        var _this = this;
        if (boundedElements === void 0) { boundedElements = []; }
        var boundedErrorElements = [];
        Screen.utils.ForEach(boundedElements, function (el) {
            var boundedElement = new ErrorDisplayElement_1.ErrorDisplayElement(el, _this);
            _this._errorDisplayElements[boundedElement.boundedTo] = (_this._errorDisplayElements[boundedElement.boundedTo] || []).concat([boundedElement]);
            boundedErrorElements.push(boundedElement);
        });
        boundedErrorElements.forEach(function (el) { return el.linkInstanceElement(_this.instanceElement); });
        return boundedErrorElements;
    };
    Screen.prototype.removeSpecificErrorBinds = function (boundedErrors) {
        var _this = this;
        if (boundedErrors === void 0) { boundedErrors = []; }
        Screen.utils.ForEach(boundedErrors, function (errorDisplay) {
            delete _this._errorDisplayElements[errorDisplay.boundedTo];
            errorDisplay.unlinkInstanceElement();
        });
    };
    Screen.prototype.addDynamicWidgets = function (rootEl, params) {
        var _this = this;
        if (params === void 0) { params = {}; }
        var newWidgets = BaseScreenWidget_1.BaseScreenWidget.registerDynamicWidgets(this, rootEl);
        if (params === null || params === void 0 ? void 0 : params.exclude) {
            newWidgets = newWidgets
                .filter(function (w) { var _a; return !((_a = params === null || params === void 0 ? void 0 : params.exclude) === null || _a === void 0 ? void 0 : _a.some(function (t) { return w instanceof t; })); });
        }
        Screen.utils.ForEach(newWidgets, function (w) { return w.linkInstanceElement(_this.instanceElement); });
        this._widgets = this._widgets.concat(newWidgets);
        return newWidgets;
    };
    Screen.prototype.addDynamicWidgetsByType = function (rootEl, widgetTypes) {
        var _this = this;
        var newWidgets = BaseScreenWidget_1.BaseScreenWidget.registerDynamicWidgets(this, rootEl);
        newWidgets = newWidgets
            .filter(function (w) { return widgetTypes === null || widgetTypes === void 0 ? void 0 : widgetTypes.some(function (t) { return w instanceof t; }); });
        newWidgets.forEach(function (w) { return w.linkInstanceElement(_this.instanceElement); });
        this._widgets = this._widgets.concat(newWidgets);
        return newWidgets;
    };
    Screen.prototype.removeDynamicWidgets = function (widgetsToRemove) {
        if (!this._widgets || !this._widgets.length)
            return;
        this._widgets = this._widgets.filter(function (w) { return widgetsToRemove.indexOf(w) < 0; });
        widgetsToRemove.forEach(function (widget) {
            widget.unlinkInstanceElement();
            widget.unlinkTemplate();
        });
    };
    Screen.prototype.prepareOtherElements = function () {
        // These elements are evaluated because they have an ID.
        var otherElements = Screen.utils.getElementsByHavingAttribute(this.templateElement, '*', 'id');
        // These elements are evaluated because they have conditional attributes.
        var attributePrefixes = [ScreenConsts_1.Screen_CONSTS.conditionalAttributePrefix, ScreenConsts_1.Screen_CONSTS.expressionAttributePrefix];
        var conditionalElements = Screen.utils.getElementsByHavingAttributePrefix(this.templateElement, attributePrefixes, ['param']);
        // Combine and de-dup arrays.
        for (var _i = 0, conditionalElements_1 = conditionalElements; _i < conditionalElements_1.length; _i++) {
            var conditionalElement = conditionalElements_1[_i];
            if (window.gigya.utils.array.indexOf(otherElements, conditionalElement) === -1) {
                otherElements.push(conditionalElement);
            }
        }
        // Add TemplateElement to other elements.
        for (var _a = 0, otherElements_1 = otherElements; _a < otherElements_1.length; _a++) {
            var el = otherElements_1[_a];
            if (!TemplateElement_1.TemplateElement.isTemplateInstance(el)) {
                this._others.push(new TemplateElement_1.TemplateElement(el, this));
            }
        }
    };
    Screen.prototype.overrideTemplateCaption = function (caption) {
        // override caption attributes and remove the caption expression, NOTICE: this mean that it will no longer be evaluated
        this.instanceElement.removeAttribute(ScreenConsts_1.Screen_CONSTS.expressionAttributePrefix + ":" + ScreenOptions_1.ScreenOptions_CONSTS.caption);
        this.instanceElement.setAttribute(ScreenOptions_1.ScreenOptions_CONSTS.caption, caption);
        this.caption = caption;
    };
    Screen.prototype.haveForms = function () {
        return this._forms.length || this._hasTfa;
    };
    Screen.prototype.getFormByElement = function (element) {
        var _a;
        for (var _i = 0, _b = this._forms; _i < _b.length; _i++) {
            var form = _b[_i];
            if ((_a = form.instanceElement) === null || _a === void 0 ? void 0 : _a.contains(element)) {
                return form;
            }
        }
    };
    Screen.prototype.setCssClass = function () {
        this.cssClass = this.templateElement.getAttribute(ScreenConsts_1.Screen_CONSTS.cssClass);
    };
    Screen.prototype.unlinkTemplate = function () {
        var unlinkItem = function (i) { return i.unlinkTemplate(); };
        Screen.utils.ForEach(this._forms, unlinkItem);
        Screen.utils.ForEachProp(this._errorDisplayElements, function (boundedElements) {
            Screen.utils.ForEach(boundedElements, unlinkItem);
        });
        Screen.utils.ForEach(this._others, unlinkItem);
        Screen.utils.ForEach(this._widgets, unlinkItem);
        _super.prototype.unlinkTemplate.call(this);
    };
    Screen.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var linkItem, _i, _a, widget, _b, _c, others, _d, _e, _f, errorDisplayElement, _g, _h, boundedElement, _j, _k, form;
            var _this = this;
            return tslib_1.__generator(this, function (_l) {
                switch (_l.label) {
                    case 0:
                        _super.prototype.linkInstanceElement.call(this, parent);
                        if (!this.instanceElement) return [3 /*break*/, 18];
                        linkItem = function (i) { return i.linkInstanceElement(_this.instanceElement); };
                        _i = 0, _a = this._widgets;
                        _l.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        widget = _a[_i];
                        return [4 /*yield*/, linkItem(widget)];
                    case 2:
                        _l.sent();
                        _l.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        _b = 0, _c = this._others;
                        _l.label = 5;
                    case 5:
                        if (!(_b < _c.length)) return [3 /*break*/, 8];
                        others = _c[_b];
                        return [4 /*yield*/, linkItem(others)];
                    case 6:
                        _l.sent();
                        _l.label = 7;
                    case 7:
                        _b++;
                        return [3 /*break*/, 5];
                    case 8:
                        _d = [];
                        for (_e in this._errorDisplayElements)
                            _d.push(_e);
                        _f = 0;
                        _l.label = 9;
                    case 9:
                        if (!(_f < _d.length)) return [3 /*break*/, 14];
                        errorDisplayElement = _d[_f];
                        _g = 0, _h = this._errorDisplayElements[errorDisplayElement];
                        _l.label = 10;
                    case 10:
                        if (!(_g < _h.length)) return [3 /*break*/, 13];
                        boundedElement = _h[_g];
                        return [4 /*yield*/, linkItem(boundedElement)];
                    case 11:
                        _l.sent();
                        _l.label = 12;
                    case 12:
                        _g++;
                        return [3 /*break*/, 10];
                    case 13:
                        _f++;
                        return [3 /*break*/, 9];
                    case 14:
                        _j = 0, _k = this._forms;
                        _l.label = 15;
                    case 15:
                        if (!(_j < _k.length)) return [3 /*break*/, 18];
                        form = _k[_j];
                        return [4 /*yield*/, linkItem(form)];
                    case 16:
                        _l.sent();
                        _l.label = 17;
                    case 17:
                        _j++;
                        return [3 /*break*/, 15];
                    case 18:
                        if (window.gigya.localInfo.isIE9 || window.gigya.localInfo.isIE8) {
                            Screen.utils.ForEach(this._forms, function (form) {
                                form.filters.push({
                                    filterOutWidgetsToSend: function (dataToFilter) {
                                        if (dataToFilter.profile) {
                                            delete dataToFilter.profile._profilePhoto;
                                        }
                                        return dataToFilter;
                                    },
                                });
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Screen.prototype.legacyLinkInstanceElement = function (parent) {
        var _this = this;
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.instanceElement) {
            var linkItem = function (i) { return i.linkInstanceElement(_this.instanceElement); };
            Screen.utils.ForEach(this._widgets, linkItem);
            Screen.utils.ForEach(this._others, linkItem);
            Screen.utils.ForEachProp(this._errorDisplayElements, function (boundedElements) {
                Screen.utils.ForEach(boundedElements, linkItem);
            });
            Screen.utils.ForEach(this._forms, linkItem);
        }
        if (window.gigya.localInfo.isIE9 || window.gigya.localInfo.isIE8) {
            Screen.utils.ForEach(this._forms, function (form) {
                form.filters.push({
                    filterOutWidgetsToSend: function (dataToFilter) {
                        if (dataToFilter.profile) {
                            delete dataToFilter.profile._profilePhoto;
                        }
                        return dataToFilter;
                    },
                });
            });
        }
    };
    Screen.prototype.placeContentInElement = function (instanceElement) {
        Screen.utils.ForEach(this.templateElement.attributes, function (a) { return instanceElement.setAttribute(a.name, a.value); });
        instanceElement.innerHTML = this.templateElement.innerHTML;
        utils_1.replaceAttribute(instanceElement, TemplateElement_1.TemplateElement_CONSTS.elementFor, 'for');
    };
    Screen.prototype.unlinkInstanceElement = function () {
        if (this.instanceElement) {
            var unlinkItem = function (i) { return i.unlinkInstanceElement(); };
            Screen.utils.ForEach(this._forms, unlinkItem);
            Screen.utils.ForEachProp(this._errorDisplayElements, function (boundedElements) {
                Screen.utils.ForEach(boundedElements, unlinkItem);
            });
            Screen.utils.ForEach(this._others, unlinkItem);
            Screen.utils.ForEach(this._widgets, unlinkItem);
        }
        _super.prototype.unlinkInstanceElement.call(this);
    };
    Screen.prototype.getErrorMessage = function (errorCode, isBoundToField, field) {
        return this._screenSet.getErrorMessage(errorCode, isBoundToField, field === null || field === void 0 ? void 0 : field.fieldName, field === null || field === void 0 ? void 0 : field.displayName);
    };
    Screen.prototype.dispatchEvent = function (eventName, event) {
        return this._screenSet.dispatchPluginEvent(eventName, event);
    };
    // TODO: make async stack
    Screen.prototype.performAutoSkip = function (formContext) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var forms, result, canSkipAllForms;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._forms.length) {
                            return [2 /*return*/, null];
                        }
                        forms = [];
                        Screen.utils.ForEach(this._forms, function (form) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                forms.push(form);
                                return [2 /*return*/];
                            });
                        }); });
                        return [4 /*yield*/, gigya.Promise.all(forms.map(function (form) { return form.canAutoSkip(formContext); }))];
                    case 1:
                        result = _a.sent();
                        canSkipAllForms = result.every(function (canSkipForm) {
                            return canSkipForm === true;
                        });
                        return [2 /*return*/, canSkipAllForms ? this._forms[0] : null];
                }
            });
        });
    };
    Screen.prototype.hideErrors = function () {
        var _this = this;
        this._forms.map(function (f) {
            return (_this._errorDisplayElements[f.bindID] || []).forEach(function (elBound) {
                return elBound.hideError();
            });
        });
    };
    Screen.prototype.showErrors = function (form, arErrors, isServerError) {
        var _this = this;
        var arBoundElements = this._errorDisplayElements[form.bindID] || [];
        Screen.utils.ForEach(arBoundElements, function (elBound) {
            if (!isServerError && elBound.scope !== ErrorDisplayElement_1.ErrorScopes.firstError && elBound.scope !== ErrorDisplayElement_1.ErrorScopes.anyError && elBound.scope !== ErrorDisplayElement_1.ErrorScopes.allErrors)
                return;
            var firstError;
            var arErrorMessages = new Array();
            var shouldDisplay = false;
            Screen.utils.ForEach(arErrors, function (error) {
                if (elBound.isErrorCodeAllowed(error.errorCode, error.errorFlags)) {
                    error.handled = true;
                    var errorMessage = error.customMessage || error.errorMessage;
                    if (!firstError)
                        firstError = error.errorCode;
                    if (!errorMessage) {
                        var field = form.getField(error.fieldName);
                        if (field)
                            errorMessage = _this._screenSet.getErrorMessage(error.errorCode, false, field.fieldName, field.displayName);
                    }
                    if (errorMessage) {
                        shouldDisplay = true;
                        arErrorMessages.push(errorMessage);
                    }
                }
            });
            if (shouldDisplay) {
                var errorMsg;
                if (elBound.scope === ErrorDisplayElement_1.ErrorScopes.firstError || isServerError) {
                    errorMsg = arErrorMessages[0];
                }
                else {
                    errorMsg = '<ul><li>' + arErrorMessages.join('</li><li>') + '</li></ul>';
                }
                elBound.showError({
                    errorCode: firstError,
                    errorMessage: errorMsg,
                });
            }
            else {
                elBound.hideError();
            }
        });
        if (Screen.utils.Some(arErrors, function (error) { return !error.handled; })) {
            form.warn('Missing error-msg or error-display for form');
        }
    };
    Screen.prototype.dimScreen = function () {
        return this._screenSet.dimScreenSet();
    };
    Screen.prototype.undimScreen = function () {
        return this._screenSet.undimScreenSet();
    };
    Screen.prototype.setProfilePhoto = function (thumbnailUrl) {
        Screen.utils.ForEach(this._profilePhotos, function (pPhoto) { return pPhoto.setThumbnailUrl(thumbnailUrl); });
    };
    Screen.prototype.getExtraProfileFields = function (missingOnly) {
        var missingFields = new Array();
        Screen.utils.ForEach(this._forms, function (f) { return (missingFields = missingFields.concat(f.getExtraProfileFields(missingOnly))); });
        return missingFields;
    };
    Screen.prototype.getNeededData = function (formContext) {
        var neededData = {};
        Screen.utils.ForEach(this._forms, function (f) {
            var formNeededData = f.getNeededData(formContext);
            Screen.utils.ForEachProp(formNeededData, function (val, name) { return (neededData[name] = val); });
        });
        return neededData;
    };
    /// Override TemplateElement's hasConditionalAttributes
    Screen.prototype.hasConditionalAttributes = function () {
        if (_super.prototype.hasConditionalAttributes.call(this))
            return true;
        var children = [].concat(this._forms, this._widgets, this._captchas, this._profilePhotos, this._others);
        window.gigya.utils.array.forEachProp(this._errorDisplayElements, function (templateElements) { return children.concat(templateElements); });
        return window.gigya.utils.array.some(children, function (child) { return child.hasConditionalAttributes(); });
    };
    Screen.prototype.evaluateConditionalAttributes = function () {
        var _this = this;
        if (!this.hasConditionalAttributes()) {
            return;
        }
        window.gigya.logger.group("screen conditional attributes evaluation").endWhen(function () {
            var lastDataWidthAttributeValue = _this.width;
            var lastDataHeightAttributeValue = _this.height;
            _super.prototype.evaluateConditionalAttributes.call(_this);
            ScreenOptions_1.ScreenOptions.call(_this, _this.instanceElement, _this._screenSet.screenOptions);
            // Assign the 'data-' attributes of the screen.
            // Note: the screen's 'data-' attributes will override CSS properties and will take precedence
            // in case the current data-width is 'auto', no width value will be set to the 'Screen' element.
            var currentDataWidthAttributeValue = _this.width;
            var currentDataHeightAttributeValue = _this.height;
            // The following line is for a scenario that conditional attributes were evaluated on the screen level
            // and there's a chance that the modal also needs to be resized accordingly
            var screenDimensions = _this.getScreenDimensionsWithUnitType();
            if (lastDataWidthAttributeValue != currentDataWidthAttributeValue || lastDataHeightAttributeValue != currentDataHeightAttributeValue) {
                _this._screenSet.resizeModal({ width: screenDimensions.width, height: screenDimensions.height });
            }
            var captionWidth = _this.instanceElement ? _this.instanceElement.offsetWidth + 'px' : '';
            _this._screenSet.setCaption(_this.caption, captionWidth);
            Screen.utils.ForEach(_this._forms, function (form) {
                form.evaluateConditionalAttributes();
            });
            Screen.utils.ForEachProp(_this._errorDisplayElements, function (boundedElements) {
                Screen.utils.ForEach(boundedElements, function (boundedElement) {
                    boundedElement.evaluateConditionalAttributes();
                });
            });
            Screen.utils.ForEach(_this._others, function (oth) {
                oth.evaluateConditionalAttributes();
            });
            Screen.utils.ForEach(_this._widgets, function (widget) {
                widget.evaluateConditionalAttributes();
            });
        });
    };
    Screen.prototype.resetLastConditionalValues = function () {
        window.gigya.logger.debug("resetting conditional values");
        _super.prototype.resetLastConditionalValues.call(this);
        Screen.utils.ForEach(this._forms, function (form) {
            form.resetLastConditionalValues();
        });
        Screen.utils.ForEachProp(this._errorDisplayElements, function (boundedElements) {
            Screen.utils.ForEach(boundedElements, function (boundedElement) {
                boundedElement.resetLastConditionalValues();
            });
        });
        Screen.utils.ForEach(this._others, function (oth) {
            oth.resetLastConditionalValues();
        });
        Screen.utils.ForEach(this._widgets, function (widget) {
            widget.resetLastConditionalValues();
        });
    };
    Screen.prototype.setBeforeLoadData = function (eventData) {
        this._forms.forEach(function (form) { return form.setBeforeLoadData(eventData); });
    };
    Screen.prototype.getCaptchaData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var captcha, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        captcha = this._captchas.filter(function (captcha) { return Boolean(captcha) && !captcha.isHidden(); })[0];
                        if (!captcha) {
                            return [2 /*return*/, gigya.Promise.resolve()];
                        }
                        _a = {};
                        return [4 /*yield*/, captcha.getToken()];
                    case 1: return [2 /*return*/, (_a.token = _b.sent(),
                            _a.type = captcha.getType(),
                            _a)];
                }
            });
        });
    };
    Screen.prototype.getScreenDimensionsWithUnitType = function () {
        var isLegacy = this._screenSet.getPluginStyle() == PluginStyles_1.PluginStyle.legacy;
        var widthVal;
        if (this.width) {
            var widthUnits;
            widthUnits = Screen.utils.getUnitMeasurementType(this.width);
            if (widthUnits !== utils_1.UnitMeasurementType.auto && (!isLegacy || widthUnits != utils_1.UnitMeasurementType.percentage)) {
                widthVal = parseFloat(this.width) + widthUnits;
            }
        }
        var heightVal;
        if (this.height) {
            var heightUnits;
            heightUnits = Screen.utils.getUnitMeasurementType(this.height);
            if (heightUnits !== utils_1.UnitMeasurementType.auto && (!isLegacy || heightUnits != utils_1.UnitMeasurementType.percentage)) {
                heightVal = parseFloat(this.height) + heightUnits;
            }
        }
        return { width: widthVal, height: heightVal };
    };
    // Overridable dependencies ///
    Screen.utils = {
        ForEach: utils_1.ForEach,
        getElementsByHavingAttribute: utils_1.getElementsByHavingAttribute,
        getElementsByHavingAttributePrefix: utils_1.getElementsByHavingAttributePrefix,
        ForEachProp: utils_1.ForEachProp,
        Some: utils_1.Some,
        getUnitMeasurementType: utils_1.getUnitMeasurementType,
    };
    return Screen;
}(TemplateElement_1.TemplateElement));
exports.Screen = Screen;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts.ts":
/*!*********************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Screen_CONSTS = {
    gigyaClass: 'gigya-screen',
    conditionalAttributePrefix: 'gigya-conditional',
    expressionAttributePrefix: 'gigya-expression',
    cssClass: 'data-css-class',
    dataVariantPercentage: 'data-variant-percentage',
    dataVariantGroup: 'data-variant-group',
    dataVariantOriginalScreen: 'data-variant-original-screen',
    dataVariantTestId: 'data-variant-test-id',
};


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions.ts":
/*!**********************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
exports.ScreenOptions_CONSTS = {
    accountsLinkedScreen: 'data-on-accounts-linked-screen',
    pendingTfaRegistrationScreen: 'data-on-pending-tfa-registration-screen',
    pendingTfaVerificationScreen: 'data-on-pending-tfa-verification-screen',
    pendingRegistrationScreen: 'data-on-pending-registration-screen',
    existingLoginIdentifierScreen: 'data-on-existing-login-identifier-screen',
    pendingVerificationScreen: 'data-on-pending-verification-screen',
    pendingCodeVerificationScreen: 'data-on-pending-email-verification-code',
    missingLoginIdScreen: 'data-on-missing-loginid-screen',
    pendingPasswordChangeScreen: 'data-on-pending-password-change-screen',
    pendingReAuthenticationScreen: 'data-on-pending-recent-login-screen',
    width: 'data-width',
    height: 'data-height',
    caption: 'data-caption',
};
utils_1.DeepFreeze(exports.ScreenOptions_CONSTS);
var ScreenOptions = /** @class */ (function () {
    function ScreenOptions(el, parent) {
        parent = parent || {};
        this.accountsLinkedScreen = el.getAttribute(exports.ScreenOptions_CONSTS.accountsLinkedScreen) || parent.accountsLinkedScreen;
        this.pendingTfaRegistrationScreen = el.getAttribute(exports.ScreenOptions_CONSTS.pendingTfaRegistrationScreen) || parent.pendingTfaRegistrationScreen;
        this.pendingTfaVerificationScreen = el.getAttribute(exports.ScreenOptions_CONSTS.pendingTfaVerificationScreen) || parent.pendingTfaVerificationScreen;
        this.pendingRegistrationScreen = el.getAttribute(exports.ScreenOptions_CONSTS.pendingRegistrationScreen) || parent.pendingRegistrationScreen;
        this.existingLoginIdentifierScreen = el.getAttribute(exports.ScreenOptions_CONSTS.existingLoginIdentifierScreen) || parent.existingLoginIdentifierScreen;
        this.pendingVerificationScreen = el.getAttribute(exports.ScreenOptions_CONSTS.pendingVerificationScreen) || parent.pendingVerificationScreen;
        this.pendingCodeVerificationScreen = el.getAttribute(exports.ScreenOptions_CONSTS.pendingCodeVerificationScreen) || parent.pendingCodeVerificationScreen;
        this.missingLoginIdScreen = el.getAttribute(exports.ScreenOptions_CONSTS.missingLoginIdScreen) || parent.missingLoginIdScreen;
        this.pendingPasswordChangeScreen = el.getAttribute(exports.ScreenOptions_CONSTS.pendingPasswordChangeScreen) || parent.pendingPasswordChangeScreen;
        this.pendingReAuthenticationScreen = el.getAttribute(exports.ScreenOptions_CONSTS.pendingReAuthenticationScreen) || parent.pendingReAuthenticationScreen;
        this.width = el.getAttribute(exports.ScreenOptions_CONSTS.width) || parent.width;
        this.height = el.getAttribute(exports.ScreenOptions_CONSTS.height) || parent.height;
        this.caption = el.getAttribute(exports.ScreenOptions_CONSTS.caption) || parent.caption;
    }
    return ScreenOptions;
}());
exports.ScreenOptions = ScreenOptions;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetData.ts":
/*!**********************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetData.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var ScreenSetData = /** @class */ (function () {
    function ScreenSetData(params) {
        this.params = params;
        this.apiData = {}; // Each form can have its own server API data
        this.lastSubmittedFormResponse = {};
        this.finalizeRegistrationNeeded = false;
        this.neededData = {};
        this.extraEventData = {};
        this.otpData = {};
        this.pushData = {};
        this.authMethodData = {
            identifiers: {}
        };
        this.shouldConnectAccounts = false;
        this.tfaProviders = {
            activeProviders: []
        };
        this.regToken = params.regToken;
        this.finalizeRegistrationNeeded = params.finalizeRegistration;
    }
    return ScreenSetData;
}());
exports.ScreenSetData = ScreenSetData;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetPlugin.ts":
/*!************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetPlugin.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_Object_dot_assign) {Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var ScreenSetData_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetData */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetData.ts");
var CloseReasons_1 = __webpack_require__(/*! src/core/Gigya.Js.Plugin/app/CloseReasons */ "./src/core/Gigya.Js.Plugin/app/CloseReasons.ts");
var Screen_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Screen */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Screen.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var Errors_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors.ts");
var TemplateElement_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts");
var ScreenOptions_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions.ts");
var IBaseObjectConfig_1 = __webpack_require__(/*! src/core/Gigya.Js/app/BaseObject/IBaseObjectConfig */ "./src/core/Gigya.Js/app/BaseObject/IBaseObjectConfig.ts");
var PluginStyles_1 = __webpack_require__(/*! src/core/Gigya.Js.Plugin/app/PluginStyles */ "./src/core/Gigya.Js.Plugin/app/PluginStyles.ts");
var NewsletterSignupForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/NewsletterSignupForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/NewsletterSignupForm.ts");
var ScreenConsts_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts.ts");
var constants_1 = __webpack_require__(/*! src/accounts/constants */ "./src/accounts/constants.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var LoginModes_1 = __webpack_require__(/*! ./LoginModes */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes.ts");
var GroupVariantProvider = __webpack_require__(/*! ./GroupVariantProvider */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/GroupVariantProvider.ts");
var FlagService_1 = __webpack_require__(/*! ../../../core/Gigya.Js/app/Services/FlagService */ "./src/core/Gigya.Js/app/Services/FlagService.ts");
var linkAccountsHelper_1 = __webpack_require__(/*! src/core/Gigya.Js.Plugin/app/Utils/general/linkAccountsHelper */ "./src/core/Gigya.Js.Plugin/app/Utils/general/linkAccountsHelper.ts");
var validationUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/validation */ "./src/core/Gigya.Js/app/Utils/validation.ts");
var ScreenSetPlugin_CONSTS = {
    namespace: 'accounts',
    pluginName: 'screenSet',
    showScreenSetName: 'showScreenSet',
    switchScreenName: 'switchScreen',
    hideScreenSetName: 'hideScreenSet',
    stayOnScreen: '_stay',
};
utils_1.DeepFreeze(ScreenSetPlugin_CONSTS);
utils_1.DeepFreeze(CloseReasons_1.CloseReasons);
exports.EndFlowScreens = {
    _skip: CloseReasons_1.CloseReasons.skip,
    _finish: CloseReasons_1.CloseReasons.finished,
    _cancel: CloseReasons_1.CloseReasons.cancel,
};
utils_1.DeepFreeze(exports.EndFlowScreens);
exports.ScreenSet_CONSTS = {
    gigyaClass: 'gigya-screen-set',
    mobileDialogClass: 'gigya-screen-dialog-mobile',
    webDialogClass: 'gigya-screen-dialog',
    contentClass: 'gigya-screen-dialog-content',
    topElementClass: 'gigya-screen-dialog-top',
    calculateSizeClass: 'gigya-calculate-size',
    gigyaHidden: 'gigya-hidden',
    startScreen: 'data-start-screen',
    isResponsive: 'data-responsive',
    dialogStyle: 'data-dialog-style',
    dataActiveGroups: 'data-active-groups',
};
utils_1.DeepFreeze(exports.ScreenSet_CONSTS);
var ScreenSetPlugin = /** @class */ (function (_super) {
    tslib_1.__extends(ScreenSetPlugin, _super);
    function ScreenSetPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._addedCSS = false;
        _this._screens = {};
        _this._random = Math.random();
        _this._placeholderIntervalID = -1;
        _this.onUserStateChange = function (res) { return _this.onAccountInfo(res); };
        // ITemplateElementParent implementation
        _this._screenSet = _this;
        return _this;
    }
    ScreenSetPlugin.prototype.getConfig = function () {
        return {
            requiredParams: ['screenSet'],
            defaultParams: { screenSet: '' },
            defaultModalParams: {
                screenSet: '',
            },
            defaultDeviceType: IBaseObjectConfig_1.DeviceTypes.auto,
            hasMobileUI: true,
            allowModal: true,
            disableModalContainerInit: true,
            defaultDialogStyle: PluginStyles_1.PluginStyle.legacy,
            supportsResponsive: true,
            enableSizePolling: true,
            enableViewportPolling: true,
        };
    };
    ScreenSetPlugin.injectionInfo = function () {
        return {
            name: 'screenSet',
            namespace: 'accounts',
            methodName: 'showScreenSet',
            jsName: 'gigya.services.accounts.plugins.screenSet',
            publicMethods: {
                hideScreenSet: { instanceMethod: 'cancel', argNames: [] },
                switchScreen: { instanceMethod: 'switchScreen', argNames: ['screen'] },
            },
        };
    };
    ScreenSetPlugin.prototype.dispatchPluginEvent = function (eventName, eventObj) {
        if (eventObj === void 0) { eventObj = {}; }
        eventObj['screenSetID'] = this._ID;
        return _super.prototype.dispatchPluginEvent.call(this, eventName, eventObj);
    };
    //#region static methods
    // TODO: will have a support structure in BasePlugin that will find the instance
    ScreenSetPlugin._calculateInstanceId = function (p) {
        var containerID = p.containerID || '';
        return p.screenSet + '_' + containerID;
    };
    //#endregion
    ScreenSetPlugin.prototype.init = function (callback) {
        var _this = this;
        var gigParams = window.gigya.utils.object.extractProperties(window.gigya.utils.URL.getGigParamsFromURL({ url: document.location.href, removePrefix: true }), null, 'lang|regToken');
        if (gigParams['lang']) {
            this.params._explicitLang = true;
        }
        __webpack_provided_Object_dot_assign(this.params, gigParams);
        this.loadTemplate(function (success, translations, serverParams) {
            var _a;
            if (!success) {
                window.gigya.logger.error('failed loading screenset template');
            }
            else {
                window.gigya.logger.info('screenset template loaded');
                utils_1.IETemplateElementPolyfill();
                // Re-create parameters using server-loaded params.
                if (serverParams) {
                    // Merge the explicit params on top of the server-provided params to create a new set of explicit params.
                    _this.explicitParams = window.gigya.utils.object.merge([serverParams, _this.explicitParams], false);
                    // Create a new set of params by merging with global conf.
                    _this.params = window.gigya.utils.object.merge([_this.params, window.gigya.thisScript.globalConf, _this.explicitParams], false);
                }
                // Normalizing translation and customLang keys before merging
                // Merge translations from parameters to support translations being overridden on the client-side.
                _this._originalCustomLang = tslib_1.__assign({}, window.gigya.utils.object.normalizeObjectKeysToLowerCase(_this.params.customLang) || {});
                _this.params.customLang = __webpack_provided_Object_dot_assign(window.gigya.utils.object.normalizeObjectKeysToLowerCase(_this.params.parentTranslations || {}), window.gigya.utils.object.normalizeObjectKeysToLowerCase(translations || {}), _this._originalCustomLang);
            }
            if (_this.params.parentData) {
                _this._isChild = true;
                _this.data = _this.params.parentData;
                _this.params.rootContainerId = (_a = _this.params.parentData.params) === null || _a === void 0 ? void 0 : _a.rootContainerId;
                delete _this.params.parentData; // remove to prevent circular refrences inside params
            }
            else {
                _this._isChild = false;
                _this.data = new ScreenSetData_1.ScreenSetData(_this.params);
                _this.params.regToken = _this.data.regToken;
                _this.params.rootContainerId = _this.containerID;
            }
            _this.params.isChild = _this._isChild; // make the is child accessible to event listeners
            _this.params.communicationLang = _this._screenSet.params.communicationLangByScreenSet !== false ? _this._screenSet.params.lang : null;
            // parent screenSet should listen to global login/out events
            if (!_this._isChild) {
                _this.registerGlobalEvents();
            }
            if (!_this.params.regSource) {
                _this.params.regSource = utils_1.firstPart(utils_1.firstPart(document.location.href, '?'), '#');
            }
            _this._instanceId = ScreenSetPlugin._calculateInstanceId(_this.params);
            if (success) {
                _this.initContainer();
                _this.initScreens();
            }
            else {
                _this.dispatchErrorFromResponse(translations); // second argument is used as error response in case of failure
                if (_this.container) {
                    _this.container.innerText = 'An error has occurred. Please try again later.';
                }
            }
            callback(success);
        });
    };
    /**
     * There are two ways to provide a screen-set template.
     * 1. Place the screen-set template element on the page with the screen-set ID. In this case, it is assumed CSS and JS are provided.
     * 2. Load screen-set from Gigya servers, which includes CSS and extra JS parameters. After load, the screen-set is cached in a DOM element.
     */
    ScreenSetPlugin.prototype.loadTemplate = function (callback) {
        var _this = this;
        // Check to see if we've already loaded the template.
        if (this.templateElement) {
            callback(true);
            return;
        }
        // Set screen-set ID.
        var screenSetID = (this._ID = this.isMobileUI && this.params.mobileScreenSet ? this.params.mobileScreenSet : this.params.screenSet);
        // Find (create if needed) screen-set template container on the page.
        var screenSetTemplateContainerID = "__gigyaScreenSet_" + screenSetID;
        var screenSetTemplateContainer = document.getElementById(screenSetTemplateContainerID);
        if (!screenSetTemplateContainer) {
            // Check for site-provided screen-set template element on the page. Use instead of loading from Gigya servers.
            // No JavaScript is loaded in this case because the screen-set was provided by the site.
            this.templateElement = document.getElementById(screenSetID);
            // #52641 - Ensure local screen-set template is not loaded from inside a Gigya-created screen-set template container.
            if (this.templateElement &&
                this.templateElement.parentElement &&
                this.templateElement.parentElement.id &&
                this.templateElement.parentElement.id.indexOf('__gigyaScreenSet_') === 0) {
                this.templateElement = undefined;
            }
            if (this.templateElement) {
                callback(true);
                return;
            }
            screenSetTemplateContainer = document.createElement('div');
            screenSetTemplateContainer.id = screenSetTemplateContainerID;
            screenSetTemplateContainer.style.display = 'none';
            window.gigya.utils.DOM.prependToBody(screenSetTemplateContainer);
        }
        var lang = this.getLangForScreenSet();
        // Look within the template for cached screen-set element.
        // It may have been populated by a previous call.
        var screenSetEl = screenSetTemplateContainer.querySelector("div." + exports.ScreenSet_CONSTS.gigyaClass);
        if (screenSetEl) {
            this.templateElement = screenSetEl;
            if (!ScreenSetPlugin.CACHE[screenSetID]) {
                ScreenSetPlugin.CACHE[screenSetID] = {
                    javascript: undefined,
                    translations: {},
                };
            }
            var javascript_1 = ScreenSetPlugin.CACHE[screenSetID].javascript
                ? window.gigya.utils.JSON.deserialize(ScreenSetPlugin.CACHE[screenSetID].javascript)
                : undefined;
            // First, check to see if we've cached translations from the server in the language requested.
            // (don't fallback to root/default lang when trying to get translations from cache)
            var cachedTranslations = window.gigya.pluginUtils.lang.getTranslationsFromContainer(ScreenSetPlugin.CACHE[screenSetID], lang, false);
            if (cachedTranslations) {
                callback(true, cachedTranslations.translations, javascript_1);
            }
            else {
                // We need to fetch translations for this language from the server.
                // This is a rare case that's hit only when the user already loaded the screen-set in one language and now it's being rendered in a different language.
                window.gigya.accounts.getScreenSets(this.params, {
                    lang: lang,
                    include: 'translations',
                    screenSetIDs: screenSetID,
                    callback: this.prepareCallback(function (res) {
                        if (res.errorCode != 0 || !res.screenSets || !res.screenSets.length) {
                            callback(false, res);
                            return;
                        }
                        // Cache translations from server.
                        var oScreenSet = res.screenSets[0];
                        var _a = window.gigya.pluginUtils.lang.getTranslationsFromContainer(oScreenSet, lang) || {}, langKey = _a.langKey, translations = _a.translations;
                        // saving the translations in cache with {{lang}} as the key,
                        // even if the translations are fallback from root/default lang
                        // to enable loading the same screen-set with a different missing lang/variation
                        ScreenSetPlugin.CACHE[screenSetID].translations[langKey] = translations;
                        callback(true, translations, javascript_1);
                    }),
                });
            }
        }
        else {
            // Load screen-set from server.
            // NOTE: This can be triggered twice if 2 screen-sets load at the same time.
            var currentTime_1 = Date.now();
            window.gigya.accounts.getScreenSets(this.params, {
                lang: lang,
                include: 'html,css,javascript,translations',
                screenSetIDs: screenSetID,
                callback: this.prepareCallback(function (res) {
                    var _a;
                    window.gigya.logger.report('getScreenSets response time', {
                        responseTime: Date.now() - currentTime_1
                    });
                    if (res.errorCode != 0 || !res.screenSets || !res.screenSets.length || !res.screenSets[0].html) {
                        callback(false, res);
                        return;
                    }
                    var serverParams = undefined;
                    var oScreenSet = res.screenSets[0];
                    var _b = window.gigya.pluginUtils.lang.getTranslationsFromContainer(oScreenSet, lang) || {}, langKey = _b.langKey, translations = _b.translations;
                    if (langKey && langKey !== _this.params.lang) {
                        console.warn("missing translation for " + lang + ", fallback to " + langKey);
                    }
                    _this.params.lang = langKey || _this.params.lang;
                    ScreenSetPlugin.CACHE[screenSetID] = {
                        javascript: oScreenSet.javascript,
                        translations: (_a = {},
                            _a[langKey] = translations,
                            _a),
                    };
                    // Check to be sure the screen-set DOM wasn't already created while waiting for response.
                    // It is vital we don't re-render it or IE11 will break. See #47181.
                    if (!screenSetTemplateContainer.innerHTML) {
                        screenSetTemplateContainer.innerHTML = oScreenSet.html;
                    }
                    // For compatibility, storing this for injection AFTER modalDialog's css.
                    _this._loadedScreensetCss = oScreenSet.css;
                    // Set template element.
                    _this.templateElement = screenSetTemplateContainer.querySelector('div');
                    // If JavaScript is present, also store as an attribute on the template container for future screen-set calls.
                    if (oScreenSet.javascript) {
                        serverParams = window.gigya.utils.JSON.deserialize(oScreenSet.javascript);
                    }
                    callback(true, translations, serverParams);
                }),
            });
        }
    };
    ScreenSetPlugin.prototype.injectScreenSetCSS = function () {
        if (!this._addedCSS) {
            if (this._style != PluginStyles_1.PluginStyle.none) {
                var css = window.gigya.utils.templates.fill(this.getCss().defaultCSS, { imgBase: this._imgBase });
                window.gigya._.plugins.utils.css.addCss(css, this.params.cssPrefix, false);
            }
            if (this._loadedScreensetCss) {
                this.fixColorContrastIfNeeded();
                window.gigya._.plugins.utils.css.addCss(this._loadedScreensetCss);
                delete this._loadedScreensetCss;
            }
            this._addedCSS = true;
        }
    };
    ScreenSetPlugin.prototype.fixColorContrastIfNeeded = function () {
        if (FlagService_1.FlagService.wcagContrastFix) {
            var colorsOldToNewMap_1 = {
                'e76468': 'ce4635',
                '1d87ff': '0070f0',
                '0068de': '0056b8',
                '87b9ea': '2378CD',
                'b6bdc5': '6E7781',
            };
            var regex = new RegExp("" + Object.keys(colorsOldToNewMap_1).join('|'), 'gmi');
            this._loadedScreensetCss = this._loadedScreensetCss.replace(regex, function (match) { return (colorsOldToNewMap_1[match === null || match === void 0 ? void 0 : match.toLowerCase()] || match); });
        }
    };
    /// Override from BasePlugin.
    ScreenSetPlugin.prototype.initContainer = function () {
        // BasePlugin's initContainer method is invoked in its sync run process,
        // but here we want to initialize the container [in page or modal] only after the template async load is completed [needed for getPluginStyle method].
        if (this.templateElement) {
            var isModalLegacy = this.isModal && this.getPluginStyle() == PluginStyles_1.PluginStyle.legacy;
            // pre-init container
            this.config.defaultModalParams.dimDialogBackground = !isModalLegacy;
            _super.prototype.initContainer.call(this);
            // post-init container
            if (isModalLegacy) {
                this.config.enableViewportPolling = false;
                this._modalDialog.getModalDialogContainer().setAttribute('gigid', this.config.methodName);
            }
        }
        // Basic sync in-page initializing. --legacy
        else if (!this.isModal) {
            window.gigya.utils.DOM.setSize(this.container, this.params.width, this.params.height, false);
            if (this.params.responsive)
                this.container.style.width = 'auto';
            this._loadingIndicator = new window.gigya._.plugins.LoadDimmer(this.container);
        }
    };
    ScreenSetPlugin.prototype.initScreens = function () {
        var _this = this;
        this.isResponsive = this.templateElement.getAttribute(exports.ScreenSet_CONSTS.isResponsive) == 'true';
        this.screenOptions = new ScreenOptions_1.ScreenOptions(this.templateElement);
        window.gigya.logger.info("screenset screens:", this.screenOptions);
        this.injectScreenSetCSS();
        if (!this._isChild) {
            // Child screenSet does not need to listen, parent already listens
            this.addGlobalEventHandler('onLogin', function () {
                _this.data.finalizeRegistrationNeeded = false;
            });
        }
        this.prepareScreenSetContainer();
        this.prepareScreens();
        this._startScreen =
            this.params.startScreen || // parameters
                this.templateElement.getAttribute(ScreenSetPlugin.CONSTS.startScreen) || // screen set definition
                this._startScreen; // first screen that was set when screens where parsed
        if (this.isMobileUI && this.isModal) {
            window.scrollTo(0, 0);
        }
        if (this.params.initialResponse) {
            if (!this.params.initialResponse.operation && this.params.initialMethod) {
                this.params.initialResponse.operation = "/" + this.params.initialMethod;
            }
            this.onScreenResponse(this.params.initialResponse, {
                ID: this._ID,
                bindID: this._ID,
                _screen: this._screens[this._startScreen],
                _screenSet: this,
            });
        }
        else {
            this.switchScreen(this._startScreen, this.params.formContext);
        }
    };
    /// Overriding BasePlugin's
    ScreenSetPlugin.prototype.getPluginStyle = function () {
        /// priority: params > screenset template attr > config
        /// if template hasn't loaded yet - return undefined style.
        return (PluginStyles_1.PluginStyle[this.params.dialogStyle] ||
            (this.templateElement && (PluginStyles_1.PluginStyle[this.templateElement.getAttribute(exports.ScreenSet_CONSTS.dialogStyle)] || this.getConfig().defaultDialogStyle)) ||
            PluginStyles_1.PluginStyle._undefined);
    };
    ScreenSetPlugin.prototype.prepareScreenSetContainer = function () {
        var containerID = this.containerID;
        var template;
        if (this.isModal) {
            template = this.getTemplates().screenSet_dialog;
        }
        else {
            template = this.getTemplates().screenSet;
        }
        var innerContainerID = containerID + '_content';
        var childContainerID = containerID + '_child';
        this.container.insertAdjacentHTML('beforeend', window.gigya.utils.templates.fill(template, {
            innerContainerID: innerContainerID,
            childContainerID: childContainerID,
        }));
        /// TODO: for ie8 support, need to be async in order to get elements that were added by the above.
        if (!this._captionElement) {
            var captionElementId = this.getCaptionElementId(innerContainerID, this._isChild, this.params.rootContainerId);
            this._captionElement = document.getElementById(captionElementId);
        }
        this._elContainer = document.getElementById(innerContainerID);
        if (this.isModal && this._style == PluginStyles_1.PluginStyle.legacy)
            window.gigya.utils.DOM.addClassToElement(this._elContainer, exports.ScreenSet_CONSTS.contentClass);
        // Add class with current locale.
        // This is used by CSS in the default screen-sets for RTL languages.
        window.gigya.utils.DOM.addClassToElement(this._elContainer, "gigya-locale-" + window.gigya.thisScript.lang.langCode);
        this._elChildContainer = document.getElementById(childContainerID);
    };
    ScreenSetPlugin.prototype.getCaptionElementId = function (innerContainerID, isChild, rootContainerId) {
        var captionId;
        var innerCaptionId = innerContainerID + '_caption';
        // Child screen-set takes over parent's caption.
        if (isChild) {
            if (document.getElementById(innerCaptionId))
                document.getElementById(innerCaptionId).style.display = 'none';
            captionId = rootContainerId + '_content_caption';
        }
        else {
            captionId = innerCaptionId;
        }
        return captionId;
    };
    ScreenSetPlugin.prototype.getApiData = function () {
        return this.data.apiData;
    };
    ScreenSetPlugin.prototype.getProfile = function () {
        var apiData = this.getApiData();
        var profile = apiData && apiData.getAccountInfo && apiData.getAccountInfo.profile;
        return profile || {};
    };
    ScreenSetPlugin.prototype.getLoginIds = function () {
        var _a, _b;
        return (_b = (_a = this.getApiData()) === null || _a === void 0 ? void 0 : _a.getAccountInfo) === null || _b === void 0 ? void 0 : _b.loginIDs;
    };
    ScreenSetPlugin.prototype.getConflictingAccount = function () {
        var _a, _b;
        return (_b = (_a = this.getApiData()) === null || _a === void 0 ? void 0 : _a.getConflictingAccount) === null || _b === void 0 ? void 0 : _b.conflictingAccount;
    };
    Object.defineProperty(ScreenSetPlugin.prototype, "providerSessionInfo", {
        get: function () {
            var _a, _b, _c, _d;
            return (_d = (((_a = this.data) === null || _a === void 0 ? void 0 : _a.providerSessionInfo) || ((_c = (_b = this.data) === null || _b === void 0 ? void 0 : _b.params) === null || _c === void 0 ? void 0 : _c.providerSessionInfo))) !== null && _d !== void 0 ? _d : {};
        },
        enumerable: true,
        configurable: true
    });
    ScreenSetPlugin.prototype.getSchemaData = function () {
        var apiData = this.getApiData();
        var data = apiData && apiData.getAccountInfo && apiData.getAccountInfo.data;
        return data || {};
    };
    ScreenSetPlugin.prototype.getSubScriptions = function () {
        var apiData = this.getApiData();
        var subscriptions = apiData && apiData.getAccountInfo && apiData.getAccountInfo.subscriptions;
        return subscriptions || {};
    };
    ScreenSetPlugin.prototype.getCommunications = function () {
        var _a, _b;
        return ((_b = (_a = this.getApiData()) === null || _a === void 0 ? void 0 : _a.getAccountInfo) === null || _b === void 0 ? void 0 : _b.communications) || {};
    };
    ScreenSetPlugin.prototype.getPreferences = function () {
        var apiData = this.getApiData();
        var preferences = apiData && apiData.getAccountInfo && apiData.getAccountInfo.preferences;
        return preferences || {};
    };
    ScreenSetPlugin.prototype.removeRegToken = function () {
        this.data.regToken = this.params.regToken = null;
    };
    ScreenSetPlugin.prototype.establishRegToken = function (regToken) {
        this.params.regToken = this.data.regToken = regToken;
    };
    ScreenSetPlugin.prototype.establishAToken = function (aToken) {
        this.params.aToken = this.data.aToken = aToken;
    };
    // TODO perhaps the form could also be the widget that originated the screenSet request (like anchor widget or the TFA widget)
    ScreenSetPlugin.prototype.onScreenResponse = function (response, form, afterFinalizeRegistration) {
        var _a, _b, _c, _d, _e;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var nextScreen, neededData, originalAfterSubmitHandler, fnOnInfoUpdated_1, _f, _g, apiData, _h, errorForm;
            var _this = this;
            return tslib_1.__generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        if (!form)
                            form = {};
                        this.data.lastSubmittedFormID = form.ID;
                        this.data.lastSubmittedFormResponse = response;
                        nextScreen = form.successScreen;
                        if (response.response)
                            response = response.response;
                        neededData = ((_a = this._currentScreen) === null || _a === void 0 ? void 0 : _a.getNeededData(response)) || {};
                        if (response.autoSkip)
                            // autoSkip is being set on the canAutoSkip and sent back here in a dummy response
                            nextScreen = form.autoSkipScreen;
                        if (CloseReasons_1.CloseReasons[response.childScreenSetCloseReason] === CloseReasons_1.CloseReasons.skip)
                            nextScreen = form.screenSetSkippedScreen;
                        if (nextScreen === '_finish') {
                            // Resetting 'nextScreen' to be undefined in order to prevent side effects such as 'onAfterSubmit' event being fired twice (#69819)
                            // This is because UI-Builder inconsistently sets the next-screen value to '_finish'/undefined
                            nextScreen = undefined;
                        }
                        if (response.regToken) {
                            this.establishRegToken(response.regToken);
                        }
                        if (response.providerSessionInfo) {
                            this.data.providerSessionInfo = response.providerSessionInfo;
                        }
                        if (linkAccountsHelper_1.hasProviderSessionForLinkAccountsInParamsAfterRedirect(response)) {
                            this.data.providerSessionInfoAfterRedirect = linkAccountsHelper_1.getProviderSessionForLinkAccountsAfterRedirect(response);
                        }
                        this.onAccountInfo(response); //will update the profile/data cache from the response
                        if (!(afterFinalizeRegistration || (this.data.lastSubmittedFormID && (nextScreen || !this.endFlowIsPending())))) return [3 /*break*/, 10];
                        originalAfterSubmitHandler = this.params.onAfterSubmit;
                        fnOnInfoUpdated_1 = function (response) {
                            var _a, _b;
                            var submitResponse = _this.unwrapResponse(response);
                            var afterSubmitEvent = {
                                eventName: 'afterSubmit',
                                screen: (_a = form._screen) === null || _a === void 0 ? void 0 : _a.requestedScreen,
                                form: form.bindID,
                                profile: _this.getProfile(),
                                data: _this.getSchemaData(),
                                preferences: _this.getPreferences(),
                                subscriptions: _this.getSubScriptions(),
                                communications: _this.getCommunications(),
                                response: submitResponse,
                            };
                            if ((_b = form._screen) === null || _b === void 0 ? void 0 : _b.isScreenVariant) {
                                afterSubmitEvent.abTesting = form._screen.abTestingData;
                            }
                            if (!_this.params.onAfterSubmit)
                                _this.params.onAfterSubmit = originalAfterSubmitHandler;
                            _this.dispatchPluginEvent(afterSubmitEvent.eventName, afterSubmitEvent);
                        };
                        if (!(form instanceof NewsletterSignupForm_1.NewsletterSignupForm)) return [3 /*break*/, 1];
                        fnOnInfoUpdated_1(response);
                        return [3 /*break*/, 10];
                    case 1:
                        if (!(response.operation === '/accounts.setAccountInfo' && response.errorCode == GSErrors_1.GSErrors.OK && (!response.profile || !response.data))) return [3 /*break*/, 5];
                        if (!(FlagService_1.FlagService.updateAccountInfoAsync === true)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.updateAccountInfoAsync(function (accountInfoResponse) { return fnOnInfoUpdated_1(accountInfoResponse); }, (_c = (_b = neededData === null || neededData === void 0 ? void 0 : neededData.getAccountInfo) === null || _b === void 0 ? void 0 : _b.params) === null || _c === void 0 ? void 0 : _c.include)];
                    case 2:
                        _f = _j.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _f = this.updateAccountInfo(function (accountInfoResponse) { return fnOnInfoUpdated_1(accountInfoResponse); }, (_e = (_d = neededData === null || neededData === void 0 ? void 0 : neededData.getAccountInfo) === null || _d === void 0 ? void 0 : _d.params) === null || _e === void 0 ? void 0 : _e.include);
                        _j.label = 4;
                    case 4:
                        _f;
                        return [3 /*break*/, 10];
                    case 5:
                        if (!(this.isAccountInfoRequired(response.operation) &&
                            (!this.getApiData().getAccountInfo || !this.getApiData().getAccountInfo.profile || !this.getApiData().getAccountInfo.data))) return [3 /*break*/, 9];
                        if (!(FlagService_1.FlagService.updateAccountInfoAsync === true)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.updateAccountInfoAsync(function (accountInfoResponse) { return fnOnInfoUpdated_1(response); })];
                    case 6:
                        _g = _j.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        _g = this.updateAccountInfoAsync(function (accountInfoResponse) { return fnOnInfoUpdated_1(response); });
                        _j.label = 8;
                    case 8:
                        _g;
                        return [3 /*break*/, 10];
                    case 9:
                        fnOnInfoUpdated_1(response);
                        _j.label = 10;
                    case 10:
                        if (!(response.errorCode == GSErrors_1.GSErrors.OK)) return [3 /*break*/, 15];
                        if (!!this.endFlowIsPending()) return [3 /*break*/, 14];
                        if (!this.isLinkAccountsV2InProgress) return [3 /*break*/, 12];
                        return [4 /*yield*/, this.connectAccounts(response, form, this.providerSessionInfo)];
                    case 11:
                        _j.sent();
                        return [3 /*break*/, 14];
                    case 12:
                        if (!this.shouldFinalizeLinkAccountsV2AfterRedirect) return [3 /*break*/, 14];
                        return [4 /*yield*/, this.connectAccounts(response, form, this.data.providerSessionInfoAfterRedirect)];
                    case 13:
                        _j.sent();
                        _j.label = 14;
                    case 14:
                        apiData = this.getApiData();
                        if (response.operation == '/accounts.register' && apiData.initRegistration) {
                            // a successful call to accounts.register revokes the previous initRegistration response so that a new regToken will be generated for other register forms
                            window.gigya.logger.info("clearing screenset initRegistration cache (regToken)");
                            delete apiData.initRegistration;
                        }
                        this._currentScreen && this._currentScreen.hideErrors();
                        if (nextScreen && (!this._currentScreen || nextScreen != this._currentScreen.ID)) {
                            this.switchScreen(nextScreen, response, form);
                        }
                        else if (!nextScreen) {
                            window.gigya.logger.info("no next screen so...");
                            this.params.remember = this.data.extraEventData.rememberMe;
                            this.endFlow(response, form, CloseReasons_1.CloseReasons.finished);
                        }
                        return [3 /*break*/, 18];
                    case 15:
                        _h = Errors_1.PendingErrorAttributes[response.errorCode];
                        if (!_h) return [3 /*break*/, 17];
                        return [4 /*yield*/, this.handlePendingErrors(response, form)];
                    case 16:
                        _h = (_j.sent());
                        _j.label = 17;
                    case 17:
                        // Response indicate an error
                        if (_h) {
                            return [2 /*return*/];
                        }
                        errorForm = form instanceof BaseForm_1.BaseForm ? form : form.getErrorDisplayForm ? form.getErrorDisplayForm() : undefined;
                        if (errorForm) {
                            this.displayServerErrors(response, errorForm);
                        }
                        _j.label = 18;
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
    ScreenSetPlugin.prototype.connectAccounts = function (response, form, providerSessionInfo) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var connectAccountsRes;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, linkAccountsHelper_1.connectAccounts(providerSessionInfo, {
                            sessionExpiration: this.params.sessionExpiration
                        })];
                    case 1:
                        connectAccountsRes = _a.sent();
                        if (connectAccountsRes['errorCode'] == GSErrors_1.GSErrors.OK) {
                            this.onConnectAccountsComplete();
                            this.dispatchLoginEventFromResponse(response);
                        }
                        return [4 /*yield*/, this.onScreenResponse(connectAccountsRes, form)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ScreenSetPlugin.prototype.dispatchLoginEventFromResponse = function (response) {
        var loginEvent = {
            eventName: 'login,accounts.login',
            provider: response['loginProvider'],
            loginMode: LoginModes_1.LoginModes.link.name,
            remember: validationUtils.isExplicitTrue(this.data.extraEventData.rememberMe)
        };
        window.gigya.utils.object.extractProperties(response, loginEvent, 'newUser|signature|UIDSig|timestamp|UIDSignature|signatureTimestamp|UID|profile|data|signKeysUIDSignature|dataCenter|id_token|password|');
        this.dispatchGlobalEvent(loginEvent);
    };
    ScreenSetPlugin.prototype.isAccountInfoRequired = function (method) {
        return ([
            // method that DON'T require account info
            '/accounts.resetPassword',
            '/accounts.resendVerificationCode',
            '/accounts.tfa.initTFA',
        ].indexOf(method) == -1);
    };
    ScreenSetPlugin.prototype.unwrapResponse = function (response) {
        var submitResponse;
        if (response.event && response.event.response) {
            // unwrap social login response
            submitResponse = response.event.response;
        }
        else {
            submitResponse = response;
        }
        return window.gigya.utils.object.clone(submitResponse);
    };
    /// TODO: move to BasePlugin?
    ScreenSetPlugin.prototype.displayServerErrors = function (response, form) {
        var _this = this;
        if (response.secretQuestion) {
            utils_1.ForEach(form._secretQuestions, function (secretQuestionWidget) { return secretQuestionWidget.setQuestion(response.secretQuestion); });
        }
        else {
            // TODO why else - can't an error be indicated along with the need for secret question? (validation error for example)
            var errorKey = form.getErrorKey(response);
            if (errorKey) {
                response.errorMessage = this.getText(errorKey);
            }
            var errorDetails;
            switch (response.errorDetailsCode // TODO Why this is not dependant on a specific main error code?
            ) {
                case GSErrors_1.GSErrorDetails.Same_password:
                    errorDetails = this.getText('old_password_cannot_be_the_same_as_new_password');
                    break;
                case GSErrors_1.GSErrorDetails.Invalid_password:
                    errorDetails = this.getText('wrong_password');
                    break;
            }
            switch (response.errorCode) {
                case GSErrors_1.GSErrors.Extension_Point_Custom_Error:
                    errorDetails = response.errorDetails || response.errorMessage;
                    break;
            }
            var eventResult = this.error(response.errorMessage, response.errorCode, {
                screen: form._screen.ID,
                form: form.ID,
                response: window.gigya.utils.object.clone(this.data.lastSubmittedFormResponse),
            });
            var nextScreen = this.screenParts(eventResult === null || eventResult === void 0 ? void 0 : eventResult.nextScreen);
            if ((eventResult === null || eventResult === void 0 ? void 0 : eventResult.nextScreen) && nextScreen.screenId !== form._screen.ID) {
                this.switchScreen(eventResult.nextScreen);
                return;
            }
            // error when no screen is loaded - prerequisites where not met
            if (!this._currentScreen) {
                this.hide(CloseReasons_1.CloseReasons[CloseReasons_1.CloseReasons.error]);
                return;
            }
            window.gigya.logger.info("reloading captchas");
            utils_1.ForEach(this._currentScreen._captchas, function (c) { return c.reload(); });
            var serverError = {
                errorCode: response.errorCode,
                errorMessage: response.customMessage || errorDetails || response.errorMessage,
                errorFlags: response.errorFlags,
            };
            var arFormErrors = new Array();
            if (response.validationErrors) {
                window.gigya.logger.group("screenset validation errors").endWhen(function () {
                    utils_1.ForEach(response.validationErrors, function (error, i) {
                        var field = form.getField(error.fieldName);
                        if (!field) {
                            var fieldNamespace = utils_1.firstPart(error.fieldName, '.');
                            if (fieldNamespace === 'profile')
                                field = form.getField(error.fieldName.replace('profile.', ''));
                        }
                        if (field) {
                            if (i === 0 && field.instanceElement)
                                // first validation error
                                field.instanceElement.focus();
                            var validationError = window.gigya.utils.object.clone(error); // TODO remove the clone
                            arFormErrors.push(validationError);
                            if (form.renderFieldError(error, true, error.customMessage))
                                error.handled = true;
                        }
                        else {
                            // server reported error with no matching field
                            if (error.fieldName === 'captchaText') {
                                _this.warn('Captcha is required but captcha widget is missing from the submitted form');
                            }
                            else {
                                _this.warn(error.fieldName + ' is mandatory/invalid but its field is missing from the submitted form');
                            }
                        }
                    });
                });
            }
            arFormErrors.push(serverError);
            form.showErrors([serverError], true);
            form.showErrors(arFormErrors, false);
        }
    };
    ScreenSetPlugin.prototype.hideError = function () {
        this._currentScreen.hideErrors();
    };
    ScreenSetPlugin.prototype.prepareScreens = function () {
        var _this = this;
        var screenElements = this.templateElement.querySelectorAll("." + ScreenConsts_1.Screen_CONSTS.gigyaClass);
        var firstScreen = true;
        utils_1.ForEach(screenElements, function (screenElement, i) {
            var _a;
            var screen = new Screen_1.Screen(_this, screenElement);
            _this._screens[screen.ID] = screen;
            if (firstScreen) {
                firstScreen = false;
                _this._startScreen = (_a = screen === null || screen === void 0 ? void 0 : screen.variantGroupId) !== null && _a !== void 0 ? _a : screen.ID;
            }
        });
    };
    //called when modal dialog is close to unlink widgets in screen
    ScreenSetPlugin.prototype.close = function () {
        this.cancel();
    };
    ScreenSetPlugin.prototype.cancel = function () {
        this.hide(CloseReasons_1.CloseReasons[CloseReasons_1.CloseReasons.canceled], null, true);
    };
    ScreenSetPlugin.prototype.hide = function (reason, response, alwaysClearContainer) {
        var _a, _b;
        this.undimScreenSet();
        var abTesting = ((_a = this._currentScreen) === null || _a === void 0 ? void 0 : _a.isScreenVariant) && ((_b = this._currentScreen) === null || _b === void 0 ? void 0 : _b.abTestingData);
        if (this.isModal && this._currentScreen) {
            this._currentScreen.unlinkInstanceElement();
            this._currentScreen = null;
        }
        if (alwaysClearContainer && this.container) {
            this.container.innerHTML = '';
        }
        _super.prototype.close.call(this, reason, window.gigya.utils.object.removeUndefined({
            user: response && response.user,
            isFlowFinalized: !this._isChild,
            abTesting: abTesting
        }));
    };
    ScreenSetPlugin.prototype.dispose = function () {
        if (this._isDisposed) {
            return;
        }
        this._disposeChildScreenSet();
        utils_1.ForEachProp(this._screens, function (s) { return s.unlinkTemplate(); });
        if (!this._child) {
            this.unregisterGlobalEvents();
        }
        _super.prototype.dispose.call(this);
    };
    ScreenSetPlugin.prototype._disposeChildScreenSet = function () {
        if (this._child) {
            this._child.hide(CloseReasons_1.CloseReasons[CloseReasons_1.CloseReasons.canceledByParent]);
            this._child.dispose();
            this._child = null;
        }
    };
    ScreenSetPlugin.prototype.registerGlobalEvents = function () {
        this.addGlobalEventHandlers({
            onLogin: this.onUserStateChange,
            onLogout: this.onUserStateChange,
        });
    };
    ScreenSetPlugin.prototype.unregisterGlobalEvents = function () {
        this.removeGlobalEventHandlers({
            onLogin: this.onUserStateChange,
            onLogout: this.onUserStateChange,
        });
    };
    /// TODO: move to BasePlugin?
    ScreenSetPlugin.prototype.getErrorMessage = function (errorCode, isBoundToField, fieldName, fieldDisplayName) {
        if (errorCode == GSErrors_1.GSErrors.OK)
            return '';
        switch (errorCode) {
            case GSErrors_1.GSErrors.REQUIRED_VALUE_VALIDATION_ERROR:
                return this.getRequiredValueValidationErrorMessage(isBoundToField, fieldDisplayName);
            case GSErrors_1.GSErrors.UNIQUE_IDENTIFIER_EXISTS:
                return this.getUniqueIdentifierValidationErrorMessage(fieldName);
            case GSErrors_1.GSErrors.NETWORK_ERROR:
                return this.getText('network_error');
            case GSErrors_1.GSErrors.INVALID_TYPE_VALIDATION_ERROR:
                return this.getText('dqm_selection_error');
            case GSErrors_1.GSErrors.VALIDATION_ERROR:
            default:
                return this.getValidationErrorMessage(fieldName, fieldDisplayName);
        }
    };
    ScreenSetPlugin.prototype.getErrorMessageNew = function (errorCode) {
        switch (errorCode) {
            case GSErrors_1.GSErrors.NOT_SUPPORTED:
                return this.getText('not_supported');
            case GSErrors_1.GSErrors.PASSKEY_AUTHENTICATOR_REGISTERED:
                return this.getText('passkey_authenticator_already_registered');
            case GSErrors_1.GSErrors.OPERATION_CANCELED:
                return this.getText('operation_canceled');
            case GSErrors_1.GSErrors.INVALID_SITE_CONFIGURATION_ERROR:
                return this.getText('invalid_site_configuration');
            case GSErrors_1.GSErrors.PASSKEY_ERROR:
                return this.getText('passkey_authenticator_error');
            case GSErrors_1.GSErrors.UNAUTHORIZED_USER:
                return this.getText('unauthorized_user');
            case GSErrors_1.GSErrors.ACCOUNT_DISABLED:
                return this.getText('account_is_disabled');
            case GSErrors_1.GSErrors.PERMISSION_DENIED:
                return this.getText('permission_denied');
            case GSErrors_1.GSErrors.ACCOUNT_TEMPORARILY_LOCKED_OUT:
                return this.getText('account_temporarily_locked_out');
            case GSErrors_1.GSErrors.LOGIN_FAILED_CAPTCHA_REQUIRED:
            case GSErrors_1.GSErrors.LOGIN_FAILED_WRONG_CAPTCHA:
                return this.getText('login_captcha_error');
            case GSErrors_1.GSErrors.REQUEST_FAILED_CAPTCHA_REQUIRED:
                return this.getText('request_captcha_error');
            case GSErrors_1.GSErrors.LOGIN_IDENTIFIER_EXISTS:
                return this.getText('login_identifier_exists');
            case GSErrors_1.GSErrors.UNIQUE_IDENTIFIER_EXISTS:
                return this.getText('unique_identifier_exists');
            case GSErrors_1.GSErrors.UNDERAGE_USER:
                return this.getText('sorry_we_are_not_able_to_process_your_registration'); //COPPA
            case GSErrors_1.GSErrors.INVALID_LOGINID:
                return this.getText('invalid_login_or_password');
            case GSErrors_1.GSErrors.LOGINID_DOES_NOT_EXIST:
                return this.getText('there_is_no_user_with_that_username_or_email');
            case GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE: // invalid parameter value
            case GSErrors_1.GSErrors.DUPLICATE_NONCE:
                return this.getText('there_are_errors_in_your_form_please_try_again');
            case GSErrors_1.GSErrors.OLD_PASSWORD_USED:
                return this.getText('old_password_cannot_be_the_same_as_new_password');
            case GSErrors_1.GSErrors.NETWORK_ERROR:
                return this.getText('network_error');
            case GSErrors_1.GSErrors.FORBIDDEN:
                return this.getText('forbidden_error');
            case GSErrors_1.GSErrors.FREQUENCY_LIMIT_REACHED:
                return this.getText('code_frequency_limit_reached');
            case GSErrors_1.GSErrors.ACCOUNT_PENDING_REGISTRATION:
                return this.getText('account_pending_registration');
            case GSErrors_1.GSErrors.OK:
                return '';
            default:
                return this.getText('general_error');
        }
    };
    ScreenSetPlugin.prototype.getRequiredValueValidationErrorMessage = function (isBoundToField, fieldDisplayName) {
        if (isBoundToField) {
            // #49968 - Replace %fieldname even though the defaults don't use it to support %fieldname in customLang.
            return this.getText('this_field_is_required', '%fieldname', fieldDisplayName);
        }
        return this.getText('please_enter_fieldname', '%fieldname', fieldDisplayName);
    };
    ScreenSetPlugin.prototype.getUniqueIdentifierValidationErrorMessage = function (fieldName) {
        switch (fieldName) {
            case 'username':
                return this.getText('username_already_exists');
            case 'email':
                return this.getText('email_already_exists');
        }
        return '';
    };
    ScreenSetPlugin.prototype.getValidationErrorMessage = function (fieldName, fieldDisplayName) {
        switch (fieldName) {
            case 'email':
                return this.getText('email_address_is_invalid');
            case 'password':
            case 'newPassword':
                return this.getText('password_does_not_meet_complexity_requirements');
            case 'passwordRetype':
                return this.getText('passwords_do_not_match');
            case 'loginID':
                return this.getText('invalid_login_or_password');
            default:
                return this.getText('invalid_fieldname', '%fieldname', fieldDisplayName);
        }
    };
    // TODO: Remove when updateAccountInfoAsync will be released and updateAccountInfoAsync flag deleted
    ScreenSetPlugin.prototype.updateAccountInfo = function (fnCallback, include) {
        var _this = this;
        if (include === void 0) { include = 'profile,data'; }
        window.gigya.accounts.getAccountInfo(this.params, {
            include: window.gigya.utils.stringUtils.mergeCommaSeparatedValues(this.params.include, include),
            callback: function (response) {
                _this.onAccountInfo(response);
                fnCallback(response);
            },
        });
    };
    ScreenSetPlugin.prototype.updateAccountInfoAsync = function (fnCallback, include) {
        if (include === void 0) { include = 'profile,data'; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new gigya.Promise(function (resolve) {
                        window.gigya.accounts.getAccountInfo(_this.params, {
                            include: window.gigya.utils.stringUtils.mergeCommaSeparatedValues(_this.params.include, include),
                            callback: function (response) {
                                _this.onAccountInfo(response);
                                fnCallback(response);
                                resolve(response);
                            },
                        });
                    })];
            });
        });
    };
    ScreenSetPlugin.prototype.onAccountInfo = function (response) {
        var accountInfo = response.accountInfo || response;
        var apiData = this.getApiData();
        if (!apiData.getAccountInfo) {
            apiData.getAccountInfo = {};
        }
        utils_1.ForEach(['profile', 'data', 'preferences', 'subscriptions', 'emails', 'loginIDs'], function (prop) {
            if (accountInfo[prop]) {
                apiData.getAccountInfo[prop] = window.gigya.utils.object.merge([apiData.getAccountInfo[prop] || {}, accountInfo[prop]]);
                window.gigya.logger.info("screenset accountInfo." + prop + " cache updated:", apiData.getAccountInfo[prop]);
            }
        });
        // Ensure any conditions that rely on account info are updated.
        if (this._currentScreen) {
            this._currentScreen.evaluateConditionalAttributes();
        }
    };
    ScreenSetPlugin.prototype.isRequestParamValuesMatch = function (cachedValue, expectedValue) {
        if (typeof expectedValue !== 'string') {
            return expectedValue === cachedValue;
        }
        var lookInObj = cachedValue.split(',').reduce(function (previousValue, currentValue) {
            var _a;
            return __webpack_provided_Object_dot_assign(previousValue, (_a = {}, _a[currentValue] = currentValue, _a));
        }, {});
        expectedValue.split(',').forEach(function (x) {
            if (!lookInObj.hasOwnProperty(x) || lookInObj[x] !== x)
                return false;
        });
        return true;
    };
    ScreenSetPlugin.prototype.hasRequiredApiData = function (methodName, params) {
        if (params === void 0) { params = {}; }
        var _a;
        var cachedResponse = this.data.apiData[methodName];
        if (!cachedResponse) {
            return false;
        }
        for (var key in params) {
            if (!((_a = cachedResponse.requestParams) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(key)) // key doesn't exists in request params
                || !this.isRequestParamValuesMatch(cachedResponse.requestParams[key], params[key])) { // values does not match
                return false;
            }
        }
        return true;
    };
    ScreenSetPlugin.prototype.onApiData = function (response, formContext, prevForm) {
        window.gigya.logger.debug("updating screenset cache of " + response.operation);
        var apiData = this.getApiData();
        var apiMethodKey = this.getApiMethodFromFullNamespace(response.operation);
        if (response.operation.indexOf('getProviders') > -1) {
            apiData[apiMethodKey] = __webpack_provided_Object_dot_assign(response, { activeProviders: this.getEditableTfaProvider(response.activeProviders) });
        }
        else {
            if (apiMethodKey) {
                apiData[apiMethodKey] = response;
            }
        }
        if (response.regToken) {
            window.gigya.logger.info("updating screenset regToken");
            this.establishRegToken(response.regToken);
        }
        var gotAllNeededData = true;
        for (var methodName in this.data.neededData) {
            if (this.data.neededData.hasOwnProperty(methodName) &&
                !this.hasRequiredApiData(methodName, this.data.neededData[methodName].params)) {
                gotAllNeededData = false;
                break;
            }
        }
        if (gotAllNeededData) {
            window.gigya.logger.info("got all required data");
            this.loadNextScreen(formContext, prevForm);
        }
    };
    ScreenSetPlugin.prototype.chooseNextScreen = function (nextScreenValue) {
        if (!nextScreenValue)
            return;
        var possibleScreens = nextScreenValue.split(',');
        // Weighted screen possibilities
        var weightSum = 0;
        var weightedParts = [];
        utils_1.ForEach(possibleScreens, function (screen) {
            var parts = screen.split(':');
            var weight = parts.length > 1 ? parseInt(parts[1]) : 1;
            weightSum += weight;
            weightedParts.push({
                screen: parts[0],
                weight: weight,
            });
        });
        var random = this._random * weightSum;
        var selectedScreen;
        utils_1.Some(weightedParts, function (w) {
            random -= w.weight;
            if (random > 0)
                return false;
            selectedScreen = w.screen;
            return true;
        });
        return selectedScreen;
    };
    ScreenSetPlugin.prototype.getEditableTfaProvider = function (activeProviders) {
        if (activeProviders === void 0) { activeProviders = []; }
        var editableProviders = [];
        for (var i = 0; i < activeProviders.length - 0; i++) {
            var isEditable = this.isTfaProviderEditable(activeProviders[i].name);
            if (isEditable) {
                editableProviders.push(activeProviders[i].name);
            }
        }
        return editableProviders;
    };
    ScreenSetPlugin.prototype.isTfaProviderEditable = function (providerToCheck) {
        // go over the list of editable providers
        return constants_1.EditableTfaProvidersTypes[providerToCheck] != undefined;
    };
    ScreenSetPlugin.prototype.getApiMethodFromFullNamespace = function (operation) {
        var apiUrlSegments = operation.split('.');
        return apiUrlSegments[apiUrlSegments.length - 1];
    };
    ScreenSetPlugin.prototype.switchToChildScreenSet = function (screenSetName, screenID, form) {
        var _this = this;
        window.gigya.logger.info("opening child screenset: " + screenSetName + "/" + screenID);
        var hideChildHandler = function (e) {
            _this.params.regToken = _this.data.regToken;
            switch (CloseReasons_1.CloseReasons[e.reason]) {
                case CloseReasons_1.CloseReasons.canceledByParent:
                    break;
                case CloseReasons_1.CloseReasons.error:
                case CloseReasons_1.CloseReasons.canceled:
                    _this.hide(e.reason);
                    break;
                case CloseReasons_1.CloseReasons.pendingError:
                    _this.onScreenResponse(_this.data.lastSubmittedFormResponse, form, false);
                    break;
                case CloseReasons_1.CloseReasons.finished:
                case CloseReasons_1.CloseReasons.skip:
                case CloseReasons_1.CloseReasons.missing:
                default:
                    // Any arbitrary reason will be treated as finished flow
                    _this._disposeChildScreenSet();
                    _this.onScreenResponse({
                        errorCode: GSErrors_1.GSErrors.OK,
                        childScreenSetCloseReason: e.reason,
                        user: e.user,
                    }, form, false);
                    break;
            }
        };
        var onError = function (e) {
            if (_this.params.onError)
                _this.params.onError(e);
            _this.hide(CloseReasons_1.CloseReasons[CloseReasons_1.CloseReasons.error]);
        };
        var childParams = {
            screenSet: screenSetName,
            lang: this.getLangForScreenSet(),
            customLang: this._originalCustomLang,
            parentTranslations: this.params.customLang,
            width: this.params.width,
            height: this.params.height,
            context: this.params.context,
            cid: this.params.cid,
            regSource: this.params.regSource,
            regToken: this.params.regToken,
            onError: this.params.onError,
            onBeforeSubmit: this.params.onBeforeSubmit,
            onAfterSubmit: this.params.onAfterSubmit,
            onSubmit: this.params.onSubmit,
            onBeforeScreenLoad: this.params.onBeforeScreenLoad,
            onAfterScreenLoad: this.params.onAfterScreenLoad,
            onAfterValidation: this.params.onAfterValidation,
            onBeforeValidation: this.params.onBeforeValidation,
            onFieldChanged: this.params.onFieldChanged,
            ignoreApiQueue: this.params.ignoreApiQueue,
            onHide: hideChildHandler,
            parentData: this.data,
            getInstance: function (child) {
                _this._child = child;
            },
            _allowMultipleInstances: true,
            sessionExpiration: this.params.sessionExpiration
        };
        if (screenID)
            childParams.startScreen = screenID;
        this.hideScreenSetContainer();
        if (this.isModal) {
            childParams.newModal = true;
        }
        else {
            childParams.containerID = this._elChildContainer.id;
        }
        window.gigya[ScreenSetPlugin_CONSTS.namespace][ScreenSetPlugin_CONSTS.showScreenSetName](childParams);
        return true;
    };
    // Returns whether screen was switched
    ScreenSetPlugin.prototype.switchScreen = function (screenID, response, oForm) {
        var _a = this.screenParts(screenID), screenId = _a.screenId, screenSetName = _a.screenSetName;
        // if you request the same screen set - just work within the current screenSet
        if (screenSetName === this.params.screenSet) {
            screenSetName = null;
            if (!screenId) {
                this.warn('Attempt to open screen-set "' + screenSetName + '" from within the same screen-set, without specifying screen to move to.');
                return false;
            }
        }
        if (screenSetName)
            return this.switchToChildScreenSet(screenSetName, screenId, oForm);
        return this.switchToLocalScreen(screenId, response, oForm);
    };
    ScreenSetPlugin.prototype.switchToLocalScreen = function (screenID, response, oForm) {
        var _this = this;
        if (exports.EndFlowScreens[screenID]) {
            this.endFlow(response, oForm, exports.EndFlowScreens[screenID]);
            return true;
        }
        if (screenID === ScreenSetPlugin_CONSTS.stayOnScreen) {
            return true;
        }
        if (!FlagService_1.FlagService.skipSameScreenCheckOnSwitch) {
            if (this._currentScreen && this._currentScreen.ID === screenID) {
                return false;
            }
        }
        window.gigya.logger.info("switching to screen: " + screenID);
        this._nextScreen = this._screens[screenID] || GroupVariantProvider.getGroupVariant(this._screens, this._ID, this.isActiveGroup(screenID), screenID);
        if (!this._nextScreen) {
            this.warn('Missing screen "' + screenID + '"');
            this.hide(CloseReasons_1.CloseReasons[CloseReasons_1.CloseReasons.missing]);
            return false;
        }
        else {
            this._nextScreen.requestedScreenId = screenID;
        }
        if (this.data.finalizeRegistrationNeeded && !this._nextScreen.haveForms()) {
            // TODO: Why not allow a screen that contains only an ad and screen links?
            this.endFlow(response, oForm, CloseReasons_1.CloseReasons.finished);
        }
        if (!this._currentScreen)
            this.setNextScreenSize(); // draw an empty screen with a progress
        var shouldWaitForData = false;
        var extraProfileFields = this._nextScreen.getExtraProfileFields(false).join(',');
        var formContext = response;
        this.data.neededData = this._nextScreen.getNeededData(formContext);
        var apiData = this.getApiData();
        var callback = this.prepareCallback(function (res) { return _this.onApiData(res, formContext, oForm); });
        window.gigya.logger.info("required data for the screen:", this.data.neededData);
        utils_1.ForEachProp(this.data.neededData, function (methodInfo, methodName) {
            var disableCache = window.gigya.utils.validation.isExplicitFalse(methodInfo.cache);
            if (disableCache && apiData)
                delete apiData[methodName];
            if (!apiData[methodName] || (methodName === 'getAccountInfo' && extraProfileFields !== '')) {
                if (apiData[methodName])
                    delete apiData[methodName];
                _this.dimScreenSet();
                shouldWaitForData = true;
                var extraParams_1 = { callback: callback };
                if (methodInfo.responseHandler)
                    // If method has a specific response handler, go through it before passing the data to the screenSet
                    extraParams_1.callback = function (res) { return _this.onApiData(methodInfo.responseHandler(res), formContext, oForm); };
                if (methodName === 'getAccountInfo') {
                    if (extraProfileFields) {
                        extraParams_1['extraProfileFields'] = extraProfileFields;
                    }
                }
                var method_1 = window.gigya.utils.object.expressionHelper(window.gigya.accounts).getField(methodName)
                    || window.gigya.socialize[methodName] || window.gigya.accounts.tfa[methodName] || window.gigya.accounts.b2b[methodName];
                var methodParams_1 = window.gigya.utils.object.removeUndefined(methodInfo.params);
                if (methodParams_1 && methodParams_1['include'] && _this.params) {
                    methodParams_1['include'] =
                        window.gigya.utils.stringUtils.mergeCommaSeparatedValues(methodParams_1['include'], _this.params['include']);
                }
                if (methodInfo.shouldExecute) {
                    methodInfo.shouldExecute().then(function (shouldExecute) {
                        if (shouldExecute) {
                            method_1(_this.params, methodParams_1, extraParams_1);
                        }
                        else {
                            // Since the method should not be executed and the onApiData callback will not occur after the response,
                            // we need to remove this method from the needed data.
                            _this.removeFromNeededData(_this.data.neededData, methodName);
                            // and call onApiData manually with an empty method name to continue the flow
                            _this.onApiData({ operation: '' }, formContext, oForm);
                        }
                    });
                }
                else {
                    method_1(_this.params, methodParams_1, extraParams_1);
                }
            }
        });
        if (shouldWaitForData) {
            window.gigya.logger.info("waiting for required data");
        }
        else {
            this.loadNextScreen(formContext, oForm);
        }
        return true;
    };
    ScreenSetPlugin.prototype.shouldClose = function () {
        return this.isModal;
    };
    ScreenSetPlugin.prototype.loadNextScreen = function (formContext, prevForm) {
        var _a, _b, _c, _d, _e;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var screenID, logger, beforeLoadEvent, eventResult, nextScreen, actualScreenId, tempElContainer;
            var _this = this;
            return tslib_1.__generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        screenID = this._nextScreen.ID;
                        logger = window.gigya.logger.group("loading screen " + screenID);
                        beforeLoadEvent = window.gigya.utils.object.removeUndefined({
                            eventName: 'beforeScreenLoad',
                            currentScreen: (_a = this._currentScreen) === null || _a === void 0 ? void 0 : _a.requestedScreen,
                            form: this.data.lastSubmittedFormID,
                            response: window.gigya.utils.object.clone(this.data.lastSubmittedFormResponse),
                            profile: this.getProfile(),
                            data: this.getSchemaData(),
                            subscriptions: this.getSubScriptions(),
                            communications: this.getCommunications(),
                            preferences: this.getPreferences(),
                            nextScreen: (_b = this._nextScreen) === null || _b === void 0 ? void 0 : _b.requestedScreen,
                            schema: this.getApiData().getSchema,
                        });
                        if ((_c = this._nextScreen) === null || _c === void 0 ? void 0 : _c.isScreenVariant)
                            beforeLoadEvent.abTesting = (_d = this._nextScreen) === null || _d === void 0 ? void 0 : _d.abTestingData;
                        eventResult = this.dispatchPluginEvent(beforeLoadEvent.eventName, beforeLoadEvent);
                        this.undimScreenSet();
                        if (!eventResult)
                            return [2 /*return*/];
                        if (typeof eventResult === 'object') {
                            // populate the current screen with the event data for population
                            this._nextScreen.setBeforeLoadData(eventResult);
                        }
                        nextScreen = this.screenParts(eventResult === null || eventResult === void 0 ? void 0 : eventResult.nextScreen);
                        actualScreenId = ((_e = this._nextScreen) === null || _e === void 0 ? void 0 : _e.isScreenVariant) ? this._nextScreen.variantGroupId : screenID;
                        if ((eventResult === null || eventResult === void 0 ? void 0 : eventResult.nextScreen) && (nextScreen === null || nextScreen === void 0 ? void 0 : nextScreen.screenId) !== actualScreenId) {
                            this.switchScreen(eventResult.nextScreen);
                            return [2 /*return*/];
                        }
                        this.setNextScreenSize(this._nextScreen);
                        this._elContainer.innerHTML = '';
                        if (this._currentScreen) {
                            window.gigya.logger.debug("unlinking current screen: " + this._currentScreen.ID);
                            this._currentScreen.unlinkInstanceElement();
                            this._currentScreen = null;
                        }
                        return [4 /*yield*/, this.prepareNextScreen()];
                    case 1:
                        tempElContainer = _f.sent();
                        this._nextScreen.performAutoSkip(formContext).then(function (skippedForm) {
                            var _a, _b;
                            if (skippedForm && skippedForm == prevForm) {
                                window.gigya.logger.warn("Unable to proceed to next screen: missing required data for submission'");
                            }
                            if (skippedForm && skippedForm != prevForm) {
                                _this._nextScreen.undimScreen();
                                _this._nextScreen.unlinkInstanceElement();
                                var response = { errorCode: GSErrors_1.GSErrors.OK, autoSkip: true };
                                _this._screenSet.onScreenResponse(response, skippedForm); // Behaves as if the first form was submitted (if there is one)
                                return;
                            }
                            tempElContainer.style.display = '';
                            tempElContainer.style.visibility = '';
                            if (_this._elContainer && _this._elContainer.parentNode) {
                                _this._elContainer.parentNode.removeChild(_this._elContainer);
                            }
                            _this.container.appendChild(tempElContainer);
                            _this._elContainer = tempElContainer;
                            _this._currentScreen = _this._nextScreen;
                            _this._nextScreen = null;
                            _this._currentScreen.resetLastConditionalValues();
                            _this._currentScreen.evaluateConditionalAttributes();
                            var screenWidth = _this._currentScreen.instanceElement ? _this._currentScreen.instanceElement.offsetWidth + 'px' : '';
                            _this.setCaption(_this._currentScreen.caption, screenWidth);
                            _this.showScreenSetContainer();
                            var afterLoadEvent = window.gigya.utils.object.removeUndefined({
                                eventName: 'afterScreenLoad',
                                currentScreen: (_a = _this._currentScreen) === null || _a === void 0 ? void 0 : _a.requestedScreen,
                                form: _this.data.lastSubmittedFormID,
                                response: window.gigya.utils.object.clone(_this.data.lastSubmittedFormResponse),
                                profile: _this.getProfile(),
                                preferences: _this._screenSet.getPreferences(),
                                data: _this.getSchemaData(),
                            });
                            if ((_b = _this._currentScreen) === null || _b === void 0 ? void 0 : _b.isScreenVariant) {
                                afterLoadEvent.abTesting = _this._currentScreen.abTestingData;
                            }
                            _this.dispatchPluginEvent(afterLoadEvent.eventName, afterLoadEvent);
                            logger.end();
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(ScreenSetPlugin.prototype, "activeGroups", {
        get: function () {
            var _a, _b;
            return ((_b = (_a = this.templateElement) === null || _a === void 0 ? void 0 : _a.getAttribute(exports.ScreenSet_CONSTS.dataActiveGroups)) === null || _b === void 0 ? void 0 : _b.split(',')) || [];
        },
        enumerable: true,
        configurable: true
    });
    ScreenSetPlugin.prototype.isActiveGroup = function (groupId) {
        var _a;
        return (_a = this.activeGroups) === null || _a === void 0 ? void 0 : _a.includes(groupId);
    };
    ScreenSetPlugin.prototype.prepareNextScreen = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var elScreen, elContainer, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        window.gigya.logger.info("preparing next screen: " + this._nextScreen.ID);
                        elScreen = document.createElement('div'), elContainer = document.createElement('div');
                        utils_1.ForEach(this._elContainer.attributes, function (a) { return elContainer.setAttribute(a.name, a.value); });
                        elContainer.style.visibility = 'hidden';
                        elContainer.appendChild(elScreen);
                        document.body.appendChild(elContainer);
                        this._nextScreen.placeContentInElement(elScreen);
                        TemplateElement_1.TemplateElement.prepareTemplateInstances(elContainer);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._nextScreen.linkInstanceElement(elContainer)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        window.gigya.logger.error("Error while preparing next screen", err_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, elContainer];
                }
            });
        });
    };
    ScreenSetPlugin.prototype.setCaption = function (caption, width) {
        // Do not attempt to set caption if there is no element.
        // Do not attempt to set caption if we are not in a modal and there is a child screen-set (child will control caption).
        if (!this._captionElement || (!this.isModal && this._child) || this.isContainerContentHidden()) {
            return;
        }
        if (!caption) {
            // TODO why this behavior? why if it is empty and on mobile to set content with hidden style?
            if (!this.isModal)
                this._captionElement.style.display = 'none';
        }
        else {
            this._captionElement.style.display = '';
        }
        this._captionElement.innerHTML = caption || '&nbsp;';
        if (!this.isModal && !this.isMobileUI && width !== undefined) {
            this._captionElement.style.width = width;
        }
    };
    ScreenSetPlugin.prototype.setNextScreenSize = function (nextScreen) {
        this._elContainer.style.display = '';
        var w;
        var h;
        if (nextScreen) {
            w = nextScreen.width;
            h = nextScreen.height;
            if (!w || !h) {
                var elTempScreen = document.createElement('div');
                nextScreen.placeContentInElement(elTempScreen);
                window.gigya.utils.DOM.addClassToElement(elTempScreen, exports.ScreenSet_CONSTS.calculateSizeClass);
                window.gigya.utils.DOM.setSize(elTempScreen, w, h);
                this.container.appendChild(elTempScreen);
                var bnp = window.gigya.global.getBordersAndPaddings(elTempScreen);
                if (!w)
                    w = String(elTempScreen.offsetWidth + Math.ceil(bnp.w) + 30);
                if (!h)
                    h = String(elTempScreen.offsetHeight + 1);
                elTempScreen.parentNode.removeChild(elTempScreen);
            }
        }
        if (w) {
            if (!this.isMobileUI && (this.isModal || !this.isResponsive)) {
                // do not set width in % units for legacy.
                if (this.getPluginStyle() != PluginStyles_1.PluginStyle.legacy || utils_1.getUnitMeasurementType(w) != utils_1.UnitMeasurementType.percentage) {
                    window.gigya.utils.DOM.setSize(this._elContainer, w, undefined);
                }
            }
            else {
                var maxWidth = w == 'auto' ? 'none' : '' + (('' + w).indexOf('%') > 0 ? w : w + 'px');
                this._elContainer.style.maxWidth = maxWidth;
                if (window.gigya.localInfo.isIE7 || window.gigya.localInfo.isIE8 || (window.gigya.localInfo.isIE && window.gigya.localInfo.quirksMode))
                    this._elContainer.style['_width'] = maxWidth; // Fix for old IE that does not recognize maxWidth
            }
        }
        if (this.isModal && !this.isMobileUI) {
            //if (h) {
            //    this._elContainer.style.minHeight = h + 'px';
            //    if (gigya.localInfo.isIE7 || gigya.localInfo.isIE8 || (gigya.localInfo.isIE && gigya.localInfo.quirksMode))
            //        this._elContainer.style['_height'] = h + 'px'; // Workaround for old IE that does not support minHeight
            //}
        }
    };
    ScreenSetPlugin.prototype.shouldFinalizeFlow = function (reason) {
        return !this._isChild && this.endFlowIsPending() && reason !== CloseReasons_1.CloseReasons.cancel;
    };
    ScreenSetPlugin.prototype.doesScreenHaveForms = function (screenId) {
        return screenId && this._screens[screenId] && this._screens[screenId].haveForms();
    };
    ScreenSetPlugin.prototype.dimScreenSet = function () {
        this._loadingIndicator && this._loadingIndicator.show();
    };
    ScreenSetPlugin.prototype.undimScreenSet = function () {
        this._loadingIndicator && this._loadingIndicator.hide();
    };
    ScreenSetPlugin.prototype.handlePendingErrors = function (response, oForm) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var errorInfo, nextScreen;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        errorInfo = Errors_1.PendingErrorAttributes[response.errorCode] || {};
                        window.gigya.logger.info("screenset routing error code " + response.errorCode + " --> " + errorInfo.name);
                        if (!errorInfo.nextScreen) return [3 /*break*/, 2];
                        return [4 /*yield*/, errorInfo.nextScreen(oForm)];
                    case 1:
                        nextScreen = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (nextScreen) {
                            if (errorInfo.requiresFinalize) {
                                this.data.finalizeRegistrationNeeded = true;
                            }
                            else if (errorInfo.resetFinalizeNeededState) {
                                this.data.finalizeRegistrationNeeded = false;
                            }
                            // TODO add a warning that the pending screen does not have a form and can not deal with the pending issue
                            return [2 /*return*/, this.switchScreen(nextScreen, response, oForm)];
                        }
                        else {
                            if (this._isChild) {
                                // allow parent to handle pending error
                                this.hide(CloseReasons_1.CloseReasons[CloseReasons_1.CloseReasons.pendingError], response);
                                // this is the parent
                            }
                            else
                                window.gigya.logger.warn("Missing ScreenSet attribute " + errorInfo.name + " for pending error: " + response.errorCode);
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ScreenSetPlugin.prototype.endFlowIsPending = function () {
        return this.data.finalizeRegistrationNeeded && this.data.regToken;
    };
    ScreenSetPlugin.prototype.endFlow = function (res, oForm, reason) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var regToken_1, finalizeRegistrationParams;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        window.gigya.logger.info("ending screenset flow");
                        if (!(reason === CloseReasons_1.CloseReasons.skip)) return [3 /*break*/, 2];
                        if (!(oForm && oForm.onBeforeSkipped)) return [3 /*break*/, 2];
                        return [4 /*yield*/, oForm.onBeforeSkipped()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (reason === CloseReasons_1.CloseReasons.skip) {
                            if (oForm && oForm.onSkipped) {
                                oForm.onSkipped(res);
                            }
                        }
                        if (this.shouldFinalizeFlow(reason)) {
                            if (typeof this.data.extraEventData.allowAccountsLinking !== 'undefined') {
                                this.params.allowAccountsLinking = this.data.extraEventData.allowAccountsLinking;
                            }
                            regToken_1 = this.data.regToken || this.params.regToken;
                            this.removeRegToken();
                            this.dimScreenSet();
                            window.gigya.logger.info("screenset finalizing registration");
                            finalizeRegistrationParams = {
                                include: window.gigya.utils.stringUtils.mergeCommaSeparatedValues('profile,data,emails,subscriptions,preferences', this._screenSet.params.include),
                                dontHandleScreenSet: true,
                                regToken: regToken_1,
                                callback: function (response) {
                                    _this.undimScreenSet();
                                    if (response.errorCode == 0) {
                                        window.gigya.logger.info("registration finalized - clearing cache");
                                        _this.data.finalizeRegistrationNeeded = false;
                                        _this.data.apiData = {};
                                    }
                                    else {
                                        window.gigya.logger.info("registration failed finalizing - re-using existing regToken");
                                        _this.data.regToken = _this.params.regToken = regToken_1;
                                    }
                                    _this.onScreenResponse(response, oForm, true);
                                },
                            };
                            if (this.isLinkAccountsV2InProgress || this.shouldFinalizeLinkAccountsV2AfterRedirect) {
                                finalizeRegistrationParams['suppressLoginEvent'] = true;
                            }
                            window.gigya.accounts.finalizeRegistration(this.params, finalizeRegistrationParams);
                        }
                        else {
                            this.hide(CloseReasons_1.CloseReasons[reason], res);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    // BasePlugin Override
    ScreenSetPlugin.prototype.resizeModal = function (size) {
        // TODO not sure we need this at all
        if (this.getPluginStyle() !== PluginStyles_1.PluginStyle.legacy) {
            if (size.height)
                this._elContainer.style.height = size.height;
            if (size.width)
                this._elContainer.style.width = size.width;
        }
        else {
            /* legacy adjustments */
            if (utils_1.getUnitMeasurementType(size.width) == utils_1.UnitMeasurementType.percentage) {
                delete size.width;
                this._elContainer.style.width = '';
            }
            if (utils_1.getUnitMeasurementType(size.height) == utils_1.UnitMeasurementType.percentage) {
                delete size.height;
                this._elContainer.style.height = '';
            }
        }
        _super.prototype.resizeModal.call(this, size);
    };
    ScreenSetPlugin.prototype.resizePlugin = function (old, curr) {
        this.onViewportSizeChanged();
    };
    ScreenSetPlugin.prototype.onViewportSizeChanged = function (oldViewportSize, currentViewportSize) {
        if (this._currentScreen) {
            this._currentScreen.evaluateConditionalAttributes();
        }
    };
    ScreenSetPlugin.prototype.showScreenSetContainer = function () {
        if (this._modalDialog) {
            window.gigya.utils.DOM.removeClassFromElement(this._modalDialog.getModalDialogContainer(), exports.ScreenSet_CONSTS.gigyaHidden);
            this._modalDialog.showAll();
        }
        else {
            // in place screen-set
            window.gigya.utils.DOM.removeClassFromElement(this._elContainer, exports.ScreenSet_CONSTS.gigyaHidden);
            window.gigya.utils.DOM.addClassToElement(this._elChildContainer, exports.ScreenSet_CONSTS.gigyaHidden);
        }
    };
    ScreenSetPlugin.prototype.hideScreenSetContainer = function () {
        if (this._modalDialog) {
            this._modalDialog.hideAll();
            window.gigya.utils.DOM.addClassToElement(this._modalDialog.getModalDialogContainer(), exports.ScreenSet_CONSTS.gigyaHidden);
        }
        else {
            // in place screen-set
            window.gigya.utils.DOM.addClassToElement(this._elContainer, exports.ScreenSet_CONSTS.gigyaHidden);
            window.gigya.utils.DOM.removeClassFromElement(this._elChildContainer, exports.ScreenSet_CONSTS.gigyaHidden);
        }
    };
    ScreenSetPlugin.prototype.getLangForScreenSet = function () {
        var _a, _b, _c;
        return this.params._explicitLang
            ? (_c = (_b = (_a = this.params.lang) === null || _a === void 0 ? void 0 : _a.split(/(?:,|\s)+/g)) === null || _b === void 0 ? void 0 : _b.filter(Boolean)) === null || _c === void 0 ? void 0 : _c.join(',') : window.gigya.thisScript.lang.originalLang; // otherwise, use the original (full) lang from globalConf
    };
    ScreenSetPlugin.prototype.isContainerContentHidden = function () {
        return window.gigya.utils.DOM.isElementClass(this._elContainer, exports.ScreenSet_CONSTS.gigyaHidden);
    };
    ScreenSetPlugin.prototype.screenParts = function (screenID) {
        if (screenID === void 0) { screenID = ''; }
        var screenParts = screenID === null || screenID === void 0 ? void 0 : screenID.split('/');
        var screenSetName;
        if ((screenParts === null || screenParts === void 0 ? void 0 : screenParts.length) > 1) {
            screenSetName = screenParts.shift();
        }
        var screenId = screenParts === null || screenParts === void 0 ? void 0 : screenParts.join('/');
        return { screenId: screenId, screenSetName: screenSetName };
    };
    Object.defineProperty(ScreenSetPlugin.prototype, "regToken", {
        get: function () {
            var _a, _b;
            return ((_a = this.data) === null || _a === void 0 ? void 0 : _a.regToken) || ((_b = this.params) === null || _b === void 0 ? void 0 : _b.regToken);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScreenSetPlugin.prototype, "hasProviderSessionInfo", {
        get: function () {
            return Object.keys(this.providerSessionInfo || {}).length > 0;
        },
        enumerable: true,
        configurable: true
    });
    ScreenSetPlugin.prototype.onConnectAccountsComplete = function () {
        if (this.data) {
            this.data.providerSessionInfo = null;
            this.data.shouldConnectAccounts = false;
            this.data.providerSessionInfoAfterRedirect = null;
        }
    };
    Object.defineProperty(ScreenSetPlugin.prototype, "isLinkAccountsV2InProgress", {
        get: function () {
            var _a;
            return this.hasProviderSessionInfo && ((_a = this.data) === null || _a === void 0 ? void 0 : _a.shouldConnectAccounts);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScreenSetPlugin.prototype, "shouldFinalizeLinkAccountsV2AfterRedirect", {
        get: function () {
            var _a;
            return Boolean((_a = this.data) === null || _a === void 0 ? void 0 : _a.providerSessionInfoAfterRedirect);
        },
        enumerable: true,
        configurable: true
    });
    ScreenSetPlugin.prototype.removeFromNeededData = function (data, methodName) {
        delete data[methodName];
    };
    /**
     * Used to cache reference to JavaScript and translations downloaded for each screen-set.
     *
     * The object reference is placed on the gigya object directly to avoid being cleared when this file is reloaded by a site switching languages.
     */
    ScreenSetPlugin.CACHE = (window.gigya['__screenSetPluginCache'] = window.gigya['__screenSetPluginCache'] || {});
    ScreenSetPlugin.CONSTS = exports.ScreenSet_CONSTS;
    return ScreenSetPlugin;
}(window.gigya._.plugins.BasePlugin));
exports.ScreenSetPlugin = ScreenSetPlugin;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js")["__assign"]))

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetResources.ts":
/*!***************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetResources.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.passwordStrength = __webpack_require__(/*! ./templates/passwordStrength.html */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/passwordStrength.html");
exports.passwordStrength_strengthMeter = __webpack_require__(/*! ./templates/passwordStrength_strengthMeter.html */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/passwordStrength_strengthMeter.html");
exports.passwordStrength_minimumRequirements = __webpack_require__(/*! ./templates/passwordStrength_minimumRequirements.html */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/passwordStrength_minimumRequirements.html");
exports.screenSet_dialog = __webpack_require__(/*! ./templates/screenSet_dialog.html */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/screenSet_dialog.html");
exports.screenSet = __webpack_require__(/*! ./templates/screenSet.html */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/screenSet.html");
exports.photoUpload_ui = __webpack_require__(/*! ./templates/photoUpload_ui.html */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/photoUpload_ui.html");
exports.photoUpload_form = __webpack_require__(/*! ./templates/photoUpload_form.html */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/photoUpload_form.html");
exports.inlinedPasswordStrength = __webpack_require__(/*! ./templates/inlinedPasswordStrength.html */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/inlinedPasswordStrength.html");
exports.consent = __webpack_require__(/*! ./templates/consent.html */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/consent.html");
exports.communicationCheckbox = __webpack_require__(/*! ./templates/communicationCheckbox.html */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/communicationCheckbox.html");


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/SwitchScreenWidget.ts":
/*!***************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/SwitchScreenWidget.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseScreenWidget_1 = __webpack_require__(/*! ./BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
exports.SwitchScreen_CONSTS = {
    selector: '[data-switch-screen]',
    switchScreen: 'data-switch-screen',
    successScreen: 'data-on-success-screen',
    screenSetSkippedScreen: 'data-on-screenset-skipped-screen',
};
utils_1.DeepFreeze(exports.SwitchScreen_CONSTS);
var SwitchScreenWidget = /** @class */ (function (_super) {
    tslib_1.__extends(SwitchScreenWidget, _super);
    function SwitchScreenWidget(_screen, el) {
        var _this = _super.call(this, _screen, el, false) || this;
        _this._screen = _screen;
        // No definition of what should be the id in case that no ID is published.
        _this.bindID = _this.ID;
        return _this;
    }
    SwitchScreenWidget.prototype.linkInstanceElement = function (parent) {
        var _this = this;
        _super.prototype.linkInstanceElement.call(this, parent);
        this.updateAttributes();
        this.clickHandler = function (event) {
            var form = _this._screen.getFormByElement(_this.instanceElement);
            var formContext = {
                errorCode: GSErrors_1.GSErrors.OK,
                explicitSwitchScreen: true
            };
            _this._screenSet.switchScreen(_this.switchScreen, formContext, form);
        };
        this.addEventListener('click', this.clickHandler);
    };
    SwitchScreenWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this.removeEventListener('click', this.clickHandler);
    };
    SwitchScreenWidget.prototype.evaluateConditionalAttributes = function () {
        _super.prototype.evaluateConditionalAttributes.call(this);
        this.updateAttributes();
    };
    SwitchScreenWidget.prototype.updateAttributes = function () {
        var _a, _b, _c;
        if (!this.instanceElement)
            return;
        this.instanceElement.removeAttribute('target');
        this.switchScreen = this.instanceElement.getAttribute(exports.SwitchScreen_CONSTS.switchScreen);
        if (((_b = (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.nodeName) === null || _b === void 0 ? void 0 : _b.toLocaleLowerCase()) === 'a' && !((_c = this.instanceElement) === null || _c === void 0 ? void 0 : _c.querySelector('input[type=button]'))) {
            this.setAccessibilityAttributes();
        }
        else {
            this.removeAccessibilityAttributes();
        }
    };
    SwitchScreenWidget.prototype.removeAccessibilityAttributes = function () {
        this.instanceElement.removeAttribute('role');
        this.instanceElement.removeAttribute('title');
        this.instanceElement.removeAttribute('tabindex');
    };
    SwitchScreenWidget.prototype.setAccessibilityAttributes = function () {
        var _a;
        var tabIndex = this.instanceElement.getAttribute('tabindex');
        if (!tabIndex) {
            this.instanceElement.setAttribute('tabindex', '0');
        }
        (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.setAttribute('href', 'javascript:void(0)');
        this.instanceElement.setAttribute('role', 'button');
        this.instanceElement.setAttribute('title', this.instanceElement.innerText);
    };
    SwitchScreenWidget.CONSTS = exports.SwitchScreen_CONSTS;
    return SwitchScreenWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.SwitchScreenWidget = SwitchScreenWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(SwitchScreenWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts":
/*!************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_Object_dot_assign) {Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var Debug_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Debug */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Debug.ts");
var ElementRoles;
(function (ElementRoles) {
    ElementRoles[ElementRoles["_undefined"] = 0] = "_undefined";
    ElementRoles[ElementRoles["template"] = 1] = "template";
    ElementRoles[ElementRoles["instance"] = 2] = "instance";
})(ElementRoles = exports.ElementRoles || (exports.ElementRoles = {}));
var generatedIdNumber = 0;
exports.TemplateElement_CONSTS = {
    elementId: 'data-screenset-element-id',
    elementFor: 'data-screenset-element-for',
    publishElementId: 'data-screenset-element-id-publish',
    templateForArray: 'screenSetTemplateFor',
    instanceOfArray: 'screenSetInstanceOf',
    screenSetRoles: 'data-screenset-roles',
};
utils_1.DeepFreeze(exports.TemplateElement_CONSTS);
var conditionalFunction = new Function('screenset', 'passkeys', 'viewport', 'formData', 'profile', 'data', 'subscriptions', 'communications', 'preferences', 'accountInfo', 'tfaProviders', 'authMethods', 'conflictingAccount', 'consentStatements', 'identifier', 'schema', '_account', 'value', 'return eval(value);');
var TemplateElement = /** @class */ (function () {
    function TemplateElement(templateElement, _parent) {
        this.templateElement = templateElement;
        this._parent = _parent;
        this.eventHandlers = {};
        this.conditionalExpressions = new Array();
        this._screenSet = _parent._screenSet;
        if (TemplateElement.isTemplateInstance(this.templateElement)) {
            // Creating multiple TemplateElement instances on the same element
            this.ID = this.templateElement.getAttribute(exports.TemplateElement_CONSTS.elementId) || '';
            this.publishID = this.templateElement.getAttribute(exports.TemplateElement_CONSTS.publishElementId) === 'true';
        }
        else {
            // Creating the first TemplateElement instance for this element
            this.ID = this.templateElement.id || '';
            if (this.ID !== '') {
                this.publishID = true;
                this.templateElement.removeAttribute('id'); // eliminate the id from the template to make sure that id only exists on the running instance of the element
            }
            else {
                var generatedNumber = ++generatedIdNumber + '_' + new Date().getTime(); // make sure every ID is as unique as possible
                this.ID = '__gig_template_element_' + generatedNumber;
                this.publishID = false;
            }
            this.templateElement.setAttribute(exports.TemplateElement_CONSTS.elementId, this.ID);
            this.templateElement.setAttribute(exports.TemplateElement_CONSTS.publishElementId, String(this.publishID));
        }
        this.ID = this.ID.trim();
        // mark role on the element
        var currentRoles = TemplateElement.getRoles(this.templateElement);
        currentRoles.push(ElementRoles.template);
        TemplateElement.setRoles(this.templateElement, currentRoles);
        // link JS object to template element
        var templateFor = templateElement[exports.TemplateElement_CONSTS.templateForArray];
        if (!templateFor) {
            templateFor = new Array();
            templateElement[exports.TemplateElement_CONSTS.templateForArray] = templateFor;
        }
        this.conditionalExpressions = this.getConditionalExpression(this.templateElement);
        templateFor.push(this);
    }
    TemplateElement.prototype.unlinkTemplate = function () {
        // remove instance link
        var templateFor = this.templateElement[exports.TemplateElement_CONSTS.templateForArray];
        if (templateFor) {
            var i = utils_1.LastIndexOf(templateFor, this);
            templateFor.splice(i, 1);
        }
        // remove role
        var currentRoles = TemplateElement.getRoles(this.templateElement);
        var lastRole = currentRoles.pop();
        if (lastRole === ElementRoles.template)
            TemplateElement.setRoles(this.templateElement, currentRoles);
        else
            this.warn('unlinkTemplate without matching role');
    };
    TemplateElement.prototype.getConditionalExpression = function (el) {
        var conditionalExpressions = [];
        try {
            conditionalExpressions = utils_1.getConditionalAttributeExpressions(el);
        }
        catch (e) {
            this.warn('Error parsing conditional expressions.');
        }
        return conditionalExpressions;
    };
    TemplateElement.getRoles = function (element) {
        var roleNames = (element.getAttribute(exports.TemplateElement_CONSTS.screenSetRoles) || '').split(',');
        if (roleNames[0] === '')
            roleNames.pop();
        return utils_1.Map(roleNames, function (roleName) { return ElementRoles[roleName] || ElementRoles._undefined; });
    };
    TemplateElement.setRoles = function (element, roles) {
        var rolesNames = utils_1.Map(roles, function (role) { return ElementRoles[role]; });
        element.setAttribute(exports.TemplateElement_CONSTS.screenSetRoles, rolesNames.join(','));
    };
    TemplateElement.prototype.warn = function (msg, id) {
        this._parent.warn(msg, id ? this.ID + '.' + id : this.ID);
    };
    // Assumes that prepareTemplateInstance was called on the template instance before this call
    TemplateElement.prototype.linkInstanceElement = function (parent) {
        var _this = this;
        var instanceElements = window.gigya.utils.DOM.getElementsByAttribute(parent, '*', exports.TemplateElement_CONSTS.elementId, this.ID);
        if (!instanceElements || !instanceElements.length || !instanceElements[0]) {
            this.warn('Failed to find the instance element to link to');
            return;
        }
        this.instanceElement = instanceElements[0];
        // mark roles
        var currentRoles = TemplateElement.getRoles(this.instanceElement);
        currentRoles.push(ElementRoles.instance);
        TemplateElement.setRoles(this.instanceElement, currentRoles);
        // link JS object to instance element
        var instanceOf = this.instanceElement[exports.TemplateElement_CONSTS.instanceOfArray];
        if (!instanceOf) {
            instanceOf = new Array();
            this.instanceElement[exports.TemplateElement_CONSTS.instanceOfArray] = instanceOf;
        }
        // register event listeners
        utils_1.ForEachProp(this.eventHandlers, function (handlers, eventName) {
            return utils_1.ForEach(handlers, function (handler) { return window.gigya.utils.DOM.addEventListener(_this.instanceElement, eventName, handler); });
        });
        instanceOf.push(this);
        this.initFromInstanceElement();
    };
    TemplateElement.prototype.unlinkInstanceElement = function () {
        var _this = this;
        if (this.instanceElement) {
            // unregister event listeners
            utils_1.ForEachProp(this.eventHandlers, function (handlers, eventName) {
                return utils_1.ForEach(handlers, function (handler) { return window.gigya.utils.DOM.removeEventListener(_this.instanceElement, eventName, handler); });
            });
            // remove role
            var currentRoles = TemplateElement.getRoles(this.instanceElement);
            var lastRole = currentRoles.pop();
            if (lastRole === ElementRoles.instance)
                TemplateElement.setRoles(this.instanceElement, currentRoles);
            else
                this.warn('unlinkInstanceElement without matching role');
            // remove link to JS object from instance element
            var instanceOf = this.instanceElement[exports.TemplateElement_CONSTS.instanceOfArray];
            if (instanceOf)
                instanceOf.splice(window.gigya.utils.array.indexOf(instanceOf, this), 1);
            this.instanceElement = null;
        }
    };
    TemplateElement.isTemplateInstance = function (el) {
        return el.getAttribute(exports.TemplateElement_CONSTS.elementId);
    };
    TemplateElement.prepareTemplateInstanceElement = function (element, removeTemplateRole) {
        var ID = element.getAttribute(exports.TemplateElement_CONSTS.elementId);
        var publishId = element.getAttribute(exports.TemplateElement_CONSTS.publishElementId) === 'true';
        if (!ID) {
            Debug_1.warn('', 'Failed to find elementId'); // TODO perhaps message should include more information
            return;
        }
        if (publishId)
            element.setAttribute('id', ID);
        // remove the template role
        if (removeTemplateRole) {
            var roles = TemplateElement.getRoles(element);
            if (roles.pop() === ElementRoles.template)
                TemplateElement.setRoles(element, roles);
        }
    };
    TemplateElement.prepareTemplateInstances = function (templateRoot) {
        var els = templateRoot.querySelectorAll("*[" + exports.TemplateElement_CONSTS.elementId + "]");
        utils_1.ForEach(els, function (e) { return TemplateElement.prepareTemplateInstanceElement(e, true); });
    };
    //#region events
    TemplateElement.prototype.addEventListener = function (eventName, handler) {
        var handlers = this.eventHandlers[eventName];
        if (!handlers) {
            handlers = new Array();
            this.eventHandlers[eventName] = handlers;
        }
        handlers.push(handler);
        if (this.instanceElement)
            window.gigya.utils.DOM.addEventListener(this.instanceElement, eventName, handler);
    };
    TemplateElement.prototype.removeEventListener = function (eventName, handler) {
        if (this.instanceElement)
            window.gigya.utils.DOM.removeEventListener(this.instanceElement, eventName, handler);
        var handlers = this.eventHandlers[eventName];
        if (handlers) {
            var i = utils_1.LastIndexOf(handlers, handler);
            if (i > -1)
                handlers.splice(i, 1);
        }
    };
    TemplateElement.prototype.getLoggerName = function () {
        return '';
    };
    // Evaluate conditional attribute
    TemplateElement.prototype.evaluateConditionalAttributes = function () {
        var _this = this;
        this.conditionalExpressions = this.getConditionalExpression(this.instanceElement);
        if (!this.hasConditionalAttributes()) {
            return;
        }
        window.gigya.logger.group(("conditional expressions for " + (this.constructor['name'] || this.ID) + " " + this.getLoggerName()).trim()).endWhen(function () {
            window.gigya.logger.info('template element:', _this);
            utils_1.ForEach(_this.conditionalExpressions, function (conditionalAtt) {
                var evaluationResult = _this.evaluateExpression(conditionalAtt);
                _this.executeConditionalResult(evaluationResult, conditionalAtt, _this.instanceElement);
            });
        });
        this.initFromInstanceElement();
    };
    TemplateElement.prototype.initFromInstanceElement = function () {
        /// Virtual method to be overriden by derived class.
    };
    TemplateElement.prototype.hasConditionalAttributes = function () {
        return this.conditionalExpressions && this.conditionalExpressions.length > 0;
    };
    TemplateElement.prototype.evaluateExpression = function (conditionalExpression) {
        var expressionData = this.getExpressionData();
        window.gigya.logger.debug("evaluating:", { conditionalExpression: conditionalExpression, expressionData: expressionData });
        try {
            return conditionalFunction(expressionData.screenset, expressionData.passkeys, expressionData.viewport, expressionData.formData, expressionData.profile, expressionData.data, expressionData.subscriptions, expressionData.communications, expressionData.preferences, expressionData.accountInfo, expressionData.tfaProviders, expressionData.authMethods, expressionData.conflictingAccount, expressionData.consentStatements, expressionData.identifier, expressionData.schema, window.gigya.utils.object.expressionHelper(expressionData), conditionalExpression.condition);
        }
        catch (e) {
            if (!conditionalExpression.ignoreError) {
                window.gigya.logger.warn("Screenset exception in conditional expression!", {
                    condition: conditionalExpression.condition,
                    e: e,
                });
            }
            return conditionalExpression.defaultValue;
        }
    };
    TemplateElement.prototype.getExpressionData = function () {
        var _a, _b, _c, _d;
        var apiData = this._screenSet.getApiData();
        var viewportSize = window.gigya.utils.viewport.getInnerSize();
        var viewportOuterSize = window.gigya.utils.viewport.getOuterSize();
        var expressionData = {
            // Form data contains special field values (like loginID) and local fields.
            formData: {},
            // This reflects the account info response (for logged in user) with the form data merged on top of it.
            // User is not logged in, start with blank account info.
            profile: {},
            data: {},
            preferences: {},
            subscriptions: {},
            communications: {},
            authMethods: apiData.authMethods || [],
            // api data
            schema: apiData.getSchema || {},
            accountInfo: apiData.getAccountInfo || {},
            tfaProviders: this.getProviders(),
            conflictingAccount: apiData.getConflictingAccount || {},
            consentStatements: ((_a = this._screenSet.data) === null || _a === void 0 ? void 0 : _a.consentStatements) || {},
            identifier: ((_c = (_b = this._screenSet.data) === null || _b === void 0 ? void 0 : _b.authMethodData) === null || _c === void 0 ? void 0 : _c.identifiers) || {},
            passkeys: ((_d = this._screenSet.data) === null || _d === void 0 ? void 0 : _d.passkeys) || [],
            // Prepare screenset object.
            // Translations are made available specifically for attributes that need to be localized, such as the placeholder attribute.
            screenset: {
                width: this._screenSet.container.offsetWidth,
                height: this._screenSet.container.offsetHeight,
                translations: this._screenSet.params.customLang || {},
                lang: this._screenSet.lang,
                isModal: this._screenSet.isModal,
                isMobile: this._screenSet.isMobileUI,
            },
            viewport: {
                width: viewportSize.w,
                height: viewportSize.h,
                outerWidth: viewportOuterSize.w,
                outerHeight: viewportOuterSize.h,
                orientation: window.gigya.utils.viewport.getOrientation(),
            },
        };
        // First, attempt to get the account info. The user may not be logged in.
        if (apiData.getAccountInfo) {
            // Set merged data to account info.
            expressionData = window.gigya.utils.object.clone(window.gigya.utils.object.extractProperties(apiData.getAccountInfo, expressionData, 'profile|data|preferences|subscriptions|authMethods'), true);
        }
        // Populate form data if element is within form. Otherwise, profile/data fields are populated by API data.
        // Parent is typically either form or screen element.
        if ( /*this._parent instanceof BaseForm && */this._parent['isPopulated']) {
            // Generate flat form data in the same way it's generated for other events.
            expressionData.formData = this._parent.getFlatFormData(true, false);
            // Deep merge form data on top of account info API data.
            var formData = this._parent.getFormData(false, false);
            expressionData = window.gigya.utils.object.merge([expressionData, formData], true);
        }
        return expressionData;
    };
    TemplateElement.prototype.executeConditionalResult = function (evaluationResult, conditionalAtt, element) {
        evaluationResult = window.gigya.utils.validation.isExplicitFalse(evaluationResult) ? evaluationResult : evaluationResult || conditionalAtt.defaultValue;
        if (evaluationResult === conditionalAtt.lastAttributeValue) {
            window.gigya.logger.info("attribute '" + conditionalAtt.attributeName + "' remained the same: " + evaluationResult);
        }
        else {
            window.gigya.logger.info("attribute '" + conditionalAtt.attributeName + "' changed: " + JSON.stringify(conditionalAtt.lastAttributeValue) + " => " + JSON.stringify(evaluationResult));
            conditionalAtt.lastAttributeValue = evaluationResult;
            if (conditionalAtt.attributeName === 'class' && this.cssClass) {
                evaluationResult = ((evaluationResult || '') + " " + this.cssClass).trim();
            }
            if (!evaluationResult && // value is falsy and
                (!window.gigya.utils.validation.isExplicitFalse(evaluationResult) || // it's not explicit false (i.e null, undefined, '')
                    window.gigya.utils.DOM.isHTMLBooleanAttribute(conditionalAtt.attributeName))) {
                // or it's an html boolean attribute (false value requires to fully remove it)
                window.gigya._.plugins.utils.DOM.setAttribute(element, conditionalAtt.attributeName, null);
            }
            else {
                var attrVal = typeof evaluationResult == 'object' ? JSON.stringify(evaluationResult) : evaluationResult;
                window.gigya._.plugins.utils.DOM.setAttribute(element, conditionalAtt.attributeName, attrVal);
            }
        }
        return evaluationResult;
    };
    TemplateElement.prototype.resetLastConditionalValues = function () {
        utils_1.ForEach(this.conditionalExpressions, function (conditionalAtt) {
            conditionalAtt.lastAttributeValue = '';
        });
    };
    TemplateElement.prototype.getMetadata = function () {
        return Array.from(this.instanceElement.attributes, function (_a) {
            var _b;
            var name = _a.name, value = _a.value;
            return (_b = {}, _b[name] = value, _b);
        })
            .reduce(function (acc, attribute) {
            return __webpack_provided_Object_dot_assign(acc, attribute);
        }, {});
    };
    TemplateElement.prototype.getProviders = function () {
        var _a, _b, _c, _d;
        var apiData = this._screenSet.getApiData();
        if ((_c = (_b = (_a = this._screenSet.data) === null || _a === void 0 ? void 0 : _a.tfaProviders) === null || _b === void 0 ? void 0 : _b.activeProviders) === null || _c === void 0 ? void 0 : _c.length) {
            return (_d = this._screenSet.data) === null || _d === void 0 ? void 0 : _d.tfaProviders;
        }
        return apiData.getProviders || {};
    };
    return TemplateElement;
}());
exports.TemplateElement = TemplateElement;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js")["__assign"]))

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Templates.ts":
/*!******************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Templates.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var ScreenSetResources_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetResources */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetResources.ts");
var TemplatesCache = /** @class */ (function () {
    function TemplatesCache() {
        this._map = {};
    }
    TemplatesCache.prototype.get = function (key) {
        return this._map[key];
    };
    TemplatesCache.prototype.set = function (key, value) {
        // TODO: value need to support both string and string array perhaps with templates this is not needed anymore
        this._map[key] = value instanceof Array ? value.join('') : value;
    };
    return TemplatesCache;
}());
exports.TemplatesCache = TemplatesCache;
function createDefaultTemplates() {
    var templates = new TemplatesCache();
    templates.set('passwordStrength', ScreenSetResources_1.passwordStrength);
    templates.set('passwordStrength-strengthMeter', ScreenSetResources_1.passwordStrength_strengthMeter);
    templates.set('passwordStrength-minimumRequirements', ScreenSetResources_1.passwordStrength_minimumRequirements);
    templates.set('screenSet-dialog', ScreenSetResources_1.screenSet_dialog);
    templates.set('screenSet', ScreenSetResources_1.screenSet);
    templates.set('photoUpload_ui', ScreenSetResources_1.photoUpload_ui);
    templates.set('photoUpload_form', ScreenSetResources_1.photoUpload_form);
    templates.set('inlinedPasswordStrength', ScreenSetResources_1.inlinedPasswordStrength);
    templates.set('consent', ScreenSetResources_1.consent);
    templates.set('communicationCheckBox', ScreenSetResources_1.communicationCheckbox);
    return templates;
}
exports.createDefaultTemplates = createDefaultTemplates;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ApiLinkWidget.ts":
/*!******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ApiLinkWidget.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseScreenWidget_1 = __webpack_require__(/*! ../BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var Handlers_1 = __webpack_require__(/*! ../Handlers */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/index.ts");
var TranslatedWidget_1 = __webpack_require__(/*! ./TranslatedWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
exports.ApiLink_CONSTS = {
    selector: '[data-gigya-api-link]',
    attributeName: 'data-gigya-api-link',
    disableTimeoutInSeconds: 'data-disable-timeout',
    disableOnRender: 'data-disable-on-render',
    disabledClass: 'gigya-disabled',
    deps: [TranslatedWidget_1.TranslatedWidget] //deps doesn't do anything, only make sure TranslatedWidget is registered before this one (by importing it)
};
var ApiLinkWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ApiLinkWidget, _super);
    function ApiLinkWidget(_screen, el, _apiList, _domUtils, _config) {
        if (_apiList === void 0) { _apiList = window.gigya._.arApiList; }
        if (_domUtils === void 0) { _domUtils = window.gigya.utils.DOM; }
        if (_config === void 0) { _config = { defaultDisableTimeout: 10 }; }
        var _this = _super.call(this, _screen, el, false) || this;
        _this._apiList = _apiList;
        _this._domUtils = _domUtils;
        _this._config = _config;
        _this._clickHandler = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var res, hostForm;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._disable();
                        return [4 /*yield*/, this._apiHandler.send()];
                    case 1:
                        res = _a.sent();
                        hostForm = this._screen.getFormByElement(this.instanceElement);
                        if (!hostForm)
                            return [2 /*return*/];
                        if ((res === null || res === void 0 ? void 0 : res.errorCode) === GSErrors_1.GSErrors.OK) {
                            this._screenSet.hideError();
                        }
                        else {
                            this._screenSet.displayServerErrors(res, hostForm);
                            // enabled the link for errors other then frequency and forbidden
                            if ((res === null || res === void 0 ? void 0 : res.errorCode) !== GSErrors_1.GSErrors.FREQUENCY_LIMIT_REACHED && (res === null || res === void 0 ? void 0 : res.errorCode) !== GSErrors_1.GSErrors.FORBIDDEN) {
                                clearTimeout(this._disableTimeout);
                                this._enable();
                            }
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        return _this;
    }
    ApiLinkWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        this._apiHandler = this._getApiHandler();
        if (!this._apiHandler)
            return;
        this._setDisableTimeout();
        this._addClickHandler();
        this._disabledOnRender();
    };
    ApiLinkWidget.prototype.unlinkInstanceElement = function () {
        this._removeClickHandler();
        _super.prototype.unlinkInstanceElement.call(this);
    };
    ApiLinkWidget.prototype._getApiHandler = function () {
        var methodName = this.instanceElement.getAttribute(exports.ApiLink_CONSTS.attributeName);
        if (!methodName) {
            window.gigya.logger.warn("[" + exports.ApiLink_CONSTS.attributeName + "]: missing api method name");
            return null;
        }
        var serverApis = this._apiList.filter(function (api) { return api instanceof window.gigya._.ServerApi; });
        return Handlers_1.BaseApiHandler.getHandler(methodName, this._screen, serverApis);
    };
    ApiLinkWidget.prototype._addClickHandler = function () {
        this._domUtils.addEventListener(this.instanceElement, 'click', this._clickHandler);
    };
    ApiLinkWidget.prototype._removeClickHandler = function () {
        this._domUtils.removeEventListener(this.instanceElement, 'click', this._clickHandler);
    };
    ApiLinkWidget.prototype._setDisableTimeout = function () {
        var disableTimeout = this.instanceElement.getAttribute(exports.ApiLink_CONSTS.disableTimeoutInSeconds);
        if (!disableTimeout || isNaN(Number(disableTimeout))) {
            disableTimeout = String(this._config.defaultDisableTimeout);
        }
        this._disableTime = Number(disableTimeout) * 1000;
    };
    ApiLinkWidget.prototype._disable = function () {
        var _this = this;
        var _a;
        this._removeClickHandler();
        this._domUtils.addClassToElement(this.instanceElement, exports.ApiLink_CONSTS.disabledClass);
        (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.setAttribute('disabled', 'true');
        this._disableTimeout = setTimeout(function () {
            _this._enable();
        }, this._disableTime);
    };
    ApiLinkWidget.prototype._enable = function () {
        var _a;
        this._addClickHandler();
        this._domUtils.removeClassFromElement(this.instanceElement, exports.ApiLink_CONSTS.disabledClass);
        (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.removeAttribute('disabled');
    };
    ApiLinkWidget.prototype._disabledOnRender = function () {
        var shouldDisable = this.instanceElement.getAttribute(exports.ApiLink_CONSTS.disableOnRender);
        if (shouldDisable && shouldDisable !== 'false') {
            this._disable();
        }
    };
    ApiLinkWidget.CONSTS = exports.ApiLink_CONSTS;
    return ApiLinkWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.ApiLinkWidget = ApiLinkWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(ApiLinkWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ArrayManagerWidget.ts":
/*!***********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ArrayManagerWidget.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var errorBindingHelper_1 = __webpack_require__(/*! ../errorBindingHelper */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/errorBindingHelper.ts");
exports.ArrayManager_CONST = {
    selector: '.gigya-composite-control-array-widget',
    containerSelector: '.gigya-array-manager',
    formElSelector: 'input,select, fieldset, .gigya-array-manager',
    addButtonSelector: 'button.gigya-array-add-btn',
    removeButtonSelector: 'button.gigya-array-remove-btn',
    itemWrapperClass: 'gigya-array-template',
    inputsWrapperClass: 'inputs-wrapper',
    buttonsWrapperClass: 'buttons-wrapper',
    templateItemAttr: 'data-array-template-id',
    arrayManagerRootAttr: 'data-array-manager-root',
    deleteDisabledClass: 'disable-delete',
    indexMatcher: /\[([0-9]+)]/g,
};
utils_1.DeepFreeze(exports.ArrayManager_CONST);
var _idGenerator = 0;
var ArrayManagerItem = /** @class */ (function () {
    function ArrayManagerItem(arrayManager, _index) {
        this.arrayManager = arrayManager;
        this._index = _index;
        this._container = document.createElement('div');
        this._inputsWrapper = document.createElement('div');
        this._buttonsWrapper = document.createElement('div');
        this.onDispose = [];
        this.screenWidgets = [];
        this.formInputs = [];
        this.formWidgets = [];
        this.boundedErrors = [];
        this._form = arrayManager._form;
        this._screen = arrayManager._screen;
        this._uniqueItemID = "array-template-" + Date.now() + "-" + _index;
        this._buttonsWrapper.id = this._uniqueItemID + "_" + exports.ArrayManager_CONST.buttonsWrapperClass;
        window.gigya.utils.DOM.addClassToElement(this._buttonsWrapper, exports.ArrayManager_CONST.buttonsWrapperClass);
        window.gigya.utils.DOM.addClassToElement(this._inputsWrapper, exports.ArrayManager_CONST.inputsWrapperClass);
        this._inputsWrapper.appendChild(arrayManager.createInputsWrapper());
        var removeButton = arrayManager.attachRemoveButton(this);
        this._buttonsWrapper.appendChild(removeButton);
        this._container.appendChild(this._inputsWrapper);
        this._container.appendChild(this._buttonsWrapper);
        window.gigya.utils.DOM.addClassToElement(this._container, exports.ArrayManager_CONST.itemWrapperClass);
        this._container.setAttribute(exports.ArrayManager_CONST.templateItemAttr, this._uniqueItemID);
        // map old ids to the new ids, we have to do this since each id must always map to the same new id
        var idsMap = this._getAllElements()
            .filter(function (el) { return Boolean(el.id); })
            .reduce(function (obj, el) {
            obj[el.id] = el.id + "_" + ++_idGenerator;
            return obj;
        }, {});
        // replace any occurrence of the id with the newly generated id
        window.gigya.utils.DOM.manipulateAttributes(this._getAllElements(), new RegExp(Object.keys(idsMap).join('|'), 'g'), function (id) { return idsMap[id]; });
        this._indexNameBindings();
    }
    ArrayManagerItem.prototype.getID = function () {
        return this._uniqueItemID;
    };
    ArrayManagerItem.prototype.getIndex = function () {
        return this._index;
    };
    ArrayManagerItem.prototype.setIndex = function (index) {
        this._index = index;
        this.update();
    };
    ArrayManagerItem.prototype.attachAddButton = function (addButton) {
        this._buttonsWrapper.insertBefore(addButton, this._buttonsWrapper.firstChild);
    };
    ArrayManagerItem.prototype.linkInstance = function () {
        this._linkToScreen();
        this._linkToForm();
    };
    ArrayManagerItem.prototype.getContainer = function () {
        return this._container;
    };
    ArrayManagerItem.prototype.dispose = function () {
        this.onDispose.forEach(function (cb) { return cb(); });
        this._unlinkScreen();
        this._unlinkForm();
        if (this._container.parentNode) {
            this._container.parentNode.removeChild(this._container);
        }
    };
    ArrayManagerItem.prototype.update = function () {
        this._indexNameBindings();
        this._screen.removeSpecificErrorBinds(this.boundedErrors);
        this.boundedErrors = this._screen.addSpecificErrorBinds(errorBindingHelper_1.getErrorBindings(this._inputsWrapper));
        this._form.registerBoundedErrorElements();
        this.formInputs.forEach(function (i) { return i.update(); });
        this.formWidgets.forEach(function (w) { return w.update(); });
    };
    ArrayManagerItem.prototype._getAllElements = function () {
        return Array.prototype.slice.call(this._inputsWrapper.querySelectorAll('*'));
    };
    ArrayManagerItem.prototype._indexNameBindings = function () {
        var _this = this;
        var namesToMap = this.arrayManager.getFieldsNames().concat(this.arrayManager.getStoreAsArrayRoots());
        var rootName = this.arrayManager.getRootName();
        var baseRootName = rootName.replace(exports.ArrayManager_CONST.indexMatcher, '');
        // match any occurrence of any binding, with or without index clause.
        // an example of the output: "ancestorRoot(index)?.root(index)?.fieldName1|ancestorRoot(index)?.root(index)?.fieldName2"
        var bindingMatcher = namesToMap
            .filter(function (name) { return Boolean(name); })
            .map(function (name) {
            return rootName.replace(exports.ArrayManager_CONST.indexMatcher, '(?:\\[[0-9]+])?') + // convert any existing index in "rootName" to be optional match
                '(?:\\[[0-9]+])?' + // optional current index
                name.substr(baseRootName.length);
        }) // actual field name
            .join('|');
        // add current index to each field name
        window.gigya.utils.DOM.manipulateAttributes(this._getAllElements(), new RegExp(bindingMatcher, 'g'), function (match) { return addIndex(match, rootName, _this._index); }, function (attr) { return /^name|^data-|^gigya/i.test(attr.name); });
    };
    ArrayManagerItem.prototype._linkToScreen = function () {
        this.screenWidgets = this._screen.addDynamicWidgets(this._container);
        this.boundedErrors = this._screen.addSpecificErrorBinds(errorBindingHelper_1.getErrorBindings(this._inputsWrapper));
    };
    ArrayManagerItem.prototype._unlinkScreen = function () {
        this._screen.removeDynamicWidgets(this.screenWidgets);
    };
    ArrayManagerItem.prototype._linkToForm = function () {
        this.formInputs = this._form.addDynamicInputs(this._inputsWrapper);
        this._form.registerBoundedErrorElements();
        this.formWidgets = this._form.addDynamicWidgets(this._inputsWrapper);
    };
    ArrayManagerItem.prototype._unlinkForm = function () {
        this._form.removeDynamicWidgets(this.formWidgets);
        this._form.registerBoundedErrorElements();
        this._form.removeDynamicInputs(this.formInputs);
    };
    return ArrayManagerItem;
}());
exports.ArrayManagerItem = ArrayManagerItem;
var ArrayManagerWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ArrayManagerWidget, _super);
    function ArrayManagerWidget(_form, el) {
        var _this = _super.call(this, _form, el, false) || this;
        _this.onDispose = new Array();
        _this._items = [];
        var templates = _this.templateElement.querySelectorAll('template');
        _this._inputsTemplate = templates[0];
        _this._buttonsTemplate = templates[1];
        if (!_this._inputsTemplate && console && console.warn)
            console.warn('gigya: Array Manager is provided with invalid template');
        _this._minimumItems = Number(_this.params['minimum']) || 1;
        _this._fieldsNames = _this.getFieldsNamesNormalized();
        _this._storeAsArrayRoots = Array.prototype.slice
            .call(_this._inputsTemplate.content.querySelectorAll("[" + FormInput_1.FormInput_CONSTS.arrayRootAttribute + "]"))
            .map(function (i) { return i.getAttribute(FormInput_1.FormInput_CONSTS.arrayRootAttribute); });
        return _this;
    }
    ArrayManagerWidget.prototype.getFieldsNamesNormalized = function () {
        var _this = this;
        return Array.prototype.slice
            .call(this._inputsTemplate.content.querySelectorAll(exports.ArrayManager_CONST.formElSelector))
            .filter(function (el) { return !_this.filterElements(el); })
            .map(function (i) { return _this._form.getNormalizedFieldName(i.getAttribute('name')); });
    };
    ArrayManagerWidget.prototype.filterElements = function (element) {
        var ignorePhoneInputSelectors = [
            'select.gigya-country-code-select',
            'input.gigya-input-text.gigya-subscriber-phone-number-input',
            'fieldset.gigya-fieldset.gigya-phone-number-verification',
            'input.gigya-input-text.gigya-phone-number-verification-code',
            'fieldset.gigya-fieldset.gigya-phone-number-verified',
            'gigya-input-text.gigya-subscriber-phone-number-input'
        ];
        return !!ignorePhoneInputSelectors.find(function (selector) { return element.matches(selector); });
    };
    ArrayManagerWidget.prototype.createInputsWrapper = function () {
        return document.importNode(this._inputsTemplate.content, true);
    };
    ArrayManagerWidget.prototype.attachRemoveButton = function (item) {
        var _this = this;
        var listener = function () { return _this.removeItem(item.getID()); }, button = this._getButton('remove', listener);
        item.onDispose.push(function () { return button.removeEventListener('click', listener); });
        return button;
    };
    ArrayManagerWidget.prototype.linkInstanceElement = function (parent) {
        var _this = this;
        _super.prototype.linkInstanceElement.call(this, parent);
        this._arrayContainer = this.instanceElement.querySelector(exports.ArrayManager_CONST.containerSelector);
        var addListener = function () { return _this.addItem(); };
        this._addButton = this._getButton('add', addListener);
        this.onDispose.push(function () { return _this._addButton.removeEventListener('click', addListener); });
        this._arrayRootName = this._arrayContainer.getAttribute('name');
        //Arrange pre-populate data fields
        var populateData = this._form.prePopulateData(), arrayRoot = window.gigya.utils.object.getPropertyBySerializedName(populateData, this._arrayRootName, false);
        var len = this._minimumItems;
        if (arrayRoot && arrayRoot instanceof Array) {
            len = Math.max(this._minimumItems, arrayRoot.length);
        }
        for (var i = 0; i < len; i++) {
            this.addItem();
        }
    };
    ArrayManagerWidget.prototype.unlinkInstanceElement = function () {
        var _this = this;
        this._items.forEach(function (item) {
            _this._screen.removeSpecificErrorBinds(item.boundedErrors);
            _this._form.registerBoundedErrorElements();
            item.dispose();
        });
        this._items = [];
        this.onDispose.forEach(function (cb) { return cb(); });
        _super.prototype.unlinkInstanceElement.call(this);
    };
    ArrayManagerWidget.prototype.addItem = function () {
        var item = new ArrayManagerItem(this, this._items.length);
        this._arrayContainer.appendChild(item.getContainer());
        item.attachAddButton(this._addButton);
        item.linkInstance();
        this._items.push(item);
        this._applyCurrentState();
    };
    ArrayManagerWidget.prototype.removeItem = function (itemID) {
        var removeIndex = -1, itemToRemove = null;
        utils_1.Some(this._items, function (item, i) {
            if (item.getID() === itemID) {
                removeIndex = i;
                itemToRemove = item;
                return true;
            }
            return false;
        });
        if (!itemToRemove)
            return;
        this._screen.removeSpecificErrorBinds(itemToRemove.boundedErrors);
        this._form.registerBoundedErrorElements();
        this._items.splice(removeIndex, 1);
        this._reindexItems(removeIndex);
        itemToRemove.dispose();
        if (this._items.length > 0) {
            this._items[this._items.length - 1].attachAddButton(this._addButton);
        }
        this._applyCurrentState();
    };
    ArrayManagerWidget.prototype.getFieldsNames = function () {
        return this._fieldsNames;
    };
    ArrayManagerWidget.prototype.getStoreAsArrayRoots = function () {
        return this._storeAsArrayRoots;
    };
    ArrayManagerWidget.prototype._reindexItems = function (startIndex) {
        for (var i = startIndex; i < this._items.length; ++i) {
            this._items[i].setIndex(i);
        }
    };
    ArrayManagerWidget.prototype._applyCurrentState = function () {
        if (this._items.length <= this._minimumItems) {
            window.gigya.utils.DOM.addClassToElement(this._arrayContainer, exports.ArrayManager_CONST.deleteDisabledClass);
        }
        else {
            window.gigya.utils.DOM.removeClassFromElement(this._arrayContainer, exports.ArrayManager_CONST.deleteDisabledClass);
        }
        this._screenSet.centerModal();
    };
    ArrayManagerWidget.prototype.getRootName = function () {
        return this._arrayRootName;
    };
    ArrayManagerWidget.prototype.update = function () {
        this._arrayRootName = this._arrayContainer.getAttribute('name');
        this._items.forEach(function (item) { return item.update(); });
    };
    ArrayManagerWidget.prototype._getButton = function (type, listener) {
        var btn = document.importNode(this._buttonsTemplate.content.querySelectorAll(exports.ArrayManager_CONST[type + "ButtonSelector"])[0], true);
        if (listener) {
            btn.addEventListener('click', listener);
        }
        return btn;
    };
    ArrayManagerWidget.CONSTS = exports.ArrayManager_CONST;
    return ArrayManagerWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.ArrayManagerWidget = ArrayManagerWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(ArrayManagerWidget);
function addIndex(original, arrayRoot, index) {
    if (!original || !arrayRoot)
        return '';
    original = original.replace(exports.ArrayManager_CONST.indexMatcher, '');
    var baseArrayRoot = arrayRoot.replace(exports.ArrayManager_CONST.indexMatcher, '');
    return arrayRoot + "[" + index + "]." + original.substr(baseArrayRoot.length + 1);
}
exports.addIndex = addIndex;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/BindingWidget.ts":
/*!******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/BindingWidget.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseScreenWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var TranslatedWidget_1 = __webpack_require__(/*! ./TranslatedWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget.ts");
exports.Binding_CONSTS = {
    selector: '*[data-binding]',
    dataBindingAttribute: 'data-binding',
};
utils_1.DeepFreeze(exports.Binding_CONSTS);
var BindingWidget = /** @class */ (function (_super) {
    tslib_1.__extends(BindingWidget, _super);
    function BindingWidget(_screen, el) {
        var _this = 
        // Turn resetCSS off.
        _super.call(this, _screen, el, false) || this;
        _this.deps = [TranslatedWidget_1.TranslatedWidget];
        return _this;
    }
    BindingWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        this.supportInterpolation = this.templateElement.getAttribute(BindingWidget.CONSTS.dataBindingAttribute) == 'true';
        this.originalString = this.instanceElement.innerHTML;
        this.lastValue = null;
        this.updateValue();
    };
    BindingWidget.prototype.evaluateConditionalAttributes = function () {
        _super.prototype.evaluateConditionalAttributes.call(this);
        this.updateValue();
    };
    BindingWidget.prototype.getBindingKey = function () {
        return this.originalString;
    };
    /**
     * Get Value from apiData
     */
    BindingWidget.prototype.getValue = function () {
        var text = this.getBindingKey();
        return this.supportInterpolation ? this.evaluate(text) : text;
    };
    /**
     * Set bounded text.
     */
    BindingWidget.prototype.updateValue = function () {
        var value = this.getValue();
        if ((value !== undefined && value !== null) && this.lastValue !== value) {
            this.unlinkWidgets();
            this.lastValue = value;
            this.instanceElement.innerHTML = this.lastValue;
            this.linkWidgets();
        }
    };
    BindingWidget.CONSTS = exports.Binding_CONSTS;
    return BindingWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.BindingWidget = BindingWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(BindingWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CaptchaWidget.ts":
/*!******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CaptchaWidget.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var BaseCaptchaHandler_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/BaseCaptchaHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/BaseCaptchaHandler.ts");
var RegisterForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/RegisterForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/RegisterForm.ts");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
exports.CaptchaWidget_CONSTS = {
    selector: 'div.gigya-captcha'
};
var CaptchaWidget = /** @class */ (function (_super) {
    tslib_1.__extends(CaptchaWidget, _super);
    function CaptchaWidget(form, el) {
        var _this = _super.call(this, form, el) || this;
        _this._index = form._screen._captchas.length;
        form._screen._captchas.push(_this);
        var handlerConfig = window.gigya.utils.object.merge([
            _this.params,
            {
                lang: _this._screenSet.params['lang'],
                mode: _this.captchaMode(form),
            },
        ]);
        var activeHandler = BaseCaptchaHandler_1.CaptchaHandlers[window.gigya.partnerSettings.captchaProvider];
        if (activeHandler && typeof activeHandler === 'function') {
            _this._captchaHandler = new activeHandler(handlerConfig);
        }
        else {
            throw new Error("[Gigya]: unsupported captcha provider");
        }
        return _this;
    }
    CaptchaWidget.prototype.captchaMode = function (form) {
        var _a;
        if ((_a = this.params) === null || _a === void 0 ? void 0 : _a.mode) {
            return BaseCaptchaHandler_1.CaptchaMode[this.params.mode];
        }
        return form instanceof RegisterForm_1.RegisterForm ? BaseCaptchaHandler_1.CaptchaMode.invisible : BaseCaptchaHandler_1.CaptchaMode.visible;
    };
    CaptchaWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var initResponse;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _super.prototype.linkInstanceElement.call(this, parent);
                        return [4 /*yield*/, this._captchaHandler.init(this.instanceElement)];
                    case 1:
                        initResponse = _a.sent();
                        if (!initResponse) {
                            this.unlinkInstanceElement();
                            this._form._screen._captchas.splice(this._index, 1);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    CaptchaWidget.prototype.isHidden = function () {
        return utils_1.isHidden(this.instanceElement);
    };
    CaptchaWidget.prototype.reload = function () {
        this._captchaHandler.reset();
    };
    CaptchaWidget.prototype.getToken = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._captchaHandler.getToken()];
            });
        });
    };
    CaptchaWidget.prototype.getType = function () {
        return this._captchaHandler.getType();
    };
    CaptchaWidget.CONSTS = exports.CaptchaWidget_CONSTS;
    return CaptchaWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.CaptchaWidget = CaptchaWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(CaptchaWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CardListItemWidget.ts":
/*!***********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CardListItemWidget.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var CardListWidget_1 = __webpack_require__(/*! ./CardListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CardListWidget.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var BindingWidget_1 = __webpack_require__(/*! ./BindingWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/BindingWidget.ts");
var errorBindingHelper_1 = __webpack_require__(/*! ../errorBindingHelper */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/errorBindingHelper.ts");
exports.CardListItem_CONSTS = {
    dataPathAttribute: 'data-screen-set-data-path',
    bindingPrefixAttribute: 'data-binding-prefix',
};
var CardListItemWidget = /** @class */ (function (_super) {
    tslib_1.__extends(CardListItemWidget, _super);
    function CardListItemWidget(_form, el, resetCSS) {
        var _this = _super.call(this, _form, el, resetCSS) || this;
        _this._form = _form;
        _this.screenDynamicWidgets = [];
        _this.formWidgets = [];
        _this.formInputs = [];
        return _this;
    }
    Object.defineProperty(CardListItemWidget.prototype, "bindingPrefix", {
        get: function () {
            var _a;
            return ((_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.getAttribute(exports.CardListItem_CONSTS.bindingPrefixAttribute)) || this.dataPath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardListItemWidget.prototype, "dataPath", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.getAttribute(exports.CardListItem_CONSTS.dataPathAttribute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardListItemWidget.prototype, "indexStr", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.getAttribute(CardListWidget_1.CardList_CONSTS.indexAttribute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardListItemWidget.prototype, "indexInt", {
        get: function () {
            return parseInt(this.indexStr, 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardListItemWidget.prototype, "elementId", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.getAttribute(CardListWidget_1.CardList_CONSTS.idAttribute);
        },
        enumerable: true,
        configurable: true
    });
    CardListItemWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        this.registerScreenElements();
        this.registerFormElements();
        this.linkOtherElements();
    };
    CardListItemWidget.prototype.registerFormElements = function () {
        this.updateFormElementsWithCardIndex();
        this.formWidgets = this._form.addDynamicWidgets(this.instanceElement);
        this.formInputs = this._form.addDynamicInputs(this.instanceElement);
        this.addDynamicErrorBindings();
    };
    CardListItemWidget.prototype.registerScreenElements = function () {
        // We want to add card index to some of the interpolations, for example tfa.phoneNumber -> tfa[i].phoneNumber
        // For that we need to perform following steps:
        // Add widgets, including Translation widget, but not perform interpolation (binding) yet
        this.screenDynamicWidgets = this._screen.addDynamicWidgets(this.instanceElement, { exclude: [BindingWidget_1.BindingWidget] });
        // Update bindings: add index and whatever else we need
        this.updateCardBindings(this.instanceElement);
        // Add only binding widget, to perform interpolation
        var screenWidgets = this._screen.addDynamicWidgetsByType(this.instanceElement, [BindingWidget_1.BindingWidget]);
        this.screenDynamicWidgets = tslib_1.__spreadArrays(this.screenDynamicWidgets, screenWidgets);
    };
    CardListItemWidget.prototype.updateCardBindings = function (el) {
        if (!this.bindingPrefix || !this.dataPath) {
            return;
        }
        var prefix = this.bindingPrefix;
        var dataPath = this.dataPath;
        var cardIndex = this.indexStr;
        el.innerHTML = el.innerHTML.replace(new RegExp("{{" + prefix + ".(.+?)}}", 'g'), "{{" + dataPath + "[" + cardIndex + "].$1}}");
    };
    CardListItemWidget.prototype.addDynamicErrorBindings = function () {
        var errorBindings = errorBindingHelper_1.getErrorBindings(this.instanceElement);
        if (errorBindings) {
            this._screen.addSpecificErrorBinds(errorBindings);
            this._form.registerBoundedErrorElements();
        }
    };
    CardListItemWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this.unlinkDynamicWidgets();
    };
    CardListItemWidget.prototype.unlinkDynamicWidgets = function () {
        this._screen.removeDynamicWidgets(this.screenDynamicWidgets);
        this._form.removeDynamicWidgets(this.formWidgets);
        this._form.registerBoundedErrorElements();
        this._form.removeDynamicInputs(this.formInputs);
    };
    CardListItemWidget.prototype.updateFormElementsWithCardIndex = function () { };
    return CardListItemWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.CardListItemWidget = CardListItemWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CardListWidget.ts":
/*!*******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CardListWidget.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseScreenWidget_1 = __webpack_require__(/*! ../BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
exports.CardList_CONSTS = {
    listSelector: 'ul.gigya-card-list',
    cardSelector: 'li.gigya-card',
    emptyListItemSelector: '.gigya-empty-list',
    emptyListItemActiveClass: 'gigya-empty-list-active',
    indexAttribute: 'data-card-element-index',
    idAttribute: 'data-card-element-id'
};
var CardListWidget = /** @class */ (function (_super) {
    tslib_1.__extends(CardListWidget, _super);
    function CardListWidget(_screen, el, _domUtils) {
        if (_domUtils === void 0) { _domUtils = window.gigya.utils.DOM; }
        var _this = _super.call(this, _screen, el, false) || this;
        _this._domUtils = _domUtils;
        _this.createItemTemplate(el);
        return _this;
    }
    Object.defineProperty(CardListWidget.prototype, "emptyItemElem", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(exports.CardList_CONSTS.emptyListItemSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardListWidget.prototype, "itemTemplate", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector('template')) === null || _b === void 0 ? void 0 : _b.innerHTML;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardListWidget.prototype, "cardListElem", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(exports.CardList_CONSTS.listSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardListWidget.prototype, "items", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelectorAll(exports.CardList_CONSTS.cardSelector);
        },
        enumerable: true,
        configurable: true
    });
    CardListWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _super.prototype.linkInstanceElement.call(this, parent);
                        return [4 /*yield*/, this.reloadList()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CardListWidget.prototype.createItemTemplate = function (el) {
        if (!el.querySelector('template')) {
            var item = el.querySelector(exports.CardList_CONSTS.cardSelector);
            var templateElem = document.createElement('template');
            templateElem.content.append(item === null || item === void 0 ? void 0 : item.cloneNode(true));
            el.append(templateElem);
            item.remove();
        }
    };
    CardListWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this.unlinkWidgets();
    };
    CardListWidget.prototype.reloadList = function () {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var items, i, card;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this._screen.dimScreen();
                        return [4 /*yield*/, this.reloadData()];
                    case 1:
                        items = _b.sent();
                        this.clearList();
                        if (items === null || items === void 0 ? void 0 : items.length) {
                            (_a = this.emptyItemElem) === null || _a === void 0 ? void 0 : _a.classList.remove(exports.CardList_CONSTS.emptyListItemActiveClass);
                            for (i = 0; i < items.length; i++) {
                                card = this._domUtils.createElementFromTemplate(this.itemTemplate);
                                card.setAttribute(exports.CardList_CONSTS.indexAttribute, i.toString());
                                card.setAttribute(exports.CardList_CONSTS.idAttribute, items[i][this.itemId]);
                                this.cardListElem.append(card);
                            }
                            this.linkWidgets();
                            this.linkOtherElements();
                        }
                        this._screen.undimScreen();
                        return [2 /*return*/];
                }
            });
        });
    };
    CardListWidget.prototype.clearList = function () {
        var _a;
        this.cardListElem
            .querySelectorAll(exports.CardList_CONSTS.cardSelector)
            .forEach(function (elem) { return elem.remove(); });
        (_a = this.emptyItemElem) === null || _a === void 0 ? void 0 : _a.classList.add(exports.CardList_CONSTS.emptyListItemActiveClass);
    };
    CardListWidget.prototype.showList = function () {
        if (this.instanceElement) {
            this.instanceElement.style.display = 'block';
        }
    };
    return CardListWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.CardListWidget = CardListWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CommunicationWidget.ts":
/*!************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CommunicationWidget.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var Channel_Status;
(function (Channel_Status) {
    Channel_Status["noticed"] = "noticed";
    Channel_Status["OptIn"] = "OptIn";
    Channel_Status["optIn"] = "optIn";
    Channel_Status["OptOut"] = "OptOut";
    Channel_Status["optOut"] = "optOut";
})(Channel_Status = exports.Channel_Status || (exports.Channel_Status = {}));
exports.CommunicationWidget_CONSTS = {
    selector: 'div.gigya-communication',
    channel: 'data-communication-channel',
    topic: 'data-communication-topic',
    status: 'data-communication-status',
    subscriptionName: 'name',
    communicationsPrefix: 'communications.',
    subscriptionType: 'data-subscription-type',
    subscriptionTopic: 'data-subscription-topic',
    communicationChannel: 'data-subscription-channel'
};
utils_1.DeepFreeze(exports.CommunicationWidget_CONSTS);
var CommunicationWidget = /** @class */ (function (_super) {
    tslib_1.__extends(CommunicationWidget, _super);
    function CommunicationWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommunicationWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.instanceElement) {
            this.createElement();
            this.renderWidget();
        }
    };
    CommunicationWidget.prototype.createElement = function () {
        var text = this.instanceElement.getAttribute('data-label');
        this.communicationData = this.getCommunicationData();
        var checkedByDefault = this.templateElement.hasAttribute(BaseForm_1.Form_CONSTS.defaultCheckedAttribute);
        this.instanceElement.innerHTML = window.gigya.utils.templates.fill(this._screenSet.getTemplates().communicationCheckbox, {
            topic: this.communicationData.topic,
            channel: this.communicationData.channel,
            status: this.communicationData.status,
            gigyaName: "" + CommunicationWidget.CONSTS.communicationsPrefix + this.communicationData.communicationKey,
            label: this.evaluate(text),
            checked: checkedByDefault ? BaseForm_1.Form_CONSTS.defaultCheckedAttribute : '',
        });
    };
    CommunicationWidget.prototype.getCommunicationData = function () {
        var _a, _b;
        var accountInfo = (_b = (_a = this._screenSet) === null || _a === void 0 ? void 0 : _a.getApiData()) === null || _b === void 0 ? void 0 : _b.getAccountInfo;
        var channel = this.getCommunicationChannel();
        var topic = this.instanceElement.getAttribute(CommunicationWidget.CONSTS.subscriptionTopic);
        var communicationKey = topic + "_" + channel;
        var status = this.getCommunicationStatus(accountInfo, communicationKey);
        return { channel: channel, topic: topic, status: status, communicationKey: communicationKey };
    };
    CommunicationWidget.prototype.getCommunicationStatus = function (accountInfo, communicationKey) {
        var _a, _b, _c, _d;
        return ((_b = (_a = accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.communications) === null || _a === void 0 ? void 0 : _a[communicationKey]) === null || _b === void 0 ? void 0 : _b.status) || ((_d = (_c = accountInfo === null || accountInfo === void 0 ? void 0 : accountInfo.communications) === null || _c === void 0 ? void 0 : _c[communicationKey]) === null || _d === void 0 ? void 0 : _d.Status);
    };
    CommunicationWidget.prototype.getCommunicationChannel = function () {
        var _a;
        // Support fallback for subscription type
        return (_a = this.instanceElement.getAttribute(CommunicationWidget.CONSTS.communicationChannel)) !== null && _a !== void 0 ? _a : this.instanceElement.getAttribute(CommunicationWidget.CONSTS.subscriptionType);
    };
    CommunicationWidget.prototype.renderWidget = function () {
        _super.prototype.renderWidget.call(this);
        if (this.instanceElement) {
            var text = this.instanceElement.getAttribute('data-label');
            var label = this.instanceElement.querySelector('label');
            if (label)
                label.innerHTML = this.evaluate(text);
        }
    };
    CommunicationWidget.CONSTS = exports.CommunicationWidget_CONSTS;
    return CommunicationWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.CommunicationWidget = CommunicationWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(CommunicationWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ConsentWidget.ts":
/*!******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ConsentWidget.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
exports.Consent_CONSTS = {
    selector: 'div.gigya-consent',
    titleAttr: 'data-label',
    approvedOnLabelAttr: 'data-approved-on-label',
    versionAttr: 'data-version',
    versionLabelAttr: 'data-version-title-label',
    localeLabelAttr: 'data-locale-label',
};
var TEMPLATE_ID_OLD_VERSION = 'v1';
utils_1.DeepFreeze(exports.Consent_CONSTS);
var ConsentWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ConsentWidget, _super);
    function ConsentWidget(_form, el) {
        // Turn resetCSS off.
        return _super.call(this, _form, el, false) || this;
    }
    ConsentWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        this.loadWidget();
    };
    ConsentWidget.prototype.evaluateConditionalAttributes = function () {
        _super.prototype.evaluateConditionalAttributes.call(this);
        this.loadWidget();
    };
    ConsentWidget.prototype.loadWidget = function () {
        var _a;
        var accountInfo = this._screenSet.getApiData().getAccountInfo;
        var termName = this.instanceElement.getAttribute('name');
        var consent = window.gigya.utils.object.expressionHelper(accountInfo).getField(termName);
        if (consent && consent.isConsentGranted === true) {
            var docId = consent.docDate ? this.formatTime(consent.docDate) : consent.docVersion;
            var lastConsentModified = this.formatTime(consent.lastConsentModified);
            var labelText = this.instanceElement.getAttribute(exports.Consent_CONSTS.titleAttr);
            var approvedOnLabel = this.instanceElement.getAttribute(exports.Consent_CONSTS.approvedOnLabelAttr) || 'Approved on';
            var widgetVersion = this.instanceElement.getAttribute(exports.Consent_CONSTS.versionAttr);
            var locale = (_a = window.gigya.utils.object.expressionHelper(consent)) === null || _a === void 0 ? void 0 : _a.getField('lang');
            var localeLabel = this.instanceElement.getAttribute(exports.Consent_CONSTS.localeLabelAttr) || 'Locale:';
            var versionLabel = this.instanceElement.getAttribute(exports.Consent_CONSTS.versionLabelAttr) || 'Version:';
            var template = this.getTemplate(widgetVersion);
            this.instanceElement.innerHTML = window.gigya.utils.templates.fill(template, {
                label: this.evaluate(labelText),
                docId: docId,
                approvedOnLabel: this.evaluate(approvedOnLabel),
                approved: lastConsentModified,
                locale: locale,
                localeLabel: this.evaluate(localeLabel),
                versionLabel: this.evaluate(versionLabel),
            });
        }
    };
    ConsentWidget.prototype.getTemplate = function (widgetVersion) {
        var _a;
        var parser = new DOMParser();
        var templateId = widgetVersion ? "v" + widgetVersion : TEMPLATE_ID_OLD_VERSION;
        var templates = this._screenSet.getTemplates().consent;
        var document = parser.parseFromString(templates, 'text/html');
        var template = (_a = document.querySelector("[data-id=\"" + templateId + "\"]")) !== null && _a !== void 0 ? _a : document.querySelector("[data-id=\"" + TEMPLATE_ID_OLD_VERSION + "\"]");
        return template.outerHTML;
    };
    ConsentWidget.prototype.formatTime = function (dateString) {
        var date = Date.parse(dateString); // returns NaN if it can't parse
        return isNaN(date) ? '' : new Date(date).toLocaleDateString();
    };
    ConsentWidget.CONSTS = exports.Consent_CONSTS;
    return ConsentWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.ConsentWidget = ConsentWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(ConsentWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ContainerWidget.ts":
/*!********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ContainerWidget.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var visbleWhenHelper_1 = __webpack_require__(/*! ../visbleWhenHelper */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/visbleWhenHelper.ts");
exports.ContainerWidget_CONSTS = {
    selector: 'div.gigya-container',
    activeClass: 'gigya-container-enabled',
    emptyFields: 'data-empty-fields',
    loginIdentities: 'data-login-idenities',
    conditionAttr: 'data-condition',
    onRenderAttr: 'data-on-render',
};
utils_1.DeepFreeze(exports.ContainerWidget_CONSTS);
var ContainerWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ContainerWidget, _super);
    function ContainerWidget(_form, el) {
        var _this = _super.call(this, _form, el, false) || this;
        _this.onElementChange = function () { return _this.refresh(); };
        _this.name = el.getAttribute('name');
        _this.emptyFields = el.getAttribute(exports.ContainerWidget_CONSTS.emptyFields);
        if (_this.emptyFields)
            _form._autoSkipContainers.push(_this);
        _this.update(el);
        return _this;
    }
    ContainerWidget.prototype.update = function (el) {
        if (el === void 0) { el = this.instanceElement; }
        this.renderingConditions = registeredConditions(el, conditionSets.rendering);
        this.validationConditions = registeredConditions(el, conditionSets.validation);
    };
    ContainerWidget.prototype.canAutoSkip = function () {
        return !dataEmptyFields(this.emptyFields, this);
    };
    ContainerWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        var shouldDisplay = this.testRendering();
        this.originalRenderingStatus = this.conditionStatus = shouldDisplay;
        if (this.originalRenderingStatus) {
            this.onElementChange();
        }
    };
    ContainerWidget.prototype.refresh = function () {
        var shouldDisplay = (this.validationPassed = this.testValidations());
        this.conditionStatus = this.originalRenderingStatus && shouldDisplay;
        if (this.conditionStatus) {
            window.gigya.utils.DOM.addClassToElement(this.instanceElement, exports.ContainerWidget_CONSTS.activeClass);
        }
        else {
            window.gigya.utils.DOM.removeClassFromElement(this.instanceElement, exports.ContainerWidget_CONSTS.activeClass);
        }
    };
    ContainerWidget.prototype.testRendering = function () {
        return this.testContainer(this.renderingConditions);
    };
    ContainerWidget.prototype.testValidations = function () {
        return this.testContainer(this.validationConditions);
    };
    ContainerWidget.prototype.testContainer = function (conditions) {
        var _this = this;
        // Testing if there's an empty required field in the container (stronger than all tests except those that override it)
        var fields = {
            hasRequiredEmptyFields: this.containsEmptyRequiredFields(),
        };
        var filterResults = utils_1.Every(conditions, function (cond) { return cond(_this, fields); });
        return fields.hasRequiredEmptyFields || filterResults;
    };
    ContainerWidget.prototype.containsEmptyRequiredFields = function () {
        var _this = this;
        if (!this._form.isPopulated)
            return false;
        var fields = utils_1.getElementsByHavingAttribute(this.instanceElement, '*', FormInput_1.FormInput_CONSTS.fieldName);
        var containsRequired = utils_1.Some(fields, function (field) {
            var fieldName = field.getAttribute(FormInput_1.FormInput_CONSTS.fieldName);
            if (fieldName) {
                var isRequired = _this._form.isRequiredField(fieldName);
                if (isRequired && !field.value)
                    return true;
            }
            return false;
        });
        return containsRequired;
    };
    ContainerWidget.prototype.evaluateConditionalAttributes = function () {
        this.update(this.instanceElement);
        _super.prototype.evaluateConditionalAttributes.call(this);
        this.emptyFields = this.instanceElement.getAttribute(exports.ContainerWidget_CONSTS.emptyFields);
        if (this.originalRenderingStatus) {
            this.onElementChange();
        }
    };
    ContainerWidget.prototype.hasConditionalAttributes = function () {
        return true;
    };
    ContainerWidget.CONSTS = exports.ContainerWidget_CONSTS;
    return ContainerWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.ContainerWidget = ContainerWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(ContainerWidget);
function registeredConditions(el, conditionSet) {
    function bindCondition(value, condition, oneTime) {
        if (oneTime === void 0) { oneTime = false; }
        return function (container, fields) { return condition(value, container, oneTime); };
    }
    function bindOverriteFieldsCondition(value, condition) {
        return function (container, fields) {
            var result = condition(value, container);
            if (!result)
                fields.hasRequiredEmptyFields = false;
            return result;
        };
    }
    var selectedConditions = new Array();
    utils_1.ForEachProp(conditionSet, function (condition, attr) {
        if (el.getAttribute(attr)) {
            var value = el.getAttribute(attr);
            var oneTimeCondition = false;
            if (value && el.getAttribute(ContainerWidget.CONSTS.onRenderAttr) == 'true') {
                oneTimeCondition = true;
            }
            if (condition['overwriteFields'])
                selectedConditions.push(bindOverriteFieldsCondition(value, condition));
            else
                selectedConditions.push(bindCondition(value, condition, oneTimeCondition));
        }
    });
    return selectedConditions;
}
function dataDomains(value) {
    var allowedDomains = value.split(',');
    return utils_1.Some(allowedDomains, function (domain) { return window.gigya.pluginUtils.domain.isInDomain(domain); });
}
function dataApikeys(value) {
    var apikeys = value.split(',');
    return window.gigya.utils.array.indexOf(apikeys, window.gigya.thisScript.APIKey) != -1;
}
function dataProb(value, container) {
    // Show container based on probability
    return container._screenSet._random <= parseFloat(value);
}
function dataAfterDate(value) {
    var timeValue = window.gigya.global.date.getISODate(value); // Partner place date in ISO format
    return new Date().getTime() > timeValue.getTime();
}
function dataBeforeDate(value) {
    var timeValue = window.gigya.global.date.getISODate(value); // Partner place date in ISO format
    return new Date().getTime() <= timeValue.getTime();
}
function dataEmptyFields(value, container) {
    // TODO perhaps get the field instances from the form
    var checkEmptyFields = new Array();
    if (value === '*') {
        // all fields
        var inputs = utils_1.getElementsByHavingAttribute(container.instanceElement, '*', FormInput_1.FormInput_CONSTS.fieldName);
        utils_1.ForEach(inputs, function (i) {
            var name = i.getAttribute(FormInput_1.FormInput_CONSTS.fieldName);
            if (name)
                checkEmptyFields.push(i);
        });
    }
    else {
        // named fields
        utils_1.ForEach(value.split(','), function (fieldName) {
            var field = window.gigya.utils.DOM.getElementsByAttribute(container.instanceElement, '*', FormInput_1.FormInput_CONSTS.fieldName, fieldName)[0];
            checkEmptyFields.push(field);
        });
    }
    return utils_1.Some(checkEmptyFields, function (field) { return !field.value; });
}
loginIdentities['overwriteFields'] = true;
dataAuthMethod['overwriteFields'] = true;
function loginIdentities(value, container) {
    var widgetSiteIdentities = value.split(',');
    var availableLoginProviders = getAvailableLoginProviders(container);
    return visbleWhenHelper_1.showIdentityAccordingToExistingLoginProviders(widgetSiteIdentities, availableLoginProviders);
}
function dataAuthMethod(value, container) {
    var availableLoginProviders = getAvailableLoginProviders(container);
    return visbleWhenHelper_1.showAuthMethodAccordingToExistingLoginProviders(value, availableLoginProviders);
}
function getAvailableLoginProviders(container) {
    var loginProvidersList = container._form.getLoginProviders();
    return typeof (loginProvidersList) === 'string' ? loginProvidersList.split(',') : [];
}
function dataCondition(value, container, oneTime) {
    if (oneTime === void 0) { oneTime = false; }
    if (oneTime && container.validationPassed) {
        return true;
    }
    return Boolean(container.evaluateExpression({ condition: value }));
}
var conditionSets = {
    rendering: {
        'data-domains': dataDomains,
        'data-apikeys': dataApikeys,
        'data-prob': dataProb,
        'data-after-date': dataAfterDate,
        'data-before-date': dataBeforeDate,
        'data-empty-fields': dataEmptyFields,
        'data-login-identities': loginIdentities,
        'data-auth-method-render': dataAuthMethod
    },
    validation: {
        'data-condition': dataCondition
    },
};


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/EmailOtpAuthMethodWidget.ts":
/*!*****************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/EmailOtpAuthMethodWidget.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseAuthMethodWidget_1 = __webpack_require__(/*! ../BaseAuthMethodWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseAuthMethodWidget.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var BaseOtpAuthMethodWidget_1 = __webpack_require__(/*! ../BaseOtpAuthMethodWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseOtpAuthMethodWidget.ts");
exports.EmailOtpAuthMethodOtpWidget_CONSTS = tslib_1.__assign(tslib_1.__assign({}, BaseAuthMethodWidget_1.AuthMethod_CONSTS), { selector: '.gigya-link-accounts-form .gigya-auth-method[data-auth-method="emailOtp"]' });
utils_1.DeepFreeze(exports.EmailOtpAuthMethodOtpWidget_CONSTS);
var EmailOtpAuthMethodWidget = /** @class */ (function (_super) {
    tslib_1.__extends(EmailOtpAuthMethodWidget, _super);
    function EmailOtpAuthMethodWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fieldName = 'emailCode';
        return _this;
    }
    Object.defineProperty(EmailOtpAuthMethodWidget.prototype, "initApiParams", {
        get: function () {
            return {
                lang: this.dataProvider.lang,
                email: this.dataProvider.loginID,
                regToken: null
            };
        },
        enumerable: true,
        configurable: true
    });
    EmailOtpAuthMethodWidget.CONSTS = exports.EmailOtpAuthMethodOtpWidget_CONSTS;
    return EmailOtpAuthMethodWidget;
}(BaseOtpAuthMethodWidget_1.BaseOtpAuthMethodWidget));
exports.EmailOtpAuthMethodWidget = EmailOtpAuthMethodWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(EmailOtpAuthMethodWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ImageWidget.ts":
/*!****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ImageWidget.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var ScreenSetPlugin_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetPlugin */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetPlugin.ts");
exports.Image_CONSTS = {
    selector: 'div.gigya-image',
    srcAttribute: 'data-src',
    widthAttribute: 'data-width',
    heightAttribute: 'data-height',
    backgroundSizeAttribute: 'data-background-size',
};
utils_1.DeepFreeze(exports.Image_CONSTS);
var ImageWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ImageWidget, _super);
    function ImageWidget(_form, el) {
        // Turn resetCSS off.
        return _super.call(this, _form, el, false) || this;
    }
    ImageWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        this.setBackgroundImage();
    };
    ImageWidget.prototype.evaluateConditionalAttributes = function () {
        _super.prototype.evaluateConditionalAttributes.call(this);
        // Handle case where attributes are updated via conditional attr.
        this.setBackgroundImage();
    };
    /**
     * Set background image and handle HTTPS proxying.
     */
    ImageWidget.prototype.setBackgroundImage = function () {
        var el = this.instanceElement;
        // Get attributes from elements.
        var src = el.getAttribute(ImageWidget.CONSTS.srcAttribute);
        var width = el.getAttribute(ImageWidget.CONSTS.widthAttribute);
        var height = el.getAttribute(ImageWidget.CONSTS.heightAttribute);
        var backgroundSize = el.getAttribute(ImageWidget.CONSTS.backgroundSizeAttribute);
        // Hide element if no src provided.
        if (!src) {
            window.gigya.utils.DOM.addClassToElement(this.instanceElement, ScreenSetPlugin_1.ScreenSet_CONSTS.gigyaHidden);
            return;
        }
        window.gigya.utils.DOM.removeClassFromElement(this.instanceElement, ScreenSetPlugin_1.ScreenSet_CONSTS.gigyaHidden);
        // Set width and height.
        if (width) {
            el.style.width = this.getSize(width);
        }
        if (height) {
            el.style.height = this.getSize(height);
        }
        // Set default background size if none set.
        if (!backgroundSize) {
            el.setAttribute(ImageWidget.CONSTS.backgroundSizeAttribute, 'fit');
        }
        // Since this is processed on every conditional expression, we don't want to re-calculate secure photo URLs every time.
        // The CDN rotates and we'll get a new URL each time, leading to the image being reloaded.
        if (this.prevSrc !== src) {
            this.prevSrc = src;
            // Avoid both HTTPS and embedded images.
            if (window.gigya.localInfo.protocol === 'https' && src.indexOf('http://') === 0) {
                src = window.gigya.global.getPhotoURL(src);
            }
            // Set background image.
            el.style.backgroundImage = "url(\"" + src + "\")";
        }
    };
    /**
     * Translate width/height to CSS-ready value.
     */
    ImageWidget.prototype.getSize = function (size) {
        var sizeNumber = Number(size);
        if (isNaN(sizeNumber)) {
            // Size included dimension already.
            return size;
        }
        else {
            // Just a number was passed. Add "px" to it.
            return size + 'px';
        }
    };
    ImageWidget.CONSTS = exports.Image_CONSTS;
    return ImageWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.ImageWidget = ImageWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(ImageWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/LogInAvailabilityWidget.ts":
/*!****************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/LogInAvailabilityWidget.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
exports.LoginAvailabilityWidget_CONSTS = {
    selector: 'div.gigya-loginID-availability',
    boundTo: 'data-bound-to',
};
utils_1.DeepFreeze(exports.LoginAvailabilityWidget_CONSTS);
var LoginAvailabilityWidget = /** @class */ (function (_super) {
    tslib_1.__extends(LoginAvailabilityWidget, _super);
    function LoginAvailabilityWidget(form, el) {
        var _this = _super.call(this, form, el) || this;
        _this.init(form, el);
        return _this;
    }
    LoginAvailabilityWidget.prototype.init = function (form, el) {
        var _this = this;
        this.loginIdStateListener = function (state) { return _this.onLoginIdStateChange(state, true); };
        this.originalDisplay = el.style.display;
        this.reset(el);
    };
    LoginAvailabilityWidget.prototype.reset = function (el) {
        this.boundedField =
            this._form.getField(el.getAttribute(LoginAvailabilityWidget.CONSTS.boundTo)) ||
                this._form.getField('loginID') ||
                this._form.getField('username') ||
                this._form.getField('email');
        if (this.boundedField) {
            this.boundedField['_serverValidateAvaliability'] = true; // trigger the server validation of the loginId
            this.boundedField.addValidityStateListener(this.loginIdStateListener);
        }
        else {
            this.warn(exports.LoginAvailabilityWidget_CONSTS.selector + ' is missing a field to bound to');
        }
    };
    LoginAvailabilityWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.boundedField)
            this.onLoginIdStateChange(this.boundedField.getValidityState(), false);
    };
    LoginAvailabilityWidget.prototype.unlinkTemplate = function () {
        if (this.boundedField)
            this.boundedField.removeValidityStateListener(this.loginIdStateListener);
        _super.prototype.unlinkTemplate.call(this);
    };
    LoginAvailabilityWidget.prototype.onLoginIdStateChange = function (state, fromServer) {
        if (!fromServer)
            // treat local validations as no relevant to widget
            state = FormInput_1.ValidityStates._undefined;
        if (!this.instanceElement)
            return;
        window.gigya.utils.DOM.removeClassFromElement(this.instanceElement, 'gigya-loginID-availability-progress');
        window.gigya.utils.DOM.removeClassFromElement(this.instanceElement, 'gigya-loginID-availability-not-available');
        window.gigya.utils.DOM.removeClassFromElement(this.instanceElement, 'gigya-loginID-availability-available');
        switch (state) {
            case FormInput_1.ValidityStates.valid:
                this.instanceElement.style.display = this.originalDisplay;
                this.instanceElement.innerHTML = this._screenSet.getText('available');
                window.gigya.utils.DOM.addClassToElement(this.instanceElement, 'gigya-loginID-availability-available');
                break;
            case FormInput_1.ValidityStates.error:
                this.instanceElement.style.display = this.originalDisplay;
                this.instanceElement.innerHTML = this._screenSet.getText('not_available');
                window.gigya.utils.DOM.addClassToElement(this.instanceElement, 'gigya-loginID-availability-not-available');
                break;
            case FormInput_1.ValidityStates.pending:
                this.instanceElement.style.display = this.originalDisplay;
                this.instanceElement.innerHTML = this._screenSet.getText('checking');
                window.gigya.utils.DOM.addClassToElement(this.instanceElement, 'gigya-loginID-availability-progress');
                break;
            default:
                this.instanceElement.innerHTML = '';
                this.instanceElement.style.display = 'none';
                break;
        }
    };
    LoginAvailabilityWidget.prototype.evaluateConditionalAttributes = function () {
        _super.prototype.evaluateConditionalAttributes.call(this);
        /// if [for some reason] this widget need to support conditional attrs...
        // this.reset(this.instanceElement);
    };
    LoginAvailabilityWidget.CONSTS = exports.LoginAvailabilityWidget_CONSTS;
    return LoginAvailabilityWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.LoginAvailabilityWidget = LoginAvailabilityWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(LoginAvailabilityWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/MyPhotoWidget.ts":
/*!******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/MyPhotoWidget.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseScreenWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var nextGeneratedContainerId = 0;
exports.MyPhotoWidget_CONSTS = {
    selector: 'div.gigya-myPhoto',
};
utils_1.DeepFreeze(exports.MyPhotoWidget_CONSTS);
var MyPhotoWidget = /** @class */ (function (_super) {
    tslib_1.__extends(MyPhotoWidget, _super);
    function MyPhotoWidget(_screen, el) {
        var _this = _super.call(this, _screen, el) || this;
        _this.containerId = _this._screenSet.containerID + '_myPhoto_' + nextGeneratedContainerId++;
        return _this;
    }
    MyPhotoWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.instanceElement) {
            if (this.instanceElement)
                this.instanceElement.innerHTML = '<div id="' + this.containerId + '"></div>';
            if (!this.params['containerID']) {
                this.widgetParams = this.params;
                this.renderWidget();
            }
        }
    };
    MyPhotoWidget.prototype.unlinkInstanceElement = function () {
        if (this.instanceElement)
            this.instanceElement.innerHTML = ''; // To make sure no ID conflicts will be generated
        if (this._instance)
            this._instance.dispose();
        _super.prototype.unlinkInstanceElement.call(this);
    };
    MyPhotoWidget.prototype.renderWidget = function () {
        var _this = this;
        //re-render the plugin with the new new conditional values.
        window.gigya.accounts.showMyPhotoUI(this.widgetParams, {
            containerID: this.containerId,
            lang: this._screenSet.lang,
            customLang: this._screenSet.params.customLang,
            regToken: this._screenSet.params['regToken'],
            getInstance: function (instance) {
                _this._instance = instance;
            },
            onLoad: function () {
                _this._screenSet.centerModal();
            },
        });
        this.renderWidgetUI = false;
    };
    MyPhotoWidget.CONSTS = exports.MyPhotoWidget_CONSTS;
    return MyPhotoWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.MyPhotoWidget = MyPhotoWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(MyPhotoWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/OrganizationContextWidget.ts":
/*!******************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/OrganizationContextWidget.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var GSErrors = window.gigya.GSErrors;
var ChangeOrganizationContextForm_1 = __webpack_require__(/*! ../Forms/ChangeOrganizationContextForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ChangeOrganizationContextForm.ts");
var promise_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/promise */ "./src/core/Gigya.Js/app/Utils/promise.ts");
exports.OrganizationContextConsts = {
    selector: '.gigya-organization-context-widget',
    dropdownSelector: '.gigya-organization-context-dropdown',
    buttonSelector: '.gigya-organization-context-control-link-button',
    errorDisplayClass: '.gigya-error-display',
    errorMessageClass: '.gigya-error-msg',
    errorActiveClass: 'gigya-error-display-active',
    disabledClass: 'gigya-disabled',
    noDataAvailableMessage: 'no_data_available'
};
var UserOrganizationRelationshipStatus;
(function (UserOrganizationRelationshipStatus) {
    UserOrganizationRelationshipStatus["active"] = "active";
})(UserOrganizationRelationshipStatus || (UserOrganizationRelationshipStatus = {}));
utils_1.DeepFreeze(exports.OrganizationContextConsts);
var OrganizationContextWidget = /** @class */ (function (_super) {
    tslib_1.__extends(OrganizationContextWidget, _super);
    function OrganizationContextWidget(_form, el, _domUtils) {
        if (_domUtils === void 0) { _domUtils = window.gigya.utils.DOM; }
        var _this = 
        // Turn resetCSS off.
        _super.call(this, _form, el, false) || this;
        _this._domUtils = _domUtils;
        return _this;
    }
    OrganizationContextWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, groupsResponse, organizationResponse, e_1, errorMessage;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _super.prototype.linkInstanceElement.call(this, parent);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        this._screen.dimScreen();
                        this.selectElem = this.instanceElement.querySelector(exports.OrganizationContextConsts.dropdownSelector);
                        this.buttonElem = this.instanceElement.querySelector(exports.OrganizationContextConsts.buttonSelector);
                        this.errorDisplayElem = this.instanceElement.querySelector(exports.OrganizationContextConsts.errorDisplayClass);
                        this.errorMessageElem = this.errorDisplayElem.querySelector(exports.OrganizationContextConsts.errorMessageClass);
                        this.errorMessageElem.classList.add('gigya-error-msg-active');
                        if (!this.isOrganizationContextForm()) {
                            this.addButtonHandler(this.buttonElem, this.onClickHandler.bind(this));
                        }
                        if (this.selectElem == null)
                            return [2 /*return*/];
                        this.addDomEventListener(this.selectElem, "change", this.onSelectChangedHandler.bind(this));
                        return [4 /*yield*/, gigya.Promise.all([
                                this.getUserOrganizations(),
                                this.getOrganizationContext()
                            ])];
                    case 2:
                        _a = _b.sent(), groupsResponse = _a[0], organizationResponse = _a[1];
                        this.initOrganizationSelect(groupsResponse, organizationResponse);
                        return [3 /*break*/, 5];
                    case 3:
                        e_1 = _b.sent();
                        errorMessage = this._screenSet.getErrorMessageNew(e_1.errorCode);
                        this.showMessage("error", errorMessage);
                        // remove template option in case of error
                        this.clearOrganizationSelect();
                        this._screen.dispatchEvent('error', tslib_1.__assign(tslib_1.__assign({}, e_1), { errorMessage: errorMessage }));
                        return [3 /*break*/, 5];
                    case 4:
                        this._screen.undimScreen();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    OrganizationContextWidget.prototype.getOrganizationContext = function () {
        return promise_1.promisify(window.gigya.accounts.b2b.getOrganizationContext);
    };
    OrganizationContextWidget.prototype.setOrganizationContext = function (bpid, callback) {
        window.gigya.accounts.b2b.setOrganizationContext({
            callback: function (response) { return callback(response); },
            bpid: bpid
        });
    };
    OrganizationContextWidget.prototype.getUserOrganizations = function () {
        return promise_1.promisify(window.gigya.accounts.getAccountInfo, {
            include: "groups"
        });
    };
    OrganizationContextWidget.prototype.clearOrganizationSelect = function () {
        this.selectElem.options.length = 0;
    };
    OrganizationContextWidget.prototype.initOrganizationSelect = function (groupsResponse, organizationContextResponse) {
        var _this = this;
        var selectOptionTemplate = this.selectElem.options[0].text;
        var organizations;
        if (groupsResponse.errorCode === GSErrors.OK) {
            organizations = this.getActiveOrganizations(groupsResponse["groups"]);
            if (organizations.length == 0) {
                this.selectElem.options[0].text = this._screenSet.getText(exports.OrganizationContextConsts.noDataAvailableMessage);
                this.disableWidget();
                return;
            }
        }
        else {
            var errorMessage = this._screenSet.getErrorMessageNew(groupsResponse.errorCode);
            this.showMessage('error', errorMessage);
            // remove template option in case of error
            this.clearOrganizationSelect();
            return;
        }
        if (organizationContextResponse.errorCode === GSErrors.OK) {
            this.organizationContextBpid = organizationContextResponse.bpid;
        }
        else {
            var errorMessage = this._screenSet.getErrorMessageNew(organizationContextResponse.errorCode);
            this.showMessage('error', errorMessage);
        }
        var hasSelected = false;
        organizations
            .map(function (org) {
            var option = document.createElement('option');
            option.value = org.bpid;
            option.text = _this.fillTemplate(selectOptionTemplate, {
                name: org.orgName,
                bpid: org.bpid,
                id: org.orgId
            });
            if (_this.organizationContextBpid == org.bpid) {
                option.selected = true;
                _this._screenSet.data.apiData.selectedBpid = _this.organizationContextBpid;
                hasSelected = true;
            }
            return option;
        })
            .forEach(function (option) {
            _this.selectElem.add(option);
        });
        if (hasSelected) {
            // remove first option with text pattern in case when we have selected value
            this.selectElem.options.remove(0);
        }
        else {
            // no selected value, remove text pattern from the first option
            this.selectElem.options[0].text = "";
        }
    };
    OrganizationContextWidget.prototype.getActiveOrganizations = function (groups) {
        if (groups && groups.organizations) {
            return groups.organizations.filter(function (org) { return !org.status || org.status === UserOrganizationRelationshipStatus.active; });
        }
        return [];
    };
    OrganizationContextWidget.prototype.isOrganizationContextForm = function () {
        return this._form instanceof ChangeOrganizationContextForm_1.ChangeOrganizationContextForm;
    };
    OrganizationContextWidget.prototype.fillTemplate = function (template, obj) {
        var content = template.replace(/{{organization[.](.*?)}}/g, function (match, p1) { return obj[p1] || ""; });
        return content;
    };
    OrganizationContextWidget.prototype.onClickHandler = function () {
        var _this = this;
        this.hideMessage();
        if (!this._screenSet.data.apiData.selectedBpid)
            return;
        if (this._screenSet.data.apiData.selectedBpid != this.organizationContextBpid) {
            this.preSaveContext();
            this.setOrganizationContext(this._screenSet.data.apiData.selectedBpid, function (response) {
                if (response.errorCode === GSErrors.OK) {
                    _this.organizationContextBpid = _this._screenSet.data.apiData.selectedBpid;
                }
                else {
                    var errorMessage = _this._screenSet.getErrorMessageNew(response.errorCode);
                    _this.showMessage("error", errorMessage);
                }
                _this.postSaveContext();
            });
        }
    };
    OrganizationContextWidget.prototype.disableWidget = function () {
        this.selectElem.disabled = true;
        this.selectElem.classList.add(exports.OrganizationContextConsts.disabledClass);
        if (this.buttonElem) {
            this.buttonElem.disabled = true;
            this.buttonElem.classList.add(exports.OrganizationContextConsts.disabledClass);
        }
    };
    OrganizationContextWidget.prototype.enableWidget = function () {
        this.selectElem.disabled = false;
        this.selectElem.classList.remove(exports.OrganizationContextConsts.disabledClass);
        if (this.buttonElem) {
            this.buttonElem.disabled = false;
            this.buttonElem.classList.remove(exports.OrganizationContextConsts.disabledClass);
        }
    };
    OrganizationContextWidget.prototype.preSaveContext = function () {
        this.disableWidget();
        this._screen.dimScreen();
    };
    OrganizationContextWidget.prototype.postSaveContext = function () {
        this.enableWidget();
        this._screen.undimScreen();
    };
    OrganizationContextWidget.prototype.onSelectChangedHandler = function () {
        this._screenSet.data.apiData.selectedBpid = this.selectElem.value;
        this.hideMessage();
        this.publishSelectValueChanged(this.selectElem.value);
    };
    OrganizationContextWidget.prototype.publishSelectValueChanged = function (value) {
        var _a;
        var fieldChangeEvent = {
            eventName: 'fieldChanged',
            screen: (_a = this._screen) === null || _a === void 0 ? void 0 : _a.requestedScreen,
            form: this._form.bindID,
            field: 'bpid',
            isValid: true,
            errMsg: null,
            value: this.selectElem.value,
        };
        this._screen.dispatchEvent('fieldChanged', fieldChangeEvent);
        window.gigya.utils.DOM.dispatch(this.selectElem, 'fieldChanged');
    };
    OrganizationContextWidget.prototype.showMessage = function (type, message) {
        this.errorDisplayElem.classList.add(exports.OrganizationContextConsts.errorActiveClass);
        this.errorDisplayElem.classList.add(type);
        this.errorMessageElem.innerText = message;
    };
    OrganizationContextWidget.prototype.hideMessage = function () {
        this.errorDisplayElem.classList.remove(exports.OrganizationContextConsts.errorActiveClass);
        this.errorDisplayElem.classList.remove('success');
        this.errorDisplayElem.classList.remove('error');
    };
    OrganizationContextWidget.CONSTS = exports.OrganizationContextConsts;
    return OrganizationContextWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.OrganizationContextWidget = OrganizationContextWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(OrganizationContextWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyBaseWidget.ts":
/*!**********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyBaseWidget.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var PasskeyService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Passkey/PasskeyService */ "./src/core/Gigya.Js/app/Passkey/PasskeyService.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseScreenWidget_1 = __webpack_require__(/*! ../BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
exports.Passkey_CONSTS = {
    selector: '.gigya-passKey-widget',
    errorDisplayClass: '.gigya-error-display',
    errorMessageClass: '.gigya-error-msg',
    errorActiveClass: 'gigya-error-display-active',
};
utils_1.DeepFreeze(exports.Passkey_CONSTS);
var PasskeyBaseWidget = /** @class */ (function (_super) {
    tslib_1.__extends(PasskeyBaseWidget, _super);
    function PasskeyBaseWidget(_screen, el, _domUtils) {
        if (_domUtils === void 0) { _domUtils = window.gigya.utils.DOM; }
        var _this = _super.call(this, _screen, el, false) || this;
        _this._domUtils = _domUtils;
        _this.onClickHandler = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.onClick();
                return [2 /*return*/];
            });
        }); };
        return _this;
    }
    Object.defineProperty(PasskeyBaseWidget.prototype, "hostForm", {
        get: function () {
            return this._screen.getFormByElement(this.instanceElement) || null;
        },
        enumerable: true,
        configurable: true
    });
    PasskeyBaseWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        this.buttonElem = this.instanceElement.querySelector('button');
        this.errorDisplayElem = this.instanceElement.querySelector(exports.Passkey_CONSTS.errorDisplayClass);
        this.errorMessageElem = this.errorDisplayElem.querySelector(exports.Passkey_CONSTS.errorMessageClass);
        this.errorMessageElem.classList.add('gigya-error-msg-active');
        if (PasskeyService_1.default.isSupported()) {
            this._addClickHandler();
        }
        else {
            this.buttonElem.setAttribute('disabled', 'true');
        }
    };
    PasskeyBaseWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this._removeClickHandler();
    };
    PasskeyBaseWidget.prototype.onClick = function () {
        this.hideMessage();
    };
    PasskeyBaseWidget.prototype.showMessage = function (type, message) {
        this.errorDisplayElem.classList.add(exports.Passkey_CONSTS.errorActiveClass);
        this.errorDisplayElem.classList.add(type);
        this.errorMessageElem.innerText = message;
    };
    PasskeyBaseWidget.prototype.hideMessage = function () {
        this.errorDisplayElem.classList.remove(exports.Passkey_CONSTS.errorActiveClass);
        this.errorDisplayElem.classList.remove('success');
        this.errorDisplayElem.classList.remove('error');
    };
    PasskeyBaseWidget.prototype._addClickHandler = function () {
        this._domUtils.addEventListener(this.buttonElem, 'click', this.onClickHandler);
    };
    PasskeyBaseWidget.prototype._removeClickHandler = function () {
        this._domUtils.removeEventListener(this.buttonElem, 'click', this.onClickHandler);
    };
    return PasskeyBaseWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.PasskeyBaseWidget = PasskeyBaseWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyLoginWidget.ts":
/*!***********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyLoginWidget.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var PasskeyBaseWidget_1 = __webpack_require__(/*! ./PasskeyBaseWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyBaseWidget.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseScreenWidget_1 = __webpack_require__(/*! ../BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var PasskeyService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Passkey/PasskeyService */ "./src/core/Gigya.Js/app/Passkey/PasskeyService.ts");
var GSErrors = window.gigya.GSErrors;
var LinkAccountsForm_1 = __webpack_require__(/*! ../Forms/LinkAccountsForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LinkAccountsForm.ts");
exports.PasskeyLogin_CONSTS = {
    selector: '.gigya-composite-control-passkey-login-widget',
};
utils_1.DeepFreeze(exports.PasskeyLogin_CONSTS);
var PasskeyLoginWidget = /** @class */ (function (_super) {
    tslib_1.__extends(PasskeyLoginWidget, _super);
    function PasskeyLoginWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PasskeyLoginWidget.prototype.onClick = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response, e_1, errorMessage;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _super.prototype.onClick.call(this);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        this._screen.dimScreen();
                        if (this.hostForm.bindID === LinkAccountsForm_1.LinkAccountsForm_CONSTS.gigyaClass) {
                            this._screenSet.data.shouldConnectAccounts = true;
                        }
                        return [4 /*yield*/, PasskeyService_1.default.authenticate({
                                abortCurrentCeremony: true,
                                dontHandleScreenSet: false,
                                sessionExpiration: this._screenSet.params['sessionExpiration']
                            })];
                    case 2:
                        response = _a.sent();
                        this._screenSet.onScreenResponse(response, this.hostForm);
                        if (response.errorCode !== GSErrors.OK) {
                            response.errorMessage = this._screenSet.getErrorMessageNew(response.errorCode);
                            this.showMessage('error', response.errorMessage);
                        }
                        return [3 /*break*/, 5];
                    case 3:
                        e_1 = _a.sent();
                        errorMessage = this._screenSet.getErrorMessageNew(e_1.errorCode);
                        this.showMessage('error', errorMessage);
                        this._screen.dispatchEvent('error', tslib_1.__assign(tslib_1.__assign({}, e_1), { errorMessage: errorMessage }));
                        return [3 /*break*/, 5];
                    case 4:
                        this._screen.undimScreen();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PasskeyLoginWidget.CONSTS = exports.PasskeyLogin_CONSTS;
    return PasskeyLoginWidget;
}(PasskeyBaseWidget_1.PasskeyBaseWidget));
exports.PasskeyLoginWidget = PasskeyLoginWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(PasskeyLoginWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyManager/PasskeyCardWidget.ts":
/*!*************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyManager/PasskeyCardWidget.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseScreenWidget_1 = __webpack_require__(/*! ../../BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var TranslatedWidget_1 = __webpack_require__(/*! ../TranslatedWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget.ts");
var CardListWidget_1 = __webpack_require__(/*! ../CardListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CardListWidget.ts");
var PasskeyService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Passkey/PasskeyService */ "./src/core/Gigya.Js/app/Passkey/PasskeyService.ts");
var GSErrors = window.gigya.GSErrors;
exports.PasskeyCard_CONSTS = {
    selector: 'li.gigya-passkey-card',
    deleteButtonSelector: '.gigya-remove-passkey-icon',
    newCardClass: 'gigya-card-new',
    deps: [TranslatedWidget_1.TranslatedWidget]
};
var PasskeyCardWidget = /** @class */ (function (_super) {
    tslib_1.__extends(PasskeyCardWidget, _super);
    function PasskeyCardWidget(_screen, el, _domUtils) {
        if (_domUtils === void 0) { _domUtils = window.gigya.utils.DOM; }
        var _this = _super.call(this, _screen, el, false) || this;
        _this._domUtils = _domUtils;
        _this.deletePasskey = function (e) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var response, hostForm;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        e.preventDefault();
                        this._screen.dimScreen();
                        return [4 /*yield*/, PasskeyService_1.default.removePasskey(this.elementId, this._screenSet.regToken)];
                    case 1:
                        response = _a.sent();
                        if (response.errorCode !== GSErrors.OK) {
                            hostForm = this._screen.getFormByElement(this.instanceElement);
                            if (!hostForm)
                                return [2 /*return*/];
                            this._screenSet.onScreenResponse(response, this);
                            this._screenSet.displayServerErrors(response, hostForm);
                        }
                        this._screen.undimScreen();
                        return [2 /*return*/];
                }
            });
        }); };
        _this.bindID = _this.ID || exports.PasskeyCard_CONSTS.selector;
        return _this;
    }
    Object.defineProperty(PasskeyCardWidget.prototype, "index", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.getAttribute(CardListWidget_1.CardList_CONSTS.indexAttribute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasskeyCardWidget.prototype, "elementId", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.getAttribute(CardListWidget_1.CardList_CONSTS.idAttribute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasskeyCardWidget.prototype, "deleteButton", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(exports.PasskeyCard_CONSTS.deleteButtonSelector);
        },
        enumerable: true,
        configurable: true
    });
    PasskeyCardWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var content, matches, elemIndex;
            return tslib_1.__generator(this, function (_a) {
                _super.prototype.linkInstanceElement.call(this, parent);
                content = this.instanceElement.innerHTML;
                matches = content.match(/{{(.*?)}}/g);
                elemIndex = this.index;
                content = matches.reduce(function (str, m) {
                    var value = m.replace(/passkeys./g, "passkeys[" + elemIndex + "].");
                    return str.replace(m, value);
                }, content);
                this.instanceElement.innerHTML = content;
                if (this.isNewCard()) {
                    this.instanceElement.classList.add(exports.PasskeyCard_CONSTS.newCardClass);
                }
                else {
                    this.instanceElement.classList.remove(exports.PasskeyCard_CONSTS.newCardClass);
                }
                this.addEventHandlers();
                return [2 /*return*/];
            });
        });
    };
    PasskeyCardWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this.removeEventHandlers();
    };
    PasskeyCardWidget.prototype.isNewCard = function () {
        var passkey = this._screenSet.data.passkeys[this.index];
        return !passkey.lastLogin;
    };
    PasskeyCardWidget.prototype.addEventHandlers = function () {
        this._domUtils.addEventListener(this.deleteButton, 'click', this.deletePasskey);
    };
    PasskeyCardWidget.prototype.removeEventHandlers = function () {
        this._domUtils.removeEventListener(this.deleteButton, 'click', this.deletePasskey);
    };
    PasskeyCardWidget.CONSTS = exports.PasskeyCard_CONSTS;
    return PasskeyCardWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.PasskeyCardWidget = PasskeyCardWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(PasskeyCardWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyManager/PasskeyManagerWidget.ts":
/*!****************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyManager/PasskeyManagerWidget.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var CardListWidget_1 = __webpack_require__(/*! ../CardListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CardListWidget.ts");
var BaseScreenWidget_1 = __webpack_require__(/*! ../../BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var GSErrors = window.gigya.GSErrors;
var PasskeyService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Passkey/PasskeyService */ "./src/core/Gigya.Js/app/Passkey/PasskeyService.ts");
exports.PasskeyManager_CONSTS = {
    selector: '.gigya-composite-control-passkey-manager-widget'
};
var PasskeyManagerWidget = /** @class */ (function (_super) {
    tslib_1.__extends(PasskeyManagerWidget, _super);
    function PasskeyManagerWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.itemId = 'id';
        _this.refreshList = function () {
            _this.reloadList();
        };
        _this.credentialMapper = function (cred) {
            cred.DeviceName = cred.DeviceName || cred.Platform + " / " + cred.Browser;
            return Object.keys(cred).reduce(function (c, key) {
                var _a;
                var camelCaseKey = key.charAt(0).toLowerCase() + key.slice(1);
                return tslib_1.__assign(tslib_1.__assign({}, c), (_a = {}, _a[camelCaseKey] = _this.getValue(key, cred[key]), _a));
            }, {});
        };
        return _this;
    }
    PasskeyManagerWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        this.addEventHandlers();
                        return [2 /*return*/];
                }
            });
        });
    };
    PasskeyManagerWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this.removeEventHandlers();
    };
    PasskeyManagerWidget.prototype.reloadData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response, data, hostForm, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, PasskeyService_1.default.getPasskeys(this._screenSet.regToken)];
                    case 1:
                        response = _b.sent();
                        if (response.errorCode === GSErrors.OK) {
                            data = response.credentials.map(this.credentialMapper);
                            this._screenSet.data.passkeys = data;
                            return [2 /*return*/, data];
                        }
                        else {
                            hostForm = this._screen.getFormByElement(this.instanceElement);
                            this._screenSet.onScreenResponse(response, hostForm);
                            return [2 /*return*/, []];
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        _a = _b.sent();
                        return [2 /*return*/, []];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PasskeyManagerWidget.prototype.addEventHandlers = function () {
        PasskeyService_1.default.on('passkeyRemoved', this.refreshList);
        PasskeyService_1.default.on('passkeyAdded', this.refreshList);
    };
    PasskeyManagerWidget.prototype.removeEventHandlers = function () {
        PasskeyService_1.default.remove('passkeyAdded', this.refreshList);
        PasskeyService_1.default.remove('passkeyRemoved', this.refreshList);
    };
    PasskeyManagerWidget.prototype.getValue = function (key, value) {
        if (key === 'LastLogin' || key === 'RegistrationDate') {
            // convert c# ticks to utc timestamp
            var TICKS_AT_EPOCH = 621355968000000000;
            var TICKS_PER_MILLISECOND = 10000;
            var intValue = parseInt(value, 10);
            return new Date(Math.ceil((intValue - TICKS_AT_EPOCH) / TICKS_PER_MILLISECOND))
                .toLocaleDateString(undefined, {
                weekday: 'short',
                day: 'numeric',
                year: 'numeric',
                month: 'short'
            });
        }
        return value;
    };
    PasskeyManagerWidget.CONSTS = exports.PasskeyManager_CONSTS;
    return PasskeyManagerWidget;
}(CardListWidget_1.CardListWidget));
exports.PasskeyManagerWidget = PasskeyManagerWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(PasskeyManagerWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyRegisterWidget.ts":
/*!**************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyRegisterWidget.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var PasskeyBaseWidget_1 = __webpack_require__(/*! ./PasskeyBaseWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyBaseWidget.ts");
var utils_1 = __webpack_require__(/*! ../utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseScreenWidget_1 = __webpack_require__(/*! ../BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var PasskeyService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Passkey/PasskeyService */ "./src/core/Gigya.Js/app/Passkey/PasskeyService.ts");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
exports.PasskeyRegister_CONSTS = {
    selector: '.gigya-composite-control-passkey-register-widget',
    behaviorAttr: 'data-passkey-behavior'
};
exports.PasskeyRegisterMode = {
    Connect: 'connect',
    Submit: 'submit'
};
utils_1.DeepFreeze(exports.PasskeyRegister_CONSTS);
var PasskeyRegisterWidget = /** @class */ (function (_super) {
    tslib_1.__extends(PasskeyRegisterWidget, _super);
    function PasskeyRegisterWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PasskeyRegisterWidget.prototype, "behavior", {
        get: function () {
            return this.instanceElement.getAttribute(exports.PasskeyRegister_CONSTS.behaviorAttr) || exports.PasskeyRegisterMode.Connect;
        },
        enumerable: true,
        configurable: true
    });
    PasskeyRegisterWidget.prototype.onClick = function () {
        var _a, _b, _c, _d;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _e, lang, regSource, context, cid, sessionExpiration, source, response, hostForm, message, e_1, errorMessage;
            return tslib_1.__generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _super.prototype.onClick.call(this);
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 5, 6, 7]);
                        this._screen.dimScreen();
                        _e = this._screenSet.params, lang = _e.lang, regSource = _e.regSource, context = _e.context, cid = _e.cid, sessionExpiration = _e.sessionExpiration, source = _e.source;
                        return [4 /*yield*/, PasskeyService_1.default.registerPasskey({
                                regToken: (_b = (_a = this._screenSet) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.regToken,
                                aToken: (_d = (_c = this._screenSet) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.aToken,
                                lang: lang, regSource: regSource, context: context, cid: cid, sessionExpiration: sessionExpiration, source: source
                            }, true)];
                    case 2:
                        response = _f.sent();
                        if (!(this.behavior === exports.PasskeyRegisterMode.Submit)) return [3 /*break*/, 4];
                        hostForm = this._screen.getFormByElement(this.instanceElement);
                        return [4 /*yield*/, this._screenSet.onScreenResponse(response, hostForm)];
                    case 3:
                        _f.sent();
                        _f.label = 4;
                    case 4:
                        if (response.errorCode === GSErrors_1.GSErrors.OK) {
                            message = this._screenSet.getText('passkey_register_success');
                            this.showMessage('success', message);
                        }
                        else {
                            response.errorMessage = this._screenSet.getText(response.errorCode);
                            this.showMessage('error', response.errorMessage);
                        }
                        return [3 /*break*/, 7];
                    case 5:
                        e_1 = _f.sent();
                        errorMessage = this._screenSet.getErrorMessageNew(e_1.errorCode);
                        this.showMessage('error', errorMessage);
                        this._screen.dispatchEvent('error', tslib_1.__assign(tslib_1.__assign({}, e_1), { errorMessage: errorMessage }));
                        return [3 /*break*/, 7];
                    case 6:
                        this._screen.undimScreen();
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    PasskeyRegisterWidget.CONSTS = exports.PasskeyRegister_CONSTS;
    return PasskeyRegisterWidget;
}(PasskeyBaseWidget_1.PasskeyBaseWidget));
exports.PasskeyRegisterWidget = PasskeyRegisterWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(PasskeyRegisterWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordAuthMethodWidget.ts":
/*!*****************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordAuthMethodWidget.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseAuthMethodWidget_1 = __webpack_require__(/*! ../BaseAuthMethodWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseAuthMethodWidget.ts");
var accounts = window.gigya.accounts;
var BaseFormWidget_1 = __webpack_require__(/*! ../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
exports.AuthMethodPassword_CONSTS = tslib_1.__assign(tslib_1.__assign({}, BaseAuthMethodWidget_1.AuthMethod_CONSTS), { selector: '.gigya-link-accounts-form .gigya-auth-method[data-auth-method="site"]' });
utils_1.DeepFreeze(exports.AuthMethodPassword_CONSTS);
var PasswordAuthMethodWidget = /** @class */ (function (_super) {
    tslib_1.__extends(PasswordAuthMethodWidget, _super);
    function PasswordAuthMethodWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fieldName = 'sitePassword';
        return _this;
    }
    PasswordAuthMethodWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        this.expand();
    };
    Object.defineProperty(PasswordAuthMethodWidget.prototype, "submitApi", {
        get: function () {
            return accounts.login;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordAuthMethodWidget.prototype, "submitApiParams", {
        get: function () {
            return window.gigya.utils.object.merge([
                this.dataProvider.defaultSubmitParams,
                this.dataProvider.getPasswordLoginParams(this.passwordValue),
            ]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PasswordAuthMethodWidget.prototype, "passwordValue", {
        get: function () {
            var _a;
            return (_a = this.formField) === null || _a === void 0 ? void 0 : _a.getValue();
        },
        enumerable: true,
        configurable: true
    });
    PasswordAuthMethodWidget.CONSTS = exports.AuthMethodPassword_CONSTS;
    return PasswordAuthMethodWidget;
}(BaseAuthMethodWidget_1.BaseAuthMethodWidget));
exports.PasswordAuthMethodWidget = PasswordAuthMethodWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(PasswordAuthMethodWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordStrengthWidget.ts":
/*!***************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordStrengthWidget.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
exports.DisplayModes = {
    policy: {
        hasMinimumRequirements: true,
        hasStrengthMeter: false,
        getTemplate: function (templates) {
            return templates.passwordStrength_minimumRequirements;
        },
    },
    meter: {
        hasMinimumRequirements: false,
        hasStrengthMeter: true,
        getTemplate: function (templates) {
            return templates.passwordStrength_strengthMeter;
        },
    },
    combined: {
        hasMinimumRequirements: true,
        hasStrengthMeter: true,
        getTemplate: function (templates) {
            return templates.passwordStrength_strengthMeter + templates.passwordStrength_minimumRequirements;
        },
    },
};
var BubbleOrientations;
(function (BubbleOrientations) {
    BubbleOrientations[BubbleOrientations["right"] = 0] = "right";
    BubbleOrientations[BubbleOrientations["left"] = 1] = "left";
    BubbleOrientations[BubbleOrientations["up"] = 2] = "up";
    BubbleOrientations[BubbleOrientations["down"] = 3] = "down";
    BubbleOrientations[BubbleOrientations["none"] = 4] = "none";
})(BubbleOrientations = exports.BubbleOrientations || (exports.BubbleOrientations = {}));
utils_1.DeepFreeze(BubbleOrientations);
exports.PasswordStrengthWidget_CONSTS = {
    selector: 'div.gigya-password-strength',
    bubbleClass: 'gigya-password-strength-bubble',
    mobileClass: 'mobile-bubble',
    desktopClass: 'desktop-bubble',
    displayMode: 'data-display-mode',
    bubble: 'data-on-focus-bubble',
    bubbleOrientation: 'data-bubble-orientation',
};
utils_1.DeepFreeze(exports.PasswordStrengthWidget_CONSTS);
var PasswordStrengthWidget = /** @class */ (function (_super) {
    tslib_1.__extends(PasswordStrengthWidget, _super);
    function PasswordStrengthWidget(form, el) {
        var _this = _super.call(this, form, el) || this;
        _this.bubbleLastTop = '';
        _this.originalClass = el.className;
        _this.originalStyle = el.getAttribute('style');
        _this.originalDisplay = el.style.display;
        el.style.display = 'none';
        // Automatically bound to the form password field
        _this._passwordField = form.getField('newPassword') || form.getField('password');
        if (!_this._passwordField) {
            _this.warn(exports.PasswordStrengthWidget_CONSTS.selector + "'s form is missing password field to bound to");
            return _this;
        }
        _this.getText = function (t) { return _this._screenSet.getText(t); };
        _this.displayMode = exports.DisplayModes[el.getAttribute(exports.PasswordStrengthWidget_CONSTS.displayMode)] || exports.DisplayModes['combined'];
        _this.template = window.gigya.utils.templates.fill(_this._screenSet.getTemplates().passwordStrength, {
            content: _this.displayMode.getTemplate(_this._screenSet.getTemplates()),
        });
        _this.isBubble = Boolean(el.getAttribute(exports.PasswordStrengthWidget_CONSTS.bubble));
        if (_this.isBubble) {
            _this.bubbleOrientation = BubbleOrientations[el.getAttribute(exports.PasswordStrengthWidget_CONSTS.bubbleOrientation)];
            if (typeof _this.bubbleOrientation === 'undefined')
                _this.bubbleOrientation = _this._screenSet.isModal ? BubbleOrientations.left : BubbleOrientations.up;
            _this.bubbleID = _this._screenSet.params.containerID + '_bubble';
            _this.onBlur = function () { return _this.hideBubble(); };
            _this.onFocus = function () { return _this.updateBubbleDisplay(); };
            _this.onScroll = function () {
                var balloonDiv = window.gigya.global['divGMBalloon'];
                if (balloonDiv && balloonDiv.style.top == _this.bubbleLastTop)
                    _this.refreshBubble();
            };
        }
        _this.fnKeyUp = function () { return _this.updateBubbleDisplay(); };
        _this._passwordField.addEventListener('keyup', _this.fnKeyUp);
        if (_this.isBubble) {
            _this._passwordField.addEventListener('focus', _this.onFocus);
            _this._passwordField.addEventListener('blur', _this.onBlur);
            window.gigya.utils.DOM.addEventListener(document, 'scroll', _this.onScroll);
        }
        _this._screenSet.onRefreshExternalComponentsEvent().add(function () {
            _this.refreshBubble();
        });
        return _this;
    }
    PasswordStrengthWidget.prototype.isPasswordInputEmpty = function () {
        return !Boolean(this._passwordField.getValue());
    };
    PasswordStrengthWidget.prototype.unlinkTemplate = function () {
        window.gigya.utils.DOM.removeEventListener(document, 'scroll', this.onScroll);
        if (this._passwordField) {
            if (this.isBubble) {
                this._passwordField.removeEventListener('blur', this.onBlur);
                this._passwordField.removeEventListener('focus', this.onFocus);
            }
            this.hideBubble();
            this._passwordField.removeEventListener('keyup', this.fnKeyUp);
        }
        _super.prototype.unlinkTemplate.call(this);
    };
    PasswordStrengthWidget.prototype.showBubble = function () {
        this.instanceElement.style.display = '';
        var bubbleW = this.instanceElement.offsetWidth || 250;
        this.instanceElement.style.display = 'none';
        var bubbleClasses = exports.PasswordStrengthWidget_CONSTS.bubbleClass +
            ' ' +
            (this._screenSet.isMobileUI ? exports.PasswordStrengthWidget_CONSTS.mobileClass : exports.PasswordStrengthWidget_CONSTS.desktopClass);
        var styleCalculator = document.createElement('div');
        styleCalculator.setAttribute('style', this.instanceElement.getAttribute('style'));
        if (styleCalculator.style.display === 'none')
            styleCalculator.style.display = '';
        var bubbleHTML = '<div id="' +
            this.bubbleID +
            '_content" class="' +
            this.instanceElement.className +
            '" style="' +
            styleCalculator.getAttribute('style') +
            '">' +
            this.getPasswordBubbleContent() +
            '</div>';
        window.gigya.global.putGMBalloonNextTo(this._passwordField.instanceElement, bubbleHTML, null, bubbleW, null, true, this.bubbleID, true, this.getBubbleOrientations(), bubbleClasses);
        this.isBubbleVisible = true;
        this.bubbleLastTop = window.gigya.global['divGMBalloon'].style.top;
    };
    PasswordStrengthWidget.prototype.getBubbleOrientations = function () {
        var orientations = [BubbleOrientations[this.bubbleOrientation]];
        var first = orientations[0];
        var up = BubbleOrientations[BubbleOrientations.up];
        var down = BubbleOrientations[BubbleOrientations.down];
        // add or set up orientation
        if (typeof first === 'undefined')
            first = up;
        else if (first !== up)
            orientations.push(up);
        // add down orientation
        if (first !== down)
            orientations.push(down);
        return orientations;
    };
    PasswordStrengthWidget.prototype.hideBubble = function () {
        window.gigya.global.removeGMBalloon();
        this.isBubbleVisible = false;
    };
    PasswordStrengthWidget.prototype.getPasswordBubbleContent = function () {
        var item = {
            TEXT: this.getText,
        };
        var oPassStrength = getPasswordStrengthData(String(this._passwordField.getValue()));
        var apiData = this._screenSet.getApiData();
        var oComplexity = apiData.getPolicies ? apiData.getPolicies.passwordComplexity : null;
        if (!oComplexity)
            oComplexity = {};
        oComplexity.minLength = oComplexity.minLength || 0;
        oComplexity.minCharGroups = oComplexity.minCharGroups || 0;
        if (this.displayMode.hasStrengthMeter) {
            var score = 0;
            var scoreTextID = 'too_weak';
            if (isPasswordStrengthValid(String(this._passwordField.getValue()), oPassStrength, oComplexity)) {
                scoreTextID = 'weak';
                if (oPassStrength.length > 4)
                    score += 40;
                if (oPassStrength.length > 5)
                    score += 21; // combines score = 61
                if (oPassStrength.length > 7)
                    score += 18; // combines score = 79
                if (oPassStrength.charGroups > 1)
                    score += 21;
                if (oPassStrength.charGroups > 2)
                    score += 17; // combines score += 38
                if (oPassStrength.charGroups > 3)
                    score += 23; // combines score += 61
                if (score > 60)
                    scoreTextID = 'fair';
                if (score > 80)
                    scoreTextID = 'strong';
                if (score > 100)
                    scoreTextID = 'very_strong';
            }
            item.score = score;
            item.scoreClass = 'gigya-passwordStrength-' + scoreTextID;
            item.scoreText = this._screenSet.getText(scoreTextID);
            item.barIndicatorClass = 'gigya-passwordStrength-bar-' + scoreTextID;
        }
        if (this.displayMode.hasMinimumRequirements) {
            var arRequirements = [];
            if (oComplexity.minLength > 0) {
                var minLengthText = this._screenSet.getText('num_characters_total', '%num', oComplexity.minLength);
                if (minLengthText)
                    arRequirements.push(minLengthText);
            }
            if (oComplexity.minCharGroups > 0) {
                var minCharGroupsText = this._screenSet.getText('num_of_the_following_groups', '%num', oComplexity.minCharGroups);
                if (minCharGroupsText)
                    arRequirements.push(minCharGroupsText);
            }
            item.requirements = '';
            if (arRequirements.length > 0) {
                var lastReq = arRequirements.pop();
                item.requirements = this._screenSet.getText('password_must_contain_at_least') + ' ';
                if (arRequirements.length > 0)
                    item.requirements += arRequirements.join(', ') + ' ' + this._screenSet.getText('and') + ' ';
                item.requirements += lastReq;
            }
            item.requirements = window.gigya.pluginUtils.text.fixTextWidows(item.requirements);
        }
        return window.gigya.utils.templates.fill(this.template, item);
    };
    PasswordStrengthWidget.prototype.updateBubbleDisplay = function () {
        if (!this.isBubbleVisible && !this.isPasswordInputEmpty()) {
            this.showBubble();
        }
        else if (this.isBubbleVisible && !this.isPasswordInputEmpty()) {
            this.updateBubbleContent();
        }
        else {
            this.hideBubble();
        }
    };
    PasswordStrengthWidget.prototype.updateBubbleContent = function () {
        var html = this.getPasswordBubbleContent();
        if (this.isBubble) {
            document.getElementById(this.bubbleID + '_content').innerHTML = html;
        }
        else {
            // inline display
            this.instanceElement.innerHTML = html;
            this.instanceElement.style.display = this.originalDisplay;
        }
    };
    PasswordStrengthWidget.prototype.evaluateConditionalAttributes = function () {
        _super.prototype.evaluateConditionalAttributes.call(this);
        if (this.isBubble) {
            this.bubbleOrientation = BubbleOrientations[this.instanceElement.getAttribute(exports.PasswordStrengthWidget_CONSTS.bubbleOrientation)];
            if (typeof this.bubbleOrientation === 'undefined')
                this.bubbleOrientation = this._screenSet.isModal ? BubbleOrientations.left : BubbleOrientations.up;
        }
    };
    PasswordStrengthWidget.prototype.refreshBubble = function () {
        if (this.isBubbleVisible) {
            this.showBubble();
        }
    };
    PasswordStrengthWidget.CONSTS = exports.PasswordStrengthWidget_CONSTS;
    return PasswordStrengthWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.PasswordStrengthWidget = PasswordStrengthWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(PasswordStrengthWidget);
function passwordStrengthMatchToNumber(match) {
    if (match && match.length)
        return match.length;
    return 0;
}
function getPasswordStrengthData(pass) {
    if (!pass)
        pass = '';
    var oResult = {
        lower: passwordStrengthMatchToNumber(pass.match(/[a-z]/g)),
        upper: passwordStrengthMatchToNumber(pass.match(/[A-Z]/g)),
        digits: passwordStrengthMatchToNumber(pass.match(/\d/g)),
        specialChars: passwordStrengthMatchToNumber(pass.match(/[^\dA-Za-z]/g)),
        length: pass.length,
        charGroups: 0,
    };
    if (oResult.lower)
        oResult.charGroups++;
    if (oResult.upper)
        oResult.charGroups++;
    if (oResult.digits)
        oResult.charGroups++;
    if (oResult.specialChars)
        oResult.charGroups++;
    return oResult;
}
exports.getPasswordStrengthData = getPasswordStrengthData;
function isPasswordStrengthValid(pass, oPassStrength, oComplexityPolicy) {
    if (!pass || !oPassStrength || !oComplexityPolicy)
        return;
    if (oComplexityPolicy.regExp) {
        var regexFormat = new RegExp(oComplexityPolicy.regExp);
        if (!regexFormat.test(pass)) {
            return false;
        }
    }
    return !(oPassStrength.lower < oComplexityPolicy.minLowercase ||
        oPassStrength.upper < oComplexityPolicy.minUppercase ||
        oPassStrength.digits < oComplexityPolicy.minDigit ||
        oPassStrength.specialChars < oComplexityPolicy.minSpecialChars ||
        oPassStrength.charGroups < oComplexityPolicy.minCharGroups ||
        oPassStrength.length < oComplexityPolicy.minLength);
}
exports.isPasswordStrengthValid = isPasswordStrengthValid;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneAuthMethodWidget.ts":
/*!**************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneAuthMethodWidget.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseAuthMethodWidget_1 = __webpack_require__(/*! ../BaseAuthMethodWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseAuthMethodWidget.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var BaseOtpAuthMethodWidget_1 = __webpack_require__(/*! ../BaseOtpAuthMethodWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseOtpAuthMethodWidget.ts");
exports.PhoneOtpAuthMethodOtpWidget_CONSTS = tslib_1.__assign(tslib_1.__assign({}, BaseAuthMethodWidget_1.AuthMethod_CONSTS), { selector: '.gigya-link-accounts-form .gigya-auth-method[data-auth-method="phone"]' });
utils_1.DeepFreeze(exports.PhoneOtpAuthMethodOtpWidget_CONSTS);
var PhoneAuthMethodWidget = /** @class */ (function (_super) {
    tslib_1.__extends(PhoneAuthMethodWidget, _super);
    function PhoneAuthMethodWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fieldName = 'phoneCode';
        return _this;
    }
    Object.defineProperty(PhoneAuthMethodWidget.prototype, "initApiParams", {
        get: function () {
            var _a;
            return {
                lang: this.dataProvider.lang,
                phvToken: (_a = this.dataProvider.phone) === null || _a === void 0 ? void 0 : _a.lookup,
                regToken: null
            };
        },
        enumerable: true,
        configurable: true
    });
    PhoneAuthMethodWidget.CONSTS = exports.PhoneOtpAuthMethodOtpWidget_CONSTS;
    return PhoneAuthMethodWidget;
}(BaseOtpAuthMethodWidget_1.BaseOtpAuthMethodWidget));
exports.PhoneAuthMethodWidget = PhoneAuthMethodWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(PhoneAuthMethodWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneNumberWidget.ts":
/*!**********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneNumberWidget.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var Utils_1 = __webpack_require__(/*! src/accounts/Gigya.Js.Plugin.Tfa/app/helpers/Utils */ "./src/accounts/Gigya.Js.Plugin.Tfa/app/helpers/Utils.ts");
var TranslatedWidget_1 = __webpack_require__(/*! ./TranslatedWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var Errors_1 = __webpack_require__(/*! ../Errors */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var ErrorDisplayElement_1 = __webpack_require__(/*! ../ErrorDisplayElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement.ts");
var keypressValidationDelay = 1000;
var PhoneWidgetState;
(function (PhoneWidgetState) {
    PhoneWidgetState["Mobile"] = "mobile";
    PhoneWidgetState["Verification"] = "verification";
    PhoneWidgetState["Verified"] = "verified";
})(PhoneWidgetState || (PhoneWidgetState = {}));
var PhoneWidgetCodeState;
(function (PhoneWidgetCodeState) {
    PhoneWidgetCodeState["Sent"] = "sent";
    PhoneWidgetCodeState["Resend"] = "resend";
})(PhoneWidgetCodeState || (PhoneWidgetCodeState = {}));
exports.PhoneNumberWidget_CONSTS = {
    selector: '.gigya-phone-number-widget',
    verifyButtonClass: 'gigya-phone-verify-button',
    resendButtonCLass: 'gigya-phone-resend-button',
    phonePreviewClass: 'gigya-phone-number-preview',
    useAsIdentifierAttr: 'data-use-as-identifier',
    codeInputClass: 'gigya-phone-number-verification-code',
    phoneInputNumberClass: 'gigya-subscriber-phone-number-input',
    countryCodeInputClass: 'gigya-country-code-select',
    verifiedStatusClass: 'gigya-phone-verified-status',
    resendBlockedLabelClass: 'gigya-phone-resend-blocked',
    linkDisabledClass: 'gigya-disabled',
    errorMessageClass: 'gigya-error-msg',
    placeholderTextAttribute: 'data-gigya-placeholder',
    gigyaHiddenClass: 'gigya-hidden',
    placeholderAttribute: 'placeholder',
    widgetStateAttribute: 'data-widget-state',
    requiredAttribute: 'data-widget-required',
    codeStateAttributes: 'data-widget-code-state',
    displayNameAttribute: 'data-display-name',
    translationKeyAttribute: 'data-translation-key',
    resendBlockDefaultLabelAttr: 'data-resend-blocked-default-label',
    phoneNumberFieldName: 'phoneNumber',
    resendCountTemplate: '%sec',
    disableVerifyInSeconds: 10,
    otpCodeLength: 6,
    deps: [TranslatedWidget_1.TranslatedWidget]
};
utils_1.DeepFreeze(exports.PhoneNumberWidget_CONSTS);
var PhoneNumberWidget = /** @class */ (function (_super) {
    tslib_1.__extends(PhoneNumberWidget, _super);
    function PhoneNumberWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.debounceDelay = _this._screenSet.params['debounceDelay'] || keypressValidationDelay;
        return _this;
    }
    PhoneNumberWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.isIdentifierMode) {
            this.init();
            this.startFlow();
        }
    };
    PhoneNumberWidget.prototype.unlinkInstanceElement = function () {
        var _a;
        _super.prototype.unlinkInstanceElement.call(this);
        if (this.resendTimeoutId) {
            clearTimeout(this.resendTimeoutId);
        }
        (_a = this.errorDisplayEl) === null || _a === void 0 ? void 0 : _a.unlinkInstanceElement();
    };
    PhoneNumberWidget.prototype.renderWidget = function () {
        var _a;
        _super.prototype.renderWidget.call(this);
        if (this.isIdentifierMode) {
            (_a = this.codeInputEl) === null || _a === void 0 ? void 0 : _a.setAttribute(PhoneNumberWidget.CONSTS.placeholderAttribute, this.codePlaceholder);
        }
    };
    PhoneNumberWidget.prototype.validateAsync = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var errorMessage, error;
            return tslib_1.__generator(this, function (_a) {
                if (!this.isRequired()) {
                    return [2 /*return*/, gigya.Promise.resolve({
                            errorCode: GSErrors_1.GSErrors.OK,
                            widget: this
                        })];
                }
                if (this.verifiedFormNumber) {
                    return [2 /*return*/, gigya.Promise.resolve({
                            errorCode: GSErrors_1.GSErrors.OK,
                            widget: this
                        })];
                }
                errorMessage = this.getErrorText(this.requiredErrorKey);
                this.showErrorMessage(errorMessage);
                error = {
                    errorCode: GSErrors_1.GSErrors.REQUIRED_VALUE_VALIDATION_ERROR,
                    widget: this,
                    errorType: Errors_1.ErrorType.custom,
                    errorMessage: errorMessage
                };
                return [2 /*return*/, gigya.Promise.resolve(error)];
            });
        });
    };
    PhoneNumberWidget.prototype.isRequired = function () {
        return this.instanceElement.hasAttribute(exports.PhoneNumberWidget_CONSTS.requiredAttribute);
    };
    PhoneNumberWidget.prototype.init = function () {
        var _this = this;
        this.addButtonHandler(this.phonePreviewEl, function () { return _this.showPhoneNumberStep(true); });
        this.addDomEventListener(this.codeInputEl, 'keyup', window.gigya.utils.functions.debounce(function () { return _this.onCodeInputChange(); }, this.debounceDelay));
        this.addDomEventListener(this.phoneInputEl, 'keyup', window.gigya.utils.functions.debounce(function () { return _this.onPhoneInputChange(); }, this.debounceDelay));
        this.addDomEventListener(this.countryCodeEl, 'change', function () { return _this.onPhoneInputChange(); });
        this.errorDisplayEl = new ErrorDisplayElement_1.ErrorDisplayElement(this.errorMessageEl, this._screen);
        this.errorDisplayEl.linkInstanceElement(this._screen.instanceElement);
    };
    PhoneNumberWidget.prototype.startFlow = function () {
        if (this.accountPhoneNumber) {
            this.showExistingPhoneNumber();
        }
        else {
            this.showPhoneNumberStep();
        }
    };
    PhoneNumberWidget.prototype.hideVerifiedMessage = function () {
        var messageEl = this.instanceElement.querySelector("." + exports.PhoneNumberWidget_CONSTS.verifiedStatusClass);
        if (messageEl) {
            window.gigya.utils.DOM.addClassToElement(messageEl, exports.PhoneNumberWidget_CONSTS.gigyaHiddenClass);
        }
    };
    Object.defineProperty(PhoneNumberWidget.prototype, "isIdentifierMode", {
        get: function () {
            return this.instanceElement.getAttribute(exports.PhoneNumberWidget_CONSTS.useAsIdentifierAttr) === 'true';
        },
        enumerable: true,
        configurable: true
    });
    PhoneNumberWidget.prototype.showPhoneNumberStep = function (focus) {
        if (focus === void 0) { focus = false; }
        this.switchToState(PhoneWidgetState.Mobile);
        this.toggleVerify();
        if (focus) {
            this.countryCodeEl.focus();
        }
    };
    PhoneNumberWidget.prototype.showVerificationStep = function () {
        this.switchToState(PhoneWidgetState.Verification);
        this.enableCodeInput();
        this.onCodeSent();
        this.codeInputEl.focus();
        this.phonePreviewEl.innerText = this.phoneNumberMasked;
        this.codeInputEl.value = '';
    };
    PhoneNumberWidget.prototype.showVerificationState = function () {
        this.switchToState(PhoneWidgetState.Verified);
    };
    PhoneNumberWidget.prototype.showPhoneVerified = function () {
        var _a;
        (_a = this.verifiedPhoneNumberField) === null || _a === void 0 ? void 0 : _a.setValue(this.phoneNumber, true);
        this.showVerificationState();
    };
    PhoneNumberWidget.prototype.showExistingPhoneNumber = function () {
        var _a;
        (_a = this.verifiedPhoneNumberField) === null || _a === void 0 ? void 0 : _a.setValue(this.accountPhoneNumber, true);
        this.hideVerifiedMessage();
        this.showVerificationState();
    };
    PhoneNumberWidget.prototype.switchToState = function (state) {
        this.hideErrorMessage();
        this.instanceElement.setAttribute(exports.PhoneNumberWidget_CONSTS.widgetStateAttribute, state);
    };
    PhoneNumberWidget.prototype.onCodeSent = function () {
        this.disableResend(exports.PhoneNumberWidget_CONSTS.disableVerifyInSeconds);
        this.startResendCountDown(exports.PhoneNumberWidget_CONSTS.disableVerifyInSeconds);
    };
    PhoneNumberWidget.prototype.startResendCountDown = function (count) {
        var _this = this;
        if (count) {
            this.changeResendBlockedMessage(count);
            this.resendTimeoutId = setTimeout(function () { return _this.startResendCountDown(count - 1); }, 1000);
        }
        else {
            this.enableResendCode();
        }
    };
    PhoneNumberWidget.prototype.changeResendBlockedMessage = function (count) {
        this.resendBlockedEl.innerText = this.getCountDownText(count);
    };
    PhoneNumberWidget.prototype.getCountDownText = function (count) {
        var _a;
        if (this.resendCountDownTranslationKey) {
            return this._screenSet.getText(this.resendCountDownTranslationKey, exports.PhoneNumberWidget_CONSTS.resendCountTemplate, count);
        }
        return (_a = this.resendCountdownDefaultLabel) === null || _a === void 0 ? void 0 : _a.replace(exports.PhoneNumberWidget_CONSTS.resendCountTemplate, count);
    };
    PhoneNumberWidget.prototype.disableResend = function (count) {
        this.changeResendBlockedMessage(count);
        this.instanceElement.setAttribute(exports.PhoneNumberWidget_CONSTS.codeStateAttributes, PhoneWidgetCodeState.Sent);
    };
    PhoneNumberWidget.prototype.enableResendCode = function () {
        var _this = this;
        this.instanceElement.setAttribute(exports.PhoneNumberWidget_CONSTS.codeStateAttributes, PhoneWidgetCodeState.Resend);
        this.addButtonHandler(this.resendButtonEl, function () { return _this.resendCodeHandler(); });
    };
    PhoneNumberWidget.prototype.onPhoneInputChange = function () {
        if (!this.verifyButtonEl) {
            return;
        }
        this.hideErrorMessage();
        this.toggleVerify();
    };
    PhoneNumberWidget.prototype.toggleVerify = function () {
        if (this.phoneNumberWithoutCode && this.countryCode) {
            this.enableVerifyButton();
        }
        else {
            this.disableVerifyButton();
        }
    };
    PhoneNumberWidget.prototype.enableVerifyButton = function () {
        var _this = this;
        this.verifyButtonEl.classList.remove(exports.PhoneNumberWidget_CONSTS.linkDisabledClass);
        this.addButtonHandler(this.verifyButtonEl, function () { return _this.verifyButtonClickHandler(); }, 'verifyButtonClick');
    };
    PhoneNumberWidget.prototype.disableVerifyButton = function () {
        this.verifyButtonEl.classList.add(exports.PhoneNumberWidget_CONSTS.linkDisabledClass);
        this.removeDomEventListener('verifyButtonClick');
    };
    PhoneNumberWidget.prototype.onCodeInputChange = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.hideErrorMessage();
                        if (!(this.codeInputEl.value.length === 6)) return [3 /*break*/, 2];
                        this.disableCodeInput();
                        return [4 /*yield*/, this.otpUpdate(this.codeInputEl.value, this.vToken)];
                    case 1:
                        res = _a.sent();
                        if (res.errorCode === GSErrors_1.GSErrors.OK) {
                            this.showPhoneVerified();
                        }
                        else {
                            this.enableCodeInput();
                            this.displayError(res);
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    PhoneNumberWidget.prototype.resendCodeHandler = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.otpSendCode()];
                    case 1:
                        res = _a.sent();
                        if (res.errorCode === GSErrors_1.GSErrors.OK) {
                            this.setVToken(res['vToken']);
                            this.onCodeSent();
                        }
                        else {
                            this.displayError(res);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PhoneNumberWidget.prototype.verifyButtonClickHandler = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.disableVerifyScreen();
                        return [4 /*yield*/, this.otpSendCode()];
                    case 1:
                        res = _a.sent();
                        this.enableVerifyScreen();
                        if (res.errorCode === GSErrors_1.GSErrors.OK) {
                            this.setVToken(res['vToken']);
                            this.showVerificationStep();
                        }
                        else {
                            this.displayError(res);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PhoneNumberWidget.prototype.disableVerifyScreen = function () {
        this.countryCodeEl.disabled = true;
        this.phoneInputEl.disabled = true;
        this.disableVerifyButton();
    };
    PhoneNumberWidget.prototype.enableVerifyScreen = function () {
        this.countryCodeEl.disabled = false;
        this.phoneInputEl.disabled = false;
        this.enableVerifyButton();
    };
    PhoneNumberWidget.prototype.setVToken = function (vToken) {
        this.vToken = vToken;
    };
    PhoneNumberWidget.prototype.otpUpdate = function (code, vToken) {
        return new gigya.Promise(function (resolve) {
            window.gigya.accounts.otp.update({
                code: code,
                vToken: vToken,
                callback: function (res) { return resolve(res); }
            });
        });
    };
    PhoneNumberWidget.prototype.otpSendCode = function () {
        var _this = this;
        return new gigya.Promise(function (resolve) {
            window.gigya.accounts.otp.sendCode({
                phoneNumber: _this.phoneNumber,
                callback: function (res) { return resolve(res); }
            });
        });
    };
    PhoneNumberWidget.prototype.displayError = function (response) {
        var errorText = this.getErrorTextFromResponse(response);
        this.showErrorMessage(errorText, response.errorCode);
    };
    PhoneNumberWidget.prototype.showErrorMessage = function (text, errorCode) {
        if (errorCode === void 0) { errorCode = GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE; }
        this.errorDisplayEl.showError({
            errorMessage: text,
            errorCode: errorCode
        });
    };
    PhoneNumberWidget.prototype.hideErrorMessage = function () {
        this.errorDisplayEl.hideError();
    };
    PhoneNumberWidget.prototype.getErrorKeyFromResponse = function (response) {
        var errorCode = Number(response.errorCode);
        if (errorCode === GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE && response.errorDetails) {
            if (utils_1.endsWith(response.errorDetails, 'Token has been revoked')) {
                return 'otp_code_expired';
            }
            if (utils_1.endsWith(response.errorDetails, 'phoneNumber already exists')) {
                return 'phone_number_exists';
            }
            if (utils_1.endsWith(response.errorDetails, 'code')) {
                return 'please_enter_a_valid_code';
            }
            if (utils_1.endsWith(response.errorDetails, 'Invalid parameter value : phoneNumber')) {
                return 'invalid_fieldname';
            }
        }
        if (errorCode === GSErrors_1.GSErrors.FORBIDDEN) {
            return 'forbidden_error';
        }
        if (errorCode === GSErrors_1.GSErrors.FREQUENCY_LIMIT_REACHED) {
            return 'code_frequency_limit_reached';
        }
        if (errorCode === GSErrors_1.GSErrors.PERMISSION_DENIED) {
            return 'unauthorized_user';
        }
        return null;
    };
    PhoneNumberWidget.prototype.enableCodeInput = function () {
        this.codeInputEl.disabled = false;
    };
    PhoneNumberWidget.prototype.disableCodeInput = function () {
        this.codeInputEl.disabled = true;
    };
    Object.defineProperty(PhoneNumberWidget.prototype, "accountPhoneNumber", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this._screenSet.getApiData()) === null || _a === void 0 ? void 0 : _a.getAccountInfo) === null || _b === void 0 ? void 0 : _b.phoneNumber;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "verifyButtonEl", {
        get: function () {
            return Utils_1.getElementByClassName(this.instanceElement, exports.PhoneNumberWidget_CONSTS.verifyButtonClass);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "resendButtonEl", {
        get: function () {
            return Utils_1.getElementByClassName(this.instanceElement, exports.PhoneNumberWidget_CONSTS.resendButtonCLass);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "phonePreviewEl", {
        get: function () {
            return Utils_1.getElementByClassName(this.instanceElement, exports.PhoneNumberWidget_CONSTS.phonePreviewClass);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "codeInputEl", {
        get: function () {
            return Utils_1.getElementByClassName(this.instanceElement, exports.PhoneNumberWidget_CONSTS.codeInputClass);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "phoneInputEl", {
        get: function () {
            return Utils_1.getElementByClassName(this.instanceElement, exports.PhoneNumberWidget_CONSTS.phoneInputNumberClass);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "countryCodeEl", {
        get: function () {
            return Utils_1.getElementByClassName(this.instanceElement, exports.PhoneNumberWidget_CONSTS.countryCodeInputClass);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "phoneNumber", {
        get: function () {
            return this.countryCode ? "" + this.countryCode + this.phoneNumberWithoutCode : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "phoneNumberMasked", {
        get: function () {
            var maskedSymbols = this.phoneNumber.slice(0, this.phoneNumber.length - 2).split('').map(function () { return '*'; }).join('');
            var visibleSymbols = this.phoneNumber.slice(-2);
            return "" + maskedSymbols + visibleSymbols;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "phoneNumberWithoutCode", {
        get: function () {
            var _a, _b;
            var number = (_b = (_a = this.phoneInputEl) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.replace(/\s/gm, ''); // remove whitespace
            if (this.countryCode !== '+39') { // Italy (phone must start with 0)
                number = number === null || number === void 0 ? void 0 : number.replace(/^0+/, '');
            }
            return number;
        },
        enumerable: true,
        configurable: true
    });
    PhoneNumberWidget.prototype.isCurrentState = function (state) {
        return this.instanceElement.getAttribute(exports.PhoneNumberWidget_CONSTS.widgetStateAttribute) === state;
    };
    Object.defineProperty(PhoneNumberWidget.prototype, "countryCode", {
        get: function () {
            var _a, _b;
            return ((_a = this.countryCodeEl) === null || _a === void 0 ? void 0 : _a.value) === '0' ? '' : (_b = this.countryCodeEl) === null || _b === void 0 ? void 0 : _b.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "codePlaceholder", {
        get: function () {
            return this.codeInputEl.getAttribute(exports.PhoneNumberWidget_CONSTS.placeholderTextAttribute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "errorMessageEl", {
        get: function () {
            return this.instanceElement.querySelector("." + exports.PhoneNumberWidget_CONSTS.errorMessageClass);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "verifiedFormNumber", {
        get: function () {
            return this.verifiedPhoneNumberField.getValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "verifiedPhoneNumberField", {
        get: function () {
            var _a;
            return (_a = this._form) === null || _a === void 0 ? void 0 : _a.getField(exports.PhoneNumberWidget_CONSTS.phoneNumberFieldName);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "resendBlockedEl", {
        get: function () {
            return this.instanceElement.querySelector("." + exports.PhoneNumberWidget_CONSTS.resendBlockedLabelClass);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "resendCountDownTranslationKey", {
        get: function () {
            return this.resendBlockedEl.getAttribute(exports.PhoneNumberWidget_CONSTS.translationKeyAttribute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "resendCountdownDefaultLabel", {
        get: function () {
            return this.resendBlockedEl.getAttribute(exports.PhoneNumberWidget_CONSTS.resendBlockDefaultLabelAttr);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PhoneNumberWidget.prototype, "requiredErrorKey", {
        get: function () {
            if (this.isCurrentState(PhoneWidgetState.Verification)) {
                return 'phone_not_verified_enter_code';
            }
            if (this.isCurrentState(PhoneWidgetState.Mobile)) {
                if (this.phoneNumber) {
                    return 'phone_not_verified';
                }
                return 'this_field_is_required';
            }
        },
        enumerable: true,
        configurable: true
    });
    PhoneNumberWidget.CONSTS = exports.PhoneNumberWidget_CONSTS;
    return PhoneNumberWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.PhoneNumberWidget = PhoneNumberWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(PhoneNumberWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhotoUploadWidget.ts":
/*!**********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhotoUploadWidget.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseUploadWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseUploadWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseUploadWidget.ts");
var BaseServerWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseServerWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseServerWidget.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var nextDownloadContext = 0;
exports.PhotoUploadWidget_CONSTS = {
    selector: 'div.gigya-photo-upload',
};
utils_1.DeepFreeze(exports.PhotoUploadWidget_CONSTS);
var PhotoUploadWidget = /** @class */ (function (_super) {
    tslib_1.__extends(PhotoUploadWidget, _super);
    function PhotoUploadWidget(_form, el) {
        var _this = _super.call(this, _form, el) || this;
        _this.photoElementID = _this._uploadIframeID + '_photo';
        _this.pathContainerID = _this._uploadIframeID + '_path';
        _this.defaultBGImage = window.gigya._.getCdnResource() + '/gs/i/accounts/avatar_64.png'; // TODO This should be replaced by CSS
        var template = _this._screenSet.getTemplates().photoUpload_ui;
        _this.uiHtml = window.gigya.utils.templates.fill(template, {
            pathContainerID: _this.pathContainerID,
            photoElementID: _this.photoElementID,
            choose_file: _this._screenSet.getText('choose_file'),
            no_file_chosen: _this._screenSet.getText('no_file_chosen'),
            tip: _this._screenSet.getText('maximum_size_of_3mb.') + ' JPG, GIF, PNG.',
        });
        el.innerHTML = '';
        if (window.gigya.localInfo.isIE9 || window.gigya.localInfo.isIE8) {
            _this._form.filters.push({
                filterOutWidgetsToSend: function (dataToFilter) {
                    if (dataToFilter.profile) {
                        delete dataToFilter.profile._profilePhoto;
                    }
                    return dataToFilter;
                },
            });
        }
        return _this;
    }
    PhotoUploadWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        // add instance ui
        this.uiDiv = document.createElement('div');
        this.uiDiv.innerHTML = this.uiHtml;
        this.instanceElement.appendChild(this.uiDiv);
        this.restoreDefaultBg();
    };
    PhotoUploadWidget.prototype.unlinkInstanceElement = function () {
        this.instanceElement.removeChild(this.uiDiv);
        this.uiDiv = null;
        _super.prototype.unlinkInstanceElement.call(this);
    };
    PhotoUploadWidget.prototype.restoreDefaultBg = function () {
        var elPhoto = document.getElementById(this.photoElementID);
        if (elPhoto)
            elPhoto.style.backgroundImage = "url('" + this.defaultBGImage + "')";
    };
    PhotoUploadWidget.prototype.getFormHtml = function () {
        return window.gigya.utils.templates.fill(this._screenSet.getTemplates().photoUpload_form, {
            formTarget: this._uploadIframeID,
        });
    };
    PhotoUploadWidget.prototype.getFormElement = function () {
        return this._formDiv.getElementsByTagName('form')[0];
    };
    PhotoUploadWidget.prototype.getFileElement = function () {
        return this._uploadForm.elements['_profilePhoto'];
    };
    PhotoUploadWidget.prototype.submitUploadForm = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var formAction, _a, _b, _c, _d, _e, pathElement;
            return tslib_1.__generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        // set up new action & responseId
                        this.lastResponseId = this._uploadIframeID + '_' + this._lastQueryId;
                        _b = (_a = window.gigya.utils.stringUtils).format;
                        _c = ["https://" + window.gigya._.getApiDomain('accounts') + "/accounts.uploadProfilePhoto?publish=true&context={0}&saveResponseID={0}&{1}",
                            this.lastResponseId];
                        _e = (_d = window.gigya.utils.keyValue).serialize;
                        return [4 /*yield*/, this.getServerParameters()];
                    case 1:
                        formAction = _b.apply(_a, _c.concat([_e.apply(_d, [_f.sent()])]));
                        this._uploadForm.action = formAction;
                        pathElement = document.getElementById(this.pathContainerID);
                        pathElement.style.backgroundImage = "url('" + window.gigya._.getCdnResource() + "/gs/i/accounts/smallLoader.gif')";
                        _super.prototype.submitUploadForm.call(this);
                        return [2 /*return*/];
                }
            });
        });
    };
    PhotoUploadWidget.prototype.serverQueryDone = function (newState) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var params, _a, _b;
            var _this = this;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.stopUploadCheck();
                        _b = (_a = window.gigya.utils.object).removeUndefined;
                        return [4 /*yield*/, this.getServerParameters()];
                    case 1:
                        params = _b.apply(_a, [_c.sent()]);
                        params.saveResponseID = this.lastResponseId;
                        params.noAuth = true;
                        delete params.login_token;
                        delete params.regToken;
                        window.gigya._.apiAdapter.sendRequest('socialize.getSavedResponse', params, function (res) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.onUploadSavedResponse(res)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); }, {
                            jsSdkRequestId: this.lastResponseId,
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    PhotoUploadWidget.prototype.onUploadSavedResponse = function (res) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var pathElement, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        pathElement = document.getElementById(this.pathContainerID);
                        pathElement.style.backgroundImage = '';
                        _a = res.errorCode;
                        switch (_a) {
                            case GSErrors_1.GSErrors.OK: return [3 /*break*/, 1];
                            case GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE: return [3 /*break*/, 3];
                        }
                        return [3 /*break*/, 4];
                    case 1: return [4 /*yield*/, this.onUploadSuccess()];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        this.onServerError({
                            errorCode: GSErrors_1.GSErrors.PROFILE_PHOTO_TOO_LARGE,
                            errorMessage: this._screenSet.getText('profilePhoto_fileSizeError'),
                        });
                        return [3 /*break*/, 5];
                    case 4:
                        // Any other error
                        this.onServerError(res);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    PhotoUploadWidget.prototype.onUploadSuccess = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var elPath, getProfilePhotoParams, img, thumbnailUrlDomain, thumbnailUrl;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        elPath = document.getElementById(this.pathContainerID);
                        if (elPath)
                            elPath.style.backgroundImage = '';
                        return [4 /*yield*/, this.getServerParameters()];
                    case 1:
                        getProfilePhotoParams = _a.sent();
                        getProfilePhotoParams.type = 'thumbnail';
                        getProfilePhotoParams.context = this._uploadIframeID + ++nextDownloadContext;
                        img = new Image();
                        thumbnailUrlDomain = window.gigya._.getApiDomain('accounts');
                        thumbnailUrl = (getProfilePhotoParams.login_token || getProfilePhotoParams.regToken ? 'https' : window.gigya.localInfo.protocol) + "://" + thumbnailUrlDomain + "/accounts.getProfilePhoto?" + window.gigya.utils.keyValue.serialize(getProfilePhotoParams);
                        img.onload = function () {
                            var elPhoto = document.getElementById(_this.photoElementID);
                            var imageUrl = img.src;
                            if (elPhoto)
                                elPhoto.style.backgroundImage = "url('" + imageUrl + "')";
                            _this._form._screen.setProfilePhoto(imageUrl);
                            img = img.onload = img.onerror = null; // remove memory leak
                        };
                        img.onerror = function () {
                            _this.onServerError({
                                errorCode: GSErrors_1.GSErrors.RESOURCE_NOT_FOUND,
                                errorMessage: 'Profile photo inaccesible.',
                            });
                            _this._form._screen.setProfilePhoto('');
                            img = img.onload = img.onerror = null; // remove memory leak
                        };
                        img.src = thumbnailUrl;
                        _super.prototype.serverQueryDone.call(this, BaseServerWidget_1.ServerStates.Done);
                        return [2 /*return*/];
                }
            });
        });
    };
    PhotoUploadWidget.prototype.onServerError = function (response) {
        this.restoreDefaultBg();
        this._form._screen._screenSet.onScreenResponse(response, this._form);
        _super.prototype.serverQueryDone.call(this, BaseServerWidget_1.ServerStates.Error);
    };
    PhotoUploadWidget.CONSTS = exports.PhotoUploadWidget_CONSTS;
    return PhotoUploadWidget;
}(BaseUploadWidget_1.BaseUploadWidget));
exports.PhotoUploadWidget = PhotoUploadWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(PhotoUploadWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ProfilePhotoWidget.ts":
/*!***********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ProfilePhotoWidget.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseScreenWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
exports.ProfilePhotoWidget_CONSTS = {
    selector: 'div.gigya-profile-photo',
};
utils_1.DeepFreeze(exports.ProfilePhotoWidget_CONSTS);
var ProfilePhotoWidget = /** @class */ (function (_super) {
    tslib_1.__extends(ProfilePhotoWidget, _super);
    function ProfilePhotoWidget(_screen, el) {
        var _this = _super.call(this, _screen, el) || this;
        _screen._profilePhotos.push(_this);
        return _this;
    }
    ProfilePhotoWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        var profile = this._screenSet.getProfile();
        var thumbnailURL = profile.thumbnailURL ? window.gigya.global.getPhotoURL(profile.thumbnailURL) : '';
        this.setThumbnailUrl(thumbnailURL);
    };
    ProfilePhotoWidget.prototype.setThumbnailUrl = function (thumbnailURL) {
        this.instanceElement.innerHTML = thumbnailURL ? '<img src="' + thumbnailURL + '" />' : '';
    };
    ProfilePhotoWidget.CONSTS = exports.ProfilePhotoWidget_CONSTS;
    return ProfilePhotoWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.ProfilePhotoWidget = ProfilePhotoWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(ProfilePhotoWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/RequiredDisplayWidget.ts":
/*!**************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/RequiredDisplayWidget.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FlagService_1 = __webpack_require__(/*! ./../../../../core/Gigya.Js/app/Services/FlagService */ "./src/core/Gigya.Js/app/Services/FlagService.ts");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var ScreenSetPlugin_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetPlugin */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetPlugin.ts");
exports.RequiredDisplayWidget_CONSTS = {
    selector: '.gigya-required-display',
    boundTo: 'data-bound-to',
    alwaysVisible: 'gigya-required-display-always-visible'
};
utils_1.DeepFreeze(exports.RequiredDisplayWidget_CONSTS);
var RequiredDisplayWidget = /** @class */ (function (_super) {
    tslib_1.__extends(RequiredDisplayWidget, _super);
    function RequiredDisplayWidget(form, el) {
        var _this = _super.call(this, form, el) || this;
        // The asterisk may be hidden by default. We'll replace this with the gigya-hidden class.
        if (el.style.display === 'none') {
            el.style.display = '';
        }
        // WCAG: Don't read the asterisk to user when using screen reader.
        // The form element has aria-required which will convey to the user that the field is required.
        el.setAttribute('aria-hidden', 'true');
        el.removeAttribute('for');
        return _this;
    }
    RequiredDisplayWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        this.updateVisibility();
    };
    RequiredDisplayWidget.prototype.evaluateConditionalAttributes = function () {
        _super.prototype.evaluateConditionalAttributes.call(this);
        this.updateVisibility();
    };
    RequiredDisplayWidget.prototype.updateBoundedField = function (field) {
        this.boundTo = this.instanceElement.getAttribute(exports.RequiredDisplayWidget_CONSTS.boundTo);
        this.boundToField = field;
    };
    RequiredDisplayWidget.prototype.updateVisibility = function () {
        var el = this.instanceElement;
        if (!el)
            return;
        if (el.getAttribute(exports.RequiredDisplayWidget_CONSTS.alwaysVisible) === "true") {
            this.show();
            return;
        }
        this.boundTo = el.getAttribute(exports.RequiredDisplayWidget_CONSTS.boundTo);
        if (!this.boundTo) {
            this.warn(exports.RequiredDisplayWidget_CONSTS.selector + " is missing " + exports.RequiredDisplayWidget_CONSTS.boundTo + " attribute");
            this.hide();
            return;
        }
        this.boundToField = this._form.getField(this.boundTo, this.instanceElement.getAttribute(FormInput_1.FormInput_CONSTS.arrayKeyValueAttribute), FlagService_1.FlagService.getOnlyVisibleField);
        if (!this.boundToField) {
            this.warn(exports.RequiredDisplayWidget_CONSTS.selector + "'s form is missing field " + this.boundTo + " to bound to");
            this.hide();
            return;
        }
        this.boundToField.evaluateConditionalAttributes();
        if (this.boundToField.required()) {
            this.show();
        }
        else {
            this.hide();
        }
    };
    RequiredDisplayWidget.prototype.show = function () {
        window.gigya.utils.DOM.removeClassFromElement(this.instanceElement, ScreenSetPlugin_1.ScreenSet_CONSTS.gigyaHidden);
    };
    RequiredDisplayWidget.prototype.hide = function () {
        window.gigya.utils.DOM.addClassToElement(this.instanceElement, ScreenSetPlugin_1.ScreenSet_CONSTS.gigyaHidden);
    };
    RequiredDisplayWidget.CONSTS = exports.RequiredDisplayWidget_CONSTS;
    return RequiredDisplayWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.RequiredDisplayWidget = RequiredDisplayWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(RequiredDisplayWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SecretQuestionWidget.ts":
/*!*************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SecretQuestionWidget.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var TemplateElement_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts");
exports.SecretQuestionWidget_CONSTS = {
    selector: 'div.gigya-secret-question',
    allowEmpty: 'data-allow-empty',
};
utils_1.DeepFreeze(exports.SecretQuestionWidget_CONSTS);
var SecretQuestionWidget = /** @class */ (function (_super) {
    tslib_1.__extends(SecretQuestionWidget, _super);
    function SecretQuestionWidget(form, el) {
        var _this = _super.call(this, form, el, false) || this;
        _this.questions = new Array();
        form._secretQuestions.push(_this);
        var questionElements = el.querySelectorAll('*[name="secretQuestion"]');
        utils_1.ForEach(questionElements, function (questionEl) { return _this.questions.push(new QuestionElement(questionEl, _this)); });
        _this.answerField = form.getField('secretAnswer');
        if (!_this.answerField) {
            _this.warn(exports.SecretQuestionWidget_CONSTS.selector + "'s form is missing secretAnswer field to link to");
            return _this;
        }
        return _this;
    }
    SecretQuestionWidget.prototype.unlinkTemplate = function () {
        utils_1.ForEach(this.questions, function (q) { return q.unlinkTemplate(); });
        _super.prototype.unlinkTemplate.call(this);
    };
    SecretQuestionWidget.prototype.linkInstanceElement = function (parent) {
        var _this = this;
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.instanceElement) {
            if (this.answerField)
                this.answerField.instanceElement.setAttribute(exports.SecretQuestionWidget_CONSTS.allowEmpty, '1'); // TODO perhaps use a different value
            utils_1.ForEach(this.questions, function (q) { return q.linkInstanceElement(_this.instanceElement); });
        }
    };
    SecretQuestionWidget.prototype.unlinkInstanceElement = function () {
        if (this.instanceElement)
            utils_1.ForEach(this.questions, function (q) { return q.unlinkInstanceElement(); });
        _super.prototype.unlinkInstanceElement.call(this);
    };
    SecretQuestionWidget.prototype.setQuestion = function (question) {
        utils_1.ForEach(this.questions, function (q) { return (q.instanceElement.innerHTML = question); });
        if (this.answerField)
            this.answerField.instanceElement.removeAttribute(exports.SecretQuestionWidget_CONSTS.allowEmpty);
        this.instanceElement.style.display = 'inline'; // TODO why this is needed
    };
    SecretQuestionWidget.CONSTS = exports.SecretQuestionWidget_CONSTS;
    return SecretQuestionWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.SecretQuestionWidget = SecretQuestionWidget;
var QuestionElement = /** @class */ (function (_super) {
    tslib_1.__extends(QuestionElement, _super);
    function QuestionElement(el, parent) {
        return _super.call(this, el, parent) || this;
    }
    return QuestionElement;
}(TemplateElement_1.TemplateElement));
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(SecretQuestionWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SocialLoginWidget.ts":
/*!**********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SocialLoginWidget.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseScreenWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var LoginModes_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes.ts");
var BaseForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var GSErrors_1 = __webpack_require__(/*! ../../../../core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var linkAccountsHelper_1 = __webpack_require__(/*! src/core/Gigya.Js.Plugin/app/Utils/general/linkAccountsHelper */ "./src/core/Gigya.Js.Plugin/app/Utils/general/linkAccountsHelper.ts");
var nextGeneratedContainerId = 0;
exports.SocialLoginWidget_CONSTS = {
    selector: 'div.gigya-social-login',
};
utils_1.DeepFreeze(exports.SocialLoginWidget_CONSTS);
var SocialLoginWidget = /** @class */ (function (_super) {
    tslib_1.__extends(SocialLoginWidget, _super);
    function SocialLoginWidget(_screen, el) {
        var _this = _super.call(this, _screen, el) || this;
        _this.bindID = _this.publishID ? _this.ID : exports.SocialLoginWidget_CONSTS.selector;
        _this.loginMode = LoginModes_1.LoginModes[_this.params['loginMode'] || 'standard'];
        _this.containerId = _this._screenSet.containerID + '_social_' + nextGeneratedContainerId++; // TODO Change use the same id for the same screenSet instance, regardless of how many times it is reused, unlike existing implementation that uses a new id each time
        _this.onErrorResponse = function (e) {
            // Hot fix for "no providers" error that goes into the infinite loop - see #44285
            // Hot fix for "invalid parameter" - see #56153
            if (e.errorCode !== GSErrors_1.GSErrors.NO_PROVIDERS && e.errorCode !== GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE) {
                if (Number(e.errorCode) === GSErrors_1.GSErrors.FORCE_LINK_LOGIN_IDENTIFIER_EXISTS) {
                    _this._screenSet.data.shouldConnectAccounts = true;
                }
                var event = _this.getProviderSessionInfo(e);
                return _this._screenSet.onScreenResponse(event, _this);
            }
        };
        _this.onLoginResponse = function (e) {
            _this._screenSet.removeRegToken();
            _this._screenSet.data.shouldConnectAccounts = true;
            _this._screenSet.onScreenResponse({ errorCode: 0, event: e }, _this);
        };
        return _this;
    }
    SocialLoginWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.instanceElement) {
            while (this.instanceElement.firstChild) {
                // clearing the instance element. Notice this is faster than innerHTML=''.
                this.instanceElement.removeChild(this.instanceElement.firstChild);
            }
            this._container = document.createElement('div');
            this._container.className = 'gigya-social-login-container';
            this._container.id = this.containerId;
            this.instanceElement.appendChild(this._container);
            this.calculateEnabledProviders();
            this.apiParams = this.loginMode.filterParams(window.gigya.utils.object.clone(this._screenSet.params));
            if (!this.params['containerID']) {
                this.widgetParams = this.params;
                this.renderWidget();
            }
        }
    };
    /**
     * Surface errors in containing form.
     */
    SocialLoginWidget.prototype.getErrorDisplayForm = function () {
        return this._screen.getFormByElement(this.instanceElement);
    };
    /// Override from TemplateElement
    SocialLoginWidget.prototype.initFromInstanceElement = function () {
        this.successScreen = this._screenSet.chooseNextScreen(this.instanceElement.getAttribute(BaseForm_1.Form_CONSTS.successScreen));
    };
    SocialLoginWidget.prototype.calculateEnabledProviders = function () {
        var loginProviders = this.loginMode.getLoginProviders(this._screenSet.data.apiData, this.params, this._screenSet.data.regToken);
        if (loginProviders !== null && typeof loginProviders !== 'undefined')
            this.params['enabledProviders'] = loginProviders;
    };
    SocialLoginWidget.prototype.unlinkInstanceElement = function () {
        if (this.instanceElement)
            this.instanceElement.innerHTML = ''; // To make sure no ID conflicts will be generated
        if (this._instance)
            this._instance.dispose();
        _super.prototype.unlinkInstanceElement.call(this);
    };
    SocialLoginWidget.prototype.renderWidget = function () {
        var _this = this;
        this.prepareWidgetParams();
        // because rendering the widget is async, we set the container size to take room accordingly - so the screenset will center correctly.
        this.setContainerSize(this.widgetParams['width'], this.widgetParams['height']);
        //re-render plugin and call the plugin API again with the new parameters after the conditionals.
        window.gigya.socialize.showLoginUI(this.apiParams, this.widgetParams, {
            containerID: this.containerId,
            accountsSocialLogin: true,
            onLogin: this.onLoginResponse,
            onError: this.onErrorResponse,
            finalizeRegistration: true,
            dontHandleScreenSet: true,
            UIMode: this.loginMode !== LoginModes_1.LoginModes.link ? 'Login' : 'LinkAccount',
            include: window.gigya.utils.stringUtils.mergeCommaSeparatedValues('profile,data,emails,subscriptions,preferences', this._screenSet.params.include),
            regSource: this._screenSet.params.regSource || utils_1.firstPart(utils_1.firstPart(location.href, '?'), '#'),
            getInstance: function (instances) {
                _this._instance = instances;
            },
        });
        this.renderWidgetUI = false;
    };
    SocialLoginWidget.prototype.prepareWidgetParams = function () {
        this.params.conflictHandling = this.getConflictHandlingFailParam();
        if (this.params.loginMode === 'link' && this.shouldLinkAccounts) {
            this.apiParams['suppressLoginEvent'] = true;
        }
    };
    SocialLoginWidget.prototype.getConflictHandlingFailParam = function () {
        if (this.params.conflictHandling) {
            return this.params.conflictHandling;
        }
        if (window.gigya.utils.toggles.isOn('linkAccountV2')) {
            return 'fail';
        }
        return undefined;
    };
    Object.defineProperty(SocialLoginWidget.prototype, "shouldLinkAccounts", {
        get: function () {
            return this.params.conflictHandling === 'fail' && this._screenSet.hasProviderSessionInfo;
        },
        enumerable: true,
        configurable: true
    });
    SocialLoginWidget.prototype.setContainerSize = function (width, height) {
        if (width) {
            var widthUnits = utils_1.getUnitMeasurementType(width);
            if (widthUnits != utils_1.UnitMeasurementType.auto)
                this._container.style.width = parseFloat(width) + widthUnits;
        }
        if (height) {
            var heightUnits = utils_1.getUnitMeasurementType(height);
            if (heightUnits != utils_1.UnitMeasurementType.auto)
                this._container.style.height = parseFloat(height) + heightUnits;
        }
    };
    SocialLoginWidget.prototype.getProviderSessionInfo = function (interruptionResponse) {
        if (interruptionResponse.errorCode != GSErrors_1.GSErrors.FORCE_LINK_LOGIN_IDENTIFIER_EXISTS) {
            return interruptionResponse;
        }
        var response = interruptionResponse.response;
        var providerSessionInfo = linkAccountsHelper_1.extractProviderInfoFromResponse(response);
        return tslib_1.__assign(tslib_1.__assign({}, interruptionResponse), { response: tslib_1.__assign(tslib_1.__assign({}, response), { providerSessionInfo: providerSessionInfo }) });
    };
    SocialLoginWidget.CONSTS = exports.SocialLoginWidget_CONSTS;
    return SocialLoginWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.SocialLoginWidget = SocialLoginWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(SocialLoginWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SubscriptionWidget.ts":
/*!***********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SubscriptionWidget.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseFormWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var ProfileForm_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProfileForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProfileForm.ts");
exports.SubscriptionWidget_CONSTS = {
    selector: 'div.gigya-subscription',
    subscriptionName: 'name',
};
utils_1.DeepFreeze(exports.SubscriptionWidget_CONSTS);
var SubscriptionWidget = /** @class */ (function (_super) {
    tslib_1.__extends(SubscriptionWidget, _super);
    function SubscriptionWidget(form, el) {
        var _this = _super.call(this, form, el) || this;
        _this._shouldPopulate = form instanceof ProfileForm_1.ProfileForm;
        return _this;
    }
    SubscriptionWidget.prototype.linkInstanceElement = function (parent) {
        var _a;
        _super.prototype.linkInstanceElement.call(this, parent);
        if (this.instanceElement) {
            // subscription name: subscription.<name>.<channel>
            var subscriptionName = (_a = this.instanceElement.getAttribute(SubscriptionWidget.CONSTS.subscriptionName)) === null || _a === void 0 ? void 0 : _a.split('.');
            subscriptionName === null || subscriptionName === void 0 ? void 0 : subscriptionName.shift(); // remove preceding subscriptions
            this.subscriptionObj = {
                channel: subscriptionName === null || subscriptionName === void 0 ? void 0 : subscriptionName.pop(),
                name: subscriptionName === null || subscriptionName === void 0 ? void 0 : subscriptionName.join('.'),
            };
            var checked = this.templateElement.hasAttribute('data-checked');
            if (this._shouldPopulate) {
                var subscriptionsInfo = this._screenSet.getApiData().getAccountInfo;
                var subscriptionData = window.gigya.utils.object.getPropertyBySerializedName(subscriptionsInfo === null || subscriptionsInfo === void 0 ? void 0 : subscriptionsInfo.subscriptions, this.subscriptionObj.name, false);
                if (subscriptionData) {
                    var channel = subscriptionData[this.subscriptionObj.channel];
                    if (channel) {
                        if (channel.hasOwnProperty('isSubscribed')) {
                            checked = channel['isSubscribed'];
                        }
                        if (channel.hasOwnProperty('doubleOptIn') && channel['doubleOptIn']['status'].toLowerCase() === 'pending') {
                            this._statusElement = document.createElement('div');
                            this._statusElement.className = 'subscription-status-label';
                            this._statusElement.style.paddingLeft = '18px';
                            this._statusElement.style.color = 'grey';
                            this._statusElement.style.fontStyle = 'italic';
                            this._statusElement.innerText = this._screenSet.getText('subscription_pending_confirmation');
                        }
                    }
                }
            }
            this.inputElement = document.createElement('input');
            this.inputElement.id = "subs-checkbox-" + this.subscriptionObj.name;
            this.inputElement.name = "subscriptions." + this.subscriptionObj.name + "." + this.subscriptionObj.channel + ".isSubscribed";
            this.inputElement.className = 'gigya-input-checkbox subscription-checkbox';
            this.inputElement.type = 'checkbox';
            this.inputElement.checked = checked;
            this._labelElement = document.createElement('label');
            this._labelElement.className = 'subscription-name-label';
            this._labelElement.style.display = 'inline-block';
            this._labelElement.style.verticalAlign = 'middle';
            this._labelElement.style.paddingLeft = '5px';
            this._labelElement.setAttribute('for', this.inputElement.id);
            this._container = document.createElement('div');
            this._container.className = 'subs-widget-container';
            //add checkbox
            this._container.appendChild(this.inputElement);
            //add label near checkbox
            this._container.appendChild(this._labelElement);
            //add 'pending' status element
            if (this._statusElement) {
                this._container.appendChild(this._statusElement);
            }
            this.instanceElement.appendChild(this._container);
            this.renderWidget();
        }
    };
    SubscriptionWidget.prototype.renderWidget = function () {
        _super.prototype.renderWidget.call(this);
        var text = !this.instanceElement ? '' : this.instanceElement.getAttribute('data-label');
        this._labelElement.innerHTML = this.evaluate(text);
    };
    SubscriptionWidget.CONSTS = exports.SubscriptionWidget_CONSTS;
    return SubscriptionWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.SubscriptionWidget = SubscriptionWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(SubscriptionWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationBaseItemWidget.ts":
/*!***************************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationBaseItemWidget.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var CardListItemWidget_1 = __webpack_require__(/*! ../../CardListItemWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CardListItemWidget.ts");
var TfaEventService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/TfaEventService */ "./src/core/Gigya.Js/app/TFA/TfaEventService.ts");
var TfaGigyaAssertionService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService */ "./src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService.ts");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
var errorMessageUtil_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/errorMessageUtil */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/errorMessageUtil.ts");
var expandableWidget_1 = __webpack_require__(/*! ../../../utils/expandableWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/expandableWidget.ts");
var errorEventUtil_1 = __webpack_require__(/*! ../../../utils/errorEventUtil */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/errorEventUtil.ts");
exports.TFABaseItem_CONSTS = {
    sendButtonSelector: '.gigya-tfa-verification-action-btn',
    submitButtonSelector: '.gigya-input-submit',
    resendButtonSelector: '.gigya-tfa-resend-code',
    expandedAttribute: 'data-device-expanded',
    errorMessageSelector: '.gigya-error-msg[data-bound-to="tfaVerificationWidget"]',
    errorActiveMessageClass: 'gigya-error-msg-active',
    rememberDeviceSelector: '.gigya-remember-device-checkbox input',
    symbolsPlaceholder: '%lastSymbols',
    codeInputSelector: '.gigya-code-input',
    nameAttr: 'name',
    boundToAttr: 'data-bound-to',
    inputErrorSelector: '.gigya-input-error',
    ariaLabelAttr: 'aria-label',
    containerClass: 'gigya-container',
    containerEnabledClass: 'gigya-container-enabled',
};
var TFAVerificationBaseItemWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TFAVerificationBaseItemWidget, _super);
    function TFAVerificationBaseItemWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.expandedStateAttribute = exports.TFABaseItem_CONSTS.expandedAttribute;
        _this.verifyCode = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var isValid, verifyCodeResponse, _a, _b, _c, _d, e_1;
            var _this = this;
            return tslib_1.__generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.validateChildField(this.codeFormField)];
                    case 1:
                        isValid = _e.sent();
                        if (!isValid) {
                            return [2 /*return*/];
                        }
                        this._screenSet.data.finalizeRegistrationNeeded = true;
                        this._screenSet.dimScreenSet();
                        _e.label = 2;
                    case 2:
                        _e.trys.push([2, 8, 9, 10]);
                        return [4 /*yield*/, this.verifyCodeApi()];
                    case 3:
                        verifyCodeResponse = _e.sent();
                        if (!(verifyCodeResponse.errorCode === GSErrors_1.GSErrors.OK)) return [3 /*break*/, 6];
                        _b = (_a = this._form).submit;
                        _c = {
                            customSubmitApi: window.gigya.accounts.tfa.finalizeTFA
                        };
                        _d = {};
                        return [4 /*yield*/, this.getGigyaAssertion()];
                    case 4: return [4 /*yield*/, _b.apply(_a, [(_c.submitApiParams = (_d.gigyaAssertion = _e.sent(),
                                _d.providerAssertion = verifyCodeResponse['providerAssertion'],
                                _d.tempDevice = !this.rememberDevice,
                                _d.regToken = this._screenSet.regToken,
                                _d),
                                _c.onAfterSubmitCallback = function (response) {
                                    if (response.errorCode != GSErrors_1.GSErrors.OK) {
                                        _this.showMessage(response);
                                    }
                                },
                                _c)])];
                    case 5:
                        _e.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        this.handleError({ response: verifyCodeResponse });
                        _e.label = 7;
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_1 = _e.sent();
                        this.handleError({
                            response: { errorCode: GSErrors_1.GSErrors.GENERAL_SERVER_ERROR },
                            context: e_1
                        });
                        return [3 /*break*/, 10];
                    case 9:
                        this._screenSet.undimScreenSet();
                        return [7 /*endfinally*/];
                    case 10: return [2 /*return*/];
                }
            });
        }); };
        return _this;
    }
    TFAVerificationBaseItemWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _super.prototype.linkInstanceElement.call(this, parent);
                        this.initErrorHandling();
                        this.collapse();
                        this.addEventHandlers();
                        this.updateCodeAriaLabel();
                        this.addResendButtonHandlers();
                        return [4 /*yield*/, this.activateHighRiskDevice()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TFAVerificationBaseItemWidget.prototype.expand = function () {
        expandableWidget_1.changeExpandedState(this.instanceElement, this.expandedStateAttribute, true);
    };
    TFAVerificationBaseItemWidget.prototype.collapse = function () {
        expandableWidget_1.changeExpandedState(this.instanceElement, this.expandedStateAttribute, false);
    };
    TFAVerificationBaseItemWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        TfaEventService_1.default.unsubscribe('changeActiveDevice');
    };
    TFAVerificationBaseItemWidget.prototype.updateFormElementsWithCardIndex = function () {
        var _a, _b, _c, _d;
        var inputNameAtt = (_a = this.codeInputEl) === null || _a === void 0 ? void 0 : _a.getAttribute(exports.TFABaseItem_CONSTS.nameAttr);
        var indexedNameAttribute = inputNameAtt + "_" + this.indexStr;
        (_c = (_b = this.instanceElement) === null || _b === void 0 ? void 0 : _b.querySelector(exports.TFABaseItem_CONSTS.inputErrorSelector)) === null || _c === void 0 ? void 0 : _c.setAttribute(exports.TFABaseItem_CONSTS.boundToAttr, indexedNameAttribute);
        (_d = this.codeInputEl) === null || _d === void 0 ? void 0 : _d.setAttribute(exports.TFABaseItem_CONSTS.nameAttr, indexedNameAttribute);
    };
    TFAVerificationBaseItemWidget.prototype.activateHighRiskDevice = function () {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!(((_b = (_a = this._screenSet.data) === null || _a === void 0 ? void 0 : _a.tfaProviders) === null || _b === void 0 ? void 0 : _b.highestRiskProvider) === this.providerName && this.isFirstItem())) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.automaticallyActivateDevice()];
                    case 1:
                        _c.sent();
                        _c.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    TFAVerificationBaseItemWidget.prototype.isFirstItem = function () {
        return this.indexInt === 0;
    };
    TFAVerificationBaseItemWidget.prototype.automaticallyActivateDevice = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.activateDevice()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.sendCode()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TFAVerificationBaseItemWidget.prototype.updateCodeAriaLabel = function () {
        if (this.codeInputAriaLabel) {
            this.codeInputAriaLabel = this.codeInputAriaLabel.replace(exports.TFABaseItem_CONSTS.symbolsPlaceholder, this.lastSymbols);
        }
    };
    Object.defineProperty(TFAVerificationBaseItemWidget.prototype, "sendButton", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(exports.TFABaseItem_CONSTS.sendButtonSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationBaseItemWidget.prototype, "submitButton", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(exports.TFABaseItem_CONSTS.submitButtonSelector);
        },
        enumerable: true,
        configurable: true
    });
    TFAVerificationBaseItemWidget.prototype.activateDevice = function () {
        TfaEventService_1.default.activateDevice(this.providerName, this.elementId);
    };
    TFAVerificationBaseItemWidget.prototype.showMessage = function (message) {
        this.errorMessageElem.classList.add(exports.TFABaseItem_CONSTS.errorActiveMessageClass);
        this.errorMessageElem.innerText = message;
    };
    Object.defineProperty(TFAVerificationBaseItemWidget.prototype, "codeInputAriaLabel", {
        get: function () {
            return this.codeInput.getAttribute(exports.TFABaseItem_CONSTS.ariaLabelAttr);
        },
        set: function (value) {
            this.codeInput.setAttribute(exports.TFABaseItem_CONSTS.ariaLabelAttr, value);
        },
        enumerable: true,
        configurable: true
    });
    TFAVerificationBaseItemWidget.prototype.hideMessage = function () {
        this.errorMessageElem.classList.remove(exports.TFABaseItem_CONSTS.errorActiveMessageClass);
    };
    TFAVerificationBaseItemWidget.prototype.getErrorKeyFromResponse = function (response) {
        return errorMessageUtil_1.getOtpErrorMessage(response);
    };
    TFAVerificationBaseItemWidget.prototype.addEventHandlers = function () {
        var _this = this;
        TfaEventService_1.default.on('changeActiveDevice', function (params) { return _this.onDeviceActivated(params); });
        this.addActionButtonEventHandlers();
        this.addButtonHandler(this.submitButton, function () { return _this.verifyCode(); });
        this.submitOnEnter(this.codeInput, this.submitButton);
        this.submitOnEnter(this.rememberDeviceCheckboxEl, this.submitButton);
    };
    TFAVerificationBaseItemWidget.prototype.addActionButtonEventHandlers = function () {
        var _this = this;
        this.addButtonHandler(this.sendButton, function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendCode()];
                    case 1:
                        _a.sent();
                        this.activateDevice();
                        return [2 /*return*/];
                }
            });
        }); });
    };
    TFAVerificationBaseItemWidget.prototype.onDeviceActivated = function (_a) {
        var deviceId = _a.deviceId, provider = _a.provider;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_b) {
                if (provider === this.providerName && deviceId === this.elementId) {
                    this.expand();
                    this.codeInput.focus();
                    this.startCountDown();
                }
                else {
                    this.collapse();
                }
                return [2 /*return*/];
            });
        });
    };
    TFAVerificationBaseItemWidget.prototype.initErrorHandling = function () {
        var _a, _b;
        this.errorMessageElem = (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(exports.TFABaseItem_CONSTS.errorMessageSelector);
        (_b = this.errorMessageElem) === null || _b === void 0 ? void 0 : _b.classList.add(exports.TFABaseItem_CONSTS.errorActiveMessageClass);
    };
    TFAVerificationBaseItemWidget.prototype.sendCode = function (params) {
        if (params === void 0) { params = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.hideMessage();
                        return [4 /*yield*/, this.sendCodeApi(params)];
                    case 1:
                        response = _a.sent();
                        if (response.errorCode === GSErrors_1.GSErrors.OK) {
                            this._screenSet.data.tfaProviders.phvToken = response['phvToken'];
                        }
                        else {
                            this.handleError({ response: response });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    TFAVerificationBaseItemWidget.prototype.handleError = function (_a) {
        var response = _a.response, context = _a.context;
        this.displayErrorMessage(response);
        errorEventUtil_1.dispatchErrorEvent(this._screen, this._form.bindID, { response: response, context: context });
    };
    TFAVerificationBaseItemWidget.prototype.displayErrorMessage = function (response) {
        var errorMessage = this.getErrorTextFromResponse(response);
        this.renderError(errorMessage);
    };
    TFAVerificationBaseItemWidget.prototype.renderError = function (message) {
        this.errorMessageElem.classList.add(exports.TFABaseItem_CONSTS.errorActiveMessageClass);
        this.errorMessageElem.innerText = message;
    };
    TFAVerificationBaseItemWidget.prototype.getGigyaAssertion = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, TfaGigyaAssertionService_1.default.getAssertion(types_1.TfaMode.verify, this.providerName, {
                        regToken: this._screenSet.regToken,
                    })];
            });
        });
    };
    Object.defineProperty(TFAVerificationBaseItemWidget.prototype, "rememberDevice", {
        get: function () {
            var _a;
            return (_a = this.rememberDeviceCheckboxEl) === null || _a === void 0 ? void 0 : _a.checked;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationBaseItemWidget.prototype, "rememberDeviceCheckboxEl", {
        get: function () {
            return this.instanceElement.querySelector(exports.TFABaseItem_CONSTS.rememberDeviceSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationBaseItemWidget.prototype, "codeInputEl", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(exports.TFABaseItem_CONSTS.codeInputSelector);
        },
        enumerable: true,
        configurable: true
    });
    return TFAVerificationBaseItemWidget;
}(CardListItemWidget_1.CardListItemWidget));
exports.TFAVerificationBaseItemWidget = TFAVerificationBaseItemWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationBaseListWidget.ts":
/*!***************************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationBaseListWidget.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
var TfaGigyaAssertionService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService */ "./src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService.ts");
var CardListFormWidget_1 = __webpack_require__(/*! ../../../CardListFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/CardListFormWidget.ts");
var TFAVerificationBaseListWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TFAVerificationBaseListWidget, _super);
    function TFAVerificationBaseListWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.itemId = 'id';
        return _this;
    }
    TFAVerificationBaseListWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        this._screen._hasTfa = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    TFAVerificationBaseListWidget.prototype.getGigyaAssertion = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, TfaGigyaAssertionService_1.default.getAssertion(types_1.TfaMode.verify, this.providerName, {
                        regToken: this._screenSet.regToken,
                    })];
            });
        });
    };
    TFAVerificationBaseListWidget.prototype.isActiveProvider = function () {
        var _this = this;
        return this._screenSet.data.tfaProviders.activeProviders.some(function (activeProvider) { return activeProvider.name === _this.providerName; });
    };
    return TFAVerificationBaseListWidget;
}(CardListFormWidget_1.CardListFormWidget));
exports.TFAVerificationBaseListWidget = TFAVerificationBaseListWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationWidget.ts":
/*!*******************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationWidget.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseScreenWidget_1 = __webpack_require__(/*! ../../../BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var apis_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/apis */ "./src/core/Gigya.Js/app/TFA/apis.ts");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
exports.TFAVerification_CONSTS = {
    selector: '.gigya-composite-control-tfa-verification-widget'
};
var TFAVerificationWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TFAVerificationWidget, _super);
    function TFAVerificationWidget(_screen, el) {
        var _this = _super.call(this, _screen, el) || this;
        _this._screen._hasTfa = true;
        return _this;
    }
    TFAVerificationWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.init()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TFAVerificationWidget.prototype.init = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var getProviderRes;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._screenSet.dimScreenSet();
                        this._screenSet.data.finalizeRegistrationNeeded = false;
                        this._screen._hasTfa = true;
                        if (!this._screenSet.regToken) return [3 /*break*/, 2];
                        return [4 /*yield*/, apis_1.fetchAvailableProviders({
                                regToken: this._screenSet.regToken
                            })];
                    case 1:
                        getProviderRes = _a.sent();
                        this._screenSet.data.tfaProviders.activeProviders = getProviderRes === null || getProviderRes === void 0 ? void 0 : getProviderRes.activeProviders;
                        this._screenSet.undimScreenSet();
                        this.getHighestRiskProvider();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    TFAVerificationWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
    };
    TFAVerificationWidget.prototype.getHighestRiskProvider = function () {
        var providersArray = this._screenSet.data.tfaProviders.activeProviders.map(function (provider) { return types_1.TfaRiskOrderedProviders[provider.name]; });
        var highestRiskProvider = Math.max.apply(Math, providersArray);
        this._screenSet.data.tfaProviders.highestRiskProvider = types_1.TfaRiskOrderedProviders[highestRiskProvider];
    };
    TFAVerificationWidget.CONSTS = exports.TFAVerification_CONSTS;
    return TFAVerificationWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.TFAVerificationWidget = TFAVerificationWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(TFAVerificationWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/email/TFAVerificationEmailItemWidget.ts":
/*!**********************************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/email/TFAVerificationEmailItemWidget.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var TFAVerificationBaseItemWidget_1 = __webpack_require__(/*! ../TFAVerificationBaseItemWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationBaseItemWidget.ts");
var apis_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/apis */ "./src/core/Gigya.Js/app/TFA/apis.ts");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../../../../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var ApiLinkHelper_1 = __webpack_require__(/*! ../../../../ApiLinkHelper */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ApiLinkHelper.ts");
exports.TFAEmailItem_CONSTS = tslib_1.__assign(tslib_1.__assign({}, TFAVerificationBaseItemWidget_1.TFABaseItem_CONSTS), { codeInputSelector: '.gigya-code-input.gigya-input-text', selector: '.gigya-tfa-verification-method[data-tfa-method="email"] .gigya-card' });
var TFAVerificationEmailItemWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TFAVerificationEmailItemWidget, _super);
    function TFAVerificationEmailItemWidget(_form, el, _domUtils) {
        if (_domUtils === void 0) { _domUtils = window.gigya.utils.DOM; }
        var _this = _super.call(this, _form, el) || this;
        _this._domUtils = _domUtils;
        _this.providerName = types_1.TfaProvider.email;
        _this.bindID = _this.ID || exports.TFAEmailItem_CONSTS.selector;
        return _this;
    }
    TFAVerificationEmailItemWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this.resendLinkHelper.destroy();
    };
    TFAVerificationEmailItemWidget.prototype.sendCodeApi = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = apis_1.sendEmailVerificationCode;
                        _b = {
                            emailID: this.email['id'],
                            method: this.email['lastMethod'],
                            regToken: this._screenSet.regToken
                        };
                        return [4 /*yield*/, this.getGigyaAssertion()];
                    case 1: return [2 /*return*/, _a.apply(void 0, [(_b.gigyaAssertion = _c.sent(),
                                _b.lang = this._screenSet.params.communicationLang,
                                _b)])];
                }
            });
        });
    };
    TFAVerificationEmailItemWidget.prototype.verifyCodeApi = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = apis_1.sendEmailCompleteVerification;
                        _b = {
                            code: this.codeInput.value
                        };
                        return [4 /*yield*/, this.getGigyaAssertion()];
                    case 1: return [2 /*return*/, _a.apply(void 0, [(_b.gigyaAssertion = _c.sent(),
                                _b.phvToken = this._screenSet.data.tfaProviders.phvToken,
                                _b)])];
                }
            });
        });
    };
    TFAVerificationEmailItemWidget.prototype.addResendButtonHandlers = function () {
        var _this = this;
        this.resendLinkHelper = new ApiLinkHelper_1.ApiLinkHelper(this.resendButton, function () { return _this.sendCode(); });
    };
    Object.defineProperty(TFAVerificationEmailItemWidget.prototype, "codeInput", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(exports.TFAEmailItem_CONSTS.codeInputSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationEmailItemWidget.prototype, "email", {
        get: function () {
            var _a, _b, _c;
            return (_c = (_b = (_a = this._screenSet.data) === null || _a === void 0 ? void 0 : _a.tfaProviders) === null || _b === void 0 ? void 0 : _b.emails) === null || _c === void 0 ? void 0 : _c[this.indexStr];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationEmailItemWidget.prototype, "lastSymbols", {
        get: function () {
            var _a, _b, _c;
            var matches = (_b = (_a = this.email) === null || _a === void 0 ? void 0 : _a.email) === null || _b === void 0 ? void 0 : _b.match(/(\*)+(?<lastSymbols>.+)$/);
            return (_c = matches === null || matches === void 0 ? void 0 : matches.groups) === null || _c === void 0 ? void 0 : _c.lastSymbols;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationEmailItemWidget.prototype, "codeFormField", {
        get: function () {
            var _a;
            return (_a = this._form) === null || _a === void 0 ? void 0 : _a.getField("emailCode_" + this.indexStr);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationEmailItemWidget.prototype, "resendButton", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(TFAVerificationBaseItemWidget_1.TFABaseItem_CONSTS.resendButtonSelector);
        },
        enumerable: true,
        configurable: true
    });
    TFAVerificationEmailItemWidget.prototype.startCountDown = function () {
        this.resendLinkHelper.init();
    };
    TFAVerificationEmailItemWidget.CONSTS = exports.TFAEmailItem_CONSTS;
    return TFAVerificationEmailItemWidget;
}(TFAVerificationBaseItemWidget_1.TFAVerificationBaseItemWidget));
exports.TFAVerificationEmailItemWidget = TFAVerificationEmailItemWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(TFAVerificationEmailItemWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/email/TFAVerificationEmailListWidget.ts":
/*!**********************************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/email/TFAVerificationEmailListWidget.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var apis_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/apis */ "./src/core/Gigya.Js/app/TFA/apis.ts");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
var TFAVerificationBaseListWidget_1 = __webpack_require__(/*! ../TFAVerificationBaseListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationBaseListWidget.ts");
var TranslatedWidget_1 = __webpack_require__(/*! ../../../TranslatedWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../../../../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
exports.TFAEmailList_CONSTS = {
    selector: '.gigya-tfa-verification-method.tfa-email-method',
    deps: [TranslatedWidget_1.TranslatedWidget]
};
var TFAVerificationEmailListWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TFAVerificationEmailListWidget, _super);
    function TFAVerificationEmailListWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.providerName = types_1.TfaProvider.email;
        return _this;
    }
    TFAVerificationEmailListWidget.prototype.reloadData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var assertion, getEmailsResponse;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this._screenSet.regToken && this.isActiveProvider())) return [3 /*break*/, 3];
                        this._screenSet.dimScreenSet();
                        return [4 /*yield*/, this.getGigyaAssertion()];
                    case 1:
                        assertion = _a.sent();
                        return [4 /*yield*/, apis_1.fetchTfaEmailList(assertion)];
                    case 2:
                        getEmailsResponse = _a.sent();
                        this._screenSet.undimScreenSet();
                        this._screenSet.data.tfaProviders.emails = this.getDataFromListResponse(getEmailsResponse);
                        this.showList();
                        return [2 /*return*/, this._screenSet.data.tfaProviders.emails];
                    case 3: return [2 /*return*/, []];
                }
            });
        });
    };
    TFAVerificationEmailListWidget.prototype.getDataFromListResponse = function (res) {
        return res.emails.map(function (email) { return ({ email: email.obfuscated, id: email.id }); });
    };
    TFAVerificationEmailListWidget.CONSTS = exports.TFAEmailList_CONSTS;
    return TFAVerificationEmailListWidget;
}(TFAVerificationBaseListWidget_1.TFAVerificationBaseListWidget));
exports.TFAVerificationEmailListWidget = TFAVerificationEmailListWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(TFAVerificationEmailListWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/phone/TFAVerificationPhoneItemWidget.ts":
/*!**********************************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/phone/TFAVerificationPhoneItemWidget.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var TFAVerificationBaseItemWidget_1 = __webpack_require__(/*! ../TFAVerificationBaseItemWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationBaseItemWidget.ts");
var apis_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/apis */ "./src/core/Gigya.Js/app/TFA/apis.ts");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../../../../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var ApiCountdownHelper_1 = __webpack_require__(/*! ../../../../ApiCountdownHelper */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ApiCountdownHelper.ts");
exports.TFAPhoneItem_CONSTS = tslib_1.__assign(tslib_1.__assign({}, TFAVerificationBaseItemWidget_1.TFABaseItem_CONSTS), { selector: '.gigya-tfa-verification-method[data-tfa-method="phone"] .gigya-card', codeInputSelector: '.gigya-code-input.gigya-input-text', sendSMSButtonSelector: '.gigya-tfa-verification-action-btn[data-method="sms"]', sendVoiceButtonSelector: '.gigya-tfa-verification-action-btn[data-method="voice"]', resendButtonSelectorSms: '.gigya-tfa-resend-code[data-method="sms"]', resendButtonSelectorVoice: '.gigya-tfa-resend-code[data-method="voice"]', countDownSelector: '.gigya-api-countdown', gigyaHiddenClass: 'gigya-hidden' });
var TFAVerificationPhoneItemWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TFAVerificationPhoneItemWidget, _super);
    function TFAVerificationPhoneItemWidget(_form, el, _domUtils) {
        if (_domUtils === void 0) { _domUtils = window.gigya.utils.DOM; }
        var _this = _super.call(this, _form, el) || this;
        _this._domUtils = _domUtils;
        _this.providerName = types_1.TfaProvider.phone;
        _this.bindID = _this.ID || exports.TFAPhoneItem_CONSTS.selector;
        return _this;
    }
    TFAVerificationPhoneItemWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        this.countdownHelper.destroy();
    };
    TFAVerificationPhoneItemWidget.prototype.sendCode = function (params) {
        if (params === void 0) { params = { method: types_1.TfaPhoneSendCodeMethod.sms }; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.sendCode.call(this, params)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TFAVerificationPhoneItemWidget.prototype.sendCodeApi = function (params) {
        if (params === void 0) { params = { method: types_1.TfaPhoneSendCodeMethod.sms }; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = apis_1.sendPhoneVerificationCode;
                        _b = {
                            phoneID: this.phone['id'],
                            method: params.method,
                            regToken: this._screenSet.regToken
                        };
                        return [4 /*yield*/, this.getGigyaAssertion()];
                    case 1: return [2 /*return*/, _a.apply(void 0, [(_b.gigyaAssertion = _c.sent(),
                                _b.lang = this._screenSet.params.communicationLang,
                                _b)])];
                }
            });
        });
    };
    TFAVerificationPhoneItemWidget.prototype.addActionButtonEventHandlers = function () {
        var _this = this;
        this.addButtonHandler(this.sendSmsButton, function () { return _this.onSendButtonClicked(types_1.TfaPhoneSendCodeMethod.sms); });
        this.addButtonHandler(this.sendVoiceButton, function () { return _this.onSendButtonClicked(types_1.TfaPhoneSendCodeMethod.voice); });
    };
    TFAVerificationPhoneItemWidget.prototype.addResendButtonHandlers = function () {
        var _this = this;
        this.countdownHelper = new ApiCountdownHelper_1.ApiCountdownHelper(this.countDownEl);
        this.addButtonHandler(this.resendSmsButton, function () { return _this.onResendButtonClick(types_1.TfaPhoneSendCodeMethod.sms); });
        this.addButtonHandler(this.resendVoiceButton, function () { return _this.onResendButtonClick(types_1.TfaPhoneSendCodeMethod.voice); });
    };
    TFAVerificationPhoneItemWidget.prototype.onSendButtonClicked = function (method) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendCode({ method: method })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.activateDevice()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TFAVerificationPhoneItemWidget.prototype.onResendButtonClick = function (method) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendCode({ method: method })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.startCountDown()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TFAVerificationPhoneItemWidget.prototype.automaticallyActivateDevice = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var method;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = this.phone['lastMethod'] || types_1.TfaPhoneSendCodeMethod.sms;
                        return [4 /*yield*/, this.activateDevice()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.sendCode({ method: method })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TFAVerificationPhoneItemWidget.prototype.startCountDown = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.resendButtons.forEach(function (el) { return el.classList.add(exports.TFAPhoneItem_CONSTS.gigyaHiddenClass); });
                        return [4 /*yield*/, this.countdownHelper.startCountdown()];
                    case 1:
                        _a.sent();
                        this.resendButtons.forEach(function (el) { return el.classList.remove(exports.TFAPhoneItem_CONSTS.gigyaHiddenClass); });
                        return [2 /*return*/];
                }
            });
        });
    };
    TFAVerificationPhoneItemWidget.prototype.verifyCodeApi = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = apis_1.sendPhoneCompleteVerification;
                        _b = {
                            code: this.codeInput.value
                        };
                        return [4 /*yield*/, this.getGigyaAssertion()];
                    case 1: return [2 /*return*/, _a.apply(void 0, [(_b.gigyaAssertion = _c.sent(),
                                _b.phvToken = this._screenSet.data.tfaProviders.phvToken,
                                _b)])];
                }
            });
        });
    };
    Object.defineProperty(TFAVerificationPhoneItemWidget.prototype, "codeInput", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(exports.TFAPhoneItem_CONSTS.codeInputSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationPhoneItemWidget.prototype, "phone", {
        get: function () {
            var _a, _b, _c;
            return (_c = (_b = (_a = this._screenSet.data) === null || _a === void 0 ? void 0 : _a.tfaProviders) === null || _b === void 0 ? void 0 : _b.phones) === null || _c === void 0 ? void 0 : _c[this.indexStr];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationPhoneItemWidget.prototype, "lastSymbols", {
        get: function () {
            var _a, _b, _c;
            var matches = (_b = (_a = this.phone) === null || _a === void 0 ? void 0 : _a.phoneNumber) === null || _b === void 0 ? void 0 : _b.match(/(?<lastSymbols>\d.+)$/);
            return (_c = matches === null || matches === void 0 ? void 0 : matches.groups) === null || _c === void 0 ? void 0 : _c.lastSymbols;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationPhoneItemWidget.prototype, "codeFormField", {
        get: function () {
            var _a;
            return (_a = this._form) === null || _a === void 0 ? void 0 : _a.getField("phoneCode_" + this.indexStr);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationPhoneItemWidget.prototype, "sendSmsButton", {
        get: function () {
            return this.instanceElement.querySelector(exports.TFAPhoneItem_CONSTS.sendSMSButtonSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationPhoneItemWidget.prototype, "sendVoiceButton", {
        get: function () {
            return this.instanceElement.querySelector(exports.TFAPhoneItem_CONSTS.sendVoiceButtonSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationPhoneItemWidget.prototype, "resendButtons", {
        get: function () {
            if (this.resendVoiceButton) {
                return [this.resendSmsButton, this.resendVoiceButton];
            }
            return [this.resendSmsButton];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationPhoneItemWidget.prototype, "resendSmsButton", {
        get: function () {
            return this.instanceElement.querySelector(exports.TFAPhoneItem_CONSTS.resendButtonSelectorSms);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationPhoneItemWidget.prototype, "resendVoiceButton", {
        get: function () {
            return this.instanceElement.querySelector(exports.TFAPhoneItem_CONSTS.resendButtonSelectorVoice);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TFAVerificationPhoneItemWidget.prototype, "countDownEl", {
        get: function () {
            return this.instanceElement.querySelector(exports.TFAPhoneItem_CONSTS.countDownSelector);
        },
        enumerable: true,
        configurable: true
    });
    TFAVerificationPhoneItemWidget.CONSTS = exports.TFAPhoneItem_CONSTS;
    return TFAVerificationPhoneItemWidget;
}(TFAVerificationBaseItemWidget_1.TFAVerificationBaseItemWidget));
exports.TFAVerificationPhoneItemWidget = TFAVerificationPhoneItemWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(TFAVerificationPhoneItemWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/phone/TFAVerificationPhoneListWidget.ts":
/*!**********************************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/phone/TFAVerificationPhoneListWidget.ts ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var apis_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/apis */ "./src/core/Gigya.Js/app/TFA/apis.ts");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
var TFAVerificationBaseListWidget_1 = __webpack_require__(/*! ../TFAVerificationBaseListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationBaseListWidget.ts");
var phoneNumberUtil_1 = __webpack_require__(/*! src/core/Gigya.Js.Plugin/app/Utils/general/phoneNumberUtil */ "./src/core/Gigya.Js.Plugin/app/Utils/general/phoneNumberUtil.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../../../../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
exports.TFAPhoneList_CONSTS = {
    selector: '.gigya-tfa-verification-method.tfa-phone-method',
};
var TFAVerificationPhoneListWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TFAVerificationPhoneListWidget, _super);
    function TFAVerificationPhoneListWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.providerName = types_1.TfaProvider.phone;
        return _this;
    }
    TFAVerificationPhoneListWidget.prototype.reloadData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var assertion, getPhonesResponse;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this._screenSet.regToken && this.isActiveProvider())) return [3 /*break*/, 3];
                        this._screenSet.dimScreenSet();
                        return [4 /*yield*/, this.getGigyaAssertion()];
                    case 1:
                        assertion = _a.sent();
                        return [4 /*yield*/, apis_1.fetchTfaPhoneList(assertion)];
                    case 2:
                        getPhonesResponse = _a.sent();
                        this._screenSet.undimScreenSet();
                        this._screenSet.data.tfaProviders.phones = this.getDataFromListResponse(getPhonesResponse);
                        this.showList();
                        return [2 /*return*/, this._screenSet.data.tfaProviders.phones];
                    case 3: return [2 /*return*/, []];
                }
            });
        });
    };
    TFAVerificationPhoneListWidget.prototype.getDataFromListResponse = function (res) {
        return res.phones.map(function (phone) { return ({
            id: phone.id,
            lastMethod: phone.lastMethod,
            phoneNumber: phoneNumberUtil_1.formatObfuscatedPhoneNumber(phone),
        }); });
    };
    TFAVerificationPhoneListWidget.CONSTS = exports.TFAPhoneList_CONSTS;
    return TFAVerificationPhoneListWidget;
}(TFAVerificationBaseListWidget_1.TFAVerificationBaseListWidget));
exports.TFAVerificationPhoneListWidget = TFAVerificationPhoneListWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(TFAVerificationPhoneListWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementItemBase.ts":
/*!****************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementItemBase.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var CardListItemWidget_1 = __webpack_require__(/*! ../CardListItemWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CardListItemWidget.ts");
var TfaManagementService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/TfaManagementService */ "./src/core/Gigya.Js/app/TFA/TfaManagementService.ts");
var TranslatedWidget_1 = __webpack_require__(/*! ../TranslatedWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget.ts");
exports.TfaManagementItemBase_CONSTS = {
    deleteDialogButtonSelector: '.gigya-remove-tfa-device-icon',
    removeButtonSelector: '.gigya-button-delete',
    deleteDialogCancelButtonSelector: '.gigya-button-cancel',
    deleteDialogClass: 'gigya-icon-clicked',
    deps: [TranslatedWidget_1.TranslatedWidget]
};
var TfaManagementItemBase = /** @class */ (function (_super) {
    tslib_1.__extends(TfaManagementItemBase, _super);
    function TfaManagementItemBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TfaManagementItemBase.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        this.init();
    };
    TfaManagementItemBase.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        TfaManagementService_1.default.unsubscribe(this.listUpdateEvent);
    };
    TfaManagementItemBase.prototype.init = function () {
        var _this = this;
        if (this.removeButtonEl) {
            TfaManagementService_1.default.on(this.listUpdateEvent, function () { return _this.updateRemoveButtonState(); });
        }
    };
    TfaManagementItemBase.prototype.updateRemoveButtonState = function () {
        var _a, _b;
        if (((_b = (_a = this._screenSet.data.tfaProviders) === null || _a === void 0 ? void 0 : _a.phones) === null || _b === void 0 ? void 0 : _b.length) > 1) {
            this.enableRemoveButton();
        }
        else {
            this.disableRemoveButton();
        }
    };
    TfaManagementItemBase.prototype.enableRemoveButton = function () {
        var _this = this;
        var _a;
        this.addButtonHandler(this.deleteDialogButtonEl, function () { return _this.openDeleteDialog(); });
        (_a = this.deleteDialogButtonEl) === null || _a === void 0 ? void 0 : _a.removeAttribute('disabled');
    };
    TfaManagementItemBase.prototype.openDeleteDialog = function () {
        var _this = this;
        var _a, _b;
        this.addButtonHandler(this.removeButtonEl, function () { return _this.onRemoveDeviceClicked(); }, this.buttonEventKey);
        this.addButtonHandler(this.deleteDialogCancelButtonEl, function () { return _this.closeDeleteDialog(); });
        (_b = (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.classList) === null || _b === void 0 ? void 0 : _b.add(exports.TfaManagementItemBase_CONSTS.deleteDialogClass);
    };
    TfaManagementItemBase.prototype.closeDeleteDialog = function () {
        var _a, _b;
        (_b = (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.classList) === null || _b === void 0 ? void 0 : _b.remove(exports.TfaManagementItemBase_CONSTS.deleteDialogClass);
    };
    TfaManagementItemBase.prototype.disableRemoveButton = function () {
        var _a;
        this.removeButtonHandler(this.buttonEventKey);
        (_a = this.deleteDialogButtonEl) === null || _a === void 0 ? void 0 : _a.setAttribute('disabled', 'disabled');
    };
    TfaManagementItemBase.prototype.onRemoveDeviceClicked = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._screen.dimScreen();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 3, 4]);
                        return [4 /*yield*/, this.removeDevice()];
                    case 2:
                        _a.sent();
                        this.instanceElement.remove();
                        this.unlinkInstanceElement();
                        return [3 /*break*/, 4];
                    case 3:
                        this._screen.undimScreen();
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(TfaManagementItemBase.prototype, "removeButtonEl", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(exports.TfaManagementItemBase_CONSTS.removeButtonSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaManagementItemBase.prototype, "deleteDialogButtonEl", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(exports.TfaManagementItemBase_CONSTS.deleteDialogButtonSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaManagementItemBase.prototype, "deleteDialogCancelButtonEl", {
        get: function () {
            var _a;
            return (_a = this.instanceElement) === null || _a === void 0 ? void 0 : _a.querySelector(exports.TfaManagementItemBase_CONSTS.deleteDialogCancelButtonSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaManagementItemBase.prototype, "buttonEventKey", {
        get: function () {
            return this.elementId + "-remove";
        },
        enumerable: true,
        configurable: true
    });
    return TfaManagementItemBase;
}(CardListItemWidget_1.CardListItemWidget));
exports.TfaManagementItemBase = TfaManagementItemBase;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementListBase.ts":
/*!****************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementListBase.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var TfaManagementService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/TfaManagementService */ "./src/core/Gigya.Js/app/TFA/TfaManagementService.ts");
var CardListFormWidget_1 = __webpack_require__(/*! ../../CardListFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/CardListFormWidget.ts");
var TfaManagementListBase = /** @class */ (function (_super) {
    tslib_1.__extends(TfaManagementListBase, _super);
    function TfaManagementListBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.itemId = 'id';
        return _this;
    }
    TfaManagementListBase.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isActiveProvider) return [3 /*break*/, 2];
                        return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        this.showList();
                        TfaManagementService_1.default.on(this.removeEvent, function () { return _this.reloadList(); });
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(TfaManagementListBase.prototype, "isActiveProvider", {
        get: function () {
            var _this = this;
            return this._screenSet.data.tfaProviders.activeProviders.some(function (activeProvider) { return activeProvider.name === _this.providerName; });
        },
        enumerable: true,
        configurable: true
    });
    TfaManagementListBase.prototype.reloadList = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.reloadList.call(this)];
                    case 1:
                        _a.sent();
                        TfaManagementService_1.default.dispatchEvent(this.listUpdateEvent, {
                            list: this.getScreenSetData()
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    TfaManagementListBase.prototype.reloadData = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var response, hostForm, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, , 6]);
                        return [4 /*yield*/, this.fetchDevices()];
                    case 1:
                        response = _b.sent();
                        if (!(response.errorCode === GSErrors_1.GSErrors.OK)) return [3 /*break*/, 2];
                        this.setScreenSetData(this.getDataFromListResponse(response));
                        return [2 /*return*/, this.getScreenSetData()];
                    case 2:
                        hostForm = this._screen.getFormByElement(this.instanceElement);
                        return [4 /*yield*/, this._screenSet.onScreenResponse(response, hostForm)];
                    case 3:
                        _b.sent();
                        return [2 /*return*/, []];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        _a = _b.sent();
                        return [2 /*return*/, []];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    TfaManagementListBase.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
        TfaManagementService_1.default.unsubscribe(this.removeEvent);
    };
    return TfaManagementListBase;
}(CardListFormWidget_1.CardListFormWidget));
exports.TfaManagementListBase = TfaManagementListBase;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementWidget.ts":
/*!**************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementWidget.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseScreenWidget_1 = __webpack_require__(/*! ../../BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var apis_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/apis */ "./src/core/Gigya.Js/app/TFA/apis.ts");
var GSErrors = window.gigya.GSErrors;
var TfaManagementWidget_CONSTS = {
    selector: '.gigya-composite-control-tfa-management-widget',
};
var TfaManagementWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TfaManagementWidget, _super);
    function TfaManagementWidget(_screen, el) {
        return _super.call(this, _screen, el) || this;
    }
    TfaManagementWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var providers;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _super.prototype.linkInstanceElement.call(this, parent);
                        return [4 /*yield*/, apis_1.fetchAvailableProviders()];
                    case 1:
                        providers = _a.sent();
                        if (providers.errorCode === GSErrors.OK) {
                            this._screenSet.data.tfaProviders.activeProviders = providers === null || providers === void 0 ? void 0 : providers.activeProviders;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    TfaManagementWidget.CONSTS = TfaManagementWidget_CONSTS;
    return TfaManagementWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.TfaManagementWidget = TfaManagementWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(TfaManagementWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/email/TfaManagementEmailItemWidget.ts":
/*!*****************************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/email/TfaManagementEmailItemWidget.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var TfaManagementItemBase_1 = __webpack_require__(/*! ../TfaManagementItemBase */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementItemBase.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../../../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var CONSTS = tslib_1.__assign({ selector: '.gigya-tfa-management-method[data-tfa-method="email"] .gigya-card' }, TfaManagementItemBase_1.TfaManagementItemBase_CONSTS);
var TfaManagementEmailItemWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TfaManagementEmailItemWidget, _super);
    function TfaManagementEmailItemWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.removeEvent = 'removeEmail';
        _this.listUpdateEvent = 'emailListUpdated';
        return _this;
    }
    TfaManagementEmailItemWidget.prototype.removeDevice = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    TfaManagementEmailItemWidget.CONSTS = CONSTS;
    return TfaManagementEmailItemWidget;
}(TfaManagementItemBase_1.TfaManagementItemBase));
exports.TfaManagementEmailItemWidget = TfaManagementEmailItemWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(TfaManagementEmailItemWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/email/TfaManagementEmailListWidget.ts":
/*!*****************************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/email/TfaManagementEmailListWidget.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var apis_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/apis */ "./src/core/Gigya.Js/app/TFA/apis.ts");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
var TfaManagementService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/TfaManagementService */ "./src/core/Gigya.Js/app/TFA/TfaManagementService.ts");
var TfaManagementListBase_1 = __webpack_require__(/*! ../TfaManagementListBase */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementListBase.ts");
var TfaGigyaAssertionService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService */ "./src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../../../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
exports.TfaEmailManagement_CONSTS = {
    selector: '.gigya-tfa-management-method[data-tfa-method="email"]'
};
var TfaManagementEmailListWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TfaManagementEmailListWidget, _super);
    function TfaManagementEmailListWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.removeEvent = 'removeEmail';
        _this.listUpdateEvent = 'emailListUpdated';
        _this.providerName = types_1.TfaProvider.email;
        return _this;
    }
    TfaManagementEmailListWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.linkInstanceElement.call(this, parent)];
                    case 1:
                        _a.sent();
                        TfaManagementService_1.default.on('removeEmail', function () { return _this.reloadList(); });
                        return [2 /*return*/];
                }
            });
        });
    };
    TfaManagementEmailListWidget.prototype.reloadList = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.reloadList.call(this)];
                    case 1:
                        _a.sent();
                        TfaManagementService_1.default.dispatchEvent('emailListUpdated', {
                            list: this._screenSet.data.tfaProviders.phones
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    TfaManagementEmailListWidget.prototype.getDataFromListResponse = function (res) {
        return res.emails.map(function (item) { return ({ email: item.obfuscated, id: item.id }); });
    };
    TfaManagementEmailListWidget.prototype.setScreenSetData = function (items) {
        this._screenSet.data.tfaProviders.emails = items;
    };
    TfaManagementEmailListWidget.prototype.getScreenSetData = function () {
        return this._screenSet.data.tfaProviders.emails;
    };
    TfaManagementEmailListWidget.prototype.fetchDevices = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var gigyaAssertion;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TfaGigyaAssertionService_1.default.getAssertion(types_1.TfaMode.edit, types_1.TfaProvider.email)];
                    case 1:
                        gigyaAssertion = _a.sent();
                        if (!gigyaAssertion) {
                            return [2 /*return*/, gigya.Promise.resolve({})];
                        }
                        return [2 /*return*/, apis_1.fetchTfaEmailList(gigyaAssertion)];
                }
            });
        });
    };
    TfaManagementEmailListWidget.CONSTS = exports.TfaEmailManagement_CONSTS;
    return TfaManagementEmailListWidget;
}(TfaManagementListBase_1.TfaManagementListBase));
exports.TfaManagementEmailListWidget = TfaManagementEmailListWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(TfaManagementEmailListWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/phone/TfaManagementPhoneItemWidget.ts":
/*!*****************************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/phone/TfaManagementPhoneItemWidget.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var TfaManagementService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/TfaManagementService */ "./src/core/Gigya.Js/app/TFA/TfaManagementService.ts");
var TfaManagementItemBase_1 = __webpack_require__(/*! ../TfaManagementItemBase */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementItemBase.ts");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../../../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var CONSTS = tslib_1.__assign({ selector: '.gigya-tfa-management-method[data-tfa-method="phone"] .gigya-card' }, TfaManagementItemBase_1.TfaManagementItemBase_CONSTS);
var TfaManagementPhoneItemWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TfaManagementPhoneItemWidget, _super);
    function TfaManagementPhoneItemWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.removeEvent = 'removePhone';
        _this.listUpdateEvent = 'phoneListUpdated';
        return _this;
    }
    TfaManagementPhoneItemWidget.prototype.removeDevice = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TfaManagementService_1.default.removePhone(types_1.TfaProvider.phone, this.elementId)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TfaManagementPhoneItemWidget.CONSTS = CONSTS;
    return TfaManagementPhoneItemWidget;
}(TfaManagementItemBase_1.TfaManagementItemBase));
exports.TfaManagementPhoneItemWidget = TfaManagementPhoneItemWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(TfaManagementPhoneItemWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/phone/TfaManagementPhoneListWidget.ts":
/*!*****************************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/phone/TfaManagementPhoneListWidget.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var apis_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/apis */ "./src/core/Gigya.Js/app/TFA/apis.ts");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
var TfaManagementListBase_1 = __webpack_require__(/*! ../TfaManagementListBase */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementListBase.ts");
var TfaGigyaAssertionService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService */ "./src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService.ts");
var phoneNumberUtil_1 = __webpack_require__(/*! src/core/Gigya.Js.Plugin/app/Utils/general/phoneNumberUtil */ "./src/core/Gigya.Js.Plugin/app/Utils/general/phoneNumberUtil.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../../../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
exports.TfaPhoneManagement_CONSTS = {
    selector: ' .gigya-tfa-management-method[data-tfa-method="phone"]'
};
var TfaManagementPhoneListWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TfaManagementPhoneListWidget, _super);
    function TfaManagementPhoneListWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.removeEvent = 'removePhone';
        _this.listUpdateEvent = 'phoneListUpdated';
        _this.providerName = types_1.TfaProvider.phone;
        return _this;
    }
    TfaManagementPhoneListWidget.prototype.getScreenSetData = function () {
        return this._screenSet.data.tfaProviders.phones;
    };
    TfaManagementPhoneListWidget.prototype.setScreenSetData = function (items) {
        this._screenSet.data.tfaProviders.phones = items;
    };
    TfaManagementPhoneListWidget.prototype.getDataFromListResponse = function (res) {
        return res.phones.map(function (phone) { return ({
            phoneNumber: phoneNumberUtil_1.formatObfuscatedPhoneNumber(phone), id: phone.id
        }); });
    };
    TfaManagementPhoneListWidget.prototype.fetchDevices = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var gigyaAssertion;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TfaGigyaAssertionService_1.default.getAssertion(types_1.TfaMode.edit, types_1.TfaProvider.phone)];
                    case 1:
                        gigyaAssertion = _a.sent();
                        if (!gigyaAssertion) {
                            return [2 /*return*/, gigya.Promise.resolve({})];
                        }
                        return [2 /*return*/, apis_1.fetchTfaPhoneList(gigyaAssertion)];
                }
            });
        });
    };
    TfaManagementPhoneListWidget.CONSTS = exports.TfaPhoneManagement_CONSTS;
    return TfaManagementPhoneListWidget;
}(TfaManagementListBase_1.TfaManagementListBase));
exports.TfaManagementPhoneListWidget = TfaManagementPhoneListWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(TfaManagementPhoneListWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/BaseTfaRegistrationWidget.ts":
/*!**********************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/BaseTfaRegistrationWidget.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseFormWidget_1 = __webpack_require__(/*! ../../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
var TfaGigyaAssertionService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService */ "./src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService.ts");
var errorMessageUtil_1 = __webpack_require__(/*! ../../utils/errorMessageUtil */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/errorMessageUtil.ts");
var errorEventUtil_1 = __webpack_require__(/*! ../../utils/errorEventUtil */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/errorEventUtil.ts");
var BaseTfaRegistrationWidget = /** @class */ (function (_super) {
    tslib_1.__extends(BaseTfaRegistrationWidget, _super);
    function BaseTfaRegistrationWidget() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaseTfaRegistrationWidget.prototype.handleError = function (_a) {
        var response = _a.response, context = _a.context, fieldName = _a.fieldName;
        this.displayErrorMessage(response, fieldName);
        errorEventUtil_1.dispatchErrorEvent(this._screen, this._form.bindID, { response: response, context: context });
    };
    BaseTfaRegistrationWidget.prototype.getGigyaAssertion = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, TfaGigyaAssertionService_1.default.getAssertion(types_1.TfaMode.register, this.providerName, {
                        regToken: this._screenSet.regToken,
                    })];
            });
        });
    };
    Object.defineProperty(BaseTfaRegistrationWidget.prototype, "fieldName", {
        get: function () {
            return this.instanceElement.getAttribute('data-gigya-name');
        },
        enumerable: true,
        configurable: true
    });
    BaseTfaRegistrationWidget.prototype.displayErrorMessage = function (response, fieldName) {
        var text = this.getErrorTextFromResponse(response, fieldName);
        this.renderWidgetError(response.errorCode, text);
    };
    BaseTfaRegistrationWidget.prototype.getErrorKeyFromResponse = function (response) {
        return errorMessageUtil_1.getOtpErrorMessage(response);
    };
    BaseTfaRegistrationWidget.prototype.renderWidgetError = function (errorCode, errorMessage) {
        var _a;
        (_a = this._screen._errorDisplayElements[this.fieldName]) === null || _a === void 0 ? void 0 : _a.forEach(function (errorElement) {
            errorElement.showError({
                errorMessage: errorMessage, errorCode: errorCode
            });
        });
    };
    BaseTfaRegistrationWidget.prototype.hideErrorMessage = function () {
        var _a;
        (_a = this._screen._errorDisplayElements[this.fieldName]) === null || _a === void 0 ? void 0 : _a.forEach(function (errorElement) {
            errorElement.hideError();
        });
    };
    return BaseTfaRegistrationWidget;
}(BaseFormWidget_1.BaseFormWidget));
exports.BaseTfaRegistrationWidget = BaseTfaRegistrationWidget;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/TfaRegistrationWidget.ts":
/*!******************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/TfaRegistrationWidget.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseScreenWidget_1 = __webpack_require__(/*! ../../BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var apis_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/apis */ "./src/core/Gigya.Js/app/TFA/apis.ts");
var TfaRegistrationWidget_CONSTS = {
    selector: '.gigya-composite-control-tfa-registration-widget',
};
var TfaRegistrationWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TfaRegistrationWidget, _super);
    function TfaRegistrationWidget(_screen, el) {
        return _super.call(this, _screen, el) || this;
    }
    TfaRegistrationWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var providers;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _super.prototype.linkInstanceElement.call(this, parent);
                        this._screenSet.dimScreenSet();
                        this._screenSet.data.finalizeRegistrationNeeded = false;
                        this._screen._hasTfa = true;
                        return [4 /*yield*/, apis_1.fetchAvailableProviders()];
                    case 1:
                        providers = _a.sent();
                        this._screenSet.data.tfaProviders.activeProviders = providers.activeProviders;
                        this._screenSet.undimScreenSet();
                        return [2 /*return*/];
                }
            });
        });
    };
    TfaRegistrationWidget.CONSTS = TfaRegistrationWidget_CONSTS;
    return TfaRegistrationWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.TfaRegistrationWidget = TfaRegistrationWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(TfaRegistrationWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/phone/TfaRegistrationPhoneWidget.ts":
/*!*****************************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/phone/TfaRegistrationPhoneWidget.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var ApiLinkHelper_1 = __webpack_require__(/*! ../../../ApiLinkHelper */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ApiLinkHelper.ts");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
var PhoneNumberInput_1 = __webpack_require__(/*! ../../../Inputs/PhoneNumberInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PhoneNumberInput.ts");
var BaseFormWidget_1 = __webpack_require__(/*! ../../../BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var FormInput_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var BaseTfaRegistrationWidget_1 = __webpack_require__(/*! ../BaseTfaRegistrationWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/BaseTfaRegistrationWidget.ts");
var apis_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/apis */ "./src/core/Gigya.Js/app/TFA/apis.ts");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var TfaRegistrationPhoneWidget_CONSTS = {
    selector: '.gigya-tfa-widget-method[data-tfa-method="phone"]',
    continueButtonSelector: '.gigya-tfa-continue-button',
    resendButtonSelector: '.gigya-resend-button',
    chooseMethodSelector: '.gigya-tfa-method-selection',
    chooseMethodOptionName: 'tfa-method-selection',
    currentStepAttribute: 'data-current-step',
    voiceAllowedAttribute: 'data-allow-voice',
    phoneNumberPreviewSelector: '.gigya-phone-number-preview',
    sendCodeStepSelector: '.gigya-tfa-registration-method-send-code-step',
    verifyStepSelector: '.gigya-tfa-registration-method-send-verify-step',
    rememberDeviceSelector: '.gigya-remember-device-checkbox input',
    hiddenClass: 'gigya-hidden',
    phoneFieldName: 'phone number',
    deps: [PhoneNumberInput_1.PhoneNumberInput, FormInput_1.FormInput]
};
var WidgetState;
(function (WidgetState) {
    WidgetState["sendCode"] = "sendCode";
    WidgetState["verify"] = "verify";
})(WidgetState || (WidgetState = {}));
var TfaRegistrationPhoneWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TfaRegistrationPhoneWidget, _super);
    function TfaRegistrationPhoneWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.providerName = types_1.TfaProvider.phone;
        return _this;
    }
    TfaRegistrationPhoneWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                _super.prototype.linkInstanceElement.call(this, parent);
                this.init();
                return [2 /*return*/];
            });
        });
    };
    TfaRegistrationPhoneWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
    };
    TfaRegistrationPhoneWidget.prototype.init = function () {
        var _this = this;
        var _a, _b;
        this._screenSet.dimScreenSet();
        this.addEventHandlers();
        this.resendPhoneLink = new ApiLinkHelper_1.ApiLinkHelper(this.resendButton, function () { return _this.sendCode(); });
        if (this.hasVoiceCapability) {
            (_a = this.chooseMethodEl) === null || _a === void 0 ? void 0 : _a.classList.remove(TfaRegistrationPhoneWidget_CONSTS.hiddenClass);
        }
        else {
            (_b = this.chooseMethodEl) === null || _b === void 0 ? void 0 : _b.classList.add(TfaRegistrationPhoneWidget_CONSTS.hiddenClass);
        }
        this._screenSet.undimScreenSet();
        this.showSendCodeStep();
    };
    TfaRegistrationPhoneWidget.prototype.showSendCodeStep = function () {
        var _this = this;
        this.widgetState = WidgetState.sendCode;
        setTimeout(function () { var _a; return (_a = _this.phoneNumberFormField) === null || _a === void 0 ? void 0 : _a.focus(); });
    };
    TfaRegistrationPhoneWidget.prototype.showVerifyStep = function () {
        var _this = this;
        var _a;
        this.resendPhoneLink.init();
        this.widgetState = WidgetState.verify;
        this.previewEl.innerHTML = this.phoneNumber;
        (_a = this.codeFormField) === null || _a === void 0 ? void 0 : _a.prePopulate('');
        setTimeout(function () { var _a, _b; return (_b = (_a = _this.codeFormField) === null || _a === void 0 ? void 0 : _a.instanceElement) === null || _b === void 0 ? void 0 : _b.focus(); });
    };
    TfaRegistrationPhoneWidget.prototype.addEventHandlers = function () {
        var _this = this;
        this.addButtonHandler(this.sendCodeButton, function () { return _this.submitPhoneNumber(); });
        this.addButtonHandler(this.verificationButton, function () { return _this.submitCode(); });
        this.addDomEventListener(this.previewEl, 'click', function () { return _this.showSendCodeStep(); });
        this.addDomEventListener(this._form.instanceElement, 'fieldChanged', function () { return _this.hideErrorMessage(); });
        this.submitOnEnter(this.sendCodeStepEl, this.sendCodeButton);
        this.submitOnEnter(this.sendVerificationStepEl, this.verificationButton);
    };
    TfaRegistrationPhoneWidget.prototype.submitPhoneNumber = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var isValid, result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.hideErrorMessage();
                        this.phoneNumberFormField.markAsDirty();
                        return [4 /*yield*/, this.validateChildField(this.phoneNumberFormField)];
                    case 1:
                        isValid = _a.sent();
                        if (!isValid) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.sendCode()];
                    case 2:
                        result = _a.sent();
                        if ((result === null || result === void 0 ? void 0 : result.errorCode) == GSErrors_1.GSErrors.OK) {
                            this.showVerifyStep();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    TfaRegistrationPhoneWidget.prototype.sendCode = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var response, _a, _b, err_1;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this._screenSet.dimScreenSet();
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 4, 5, 6]);
                        _a = apis_1.sendPhoneVerificationCode;
                        _b = {
                            phone: this.phoneNumber,
                            method: this.selectedMethod,
                            regToken: this._screenSet.regToken
                        };
                        return [4 /*yield*/, this.getGigyaAssertion()];
                    case 2: return [4 /*yield*/, _a.apply(void 0, [(_b.gigyaAssertion = _c.sent(),
                                _b.lang = this._screenSet.params.communicationLang,
                                _b)])];
                    case 3:
                        response = _c.sent();
                        if (response.errorCode == GSErrors_1.GSErrors.OK) {
                            this.phvToken = response['phvToken'];
                        }
                        else {
                            this.handleError({
                                response: response,
                                fieldName: this.phoneNumberFieldName
                            });
                        }
                        return [2 /*return*/, response];
                    case 4:
                        err_1 = _c.sent();
                        this.handleError({
                            response: { errorCode: GSErrors_1.GSErrors.GENERAL_SERVER_ERROR },
                            context: err_1
                        });
                        return [3 /*break*/, 6];
                    case 5:
                        this._screenSet.undimScreenSet();
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    TfaRegistrationPhoneWidget.prototype.submitCode = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var isValid, completeVerificationRes, _a, _b, submitApiParams, _c, err_2;
            var _this = this;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this.hideErrorMessage();
                        return [4 /*yield*/, this.validateChildField(this.codeFormField)];
                    case 1:
                        isValid = _d.sent();
                        if (!isValid) {
                            return [2 /*return*/];
                        }
                        this._screenSet.data.finalizeRegistrationNeeded = true;
                        this._screenSet.dimScreenSet();
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 9, 10, 11]);
                        _a = apis_1.sendPhoneCompleteVerification;
                        _b = {
                            code: this.currentCode
                        };
                        return [4 /*yield*/, this.getGigyaAssertion()];
                    case 3: return [4 /*yield*/, _a.apply(void 0, [(_b.gigyaAssertion = _d.sent(),
                                _b.phvToken = this.phvToken,
                                _b)])];
                    case 4:
                        completeVerificationRes = _d.sent();
                        if (!(completeVerificationRes.errorCode == GSErrors_1.GSErrors.OK)) return [3 /*break*/, 7];
                        _c = {};
                        return [4 /*yield*/, this.getGigyaAssertion()];
                    case 5:
                        submitApiParams = (_c.gigyaAssertion = _d.sent(),
                            _c.providerAssertion = completeVerificationRes['providerAssertion'],
                            _c.tempDevice = !this.rememberDevice,
                            _c.regToken = this._screenSet.regToken,
                            _c);
                        return [4 /*yield*/, this._form.submit({
                                customSubmitApi: window.gigya.accounts.tfa.finalizeTFA,
                                submitApiParams: submitApiParams,
                                onAfterSubmitCallback: function (response) {
                                    if (response.errorCode != GSErrors_1.GSErrors.OK) {
                                        _this.displayErrorMessage(response);
                                    }
                                }
                            })];
                    case 6:
                        _d.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        this.handleError({ response: completeVerificationRes });
                        _d.label = 8;
                    case 8: return [3 /*break*/, 11];
                    case 9:
                        err_2 = _d.sent();
                        this.handleError({
                            response: { errorCode: GSErrors_1.GSErrors.GENERAL_SERVER_ERROR },
                            context: err_2
                        });
                        return [3 /*break*/, 11];
                    case 10:
                        this._screenSet.undimScreenSet();
                        return [7 /*endfinally*/];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "sendCodeButton", {
        get: function () {
            var stepSelector = TfaRegistrationPhoneWidget_CONSTS.sendCodeStepSelector;
            var buttonSelector = TfaRegistrationPhoneWidget_CONSTS.continueButtonSelector;
            return this.instanceElement.querySelector(stepSelector + " " + buttonSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "verificationButton", {
        get: function () {
            var stepSelector = TfaRegistrationPhoneWidget_CONSTS.verifyStepSelector;
            var buttonSelector = TfaRegistrationPhoneWidget_CONSTS.continueButtonSelector;
            return this.instanceElement.querySelector(stepSelector + " " + buttonSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "resendButton", {
        get: function () {
            return this.instanceElement.querySelector(TfaRegistrationPhoneWidget_CONSTS.resendButtonSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "widgetState", {
        set: function (currentState) {
            this.instanceElement.setAttribute(TfaRegistrationPhoneWidget_CONSTS.currentStepAttribute, currentState);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "hasVoiceCapability", {
        get: function () {
            return this.instanceElement.getAttribute(TfaRegistrationPhoneWidget_CONSTS.voiceAllowedAttribute) === 'true';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "chooseMethodEl", {
        get: function () {
            return this.instanceElement.querySelector(TfaRegistrationPhoneWidget_CONSTS.chooseMethodSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "sendVerificationStepEl", {
        get: function () {
            return this.instanceElement.querySelector(TfaRegistrationPhoneWidget_CONSTS.verifyStepSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "sendCodeStepEl", {
        get: function () {
            return this.instanceElement.querySelector(TfaRegistrationPhoneWidget_CONSTS.sendCodeStepSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "selectedMethod", {
        get: function () {
            var _a;
            if (!this.hasVoiceCapability) {
                return types_1.TfaPhoneSendCodeMethod.sms;
            }
            var optionName = TfaRegistrationPhoneWidget_CONSTS.chooseMethodOptionName;
            return (_a = this.instanceElement.querySelector("input[name=\"" + optionName + "\"]:checked")) === null || _a === void 0 ? void 0 : _a.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "currentCode", {
        get: function () {
            var _a;
            return (_a = this.codeFormField) === null || _a === void 0 ? void 0 : _a.getValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "hostForm", {
        get: function () {
            return this._screen.getFormByElement(this.instanceElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "phoneNumber", {
        get: function () {
            return this.phoneNumberFormField.getValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "previewEl", {
        get: function () {
            return this.instanceElement.querySelector(TfaRegistrationPhoneWidget_CONSTS.phoneNumberPreviewSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "phoneNumberFormField", {
        get: function () {
            return this._form.getField('tfaPhoneNumber');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "rememberDevice", {
        get: function () {
            var _a;
            return (_a = this.rememberDeviceCheckboxEl) === null || _a === void 0 ? void 0 : _a.checked;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "rememberDeviceCheckboxEl", {
        get: function () {
            return this.instanceElement.querySelector(TfaRegistrationPhoneWidget_CONSTS.rememberDeviceSelector);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "codeFormField", {
        get: function () {
            return this._form.getField('tfaCode');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TfaRegistrationPhoneWidget.prototype, "phoneNumberFieldName", {
        get: function () {
            var _a;
            return ((_a = this.phoneNumberFormField) === null || _a === void 0 ? void 0 : _a.displayName) || TfaRegistrationPhoneWidget_CONSTS.phoneFieldName;
        },
        enumerable: true,
        configurable: true
    });
    TfaRegistrationPhoneWidget.CONSTS = TfaRegistrationPhoneWidget_CONSTS;
    return TfaRegistrationPhoneWidget;
}(BaseTfaRegistrationWidget_1.BaseTfaRegistrationWidget));
exports.TfaRegistrationPhoneWidget = TfaRegistrationPhoneWidget;
BaseFormWidget_1.BaseFormWidget.addWidgetToLibrary(TfaRegistrationPhoneWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaWidget.ts":
/*!**************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaWidget.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseScreenWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var nextTfaContainerId = 0;
exports.TfaWidget_CONSTS = {
    selector: 'div.gigya-tfa',
};
utils_1.DeepFreeze(exports.TfaWidget_CONSTS);
var TfaWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TfaWidget, _super);
    function TfaWidget(_screen, el) {
        var _this = _super.call(this, _screen, el) || this;
        _this.bindID = _this.publishID ? _this.ID : exports.TfaWidget_CONSTS.selector;
        _screen._hasTfa = true;
        // TODO Change use the same id for the same screenSet instance, regardless of how many times it is reused, unlike existing implementation that uses a new id each time
        _this.tfaContainerId = (_this._screenSet.params.containerID || 'showScreenSet') + '_showTfaUI_' + nextTfaContainerId++;
        return _this;
    }
    TfaWidget.prototype.linkInstanceElement = function (parent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                _super.prototype.linkInstanceElement.call(this, parent);
                if (this.instanceElement) {
                    this.instanceElement.innerHTML = '<div id="' + this.tfaContainerId + '"></div>';
                    this._screen.dimScreen();
                    if (!this.widgetParams) {
                        this.widgetParams = this.params;
                    }
                    return [2 /*return*/, new gigya.Promise(function (resolve) {
                            window.gigya.accounts.showTfaUI(_this.params, _this.widgetParams, {
                                dontHandleScreenSet: false,
                                regToken: _this._screenSet.data.regToken,
                                lang: _this._screenSet.params.lang,
                                communicationLang: _this._screenSet.params.communicationLang,
                                containerID: _this.tfaContainerId,
                                cssPrefix: 'div.gigya-tfa',
                                width: 'auto',
                                source: _this._screenSet.injectionInfo.methodName,
                                onDone: function (e) {
                                    _this._screen.dimScreen();
                                    _this._screenSet.onScreenResponse(e.response, _this);
                                },
                                onLoad: function () {
                                    _this._screen.undimScreen();
                                },
                                onAfterScreenLoad: function (e) {
                                    if (e && e.caption && e.caption.length) {
                                        _this._screen.overrideTemplateCaption(e.caption);
                                        _this._screenSet.setCaption(e.caption);
                                    }
                                    _this._screenSet.centerModal();
                                    resolve();
                                },
                                ignoreApiQueue: _this._screenSet.params['ignoreApiQueue'],
                                customLang: _this._screenSet.params.customLang,
                            });
                        })];
                }
                return [2 /*return*/];
            });
        });
    };
    TfaWidget.prototype.unlinkInstanceElement = function () {
        if (this.instanceElement)
            this.instanceElement.innerHTML = ''; // To make sure no ID conflicts will be generated
        if (this._instance)
            this._instance.dispose();
        _super.prototype.unlinkInstanceElement.call(this);
    };
    TfaWidget.prototype.renderWidget = function () {
        var _this = this;
        //re-render the plugin with the new new conditional values.
        window.gigya.accounts.showTfaUI(this.widgetParams, {
            dontHandleScreenSet: false,
            regToken: this._screenSet.data.regToken,
            containerID: this.tfaContainerId,
            cssPrefix: 'div.gigya-tfa',
            width: 'auto',
            deviceType: this._screenSet.params.deviceType,
            source: this._screenSet.injectionInfo.methodName,
            onDone: function (e) {
                _this._screen.dimScreen();
                _this._screenSet.onScreenResponse(e.response, _this);
            },
            onLoad: function () {
                _this._screen.undimScreen();
            },
            onAfterScreenLoad: function (e) {
                if (e && e.caption && e.caption.length) {
                    _this._screen.overrideTemplateCaption(e.caption);
                    _this._screenSet.setCaption(e.caption);
                }
                _this._screenSet.centerModal();
            },
            getInstance: function (instances) {
                _this._instance = instances;
            },
            ignoreApiQueue: this._screenSet.params['ignoreApiQueue'],
        });
        this.renderWidgetUI = false;
    };
    TfaWidget.CONSTS = exports.TfaWidget_CONSTS;
    return TfaWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.TfaWidget = TfaWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(TfaWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget.ts":
/*!*********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var BaseScreenWidget_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
exports.Translated_CONSTS = {
    selector: '*[data-translation-key]',
    translationKeyAttribute: 'data-translation-key',
};
utils_1.DeepFreeze(exports.Translated_CONSTS);
var TranslatedWidget = /** @class */ (function (_super) {
    tslib_1.__extends(TranslatedWidget, _super);
    function TranslatedWidget(_screen, el) {
        // Turn resetCSS off.
        return _super.call(this, _screen, el, false) || this;
    }
    TranslatedWidget.prototype.linkInstanceElement = function (parent) {
        _super.prototype.linkInstanceElement.call(this, parent);
        this.updateTranslation();
    };
    TranslatedWidget.prototype.unlinkInstanceElement = function () {
        _super.prototype.unlinkInstanceElement.call(this);
    };
    /**
     * Handle case where translation key is updated via conditional attr.
     */
    TranslatedWidget.prototype.evaluateConditionalAttributes = function () {
        _super.prototype.evaluateConditionalAttributes.call(this);
        if (this.renderedTranslationKey !== this.instanceElement.getAttribute(TranslatedWidget.CONSTS.translationKeyAttribute).toLowerCase()) {
            this.updateTranslation();
        }
    };
    /**
     * Normalize translation key lowercase.
     */
    TranslatedWidget.prototype.getTranslationKey = function () {
        return this.instanceElement.getAttribute(TranslatedWidget.CONSTS.translationKeyAttribute).toLowerCase();
    };
    /**
     * Set translated text.
     */
    TranslatedWidget.prototype.updateTranslation = function () {
        this.renderedTranslationKey = this.getTranslationKey();
        if (this._screenSet.params.customLang && this._screenSet.params.customLang[this.renderedTranslationKey]) {
            // Unlink any widgets before HTML is cleared.
            this.unlinkWidgets();
            // Replace inner HTML.
            this.instanceElement.innerHTML = this._screenSet.params.customLang[this.renderedTranslationKey];
            this.linkWidgets();
        }
    };
    TranslatedWidget.CONSTS = exports.Translated_CONSTS;
    return TranslatedWidget;
}(BaseScreenWidget_1.BaseScreenWidget));
exports.TranslatedWidget = TranslatedWidget;
BaseScreenWidget_1.BaseScreenWidget.addWidgetToLibrary(TranslatedWidget);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/index.ts":
/*!**********************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/index.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyManager/PasskeyManagerWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyManager/PasskeyManagerWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyManager/PasskeyCardWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyManager/PasskeyCardWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/phone/TFAVerificationPhoneListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/phone/TFAVerificationPhoneListWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/phone/TFAVerificationPhoneItemWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/phone/TFAVerificationPhoneItemWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/email/TFAVerificationEmailItemWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/email/TFAVerificationEmailItemWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/email/TFAVerificationEmailListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/email/TFAVerificationEmailListWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/phone/TfaManagementPhoneListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/phone/TfaManagementPhoneListWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/phone/TfaManagementPhoneItemWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/phone/TfaManagementPhoneItemWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/email/TfaManagementEmailListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/email/TfaManagementEmailListWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/email/TfaManagementEmailItemWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/email/TfaManagementEmailItemWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/TfaRegistrationWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/TfaRegistrationWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/phone/TfaRegistrationPhoneWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/phone/TfaRegistrationPhoneWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ArrayManagerWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ArrayManagerWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/BindingWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/BindingWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CaptchaWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CaptchaWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ConsentWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ConsentWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ContainerWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ContainerWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ImageWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ImageWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/LogInAvailabilityWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/LogInAvailabilityWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/MyPhotoWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/MyPhotoWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordStrengthWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordStrengthWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhotoUploadWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhotoUploadWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ProfilePhotoWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ProfilePhotoWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/RequiredDisplayWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/RequiredDisplayWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SecretQuestionWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SecretQuestionWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SocialLoginWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SocialLoginWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SubscriptionWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SubscriptionWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CommunicationWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CommunicationWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneNumberWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneNumberWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyLoginWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyLoginWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyRegisterWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyRegisterWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/OrganizationContextWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/OrganizationContextWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneAuthMethodWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneAuthMethodWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/EmailOtpAuthMethodWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/EmailOtpAuthMethodWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordAuthMethodWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordAuthMethodWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/SwitchScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/SwitchScreenWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ApiLinkWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ApiLinkWidget.ts"), exports);
//base widgets export
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseServerWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseServerWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseUploadWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseUploadWidget.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseWidget.ts"), exports);


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/elements.ts":
/*!*****************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/elements.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.Consent = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Consent */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Consent.ts");
exports.Debug = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Debug */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Debug.ts");
exports.ErrorDisplayElement = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement.ts");
exports.Errors = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors.ts");
exports.LoginModes = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes.ts");
exports.Screen = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Screen */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Screen.ts");
exports.ScreenConsts = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts.ts");
exports.ScreenOptions = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions.ts");
exports.ScreenSetData = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetData */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetData.ts");
exports.ScreenSetPlugin = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetPlugin */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetPlugin.ts");
exports.ScreenSetHtmlResources = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetResources */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetResources.ts");
exports.TemplateElement = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts");
exports.Templates = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Templates */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Templates.ts");
exports.Captcha = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Captcha */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Captcha.ts");


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/errorBindingHelper.ts":
/*!***************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/errorBindingHelper.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var ErrorDisplayElement_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement.ts");
var utils_1 = __webpack_require__(/*! ./utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
function getErrorBindings(container) {
    var boundedElements = [], binds = Array.prototype.slice
        .call(container.querySelectorAll("[" + ErrorDisplayElement_1.ErrorDisplayElement_CONSTS.boundedTo + "]"))
        .map(function (el) { return el.getAttribute(ErrorDisplayElement_1.ErrorDisplayElement_CONSTS.boundedTo); });
    utils_1.ForEach(ErrorDisplayElement_1.ErrorDisplayElement_CONSTS.gigyaClasses, function (gigyaClass) {
        var bindedSelectors = [];
        binds.forEach(function (bindID) {
            bindedSelectors.push("." + gigyaClass + "[" + ErrorDisplayElement_1.ErrorDisplayElement_CONSTS.boundedTo + "=\"" + bindID + "\"]");
        });
        if (bindedSelectors === null || bindedSelectors === void 0 ? void 0 : bindedSelectors.length) {
            boundedElements = boundedElements.concat(Array.prototype.slice.call(container.querySelectorAll(bindedSelectors.join(','))));
        }
    });
    return boundedElements;
}
exports.getErrorBindings = getErrorBindings;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/index.ts":
/*!**************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/index.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_Object_dot_assign) {Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var BaseForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm.ts");
var BaseFormWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget.ts");
var BaseScreenWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget.ts");
var BaseServerWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseServerWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseServerWidget.ts");
var BaseUploadWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseUploadWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseUploadWidget.ts");
var BaseWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseWidget.ts");
var Consent = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Consent */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Consent.ts");
var Debug = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Debug */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Debug.ts");
var ErrorDisplayElement = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement.ts");
var Errors = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors.ts");
var LoginModes = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/LoginModes.ts");
var Screen = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Screen */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Screen.ts");
exports.Screen = Screen;
var ScreenConsts = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts.ts");
exports.ScreenConsts = ScreenConsts;
var ScreenOptions = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions.ts");
exports.ScreenOptions = ScreenOptions;
var ScreenSetData = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetData */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetData.ts");
exports.ScreenSetData = ScreenSetData;
var ScreenSetPlugin = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetPlugin */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetPlugin.ts");
exports.ScreenSetPlugin = ScreenSetPlugin;
var ScreenSetHtmlResources = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetResources */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetResources.ts");
var TemplateElement = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts");
var Templates = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Templates */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Templates.ts");
var utils = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var LinkAccountsForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LinkAccountsForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LinkAccountsForm.ts");
var LoginForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LoginForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LoginForm.ts");
var PasswordlessLoginForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessLoginForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessLoginForm.ts");
var PasswordlessRegisterForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessRegisterForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordlessRegisterForm.ts");
var AuthMethodsForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/AuthMethodsForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/AuthMethodsForm.ts");
var PasswordAuthMethodForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordAuthMethodForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PasswordAuthMethodForm.ts");
var PushAuthMethodForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PushAuthMethodForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/PushAuthMethodForm.ts");
var MagicLinkAuthMethodForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/MagicLinkAuthMethodForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/MagicLinkAuthMethodForm.ts");
var EmailCodeAuthMethodForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/EmailCodeAuthMethodForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/EmailCodeAuthMethodForm.ts");
var NewsletterSignupForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/NewsletterSignupForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/NewsletterSignupForm.ts");
var ProfileForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProfileForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProfileForm.ts");
var ReAuthenticationForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ReauthenticationForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ReauthenticationForm.ts");
var RegisterForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/RegisterForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/RegisterForm.ts");
var ProgressionForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProgressionForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ProgressionForm.ts");
var ResendVerificationCodeForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ResendVerificationCodeForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ResendVerificationCodeForm.ts");
var ResetPasswordForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ResetPasswordForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/ResetPasswordForm.ts");
var OrgRegisterForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OrganizationRegistrationForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OrganizationRegistrationForm.ts");
var ButtonInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/ButtonInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/ButtonInput.ts");
var CheckboxInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CheckboxInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CheckboxInput.ts");
var CommunicationCheckboxInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CommunicationCheckboxInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/CommunicationCheckboxInput.ts");
var EmailInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/EmailInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/EmailInput.ts");
var FormInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var AddressInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/AddressInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/AddressInput.ts");
var LoginIdInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/LoginIdInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/LoginIdInput.ts");
var PasswordInputs = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PasswordInputs */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PasswordInputs.ts");
var PhoneNumberInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PhoneNumberInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/PhoneNumberInput.ts");
var RadioInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RadioInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RadioInput.ts");
var RememberInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RememeberInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RememeberInput.ts");
var PasskeyMangerWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyManager/PasskeyManagerWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyManager/PasskeyManagerWidget.ts");
var PasskeyCardWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyManager/PasskeyCardWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyManager/PasskeyCardWidget.ts");
var TFAVerification = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/TFAVerificationWidget.ts");
var TFAVerificationPhoneListWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/phone/TFAVerificationPhoneListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/phone/TFAVerificationPhoneListWidget.ts");
var TFAVerificationPhoneItemWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/phone/TFAVerificationPhoneItemWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/phone/TFAVerificationPhoneItemWidget.ts");
var TFAVerificationEmailItemWidget_1 = __webpack_require__(/*! ./Widgets/TFA/verification/email/TFAVerificationEmailItemWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/email/TFAVerificationEmailItemWidget.ts");
var TFAVerificationEmailListWidget_1 = __webpack_require__(/*! ./Widgets/TFA/verification/email/TFAVerificationEmailListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TFA/verification/email/TFAVerificationEmailListWidget.ts");
var TfaManagementWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/TfaManagementWidget.ts");
var TfaPhoneManagementListWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/phone/TfaManagementPhoneListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/phone/TfaManagementPhoneListWidget.ts");
var TfaPhoneManagementDeviceWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/phone/TfaManagementPhoneItemWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/phone/TfaManagementPhoneItemWidget.ts");
var TfaEmailManagementListWidget = __webpack_require__(/*! ./Widgets/TfaManagement/email/TfaManagementEmailListWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/email/TfaManagementEmailListWidget.ts");
var TfaEmailManagementDeviceWidget = __webpack_require__(/*! ./Widgets/TfaManagement/email/TfaManagementEmailItemWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaManagement/email/TfaManagementEmailItemWidget.ts");
var TfaRegistrationWidget = __webpack_require__(/*! ./Widgets/TfaRegistration/TfaRegistrationWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/TfaRegistrationWidget.ts");
var TfaRegistrationPhoneWidget = __webpack_require__(/*! ./Widgets/TfaRegistration/phone/TfaRegistrationPhoneWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaRegistration/phone/TfaRegistrationPhoneWidget.ts");
var RetypePasswordInput = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RetypePasswordInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/RetypePasswordInput.ts");
var ArrayManagerWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ArrayManagerWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ArrayManagerWidget.ts");
var BindingWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/BindingWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/BindingWidget.ts");
var CaptchaWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CaptchaWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CaptchaWidget.ts");
var ConsentWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ConsentWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ConsentWidget.ts");
var ContainerWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ContainerWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ContainerWidget.ts");
var ImageWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ImageWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ImageWidget.ts");
var LogInAvailabilityWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/LogInAvailabilityWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/LogInAvailabilityWidget.ts");
var MyPhotoWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/MyPhotoWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/MyPhotoWidget.ts");
var PasswordStrengthWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordStrengthWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordStrengthWidget.ts");
var PhotoUploadWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhotoUploadWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhotoUploadWidget.ts");
var ProfilePhotoWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ProfilePhotoWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ProfilePhotoWidget.ts");
var RequiredDisplayWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/RequiredDisplayWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/RequiredDisplayWidget.ts");
var SecretQuestionWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SecretQuestionWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SecretQuestionWidget.ts");
var SocialLoginWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SocialLoginWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SocialLoginWidget.ts");
var SubscriptionWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SubscriptionWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/SubscriptionWidget.ts");
var CommunicationWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CommunicationWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CommunicationWidget.ts");
var PhoneNumberWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneNumberWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneNumberWidget.ts");
var TfaWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TfaWidget.ts");
var TranslatedWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/TranslatedWidget.ts");
var PasskeyLoginWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyLoginWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyLoginWidget.ts");
var PasskeyRegisterWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyRegisterWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasskeyRegisterWidget.ts");
var SwitchScreenWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/SwitchScreenWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/SwitchScreenWidget.ts");
var BaseCaptchaHandler = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/BaseCaptchaHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/BaseCaptchaHandler.ts");
var FunCaptchaHandler = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/FunCaptchaHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/FunCaptchaHandler.ts");
var GoogleCaptchaHandler = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/GoogleCaptchaHandler */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/CaptchaHandler/GoogleCaptchaHandler.ts");
var OrganizationContextWidget = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/OrganizationContextWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/OrganizationContextWidget.ts");
__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpSendCodeForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpSendCodeForm.ts");
__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpUpdateForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpUpdateForm.ts");
__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpVerifyForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpVerifyForm.ts");
__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpLoginForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OtpLoginForm.ts");
__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ApiLinkWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ApiLinkWidget.ts");
__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LinkAccountsForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/LinkAccountsForm.ts");
__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Captcha */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Captcha.ts");
__webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/index.ts");
var DeviceCodeForm = __webpack_require__(/*! ./Forms/DeviceCodeForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/DeviceCodeForm.ts");
var PhoneAuthMethodWidget_1 = __webpack_require__(/*! ./Widgets/PhoneAuthMethodWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PhoneAuthMethodWidget.ts");
var EmailOtpAuthMethodWidget_1 = __webpack_require__(/*! ./Widgets/EmailOtpAuthMethodWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/EmailOtpAuthMethodWidget.ts");
var PasswordAuthMethodWidget_1 = __webpack_require__(/*! ./Widgets/PasswordAuthMethodWidget */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/PasswordAuthMethodWidget.ts");
var CustomForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/CustomForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/CustomForm.ts");
var TfaForm = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/TfaForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/TfaForm.ts");
var OneAccountSubscriptionForm_1 = __webpack_require__(/*! ./Forms/OneAccountSubscriptionForm */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/OneAccountSubscriptionForm.ts");
if (!window.gigya._) {
    window.gigya._ = {};
}
if (!window.gigya._.plugins) {
    window.gigya._.plugins = {};
}
if (!window.gigya._.plugins.ScreenSet) {
    window.gigya._.plugins.ScreenSet = {};
}
if (!window.gigya._.plugins.ScreenSet.consent) {
    window.gigya._.plugins.ScreenSet.consent = {};
}
if (!window.gigya._.plugins.resources) {
    window.gigya._.plugins.resources = {};
}
if (!window.gigya._.plugins.resources.html) {
    window.gigya._.plugins.resources.html = {};
}
if (!window.gigya._.plugins.resources.html.screenSet) {
    window.gigya._.plugins.resources.html.screenSet = {};
}
__webpack_provided_Object_dot_assign(window.gigya._.plugins.ScreenSet, SwitchScreenWidget, BaseForm, BaseFormWidget, BaseScreenWidget, BaseServerWidget, BaseUploadWidget, BaseWidget, Debug, ErrorDisplayElement, Errors, LoginModes, Screen, ScreenConsts, ScreenOptions, ScreenSetData, ScreenSetPlugin, TemplateElement, Templates, utils, LinkAccountsForm, LoginForm, PasswordlessLoginForm, PasswordlessRegisterForm, AuthMethodsForm, PasswordAuthMethodForm, PushAuthMethodForm, MagicLinkAuthMethodForm, EmailCodeAuthMethodForm, OneAccountSubscriptionForm_1.OneAccountSubscriptionForm, NewsletterSignupForm, ProfileForm, ReAuthenticationForm, RegisterForm, ProgressionForm, ResendVerificationCodeForm, ResetPasswordForm, OrgRegisterForm, ButtonInput, CheckboxInput, CommunicationCheckboxInput, EmailInput, FormInput, AddressInput, LoginIdInput, PasswordInputs, PhoneNumberInput, RadioInput, RememberInput, RetypePasswordInput, ArrayManagerWidget, BindingWidget, CaptchaWidget, ConsentWidget, ContainerWidget, ImageWidget, LogInAvailabilityWidget, MyPhotoWidget, PasswordStrengthWidget, PhotoUploadWidget, ProfilePhotoWidget, RequiredDisplayWidget, SecretQuestionWidget, SocialLoginWidget, SubscriptionWidget, PhoneNumberWidget, CommunicationWidget, TfaWidget, TranslatedWidget, BaseCaptchaHandler, FunCaptchaHandler, GoogleCaptchaHandler, DeviceCodeForm, PasswordAuthMethodWidget_1.PasswordAuthMethodWidget, PhoneAuthMethodWidget_1.PhoneAuthMethodWidget, EmailOtpAuthMethodWidget_1.EmailOtpAuthMethodWidget, PasskeyLoginWidget, PasskeyRegisterWidget, PasskeyMangerWidget, TFAVerification, TFAVerificationPhoneListWidget, TFAVerificationPhoneItemWidget, TFAVerificationEmailItemWidget_1.TFAVerificationEmailItemWidget, TFAVerificationEmailListWidget_1.TFAVerificationEmailListWidget, PasskeyCardWidget, TfaManagementWidget, TfaPhoneManagementListWidget, TfaPhoneManagementDeviceWidget, TfaEmailManagementListWidget, TfaEmailManagementDeviceWidget, TfaRegistrationWidget, TfaRegistrationPhoneWidget, CustomForm, TfaForm, OrganizationContextWidget);
__webpack_provided_Object_dot_assign(window.gigya._.plugins.ScreenSet.consent, Consent);
__webpack_provided_Object_dot_assign(window.gigya._.plugins.resources.html.screenSet, ScreenSetHtmlResources);
tslib_1.__exportStar(__webpack_require__(/*! ./Forms */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Forms/index.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./Widgets */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/index.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./Handlers */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Handlers/index.ts"), exports);
exports.utils = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
tslib_1.__exportStar(__webpack_require__(/*! ./Inputs */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/index.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./DataProviders */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/DataProviders/index.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./elements */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/elements.ts"), exports);
exports.default = window.gigya._.plugins.ScreenSet;
//
//
//
// export {
//     SwitchScreenWidget,
//     BaseForm,
//     BaseFormWidget,
//     BaseScreenWidget,
//     BaseServerWidget,
//     BaseUploadWidget,
//     BaseWidget,
//     Debug,
//     ErrorDisplayElement,
//     Errors,
//     LoginModes,
//     Screen,
//     ScreenConsts,
//     ScreenOptions,
//     ScreenSetData,
//     ScreenSetPlugin,
//     TemplateElement,
//     Templates,
//     utils,
//     LinkAccountsForm,
//     LoginForm,
//     PasswordlessLoginForm,
//     PasswordlessRegisterForm,
//     AuthMethodsForm,
//     PasswordAuthMethodForm,
//     PushAuthMethodForm,
//     MagicLinkAuthMethodForm,
//     EmailCodeAuthMethodForm,
//     OneAccountSubscriptionForm,
//     NewsletterSignupForm,
//     ProfileForm,
//     ReAuthenticationForm,
//     RegisterForm,
//     ProgressionForm,
//     ResendVerificationCodeForm,
//     ResetPasswordForm,
//     OrgRegisterForm,
//     ButtonInput,
//     CheckboxInput,
//     CommunicationCheckboxInput,
//     EmailInput,
//     FormInput,
//     AddressInput,
//     LoginIdInput,
//     PasswordInputs,
//     PhoneNumberInput,
//     RadioInput,
//     RememberInput,
//     RetypePasswordInput,
//     ArrayManagerWidget,
//     BindingWidget,
//     CaptchaWidget,
//     ConsentWidget,
//     ContainerWidget,
//     ImageWidget,
//     LogInAvailabilityWidget,
//     MyPhotoWidget,
//     PasswordStrengthWidget,
//     PhotoUploadWidget,
//     ProfilePhotoWidget,
//     RequiredDisplayWidget,
//     SecretQuestionWidget,
//     SocialLoginWidget,
//     SubscriptionWidget,
//     PhoneNumberWidget,
//     CommunicationWidget,
//     TfaWidget,
//     TranslatedWidget,
//     BaseCaptchaHandler,
//     FunCaptchaHandler,
//     GoogleCaptchaHandler,
//     DeviceCodeForm,
//     PasswordAuthMethodWidget,
//     PhoneAuthMethodWidget,
//     EmailOtpAuthMethodWidget,
//     PasskeyLoginWidget,
//     PasskeyRegisterWidget,
//     PasskeyMangerWidget,
//     TFAVerification,
//     TFAVerificationPhoneListWidget,
//     TFAVerificationPhoneItemWidget,
//     TFAVerificationEmailItemWidget,
//     TFAVerificationEmailListWidget,
//     PasskeyCardWidget,
//     TfaManagementWidget,
//     TfaPhoneManagementListWidget,
//     TfaPhoneManagementDeviceWidget,
//     TfaEmailManagementListWidget,
//     TfaEmailManagementDeviceWidget,
//     TfaRegistrationWidget,
//     TfaRegistrationPhoneWidget,
//     CustomForm,
//     TfaForm,
//     OrganizationContextWidget
// };
//
//

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js")["__assign"]))

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/communicationCheckbox.html":
/*!******************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/communicationCheckbox.html ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"subs-widget-container\" aria-invalid=\"false\">\n    <input class=\"gigya-input-checkbox subscription-checkbox\"\n           id=\"subs-checkbox-${topic}-${channel}\" name=\"${gigyaName}\" type=\"checkbox\"\n           ${checked}\n           data-communication-status=\"${status}\"\n           data-communication-topic=\"${topic}\"\n           data-communication-channel=\"${channel}\"\n    >\n    <label class=\"subscription-name-label\" for=\"subs-checkbox-${topic}-${channel}\"\n           style=\"display: inline-block; vertical-align: middle; padding-left: 5px;\">\n        ${label}\n    </label>\n</div>\n";

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/consent.html":
/*!****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/consent.html ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"consent\" data-id=\"v1\">\n\n  <div class=\"gigya-consent-title\">${label}</div>\n  <div class=\"gigya-consent-subtitle\" >${docId}</div>\n  <span class=\"gigya-consent-text\">${approvedOnLabel}</span> <span class=\"gigya-consent-text\">${approved}</span>\n\n</div>\n\n<div class=\"consent\" data-id=\"v2\">\n\n  <div class=\"gigya-consent-title\">${label}</div>\n\n  <div class=\"gigya-version-content\">\n    <span class=\"gigya-consent-text version-label\">${versionLabel}</span> <span class=\"gigya-consent-text version\">${docId}</span>\n  </div>\n\n  <div class=\"gigya-locale-content\">\n    <span class=\"gigya-consent-text locale-label\">${localeLabel}</span> <span class=\"gigya-consent-text locale\">${locale}</span>\n  </div>\n\n  <div class=\"gigya-approved-on-content\">\n    <span class=\"gigya-consent-text gigya-disabled-color approved-on-label\">${approvedOnLabel}</span> <span class=\"gigya-consent-text gigya-disabled-color approved-on\">${approved}</span>\n  </div>\n\n</div>";

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/inlinedPasswordStrength.html":
/*!********************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/inlinedPasswordStrength.html ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"gigya-password-strength\" data-on-focus-bubble=\"true\" data-bubble-orientation=\"${orientation}\"></div>\n";

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/passwordStrength.html":
/*!*************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/passwordStrength.html ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"${scoreClass}\" aria-atomic=\"true\" aria-live=\"polite\">${content}</div>\n";

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/passwordStrength_minimumRequirements.html":
/*!*********************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/passwordStrength_minimumRequirements.html ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"gigya-passwordStrength-text-requirements\">$requirements</div>\n";

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/passwordStrength_strengthMeter.html":
/*!***************************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/passwordStrength_strengthMeter.html ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"gigya-passwordStrength-text\">\n    <span class=\"gigya-passwordStrength-text\">$TEXT('password_strength_colon')</span>\n    <span class=\"gigya-passwordStrength-text gigya-passwordStrength-scoreText\">${scoreText}</span>\n</div>\n<div class=\"gigya-passwordStrength-bar\">\n    <div class=\"${barIndicatorClass}\"></div>\n</div>\n";

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/photoUpload_form.html":
/*!*************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/photoUpload_form.html ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<form enctype=\"multipart/form-data\" method=\"post\" class=\"gigya-photo-upload-form\" target=\"${formTarget}\" action=\"\">\n    <input type=\"file\" accept=\"image/*\" name=\"_profilePhoto\" />\n</form>\n";

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/photoUpload_ui.html":
/*!***********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/photoUpload_ui.html ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"gigya-photo-upload-image\" id=\"${photoElementID}\"></div>\n<div>\n    <div class=\"gigya-photo-upload-button\">$choose_file</div>\n    <div class=\"gigya-photo-upload-path\" id=\"${pathContainerID}\">$no_file_chosen</div>\n    <div class=\"gigya-photo-upload-text\">$tip</div>\n</div>\n";

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/screenSet.html":
/*!******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/screenSet.html ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<h1 class=\"gigya-screen-caption\" id=\"${innerContainerID}_caption\"></h1>\r\n<div id=\"${childContainerID}\" class=\"gigya-hidden\"></div>\r\n<div id=\"${innerContainerID}\" class=\"gigya-screen-content\"></div>\r\n";

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/screenSet_dialog.html":
/*!*************************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/templates/screenSet_dialog.html ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"${innerContainerID}\" class=\"gigya-screen-content\"></div>";

/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/typeahead/geo-location.ts":
/*!*******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/typeahead/geo-location.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var GeoLocation = /** @class */ (function () {
    function GeoLocation() {
    }
    GeoLocation.prototype.init = function (enableHighAccuracy, timeout, maximumAge) {
        if (enableHighAccuracy === void 0) { enableHighAccuracy = true; }
        if (timeout === void 0) { timeout = 10000; }
        if (maximumAge === void 0) { maximumAge = 30000; }
        var options = {
            enableHighAccuracy: enableHighAccuracy,
            timeout: timeout,
            maximumAge: maximumAge
        };
        this.resetPosition();
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(this.setPosition.bind(this), this.locationError.bind(this), options);
        }
        else {
            this.displayError("Please update your browser to us Geolocation.");
        }
    };
    GeoLocation.prototype.setPosition = function (position) {
        this.latitude = position.coords.latitude;
        this.longitude = position.coords.longitude;
    };
    GeoLocation.prototype.getPosition = function () {
        return {
            latitude: this.latitude,
            longitude: this.longitude
        };
    };
    GeoLocation.prototype.resetPosition = function () {
        this.latitude = null;
        this.longitude = null;
    };
    GeoLocation.prototype.displayError = function (errorMessage) {
        window.gigya.logger.warn(errorMessage);
    };
    GeoLocation.prototype.locationError = function (error) {
        var errorMessage = "";
        //  https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError
        switch (error.code) {
            case error.PERMISSION_DENIED:
                errorMessage = "The acquisition of the geolocation information failed because the page didn't have the necessary permissions.";
                break;
            case error.POSITION_UNAVAILABLE:
                errorMessage = "The acquisition of the geolocation failed because at least one internal source of position returned an internal error.";
                break;
            case error.TIMEOUT:
                errorMessage = "The time allowed to acquire the geolocation was reached before the information was obtained.";
                break;
            case error.UNKNOWN_ERROR:
                errorMessage = "An unknown error occured.";
                break;
        }
        this.displayError(errorMessage);
    };
    return GeoLocation;
}());
exports.GeoLocation = GeoLocation;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/typeahead/typeahead-input.ts":
/*!**********************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/typeahead/typeahead-input.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var FormInput_1 = __webpack_require__(/*! ../Inputs/FormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput.ts");
var TemplateElement_1 = __webpack_require__(/*! ../TemplateElement */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement.ts");
var DOM_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/DOM */ "./src/core/Gigya.Js/app/Utils/DOM.ts");
var ServerFormInput_1 = __webpack_require__(/*! ../Inputs/ServerFormInput */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/ServerFormInput.ts");
var TypeAheadConsts = {
    comboWrapperSelector: '.gigya-combo-container',
    comboInputClass: 'gigya-combo-input',
    comboPopupClass: 'gigya-combo-popup',
    comboPopupSelector: '.gigya-combo-popup',
    comboListSelector: '.gigya-combo-list',
    comboClearButtonSelector: '.gigya-combo-input-clear',
    comboLoaderSelector: '.gigya-combo-spinner',
    comboNoDataClass: 'gigya-no-data',
    comboOptionClass: 'gigya-combo-option',
    comboOptionDisabledSelector: '.gigya-combo-option-disabled',
    comboStyleDisplayBlock: 'block',
    comboStyleDisplayNone: 'none',
    comboActiveClass: 'gigya-combo-active',
    comboOptionSelectedClass: 'gigya-combo-selected'
};
var TypeaheadInput = /** @class */ (function (_super) {
    tslib_1.__extends(TypeaheadInput, _super);
    function TypeaheadInput(context) {
        var _this = _super.call(this, context) || this;
        _this.options = [];
        _this.clickOutsideListener = function (e) { return _this.onClickOutside(e); };
        _this.inputFocusListener = function (e) { return _this.onInputFocus(e); };
        _this.inputChangeListener = function (e) { return _this.onInputChange(); };
        _this.optionsSelectListener = function (e) { return _this.handleOptionSelect(e); };
        _this.clearClickListener = function (e) { return _this.onClearClick(e); };
        _this.arrowKeyListener = function (e) { return _this.useArrowKeys(e); };
        _this.scrollListener = function (e) { return _this.onScroll(e); };
        return _this;
    }
    TypeaheadInput.prototype.init = function (input, clickOutsideCallback, options) {
        if (clickOutsideCallback === void 0) { clickOutsideCallback = null; }
        this.minimumCharacters = options === null || options === void 0 ? void 0 : options.minimumCharacters;
        this._clickOutSideCallback = clickOutsideCallback;
        this.initComboElements(input);
        this.addEventListeners();
        this.afterSelectCallback = options === null || options === void 0 ? void 0 : options.afterSelectCallback;
    };
    TypeaheadInput.prototype.initComboElements = function (input) {
        var _a, _b, _c, _d, _e;
        input.classList.add(TypeAheadConsts.comboInputClass);
        // Wrap with combo-container elements
        this.containerEl = input.parentElement.querySelector(TypeAheadConsts.comboWrapperSelector);
        if (this.containerEl) {
            this.containerEl.style.width = input.style.width;
        }
        input.insertAdjacentElement("beforebegin", this.containerEl);
        this.bodyEl = document.querySelector('body');
        this.inputEL = input;
        this.screenEl = this._screen.instanceElement;
        this.popupEL = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector(TypeAheadConsts.comboPopupSelector);
        this.optionsListEL = (_b = this.containerEl) === null || _b === void 0 ? void 0 : _b.querySelector(TypeAheadConsts.comboListSelector);
        this.clearBtnEL = (_c = this.containerEl) === null || _c === void 0 ? void 0 : _c.querySelector(TypeAheadConsts.comboClearButtonSelector);
        this.loadingEL = (_d = this.containerEl) === null || _d === void 0 ? void 0 : _d.querySelector(TypeAheadConsts.comboLoaderSelector);
        (_e = this.popupEL) === null || _e === void 0 ? void 0 : _e.insertAdjacentElement("beforebegin", input);
    };
    TypeaheadInput.prototype.setOptions = function (newOptions) {
        this.options = newOptions;
        this.setLoading(false);
        this.updateList();
    };
    TypeaheadInput.prototype.updateList = function () {
        var _this = this;
        var _a;
        this.clearList();
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) {
            this.optionsListEL.classList.remove(TypeAheadConsts.comboNoDataClass);
            this.options.forEach(function (item) { return _this.addOption(item, TypeAheadConsts.comboOptionClass); });
            this.calculateDropDownPosition();
        }
        else {
            this.optionsListEL.classList.add(TypeAheadConsts.comboNoDataClass);
        }
    };
    TypeaheadInput.prototype.clearList = function () {
        this.warningOption = this.optionsListEL.querySelector(TypeAheadConsts.comboOptionDisabledSelector);
        this.optionsListEL.innerHTML = "";
        this.optionsListEL.appendChild(this.warningOption);
    };
    TypeaheadInput.prototype.showWarning = function () {
        window.gigya.utils.DOM.addClassToElement(this.inputEL, FormInput_1.FormInput_CONSTS.warnClass);
    };
    TypeaheadInput.prototype.removeWarning = function () {
        window.gigya.utils.DOM.removeClassFromElement(this.inputEL, FormInput_1.FormInput_CONSTS.warnClass);
    };
    TypeaheadInput.prototype.setLoading = function (on) {
        this.optionsListEL.classList.remove(TypeAheadConsts.comboNoDataClass);
        if (on)
            this.showPopup();
        this.loadingEL.style.display = on ? TypeAheadConsts.comboStyleDisplayBlock : TypeAheadConsts.comboStyleDisplayNone;
    };
    TypeaheadInput.prototype.handleOptionSelect = function (e) {
        e.stopPropagation();
        if (e.target.classList.contains(TypeAheadConsts.comboOptionClass)) {
            this.inputEL.value = e.target.textContent;
            this.clearBtnEL.style.display = TypeAheadConsts.comboStyleDisplayNone;
            this.inputEL.dispatchEvent(new Event("change"));
            if (this.afterSelectCallback) {
                this.afterSelectCallback();
            }
            this.hidePopup();
        }
    };
    TypeaheadInput.prototype.addOption = function (text, className) {
        var option = document.createElement("div");
        option.classList.add(className);
        option.setAttribute('tabindex', "0");
        option.setAttribute('aria-label', text);
        option.textContent = text;
        this.optionsListEL.appendChild(option);
    };
    TypeaheadInput.prototype.addEventListeners = function () {
        window.gigya.utils.DOM.addEventListener(this.bodyEl, "click", this.clickOutsideListener);
        window.gigya.utils.DOM.addEventListener(this.inputEL, "focus", this.inputFocusListener);
        window.gigya.utils.DOM.addEventListener(this.inputEL, "input", this.inputChangeListener);
        window.gigya.utils.DOM.addEventListener(this.optionsListEL, "click", this.optionsSelectListener);
        window.gigya.utils.DOM.addEventListener(this.clearBtnEL, "click", this.clearClickListener);
        window.gigya.utils.DOM.addEventListener(document, 'scroll', this.scrollListener);
        window.gigya.utils.DOM.addEventListener(document, "touchmove", this.scrollListener);
        window.gigya.utils.DOM.addEventListener(this.containerEl, "keydown", this.arrowKeyListener);
    };
    TypeaheadInput.prototype.onInputChange = function () {
        this.clearBtnEL.style.display = this.inputEL.value ? TypeAheadConsts.comboStyleDisplayBlock : TypeAheadConsts.comboStyleDisplayNone;
    };
    TypeaheadInput.prototype.onClearClick = function (e) {
        // Clear the input value and hide the clear button
        this.setValue("");
        this.setOptions([]);
        this.removeWarning();
        this.clearBtnEL.style.display = TypeAheadConsts.comboStyleDisplayNone;
        this.hidePopup();
    };
    Object.defineProperty(TypeaheadInput.prototype, "clickedOutside", {
        get: function () {
            return this._isClickOutside;
        },
        set: function (clicked) {
            this._isClickOutside = clicked;
        },
        enumerable: true,
        configurable: true
    });
    TypeaheadInput.prototype.onInputFocus = function (e) {
        var _a, _b;
        this.clickedOutside = false;
        this.removeWarning();
        if (((_b = (_a = e.target) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.length) >= this.minimumCharacters) {
            this.showPopup();
        }
    };
    TypeaheadInput.prototype.showPopup = function () {
        if (!this.isOpen) {
            this.popupEL.classList.add(TypeAheadConsts.comboActiveClass);
            this.isOpen = true;
            this.calculateDropDownPosition();
        }
    };
    TypeaheadInput.prototype.hidePopup = function () {
        if (this.isOpen) {
            this.popupEL.classList.remove(TypeAheadConsts.comboActiveClass);
            this.isOpen = false;
        }
    };
    TypeaheadInput.prototype.onClickOutside = function (event) {
        var _a;
        if (!((_a = this.inputEL[TemplateElement_1.TemplateElement_CONSTS.instanceOfArray]) === null || _a === void 0 ? void 0 : _a.length)) {
            this.removeListeners();
        }
        else if (!event.target.closest(TypeAheadConsts.comboWrapperSelector)) {
            this.hidePopup();
            this.clickedOutside = true;
            if (this._clickOutSideCallback) {
                this._clickOutSideCallback();
            }
        }
    };
    TypeaheadInput.prototype.removeListeners = function () {
        window.gigya.utils.DOM.removeEventListener(this.inputEL, "focus", this.inputFocusListener);
        window.gigya.utils.DOM.removeEventListener(this.inputEL, "input", this.inputChangeListener);
        window.gigya.utils.DOM.removeEventListener(this.optionsListEL, "click", this.optionsSelectListener);
        window.gigya.utils.DOM.removeEventListener(this.bodyEl, "click", this.clickOutsideListener);
        window.gigya.utils.DOM.removeEventListener(document, 'scroll', this.scrollListener);
        window.gigya.utils.DOM.removeEventListener(document, "touchmove", this.scrollListener);
        window.gigya.utils.DOM.removeEventListener(this.containerEl, "keydown", this.arrowKeyListener);
    };
    TypeaheadInput.prototype.calculateDropDownPosition = function () {
        var popupElHeight = 160;
        var inputPosition = this.inputEL.getBoundingClientRect();
        var inputWidth = inputPosition.width;
        var isOverflowing = inputPosition.top + popupElHeight >= window.innerHeight;
        this.popupEL.style.width = inputWidth + "px";
        this.popupEL.style.bottom = '';
        this.popupEL.style.top = '';
        isOverflowing ? this.popupEL.style.bottom = window.innerHeight - inputPosition.top + "px" :
            this.popupEL.style.top = inputPosition.top + inputPosition.height + "px";
    };
    TypeaheadInput.prototype.onScroll = function (event) {
        if (!DOM_1.isParentHasClass(event === null || event === void 0 ? void 0 : event.target, TypeAheadConsts.comboPopupClass)) {
            this.hidePopup();
        }
    };
    TypeaheadInput.prototype.useArrowKeys = function (event) {
        switch (event.keyCode) {
            case 38:
                this.moveUp(event);
                break;
            case 40:
                this.moveDown(event);
                break;
            case 13:
                this.handleOptionSelect(event);
        }
    };
    TypeaheadInput.prototype.moveUp = function (event) {
        var _a, _b;
        this.focusFirstChildInList(event);
        if ((_b = (_a = event.target) === null || _a === void 0 ? void 0 : _a.previousElementSibling) === null || _b === void 0 ? void 0 : _b.classList.contains(TypeAheadConsts.comboOptionClass)) {
            var htmlDiv = event.target;
            htmlDiv.classList.remove(TypeAheadConsts.comboOptionSelectedClass);
            htmlDiv.previousElementSibling.classList.add(TypeAheadConsts.comboOptionSelectedClass);
            htmlDiv.previousElementSibling.focus();
        }
    };
    TypeaheadInput.prototype.moveDown = function (event) {
        var _a;
        this.focusFirstChildInList(event);
        if ((_a = event.target.nextElementSibling) === null || _a === void 0 ? void 0 : _a.classList.contains(TypeAheadConsts.comboOptionClass)) {
            var htmlDiv = event.target;
            htmlDiv.classList.remove(TypeAheadConsts.comboOptionSelectedClass);
            htmlDiv.nextElementSibling.classList.add(TypeAheadConsts.comboOptionSelectedClass);
            htmlDiv.nextElementSibling.focus();
        }
    };
    TypeaheadInput.prototype.focusFirstChildInList = function (event) {
        var _a, _b;
        event.preventDefault();
        if ((_b = (_a = event.target) === null || _a === void 0 ? void 0 : _a.nextElementSibling) === null || _b === void 0 ? void 0 : _b.querySelector(TypeAheadConsts.comboListSelector)) {
            var options = this.optionsListEL.children;
            if (options.length > 1) { //first child is always teh disabled one. choose the second if exists.
                var firstAddressOption = options.item(1);
                if (firstAddressOption === null || firstAddressOption === void 0 ? void 0 : firstAddressOption.classList.contains(TypeAheadConsts.comboOptionClass)) {
                    firstAddressOption.classList.add(TypeAheadConsts.comboOptionSelectedClass);
                    firstAddressOption.focus();
                }
            }
        }
    };
    TypeaheadInput.prototype.evaluateConditionalAttributes = function () {
        _super.prototype.evaluateConditionalAttributes.call(this);
        if (this.isOpen) {
            this.calculateDropDownPosition();
        }
    };
    return TypeaheadInput;
}(ServerFormInput_1.ServerFormInput));
exports.TypeaheadInput = TypeaheadInput;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts":
/*!**************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var ScreenConsts_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenConsts.ts");
function isHidden(el) {
    while (el && el.parentElement) {
        if (el.style.visibility === 'hidden' || // hidden element
            el.style.display === 'none' || // hidden element
            (window.gigya.utils.DOM.isElementClass(el, 'gigya-error-display') && !window.gigya.utils.DOM.isElementClass(el, 'gigya-error-display-active')) || // hidden error message
            window.gigya.utils.DOM.isElementClass(el, 'ng-hide')) {
            // angular hidden element
            return true;
        }
        else {
            el = el.parentElement;
        }
    }
    return false;
}
exports.isHidden = isHidden;
function inIFrame() {
    try {
        return window.self !== window.top;
    }
    catch (e) {
        return true;
    }
}
exports.inIFrame = inIFrame;
function isFieldInHiddenContainer(el) {
    var curr = el;
    while (curr) {
        if (window.gigya.utils.DOM.isElementClass(curr, 'gigya-container') && !window.gigya.utils.DOM.isElementClass(curr, 'gigya-container-enabled'))
            return true;
        curr = curr.parentElement;
    }
    return false;
}
exports.isFieldInHiddenContainer = isFieldInHiddenContainer;
function hasParentAttribute(el, attrName, attrValue) {
    var curr = el;
    while (curr) {
        if (curr.getAttribute(attrName) === attrValue) {
            return true;
        }
        curr = curr.parentElement;
    }
    return false;
}
exports.hasParentAttribute = hasParentAttribute;
function firstPart(str, seperator) {
    var index = str.indexOf(seperator);
    return index > -1 ? str.substring(0, index) : str;
}
exports.firstPart = firstPart;
function LastIndexOf(arr, val, fromIndex) {
    if (fromIndex === void 0) { fromIndex = 0; }
    for (var i = arr.length; --i >= fromIndex;) {
        if (arr[i] === val)
            return i;
    }
    return -1;
}
exports.LastIndexOf = LastIndexOf;
function ForEach(arr, action) {
    for (var i = 0; i < arr.length; ++i) {
        action(arr[i], i, arr);
    }
}
exports.ForEach = ForEach;
function ForEachProp(obj, action) {
    for (var name in obj) {
        if (obj.hasOwnProperty(name))
            action(obj[name], name, obj);
    }
}
exports.ForEachProp = ForEachProp;
function Some(arr, condition) {
    for (var i = 0; i < arr.length; ++i) {
        if (condition(arr[i], i, arr))
            return true;
    }
    return false;
}
exports.Some = Some;
function Every(arr, condition) {
    for (var i = 0; i < arr.length; ++i) {
        if (!condition(arr[i], i, arr))
            return false;
    }
    return true;
}
exports.Every = Every;
function EveryProp(obj, condition) {
    for (var name in obj) {
        if (obj.hasOwnProperty(name) && !condition(obj[name], name, obj))
            return false;
    }
    return true;
}
exports.EveryProp = EveryProp;
function Map(arr, action) {
    var result = new Array();
    ForEach(arr, function (item, idx, arr) { return result.push(action(item, idx, arr)); });
    return result;
}
exports.Map = Map;
function DeepFreeze(obj) {
    // Only once IE9 is the minimum - currently IE7 is supported
    /*
        if (obj instanceof Object && !Object.isFrozen(obj[key])) {
            ForEachProp(obj, (prop) => DeepFreeze(prop));

            Object.freeze(obj);
        }
        */
}
exports.DeepFreeze = DeepFreeze;
function getElementsByHavingAttribute(parentElement, tagName, attributeName) {
    var arEls = new Array();
    var els = parentElement.getElementsByTagName(tagName);
    ForEach(els, function (el) {
        if (el.getAttribute(attributeName)) {
            arEls.push(el);
        }
    });
    return arEls;
}
exports.getElementsByHavingAttribute = getElementsByHavingAttribute;
function getElementsByHavingAttributePrefix(parentElement, attributePrefixes, tagNamesExceptions) {
    if (tagNamesExceptions === void 0) { tagNamesExceptions = []; }
    if (typeof attributePrefixes === 'string') {
        attributePrefixes = [attributePrefixes];
    }
    var elements = parentElement.getElementsByTagName('*');
    var matchingElements = new Array();
    for (var i = 0; i <= elements.length - 1; i++) {
        var el = elements.item(i);
        if (window.gigya.utils.array.indexOf(tagNamesExceptions, el.tagName.toLowerCase()) !== -1) {
            continue;
        }
        for (var _i = 0, attributePrefixes_1 = attributePrefixes; _i < attributePrefixes_1.length; _i++) {
            var attributePrefix = attributePrefixes_1[_i];
            if (isElementContainAttributePrefix(elements[i], attributePrefix)) {
                matchingElements.push(elements[i]);
                continue;
            }
        }
    }
    return matchingElements;
}
exports.getElementsByHavingAttributePrefix = getElementsByHavingAttributePrefix;
function isElementContainAttributePrefix(el, subString) {
    var elementAttributes = el.attributes;
    var containConditionalAttribute = false;
    if (elementAttributes) {
        for (var i = 0; i < elementAttributes.length; i++) {
            if (elementAttributes[i].nodeName.indexOf(subString) !== -1) {
                containConditionalAttribute = true;
                break;
            }
        }
    }
    return containConditionalAttribute;
}
exports.isElementContainAttributePrefix = isElementContainAttributePrefix;
function getConditionalAttributeExpressions(element, isWidgetContext) {
    if (isWidgetContext === void 0) { isWidgetContext = false; }
    if (!element) {
        return [];
    }
    var conditionalExpressions = new Array();
    var conditionalDefaultValue;
    var lastAttributeValue;
    var isParamTag = false;
    var attributes = getAttributesAsArray(element);
    ForEach(attributes, function (at) {
        try {
            // Check for conditional attribute prefix which determines if this attribute be evaluated.
            var isConditionalAttribute = at.nodeName.indexOf(ScreenConsts_1.Screen_CONSTS.conditionalAttributePrefix) !== -1;
            var isExpressionAttribute = at.nodeName.indexOf(ScreenConsts_1.Screen_CONSTS.expressionAttributePrefix) !== -1;
            if (isConditionalAttribute || isExpressionAttribute) {
                var colonIndex = at.nodeName.indexOf(':');
                if (colonIndex !== -1) {
                    var targetAttribute = void 0;
                    if (isWidgetContext) {
                        conditionalDefaultValue = window.gigya._.plugins.utils.DOM.getAttribute(element, 'value');
                        targetAttribute = window.gigya._.plugins.utils.DOM.getAttribute(element, 'name');
                        isParamTag = element.tagName.toLowerCase() === 'param';
                    }
                    else {
                        targetAttribute = at.nodeName.substring(colonIndex + 1, at.nodeName.length);
                        lastAttributeValue = window.gigya._.plugins.utils.DOM.getAttribute(element, targetAttribute);
                        var defaultValueAttribute = 'gigya-default-' + targetAttribute;
                        if (!window.gigya._.plugins.utils.DOM.getAttribute(element, defaultValueAttribute)) {
                            window.gigya._.plugins.utils.DOM.setAttribute(element, defaultValueAttribute, lastAttributeValue !== null ? lastAttributeValue : 'null');
                        }
                        var val = window.gigya._.plugins.utils.DOM.getAttribute(element, defaultValueAttribute);
                        conditionalDefaultValue = val !== 'null' ? val : null;
                    }
                    // Conditionals are always ternary with special escaping and parsing done.
                    // In: expression ? value : otherValue
                    // Out: expression ? 'value' : 'otherValue'
                    //
                    // Expressions are parsed as-is and the returned value is set.
                    var conditionalExpression = !isExpressionAttribute
                        ? setupConditionalExpressionValue(at.nodeValue, conditionalDefaultValue)
                        : at.nodeValue;
                    var conditional = {
                        attributeName: targetAttribute,
                        condition: conditionalExpression,
                        defaultValue: conditionalDefaultValue,
                        lastAttributeValue: lastAttributeValue,
                        isWidgetParamTag: isParamTag,
                    };
                    conditionalExpressions.push(conditional);
                }
            }
        }
        catch (e) {
            throw new Error('Conditional format error: ' + e);
        }
    });
    return conditionalExpressions;
}
exports.getConditionalAttributeExpressions = getConditionalAttributeExpressions;
function setupConditionalExpressionValue(conditionalValue, defaultValue) {
    var expressionWithFalseValue = setupConditionalFalseValue(conditionalValue, defaultValue);
    var expressionWithEscaping = escapeCharactersInConditionalValue(expressionWithFalseValue);
    var finalConditionalExpression = setUpLastFalseValue(expressionWithEscaping);
    if (!defaultValue) {
        // fix default value to be a falsy value instead of a string literal
        var defaultValueLocation = finalConditionalExpression.lastIndexOf(":'" + defaultValue + "'");
        if (defaultValueLocation > -1) {
            finalConditionalExpression = finalConditionalExpression.substring(0, defaultValueLocation) + ":null";
        }
    }
    return finalConditionalExpression;
}
exports.setupConditionalExpressionValue = setupConditionalExpressionValue;
function setupConditionalFalseValue(conditionalValue, defaultValue) {
    // Make sure that the last 'false' value has a ':' sign and if it doesn't, add it and assign the default value, if there's one.
    var indexOfLastConditionResults = conditionalValue.lastIndexOf('?');
    var subStringOfLastConditionResults = conditionalValue.substr(indexOfLastConditionResults + 1, conditionalValue.length);
    var indexOfLastConditionResultsDivider = subStringOfLastConditionResults.indexOf(':');
    if (indexOfLastConditionResultsDivider === -1) {
        conditionalValue += ':';
        if (defaultValue) {
            conditionalValue += defaultValue;
        }
    }
    else {
        // check if there's a 'false' value or just an empty string
        var emptyFalseValue = subStringOfLastConditionResults.substr(indexOfLastConditionResultsDivider + 1, subStringOfLastConditionResults.length);
        if (emptyFalseValue === '') {
            conditionalValue = conditionalValue.substr(0, conditionalValue.length) + defaultValue;
        }
    }
    return conditionalValue;
}
function escapeCharactersInConditionalValue(conditionalValue) {
    // Escape any "'" signs.
    conditionalValue = conditionalValue.replace(/\'/g, "'");
    // Enclose all the 'true' values in ''
    conditionalValue = conditionalValue.replace(/\?/g, "?'");
    conditionalValue = conditionalValue.replace(/:/g, "':");
    return conditionalValue;
}
function setUpLastFalseValue(conditionalValue) {
    // Set an aphostrophe in the last 'false' if there isn't one
    // First: trim the last 'false' value for the aphostrophe insertion
    var indexOfLastConditionResults = conditionalValue.lastIndexOf('?');
    var subStringOfLastConditionResults = conditionalValue.substr(indexOfLastConditionResults + 1, conditionalValue.length);
    var falseResultStartIndex = subStringOfLastConditionResults.indexOf(':') + 1;
    var lastFalseResultValue = subStringOfLastConditionResults.substr(falseResultStartIndex, subStringOfLastConditionResults.length);
    lastFalseResultValue = window.gigya.utils.stringUtils.trim(lastFalseResultValue);
    if (lastFalseResultValue[0] != "'") {
        lastFalseResultValue = "'" + lastFalseResultValue;
    }
    if (lastFalseResultValue[lastFalseResultValue.length] != "'") {
        lastFalseResultValue += "'";
    }
    var lastTrueResultValue = subStringOfLastConditionResults.substr(0, falseResultStartIndex - 1);
    conditionalValue = conditionalValue.substr(0, indexOfLastConditionResults + 1) + lastTrueResultValue + ':' + lastFalseResultValue;
    return conditionalValue;
}
function isKeyCodeDisplayable(keycode) {
    return ((keycode > 47 && keycode < 58) || // number keys
        (keycode == 32 || keycode == 13) || // spacebar & return key(s)
        (keycode > 64 && keycode < 91) || // letter keys
        (keycode > 95 && keycode < 112) || // numpad keys
        (keycode > 185 && keycode < 193) || // ;=,-./` (in order)
        (keycode > 218 && keycode < 223)); // [\]' (in order)
}
exports.isKeyCodeDisplayable = isKeyCodeDisplayable;
exports.UnitMeasurementType = {
    pixel: 'px',
    percentage: '%',
    auto: '',
};
function getUnitMeasurementType(value) {
    if (value === void 0) { value = ''; }
    var unitType;
    if (value === null || value == 'auto') {
        unitType = exports.UnitMeasurementType.auto;
    }
    else {
        unitType = value.indexOf('%') != -1 ? exports.UnitMeasurementType.percentage : exports.UnitMeasurementType.pixel;
    }
    return unitType;
}
exports.getUnitMeasurementType = getUnitMeasurementType;
function getAttributesAsArray(el) {
    var attributes = [];
    var elementAttributes = el.attributes;
    // A workaround for IE8
    for (var i = 0; i < elementAttributes.length; i++) {
        attributes.push(elementAttributes[i]);
    }
    return attributes;
}
exports.getAttributesAsArray = getAttributesAsArray;
function endsWith(s, suffix) {
    return s.indexOf(suffix, s.length - suffix.length) !== -1;
}
exports.endsWith = endsWith;
function hasIndex(key) {
    return /\[[0-9]]|\.[0-9]/.test(key);
}
exports.hasIndex = hasIndex;
function removeSerializedKeyLastEnumerator(key) {
    return key.replace(/[0-9]\.(?=[^.]*$)/, '').replace(/\[[0-9]](?=[^\[]*$)/, '');
}
exports.removeSerializedKeyLastEnumerator = removeSerializedKeyLastEnumerator;
function removeSerializedKeyEdgeProperty(key) {
    return key.substr(0, key.lastIndexOf('.'));
}
exports.removeSerializedKeyEdgeProperty = removeSerializedKeyEdgeProperty;
function IETemplateElementPolyfill(doc) {
    if (doc === void 0) { doc = document; }
    var support = 'content' in document.createElement('template');
    // Set the content property if missing
    if (!support) {
        var /**
             * Prefer an array to a NodeList
             * Otherwise, updating the content property of a node
             * will update the NodeList and we'll loose the nested <template>
             */ templates = Array.prototype.slice.call(document.getElementsByTagName('template')), template, content, fragment, node, i = 0, j;
        // For each <template> element get its content and wrap it in a document fragment
        while ((template = templates[i++]) && !template.content) {
            content = template.children;
            fragment = document.createDocumentFragment();
            while (content[0]) {
                fragment.appendChild(content[0]);
            }
            template.content = fragment;
        }
    }
}
exports.IETemplateElementPolyfill = IETemplateElementPolyfill;
function replaceAttribute(htmlElement, fromAttribute, toAttribute) {
    try {
        var templateEls = htmlElement === null || htmlElement === void 0 ? void 0 : htmlElement.querySelectorAll("[" + fromAttribute + "]");
        ForEach(templateEls, function (el) {
            el.setAttribute(toAttribute, el.getAttribute(fromAttribute));
            el.removeAttribute(fromAttribute);
        });
    }
    catch (ex) { }
}
exports.replaceAttribute = replaceAttribute;
function isDOMXSS(text) {
    var dummyDomElement = document.createElement('span');
    dummyDomElement.innerText = text;
    return dummyDomElement.innerHTML !== text;
}
exports.isDOMXSS = isDOMXSS;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/errorEventUtil.ts":
/*!*****************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/errorEventUtil.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
function dispatchErrorEvent(screen, formId, _a) {
    var response = _a.response, context = _a.context;
    var errorEvent = {
        eventName: 'error',
        response: response,
        statusMessage: response === null || response === void 0 ? void 0 : response.statusMessage,
        errorMessage: response === null || response === void 0 ? void 0 : response.errorMessage,
        errorDetails: response === null || response === void 0 ? void 0 : response.errorDetails,
        errorCode: response === null || response === void 0 ? void 0 : response.errorCode,
        context: context,
        form: formId,
    };
    screen.dispatchEvent('error', tslib_1.__assign({}, errorEvent));
}
exports.dispatchErrorEvent = dispatchErrorEvent;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/errorMessageUtil.ts":
/*!*******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/errorMessageUtil.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(/*! src/accounts/Gigya.JS.Plugin.screenSet2/app/utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
function getOtpErrorMessage(response, defaultMessage) {
    if (defaultMessage === void 0) { defaultMessage = 'general_error'; }
    if (!response) {
        return defaultMessage;
    }
    var errorCode = Number(response.errorCode);
    if (errorCode === GSErrors_1.GSErrors.OK) {
        return null;
    }
    if (errorCode === GSErrors_1.GSErrors.MISSING_REQUIRED_PARAMETER && response.errorDetails) {
        if (utils_1.endsWith(response.errorDetails, 'code')) {
            return 'please_enter_a_valid_code';
        }
    }
    if (errorCode === GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE && response.errorDetails) {
        if (utils_1.endsWith(response.errorDetails, 'Invalid parameter value : phoneNumber')) {
            return 'invalid_fieldname';
        }
        if (utils_1.endsWith(response.errorDetails, 'PhoneNumber is missing country code')) {
            return 'invalid_fieldname';
        }
        if (utils_1.endsWith(response.errorDetails, 'Token has been revoked')) {
            return 'otp_code_expired';
        }
        if (utils_1.endsWith(response.errorDetails, 'phvToken is expired')) {
            return 'otp_code_expired';
        }
        if (utils_1.endsWith(response.errorDetails, 'code')) {
            return 'please_enter_a_valid_code';
        }
    }
    if (errorCode === GSErrors_1.GSErrors.FORBIDDEN) {
        return 'forbidden_error';
    }
    if (errorCode === GSErrors_1.GSErrors.FREQUENCY_LIMIT_REACHED ||
        errorCode === GSErrors_1.GSErrors.LIMIT_REACHED ||
        errorCode === GSErrors_1.GSErrors.API_RATE_LIMIT_EXCEEDED) {
        return 'code_frequency_limit_reached';
    }
    return defaultMessage;
}
exports.getOtpErrorMessage = getOtpErrorMessage;


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/expandableWidget.ts":
/*!*******************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils/expandableWidget.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var CONSTS = {
    containerClass: 'gigya-container',
    containerEnabledClass: 'gigya-container-enabled',
};
function changeExpandedState(el, expandedStateAttribute, isExpanded) {
    if (!el || !expandedStateAttribute) {
        return;
    }
    el === null || el === void 0 ? void 0 : el.setAttribute(expandedStateAttribute, isExpanded ? 'true' : 'false');
    updateContainerClasses(el, isExpanded);
}
exports.changeExpandedState = changeExpandedState;
// When widget is collapsed and form is submitted, the fields inside the collapsed widget should not be validated.
// The validation is prevented by adding containerClass
function updateContainerClasses(el, isExpanded) {
    window.gigya.utils.DOM.addClassToElement(el, CONSTS.containerClass);
    if (isExpanded) {
        window.gigya.utils.DOM.addClassToElement(el, CONSTS.containerEnabledClass);
    }
    else {
        window.gigya.utils.DOM.removeClassFromElement(el, CONSTS.containerEnabledClass);
    }
}


/***/ }),

/***/ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/visbleWhenHelper.ts":
/*!*************************************************************************!*\
  !*** ./src/accounts/Gigya.JS.Plugin.screenSet2/app/visbleWhenHelper.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = __webpack_require__(/*! ./utils */ "./src/accounts/Gigya.JS.Plugin.screenSet2/app/utils.ts");
var LoginMethods;
(function (LoginMethods) {
    LoginMethods[LoginMethods["social"] = 0] = "social";
    LoginMethods[LoginMethods["site"] = 1] = "site";
    LoginMethods[LoginMethods["siteOnly"] = 2] = "siteOnly";
    LoginMethods[LoginMethods["socialOnly"] = 3] = "socialOnly";
    LoginMethods[LoginMethods["siteAndSocial"] = 4] = "siteAndSocial";
    LoginMethods[LoginMethods["emailOtp"] = 5] = "emailOtp";
    LoginMethods[LoginMethods["phone"] = 6] = "phone";
    LoginMethods[LoginMethods["site-only"] = 2] = "site-only";
    LoginMethods[LoginMethods["social-only"] = 3] = "social-only";
    LoginMethods[LoginMethods["site-and-social"] = 4] = "site-and-social";
})(LoginMethods = exports.LoginMethods || (exports.LoginMethods = {}));
utils_1.DeepFreeze(LoginMethods);
function showAuthMethodAccordingToExistingLoginProviders(authMethod, availableLoginProviders) {
    if (!authMethod) {
        return true;
    }
    if (isSocialProvider(authMethod) && hasSocial(availableLoginProviders)) {
        return true;
    }
    return window.gigya.utils.array.some(availableLoginProviders, function (provider) { return (provider === null || provider === void 0 ? void 0 : provider.toLowerCase()) === (authMethod === null || authMethod === void 0 ? void 0 : authMethod.toLowerCase()); });
}
exports.showAuthMethodAccordingToExistingLoginProviders = showAuthMethodAccordingToExistingLoginProviders;
function showIdentityAccordingToExistingLoginProviders(widgetSiteIdentities, availableLoginProviders) {
    if (visibleWhenSiteOnly(widgetSiteIdentities)) {
        return hasSite(availableLoginProviders) && !hasSocial(availableLoginProviders);
    }
    if (visibleWhenSocialOnly(widgetSiteIdentities)) {
        return hasSocial(availableLoginProviders) && !hasSite(availableLoginProviders);
    }
    if (visibleWhenSocial(widgetSiteIdentities)) {
        return hasSocial(availableLoginProviders);
    }
    if (visibleWhenSite(widgetSiteIdentities)) {
        return hasSite(availableLoginProviders);
    }
    if (visibleWhenSiteAndSocial(widgetSiteIdentities)) {
        return hasSite(availableLoginProviders) && hasSocial(availableLoginProviders);
    }
    return hasMatchingProvider(widgetSiteIdentities, availableLoginProviders);
}
exports.showIdentityAccordingToExistingLoginProviders = showIdentityAccordingToExistingLoginProviders;
function hasMatchingProvider(allowedMethods, existingMethods) {
    return utils_1.Some(allowedMethods, function (ap) { return utils_1.Some(existingMethods, function (lp) { return lp === ap; }); });
}
function hasSocial(existingLoginProviders) {
    return isAllAllowed(existingLoginProviders) || utils_1.Some(existingLoginProviders, function (p) { return isSocialProvider(p); });
}
function hasSite(existingLoginProviders) {
    return isAllAllowed(existingLoginProviders) ||
        hasPassword(existingLoginProviders) || hasEmailOtp(existingLoginProviders) || hasPhone(existingLoginProviders);
}
function hasPassword(existingLoginProviders) {
    return isMethodAllowed(existingLoginProviders, LoginMethods.site);
}
function hasEmailOtp(existingLoginProviders) {
    return isAllAllowed(existingLoginProviders) || isMethodAllowed(existingLoginProviders, LoginMethods.emailOtp);
}
function hasPhone(existingLoginProviders) {
    return isAllAllowed(existingLoginProviders) || isMethodAllowed(existingLoginProviders, LoginMethods.phone);
}
function isMethodAllowed(existingLoginProviders, method) {
    if (isAllAllowed(existingLoginProviders)) {
        return true;
    }
    return utils_1.Some(existingLoginProviders, function (p) { return p === normalizeMethodName(method); });
}
function isAllAllowed(existingLoginProviders) {
    return !(existingLoginProviders === null || existingLoginProviders === void 0 ? void 0 : existingLoginProviders.length);
}
function isSocialProvider(loginProvider) {
    return (loginProvider === null || loginProvider === void 0 ? void 0 : loginProvider.toLowerCase()) !== normalizeMethodName(LoginMethods.site) &&
        (loginProvider === null || loginProvider === void 0 ? void 0 : loginProvider.toLowerCase()) !== normalizeMethodName(LoginMethods.emailOtp) &&
        (loginProvider === null || loginProvider === void 0 ? void 0 : loginProvider.toLowerCase()) !== normalizeMethodName(LoginMethods.phone);
}
function visibleWhenSite(allowedLoginMethods) {
    return utils_1.Some(allowedLoginMethods, function (method) { return isAllowedMethod(method, LoginMethods.site); });
}
function visibleWhenSiteOnly(allowedLoginMethods) {
    return utils_1.Some(allowedLoginMethods, function (method) { return isAllowedMethod(method, LoginMethods.siteOnly); });
}
function visibleWhenSocial(allowedLoginMethods) {
    return utils_1.Some(allowedLoginMethods, function (method) { return isAllowedMethod(method, LoginMethods.social); });
}
function visibleWhenSocialOnly(allowedLoginMethods) {
    return utils_1.Some(allowedLoginMethods, function (method) { return isAllowedMethod(method, LoginMethods.socialOnly); });
}
function visibleWhenSiteAndSocial(allowedLoginMethods) {
    return utils_1.Some(allowedLoginMethods, function (method) { return isAllowedMethod(method, LoginMethods.siteAndSocial); });
}
function isAllowedMethod(method, allowedMethod) {
    return (method === null || method === void 0 ? void 0 : method.toLowerCase()) === normalizeMethodName(allowedMethod);
}
function normalizeMethodName(provider) {
    var _a;
    return (_a = LoginMethods[provider]) === null || _a === void 0 ? void 0 : _a.toLowerCase();
}


/***/ }),

/***/ "./src/accounts/Gigya.Js.Plugin.Tfa/app/helpers/Utils.ts":
/*!***************************************************************!*\
  !*** ./src/accounts/Gigya.Js.Plugin.Tfa/app/helpers/Utils.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
function getElementByClassName(container, className) {
    return window.gigya.utils.DOM.getElementsByClass(container, className)[0];
}
exports.getElementByClassName = getElementByClassName;
function createActionInterval(tfaProvider, action, interval, cancelCondition) {
    var _this = this;
    if (cancelCondition === void 0) { cancelCondition = function () { return false; }; }
    var count = 1;
    var canContinue = false;
    action(count).then(function () { return canContinue = true; });
    var renderIntervalId = setInterval(function () { return tslib_1.__awaiter(_this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(cancelCondition(count) || !tfaProvider.isActive())) return [3 /*break*/, 1];
                    clearInterval(renderIntervalId);
                    return [3 /*break*/, 3];
                case 1:
                    if (!canContinue) return [3 /*break*/, 3];
                    canContinue = false;
                    return [4 /*yield*/, action(++count)];
                case 2:
                    _a.sent();
                    canContinue = true;
                    _a.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    }); }, interval);
}
exports.createActionInterval = createActionInterval;
function bindEnterKey(el1, el2) {
    var listenEl = el1;
    var buttonEl = el2 || el1;
    window.gigya.utils.DOM.addEventListener(listenEl, 'keyup', function (event) {
        // Submit on ENTER if button or listener element.
        // Submit on SPACE if button.
        if ((event.code === 'Space') || (event.code === 'Enter' && !el2) || (event.key === 'Enter')) {
            buttonEl.click();
        }
    });
}
exports.bindEnterKey = bindEnterKey;


/***/ }),

/***/ "./src/accounts/constants.ts":
/*!***********************************!*\
  !*** ./src/accounts/constants.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var EditableTfaProvidersTypes;
(function (EditableTfaProvidersTypes) {
    EditableTfaProvidersTypes[EditableTfaProvidersTypes["gigyaPhone"] = 0] = "gigyaPhone";
    EditableTfaProvidersTypes[EditableTfaProvidersTypes["gigyaTotp"] = 1] = "gigyaTotp";
    EditableTfaProvidersTypes[EditableTfaProvidersTypes["gigyaPush"] = 2] = "gigyaPush";
    EditableTfaProvidersTypes[EditableTfaProvidersTypes["livelink"] = 3] = "livelink";
})(EditableTfaProvidersTypes = exports.EditableTfaProvidersTypes || (exports.EditableTfaProvidersTypes = {}));
exports.gigyaAssertionExpiration = 60 * 5 * 1000;
exports.sensitiveParamsOverride = 'login_token';
exports.GIGYA_PARAM_PREFIX = 'gig_';
exports.GIGYA_INTERNAL_PARAM_PREFIX = exports.GIGYA_PARAM_PREFIX + "i_";
exports.GIGYA_INTERNAL_PARAMS = exports.GIGYA_PARAM_PREFIX + "actions";


/***/ }),

/***/ "./src/core/Gigya.Js.Adapters.Web/app/SsoService.ts":
/*!**********************************************************!*\
  !*** ./src/core/Gigya.Js.Adapters.Web/app/SsoService.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var sso_1 = __webpack_require__(/*! src/fidm/Gigya.JS.SSO/app/sso */ "./src/fidm/Gigya.JS.SSO/app/sso.ts");
var domains_1 = __webpack_require__(/*! ../../Gigya.Js/app/Utils/domains */ "./src/core/Gigya.Js/app/Utils/domains.ts");
var utils_1 = __webpack_require__(/*! ../../ServiceProxy/utils */ "./src/core/ServiceProxy/utils.ts");
var FlagService_1 = __webpack_require__(/*! ../../Gigya.Js/app/Services/FlagService */ "./src/core/Gigya.Js/app/Services/FlagService.ts");
var ServiceProxy_1 = __webpack_require__(/*! ../../ServiceProxy/ServiceProxy */ "./src/core/ServiceProxy/ServiceProxy.ts");
// ### Single Sign On across multiple domains ###
var callbackCounter = 0;
exports._requestTimeout = 3000;
var SsoService = /** @class */ (function () {
    function SsoService() {
    }
    SsoService.getInstance = function (ssoKey) {
        if (ssoKey === void 0) { ssoKey = window.gigya.partnerSettings.ssoKey; }
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var qs, url, ssoAdapter, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this._instance) return [3 /*break*/, 7];
                        if (!!ssoKey) return [3 /*break*/, 1];
                        return [2 /*return*/, null];
                    case 1:
                        if (!FlagService_1.FlagService.loadSsoFrameOnlyOnce) return [3 /*break*/, 6];
                        qs = window.gigya.utils.keyValue.serialize({
                            APIKey: ssoKey,
                            version: window.gigya.build.version,
                            build: window.gigya.build.number || -1,
                            sourceKey: window.gigya.thisScript.APIKey,
                            oneFrame: true,
                            origin: window.gigya.localInfo.protocol + "://" + document.location.hostname,
                            ssoSegment: window.gigya.partnerSettings.ssoSegment || ''
                        });
                        url = "https://" + domains_1.getStorageDomain() + "/gs/sso.htm?" + qs;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        ssoAdapter = new ServiceProxy_1.ServiceProxy(url);
                        return [4 /*yield*/, ssoAdapter.init('SSO')];
                    case 3:
                        _a.sent();
                        this._instance = ssoAdapter.wrapWith(sso_1.Sso);
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        window.gigya.logger.error("error initialize sso frame", {
                            scope: 'SsoService.init',
                            error: error_1
                        });
                        this._instance = new SsoService();
                        return [3 /*break*/, 5];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        this._instance = new SsoService();
                        _a.label = 7;
                    case 7: return [2 /*return*/, this._instance];
                }
            });
        });
    };
    SsoService.prototype.checkTokenRenew = function (loginToken) {
        return new gigya.Promise(function (resolve) {
            checkTokenRenew({ loginToken: loginToken, callback: resolve });
        });
    };
    SsoService.prototype.getToken = function () {
        return new gigya.Promise(function (resolve) {
            getGroupToken({ callback: resolve });
        });
    };
    SsoService.prototype.getTokenExpiration = function () {
        return new gigya.Promise(function (resolve) {
            getLoginTokenExp({
                callback: resolve
            });
        });
    };
    SsoService.prototype.logout = function () {
        return new gigya.Promise(function (resolve) {
            logout({
                callback: resolve
            });
        });
    };
    SsoService.prototype.removeToken = function () {
        return new gigya.Promise(function (resolve) {
            removeGroupToken({ callback: resolve });
        });
    };
    SsoService.prototype.setGroupContext = function (groupContext) {
        return new gigya.Promise(function (resolve) {
            setGroupContextCookie({ groupContext: groupContext, callback: resolve });
        });
    };
    SsoService.prototype.setToken = function (lt, expiration, gltexp) {
        return new gigya.Promise(function (resolve) {
            setGroupToken({
                lt: lt, expiration: expiration, gltexp: gltexp, callback: resolve
            });
        });
    };
    SsoService.prototype.setTokenExpiration = function (loginTokenExp, useCache) {
        if (useCache === void 0) { useCache = true; }
        return new gigya.Promise(function (resolve) {
            setLoginTokenExp({
                loginTokenExp: loginTokenExp,
                callback: resolve
            }, useCache);
        });
    };
    SsoService.prototype.syncCanaryIndication = function (isCanary, canaryVersion) {
        return new gigya.Promise(function (resolve) {
            syncCanaryIndication({ isCanary: isCanary, canaryVersion: canaryVersion, callback: resolve });
        });
    };
    SsoService.prototype.getGroupApiDomain = function () {
        return new gigya.Promise(function (resolve) {
            getGroupApiDomain({ callback: resolve });
        });
    };
    SsoService.prototype.setGroupApiDomain = function (domain) {
        return new gigya.Promise(function (resolve) {
            setGroupApiDomain({ callback: resolve, domain: domain });
        });
    };
    return SsoService;
}());
exports.SsoService = SsoService;
function _request(mode, p) {
    if (!window.gigya.partnerSettings.ssoKey) {
        if (p && p.callback) {
            p.callback({});
        }
        return;
    }
    var params;
    if (!p) {
        params = {};
    }
    else {
        // Ensure the params passed are not modified by reference.
        params = window.gigya.utils.object.clone(p);
    }
    var ifr;
    var requestTimeoutId;
    var callback = function (response) {
        window.gigya.logger.debug("cleaning sso iframe");
        // cleanup iframe
        ifr.parentNode.removeChild(ifr);
        clearTimeout(requestTimeoutId);
        // Typecast response.
        if (response) {
            if (response.errorCode && typeof response.errorCode === 'string') {
                response.errorCode = Number(response.errorCode);
            }
            if (response.expires_in && typeof response.expires_in === 'string') {
                response.expires_in = Number(response.expires_in);
            }
        }
        if (p && p.callback) {
            p.callback(response);
        }
    };
    params.m = mode;
    params.d = window.gigya.localInfo.protocol + "://" + document.location.hostname;
    if (document.location.port) {
        params.d += ':' + document.location.port;
    }
    // Chrome caches the fragment when loaded for the first time. workaround:
    params.callbackID = 'gig_sso_cb' + new Date().getTime() + '_' + callbackCounter++;
    params.sAPIKey = window.gigya.thisScript.APIKey;
    params[window.gigya.logger.configKey] = JSON.stringify(window.gigya.logger.getConfig());
    var fragment = window.gigya.utils.keyValue.serialize(params);
    var iframeLoader = function (retries) {
        if (retries === void 0) { retries = 0; }
        window.gigya.utils.xd.addMessageListener(params.callbackID, {}, false, callback, window.gigya._.MessagingMethod.PostMessage);
        ifr = _getIframe(params.callbackID);
        var fnOnLoad = function () {
            requestTimeoutId = setTimeout(function () {
                // total failure
                if (retries <= 0) {
                    window.gigya.logger.error("SSO Communication Timeout", {
                        IE11PrivateMode: window.gigya.localInfo.isIE11 && !window.indexedDB, mode: mode
                    });
                    return;
                }
                // reset
                window.gigya.utils.xd.removeMessageListener(params.callbackID);
                window.gigya.utils.DOM.removeElement(ifr);
                // retry
                iframeLoader(retries - 1);
            }, exports._requestTimeout);
            var qs = window.gigya.utils.keyValue.serialize({
                APIKey: window.gigya.partnerSettings.ssoKey,
                ssoSegment: window.gigya.partnerSettings.ssoSegment || '',
                version: window.gigya.build.version,
                build: window.gigya.build.number || -1,
            });
            // should always load from gigya's domain except when overriden for #50261.
            ifr.src = "https://" + domains_1.getStorageDomain() + "/gs/sso.htm?" + qs + "#" + fragment;
            window.gigya.utils.DOM.removeEventListener(ifr, 'load', fnOnLoad);
        };
        window.gigya.utils.DOM.addEventListener(ifr, 'load', fnOnLoad);
        window.gigya.logger.debug("opening sso iframe", params);
        if (document.body) {
            window.gigya.utils.DOM.appendToBody(ifr);
        }
        else {
            window.gigya.utils.functions.invokeOnPageLoad(function () { return window.gigya.utils.DOM.appendToBody(ifr); });
        }
    };
    iframeLoader(3);
}
exports._request = _request;
function _getIframe(requestId) {
    var ifr;
    if (FlagService_1.FlagService.hideSSOFrame) {
        ifr = utils_1.createIframe('SSO Frame');
    }
    else {
        ifr = document.createElement('iframe');
        // Absolute position with -1000px causes scrolling slowdowns on mobile devices.
        if (window.gigya.localInfo.isIOS || window.gigya.localInfo.isIOSChrome || window.gigya.localInfo.isAndroid) {
            ifr.style.width = '0px';
            ifr.style.height = '0px';
            ifr.style.display = 'none';
        }
        else {
            ifr.style.width = '30px';
            ifr.style.height = '10px';
            ifr.style.position = 'absolute';
            ifr.style.top = '-1000px';
            ifr.style.left = '-1000px';
        }
    }
    ifr.id = 'gig_sso_' + requestId;
    window.gigya.utils.functions.addSrcToIFrameIfNeeded(ifr);
    return ifr;
}
function getGroupToken(params) {
    window.gigya.logger.info("trying to get sso group login token");
    _request('getToken', {
        callback: function (response) {
            exports._storedLoginTokenExp = response.gltexp;
            if (params && params.callback) {
                params.callback(response);
            }
        },
    });
}
exports.getGroupToken = getGroupToken;
function setGroupToken(params) {
    // Add current gltexp cookie to the parameters automatically.
    if (!params.gltexp) {
        params.gltexp = window.gigya.utils.cookie.get("gltexp_" + window.gigya.thisScript.APIKey);
    }
    _request('setToken', params);
}
exports.setGroupToken = setGroupToken;
function logout(params) {
    _request('logout', params);
}
exports.logout = logout;
function removeGroupToken(params) {
    _request('removeToken', params);
}
exports.removeGroupToken = removeGroupToken;
function setLoginTokenExp(params, useCache) {
    if (useCache === void 0) { useCache = true; }
    // Don't store the login token again if we've already stored it.
    if (useCache && exports._storedLoginTokenExp && params.loginTokenExp === exports._storedLoginTokenExp) {
        if (params.callback) {
            params.callback({ gltexp: exports._storedLoginTokenExp });
        }
        return;
    }
    exports._storedLoginTokenExp = params.loginTokenExp;
    _request('setLoginTokenExp', params);
}
exports.setLoginTokenExp = setLoginTokenExp;
function getLoginTokenExp(params) {
    _request('getLoginTokenExp', params);
}
exports.getLoginTokenExp = getLoginTokenExp;
function checkTokenRenew(params) {
    window.gigya.logger.info("verifying login token with sso group");
    _request('checkTokenRenew', params);
}
exports.checkTokenRenew = checkTokenRenew;
function syncCanaryIndication(params) {
    _request('syncCanaryIndication', params);
}
exports.syncCanaryIndication = syncCanaryIndication;
function setGroupContextCookie(params) {
    _request('setGroupContext', params);
}
exports.setGroupContextCookie = setGroupContextCookie;
function setGroupApiDomain(params) {
    _request('setGroupApiDomain', params);
}
exports.setGroupApiDomain = setGroupApiDomain;
function getGroupApiDomain(params) {
    _request('getGroupApiDomain', params);
}
exports.getGroupApiDomain = getGroupApiDomain;


/***/ }),

/***/ "./src/core/Gigya.Js.Adapters.Web/app/TokenStore.ts":
/*!**********************************************************!*\
  !*** ./src/core/Gigya.Js.Adapters.Web/app/TokenStore.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var SsoService_1 = __webpack_require__(/*! src/core/Gigya.Js.Adapters.Web/app/SsoService */ "./src/core/Gigya.Js.Adapters.Web/app/SsoService.ts");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var SessionService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Services/SessionService */ "./src/core/Gigya.Js/app/Services/SessionService.ts");
var FlagService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Services/FlagService */ "./src/core/Gigya.Js/app/Services/FlagService.ts");
// Load and save tokens based on API keys
var _curSessionExpiration;
var _bearerToken = null;
var _triedGACs = {};
exports.activeNamespaces = {};
function isValidGltExp(gltexp) {
    if (gltexp === void 0) { gltexp = getGltexpCookie(); }
    return !gltexp || window.gigya.utils.gltexp.isValid(gltexp);
}
exports.isValidGltExp = isValidGltExp;
function getGltexpCookie(APIKey) {
    if (APIKey === void 0) { APIKey = window.gigya.thisScript.APIKey; }
    return window.gigya.utils.cookie.get(getGltCookieKey(APIKey));
}
exports.getGltexpCookie = getGltexpCookie;
function setGltexp(gltexp, APIKey) {
    if (APIKey === void 0) { APIKey = window.gigya.thisScript.APIKey; }
    if (gltexp && !isGigyaCookieDomain()) {
        window.gigya.utils.cookie.remove(getGltCookieKey(APIKey));
        if (FlagService_1.FlagService.setCookieSameSiteLaxSession) {
            window.gigya.utils.cookie.set(getGltCookieKey(APIKey), gltexp, null, null, null, 'Lax');
        }
        else {
            window.gigya.utils.cookie.set(getGltCookieKey(APIKey), gltexp);
        }
    }
}
exports.setGltexp = setGltexp;
function getGltCookieKey(APIKey) {
    return "gltexp_" + APIKey;
}
function _getTokenCookieName(APIKey) {
    if (APIKey === void 0) { APIKey = window.gigya.thisScript.APIKey; }
    if (APIKey) {
        return 'glt_' + APIKey;
    }
    else {
        return '_gig_lt';
    }
}
function get(APIKey) {
    if (APIKey === void 0) { APIKey = window.gigya.thisScript.APIKey; }
    var lt = window.gigya.utils.cookie.get(_getTokenCookieName(APIKey));
    if (lt) {
        return lt.split('|')[0];
    }
    else {
        return null;
    }
}
exports.get = get;
function set(APIKey, login_token, expires_in, sessionExpiration) {
    window.gigya.utils.localStorage.removeItem('gigyaSettings');
    window.gigya.logger.info("setting a new login token");
    if (!APIKey) {
        APIKey = window.gigya.thisScript.APIKey;
    }
    if (APIKey) {
        if (FlagService_1.FlagService.setCookieSameSiteLaxSession) {
            window.gigya.utils.cookie.set('glt_' + APIKey, login_token, expires_in, null, null, 'Lax');
        }
        else {
            window.gigya.utils.cookie.set('glt_' + APIKey, login_token, expires_in);
        }
        window.gigya.utils.cookie.remove('gac_' + APIKey);
    }
    else {
        if (FlagService_1.FlagService.setCookieSameSiteLaxSession) {
            window.gigya.utils.cookie.set('_gig_lt', login_token, expires_in, null, null, 'Lax');
        }
        else {
            window.gigya.utils.cookie.set('_gig_lt', login_token, expires_in);
        }
    }
    _curSessionExpiration = sessionExpiration;
}
exports.set = set;
function getCurrentSessionExpiration() {
    return _curSessionExpiration;
}
exports.getCurrentSessionExpiration = getCurrentSessionExpiration;
function getGACCookie() {
    return window.gigya.thisScript.APIKey && window.gigya.utils.cookie.get('gac_' + window.gigya.thisScript.APIKey);
}
exports.getGACCookie = getGACCookie;
function setFromAuthCode(authCode) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, new gigya.Promise(function (resolve) {
                    setFromGAC({}, resolve, authCode);
                })];
        });
    });
}
exports.setFromAuthCode = setFromAuthCode;
function setFromGAC(params, callback, gac) {
    if (gac === void 0) { gac = getGACCookie(); }
    if (window.gigya.thisScript.APIKey) {
        if (gac && !params['neverTryGAC']) {
            // Sometimes gac is set with surrounding double-quotes (like in java). Strip quotes.
            if (gac.charAt(0) === '"' && gac.charAt(gac.length - 1) === '"') {
                gac = gac.substring(1, gac.length - 1);
            }
            if (_triedGACs[gac]) {
                callback(); // Already tried, don't try again.
                return;
            }
            _triedGACs[gac] = true;
            window.gigya.socialize.updateRefUID();
            window.gigya.socialize.notifyLogin({
                ignoreApiQueue: true,
                neverTryGAC: true,
                authCode: gac,
                APIKey: window.gigya.thisScript.APIKey,
                client_id: window.gigya.thisScript.APIKey
            }, {
                // Intentionally we're not raising onLogin event, as no login was made, just established (verified in bug 43419).
                callback: function () {
                    window.gigya.utils.cookie.remove('gac_' + window.gigya.thisScript.APIKey);
                    callback();
                    // neverTryGAC is used to avoid trying setFromGac forever if the cookie wasn't removed (when a wrong baseDomain is used)
                    window.gigya.socialize.refreshUI({
                        neverTryGAC: true
                    });
                },
            });
        }
        else {
            callback();
        }
    }
    else {
        callback();
    }
}
exports.setFromGAC = setFromGAC;
function setFromSsoResponse(res, APIKey) {
    if (APIKey === void 0) { APIKey = window.gigya.thisScript.APIKey; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _this = this;
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, new gigya.Promise(function (resolve) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    var _a, expires_in, groupContext, gltexpCookieName;
                    return tslib_1.__generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!res)
                                    return [2 /*return*/];
                                _a = res.errorCode;
                                switch (_a) {
                                    case GSErrors_1.GSErrors.UNAUTHORIZED_USER: return [3 /*break*/, 1];
                                    case GSErrors_1.GSErrors.INVALID_TOKEN: return [3 /*break*/, 2];
                                    case GSErrors_1.GSErrors.TOKEN_HAS_RENEWED: return [3 /*break*/, 3];
                                    case GSErrors_1.GSErrors.OK: return [3 /*break*/, 3];
                                    case GSErrors_1.GSErrors.NETWORK_ERROR: return [3 /*break*/, 5];
                                }
                                return [3 /*break*/, 6];
                            case 1:
                                window.gigya.logger.info("no group session found");
                                remove(APIKey);
                                return [3 /*break*/, 7];
                            case 2:
                                window.gigya.logger.info("existing group session was revoked");
                                remove(APIKey);
                                window.gigya.events.global.dispatchWhenHandlerAdded({ eventName: 'accounts.logout' });
                                window.gigya.events.global.dispatchWhenHandlerAdded({ eventName: 'logout' });
                                return [3 /*break*/, 7];
                            case 3:
                                if (!res.login_token)
                                    return [2 /*return*/];
                                window.gigya.logger.info("new session from group");
                                expires_in = void 0;
                                groupContext = void 0;
                                if (res.groupContext) {
                                    groupContext = JSON.parse(res.groupContext);
                                }
                                if (!isGigyaCookieDomain()) {
                                    // It should never expire if a gltexp is present.
                                    expires_in = !res.gltexp ? res.expires_in : window.gigya.utils.cookie.getInfiniteExpirationTimeInSeconds();
                                    // Set login token cookie
                                    set(APIKey, res.login_token, expires_in);
                                    gltexpCookieName = "gltexp_" + APIKey;
                                    if (res.gltexp && !window.gigya.utils.cookie.get(gltexpCookieName)) {
                                        window.gigya.utils.cookie.set(gltexpCookieName, res.gltexp);
                                    }
                                }
                                return [4 /*yield*/, dispatchLoginEvent({ expires_in: expires_in, groupContext: groupContext })];
                            case 4:
                                _b.sent();
                                return [3 /*break*/, 7];
                            case 5:
                                window.gigya.logger.error("gigya: error loading sso frame", { res: res });
                                window.gigya.events.global.dispatchWhenHandlersAdded(['accounts.error', 'socialize.error'], res);
                                return [3 /*break*/, 7];
                            case 6:
                                window.gigya.logger.error("sso: unsupported response");
                                throw 'gigya: unsupported response from sso';
                            case 7:
                                resolve();
                                return [2 /*return*/];
                        }
                    });
                }); })];
        });
    });
}
exports.setFromSsoResponse = setFromSsoResponse;
function dispatchLoginEvent(eventParams) {
    if (eventParams === void 0) { eventParams = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _this = this;
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, new gigya.Promise(function (resolve) {
                    window.gigya.utils.queue.hold('verifyLogin', 'API');
                    window.gigya.accounts.verifyLogin({
                        ignoreApiQueue: true,
                        suppressLoginEvent: true,
                        include: window.gigya.utils.stringUtils.mergeCommaSeparatedValues('profile,data', window.gigya.thisScript.globalConf['include']),
                        extraProfileFields: 'samlData',
                        callback: function (accountInfoRes) {
                            window.gigya.utils.queue.release('verifyLogin', 'API'); // release the api queue
                            SessionService_1.sessionData.setIsSessionVerified(get(), accountInfoRes.errorCode == GSErrors_1.GSErrors.OK);
                            // use whatever field you need from accountInfoRes now before accountInfoRes will be overridden (such as 'source')
                            var source = accountInfoRes.source;
                            window.gigya.events.global.dispatchWhenHandlerAdded({ eventName: 'socialize.login' }, null, function (eventObj, callback) {
                                if (!eventObj) {
                                    eventObj = {};
                                }
                                eventObj = window.gigya.utils.object.merge([eventObj, eventParams]);
                                if (accountInfoRes.errorCode == GSErrors_1.GSErrors.OK) {
                                    window.gigya.socialize.getUserInfo({
                                        signIDs: true,
                                        extraFields: 'samlData',
                                        callback: function (userInfoRes) {
                                            if (userInfoRes.errorCode == GSErrors_1.GSErrors.OK) {
                                                eventObj = window.gigya._.addUserInfoToEvent(userInfoRes, { eventName: 'login' }, true);
                                                // normalizing event fields for backwards compatibility
                                                eventObj['source'] = source;
                                                eventObj['newUser'] = false;
                                                eventObj['provider'] = 'site';
                                                eventObj['loginMode'] = 'standard';
                                                if (eventObj['user']) {
                                                    eventObj['user'].errorCode = userInfoRes.errorCode;
                                                    eventObj['user'].callId = userInfoRes.callId;
                                                }
                                                accountInfoRes.id_token && (eventObj['id_token'] = accountInfoRes.id_token);
                                            }
                                            else {
                                                eventObj['cancel'] = true;
                                            }
                                            callback(eventObj);
                                        },
                                    });
                                }
                                else {
                                    eventObj['cancel'] = true;
                                    callback(eventObj);
                                }
                            });
                            window.gigya.events.global.dispatchWhenHandlerAdded({ eventName: 'accounts.login' }, null, function (eventObj, callback) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!eventObj) {
                                                eventObj = {};
                                            }
                                            eventObj = window.gigya.utils.object.merge([eventObj, eventParams]);
                                            if (!(accountInfoRes.errorCode == GSErrors_1.GSErrors.OK)) return [3 /*break*/, 3];
                                            eventObj['eventName'] = 'accounts.login';
                                            if (!!accountInfoRes.UID) return [3 /*break*/, 2];
                                            return [4 /*yield*/, new gigya.Promise(function (r) {
                                                    return window.gigya.accounts.getAccountInfo({
                                                        callback: r,
                                                        include: window.gigya.utils.stringUtils.mergeCommaSeparatedValues('profile,data', window.gigya.thisScript.globalConf['include'])
                                                    });
                                                })];
                                        case 1:
                                            accountInfoRes = _a.sent();
                                            _a.label = 2;
                                        case 2:
                                            window.gigya.utils.object.extractProperties(accountInfoRes, eventObj, 'signature|UIDSig|timestamp|UIDSignature|signatureTimestamp|UID|profile|data|dataCenter|id_token|groups');
                                            return [3 /*break*/, 4];
                                        case 3:
                                            eventObj['cancel'] = true;
                                            _a.label = 4;
                                        case 4:
                                            callback(eventObj);
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            resolve();
                        },
                    });
                })];
        });
    });
}
exports.dispatchLoginEvent = dispatchLoginEvent;
function remove(APIKey) {
    if (APIKey === void 0) { APIKey = window.gigya.thisScript.APIKey; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var service;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (get(APIKey)) {
                        window.gigya.logger.info("removing login token");
                    }
                    window.gigya.utils.cookie.remove("glt_" + APIKey);
                    window.gigya.utils.cookie.remove('_gig_lt');
                    window.gigya.utils.cookie.remove("gltexp_" + APIKey);
                    if (!window.gigya.partnerSettings.ssoKey) return [3 /*break*/, 2];
                    window.gigya.logger.info("removing group login token");
                    return [4 /*yield*/, SsoService_1.SsoService.getInstance()];
                case 1:
                    service = _a.sent();
                    return [2 /*return*/, service.removeToken()];
                case 2: return [2 /*return*/, gigya.Promise.resolve()];
            }
        });
    });
}
exports.remove = remove;
function getTokenParam(APIKey, paramName) {
    var lt = window.gigya.utils.cookie.get(_getTokenCookieName(APIKey));
    if (lt) {
        var ltSegs = lt.split('|');
        if (ltSegs.length > 1) {
            return window.gigya.utils.keyValue.deserialize(ltSegs[1])[paramName];
        }
        else {
            return null;
        }
    }
}
exports.getTokenParam = getTokenParam;
function isGigyaCookieDomain() {
    var cookieDomain = window.gigya.utils.cookie.getDefaultDomain();
    return window.gigya.utils.stringUtils.endsWith(cookieDomain, window.gigya.defaultApiDomain);
}
function setBearerToken(bearerToken) {
    window.gigya.logger.info("setting a new Bearer token");
    _bearerToken = 'Bearer ' + bearerToken;
}
exports.setBearerToken = setBearerToken;
function getBearerToken() {
    return _bearerToken;
}
exports.getBearerToken = getBearerToken;
function removeBearerToken() {
    window.gigya.logger.info("Bearer token removed");
    _bearerToken = null;
}
exports.removeBearerToken = removeBearerToken;


/***/ }),

/***/ "./src/core/Gigya.Js.Plugin/app/CloseReasons.ts":
/*!******************************************************!*\
  !*** ./src/core/Gigya.Js.Plugin/app/CloseReasons.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var CloseReasons;
(function (CloseReasons) {
    CloseReasons[CloseReasons["pendingError"] = 0] = "pendingError";
    CloseReasons[CloseReasons["missing"] = 1] = "missing";
    CloseReasons[CloseReasons["finished"] = 2] = "finished";
    CloseReasons[CloseReasons["canceled"] = 3] = "canceled";
    CloseReasons[CloseReasons["backButton"] = 4] = "backButton";
    CloseReasons[CloseReasons["canceledByParent"] = 5] = "canceledByParent";
    CloseReasons[CloseReasons["skip"] = 6] = "skip";
    CloseReasons[CloseReasons["error"] = 7] = "error";
    CloseReasons[CloseReasons["cancel"] = 8] = "cancel";
})(CloseReasons = exports.CloseReasons || (exports.CloseReasons = {}));


/***/ }),

/***/ "./src/core/Gigya.Js.Plugin/app/PluginStyles.ts":
/*!******************************************************!*\
  !*** ./src/core/Gigya.Js.Plugin/app/PluginStyles.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var PluginStyle;
(function (PluginStyle) {
    PluginStyle[PluginStyle["_undefined"] = 0] = "_undefined";
    PluginStyle[PluginStyle["none"] = 1] = "none";
    PluginStyle[PluginStyle["legacy"] = 2] = "legacy";
    PluginStyle[PluginStyle["modern"] = 3] = "modern";
})(PluginStyle = exports.PluginStyle || (exports.PluginStyle = {}));
function getPluginStyleClass(style) {
    return 'gigya-style-' + PluginStyle[style];
}
exports.getPluginStyleClass = getPluginStyleClass;


/***/ }),

/***/ "./src/core/Gigya.Js.Plugin/app/Utils/general/linkAccountsHelper.ts":
/*!**************************************************************************!*\
  !*** ./src/core/Gigya.Js.Plugin/app/Utils/general/linkAccountsHelper.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var promise_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/promise */ "./src/core/Gigya.Js/app/Utils/promise.ts");
var phoneNumberUtil_1 = __webpack_require__(/*! ./phoneNumberUtil */ "./src/core/Gigya.Js.Plugin/app/Utils/general/phoneNumberUtil.ts");
var LinkAccountsWithRedirectParam;
(function (LinkAccountsWithRedirectParam) {
    LinkAccountsWithRedirectParam["Provider"] = "gig_provider";
    LinkAccountsWithRedirectParam["AccessToken"] = "gig_access_token";
})(LinkAccountsWithRedirectParam = exports.LinkAccountsWithRedirectParam || (exports.LinkAccountsWithRedirectParam = {}));
function connectAccounts(providerSessionInfo, requestParams) {
    if (requestParams === void 0) { requestParams = {}; }
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        var providerSessions;
        return tslib_1.__generator(this, function (_a) {
            providerSessions = extractProviderSessions(providerSessionInfo);
            return [2 /*return*/, promise_1.promisify(window.gigya.accounts.notifySocialLogin, tslib_1.__assign(tslib_1.__assign({}, requestParams), { loginMode: 'connect', providerSessions: providerSessions, ignoreApiQueue: true }))];
        });
    });
}
exports.connectAccounts = connectAccounts;
function extractProviderSessions(providerSessionInfo) {
    var _a;
    var idToken = providerSessionInfo.idToken, provider = providerSessionInfo.provider, code = providerSessionInfo.code, access_token = providerSessionInfo.access_token, lastName = providerSessionInfo.lastName, firstName = providerSessionInfo.firstName;
    return _a = {},
        _a[provider] = { authToken: access_token, idToken: idToken, code: code, lastName: lastName, firstName: firstName },
        _a;
}
exports.extractProviderSessions = extractProviderSessions;
function extractProviderInfoFromResponse(response) {
    if (response.errorCode != GSErrors_1.GSErrors.FORCE_LINK_LOGIN_IDENTIFIER_EXISTS) {
        return response;
    }
    var providerSessionInfo = getProviderSessionFromParams(response);
    return tslib_1.__assign(tslib_1.__assign({}, response), { providerSessionInfo: providerSessionInfo });
}
exports.extractProviderInfoFromResponse = extractProviderInfoFromResponse;
function getLoginId(conflictingAccount) {
    var _a;
    return (conflictingAccount === null || conflictingAccount === void 0 ? void 0 : conflictingAccount.loginID) || ((_a = conflictingAccount === null || conflictingAccount === void 0 ? void 0 : conflictingAccount.emails) === null || _a === void 0 ? void 0 : _a[0]);
}
exports.getLoginId = getLoginId;
function getObfuscatedPhone(conflictingAccount) {
    var phone = getPhone(conflictingAccount);
    return phoneNumberUtil_1.formatObfuscatedPhoneNumber(phone);
}
exports.getObfuscatedPhone = getObfuscatedPhone;
function getPhone(conflictingAccount) {
    var _a;
    return (_a = conflictingAccount === null || conflictingAccount === void 0 ? void 0 : conflictingAccount.phones) === null || _a === void 0 ? void 0 : _a[0];
}
exports.getPhone = getPhone;
function isLinkAccountsV2Interruption(errorCode) {
    return Number(errorCode) === GSErrors_1.GSErrors.FORCE_LINK_LOGIN_IDENTIFIER_EXISTS;
}
exports.isLinkAccountsV2Interruption = isLinkAccountsV2Interruption;
function hasProviderSessionForLinkAccountsInParamsAfterRedirect(params) {
    var providerSession = getProviderSessionForLinkAccountsAfterRedirect(params);
    return isProviderSessionValid(providerSession);
}
exports.hasProviderSessionForLinkAccountsInParamsAfterRedirect = hasProviderSessionForLinkAccountsInParamsAfterRedirect;
function getProviderSessionForLinkAccountsAfterRedirect(params) {
    try {
        var gig_provider = params.gig_provider;
        if (!gig_provider)
            return {};
        var providerSession = window.gigya.utils.JSON.deserialize(gig_provider);
        return providerSession;
    }
    catch (error) {
        window.gigya.logger.error('Error while getting provider session from params after redirect', error);
        return {};
    }
}
exports.getProviderSessionForLinkAccountsAfterRedirect = getProviderSessionForLinkAccountsAfterRedirect;
function getProviderSessionFromParams(params) {
    if (!params)
        return null;
    var providerSessionInfo = {
        access_token: params.access_token,
        provider: params.provider,
        provider_uid: params.provider_uid,
        idToken: params.id_token,
        code: params.code,
        lastName: params.lastName,
        firstName: params.firstName,
    };
    return providerSessionInfo;
}
exports.getProviderSessionFromParams = getProviderSessionFromParams;
function isProviderSessionValid(params) {
    return Boolean((params === null || params === void 0 ? void 0 : params.provider) && (params === null || params === void 0 ? void 0 : params.access_token));
}
exports.isProviderSessionValid = isProviderSessionValid;


/***/ }),

/***/ "./src/core/Gigya.Js.Plugin/app/Utils/general/phoneNumberUtil.ts":
/*!***********************************************************************!*\
  !*** ./src/core/Gigya.Js.Plugin/app/Utils/general/phoneNumberUtil.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function formatObfuscatedPhoneNumber(phoneData) {
    var phone = phoneData === null || phoneData === void 0 ? void 0 : phoneData.obfuscated;
    return phone === null || phone === void 0 ? void 0 : phone.replace(/#/g, '*').replace(/(\*+)/, ' $1 ');
}
exports.formatObfuscatedPhoneNumber = formatObfuscatedPhoneNumber;


/***/ }),

/***/ "./src/core/Gigya.Js/app/BaseObject/IBaseObjectConfig.ts":
/*!***************************************************************!*\
  !*** ./src/core/Gigya.Js/app/BaseObject/IBaseObjectConfig.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var DeviceTypes;
(function (DeviceTypes) {
    DeviceTypes[DeviceTypes["_undefined"] = 0] = "_undefined";
    DeviceTypes[DeviceTypes["desktop"] = 1] = "desktop";
    DeviceTypes[DeviceTypes["mobile"] = 2] = "mobile";
    DeviceTypes[DeviceTypes["auto"] = 3] = "auto";
})(DeviceTypes = exports.DeviceTypes || (exports.DeviceTypes = {}));


/***/ }),

/***/ "./src/core/Gigya.Js/app/Events.ts":
/*!*****************************************!*\
  !*** ./src/core/Gigya.Js/app/Events.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var objectUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/object */ "./src/core/Gigya.Js/app/Utils/object.ts");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var LegacyLogger_1 = __webpack_require__(/*! src/core/Gigya.Js/app/LegacyLogger */ "./src/core/Gigya.Js/app/LegacyLogger.ts");
var InternalFlows_1 = __webpack_require__(/*! src/core/Gigya.Js/app/InternalFlows */ "./src/core/Gigya.Js/app/InternalFlows.ts");
var arrayUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/array */ "./src/core/Gigya.Js/app/Utils/array.ts");
var templatesUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/templates */ "./src/core/Gigya.Js/app/Utils/templates.ts");
function getEventHandlerName(eventName) {
    if (eventName.substring(0, 2) === 'on') {
        return eventName;
    }
    else {
        return 'on' + eventName.substring(0, 1).toUpperCase() + eventName.substring(1);
    }
}
function addMap(map) {
    window.gigya.defaultEventMaps.splice(0, 0, map);
}
exports.addMap = addMap;
function dispatchErrorFromResponse(widgetParams, response, additionalProperties) {
    if (!response) {
        response = {};
    }
    var r = response;
    if (r.response) {
        r = r.response;
    }
    var eventObj = {
        eventName: 'error',
        status: r.status ? r.status : 'FAIL',
        statusMessage: r.statusMessage ? r.statusMessage : 'General Server Error',
        errorMessage: r.errorMessage ? r.errorMessage : 'General Server Error',
        errorDetails: r.errorDetails ? r.errorDetails : '',
        errorCode: r.errorCode ? r.errorCode : 500001,
        response: response,
    };
    objectUtils.add(eventObj, additionalProperties);
    return dispatchForWidget(eventObj, widgetParams);
}
exports.dispatchErrorFromResponse = dispatchErrorFromResponse;
function dispatchInvalidParamError(widgetParams, paramName) {
    var evt = { eventName: 'error' };
    if (typeof widgetParams[paramName] == 'undefined' || widgetParams[paramName] == null) {
        evt.errorCode = GSErrors_1.GSErrors.MISSING_REQUIRED_PARAMETER;
        evt.errorMessage = 'Missing_required_parameter (' + paramName + ')';
    }
    else {
        evt.errorCode = GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE;
        evt.errorMessage = 'Invalid_parameter_value (' + paramName + ')';
    }
    evt.status = evt.errorCode;
    evt.statusMessage = evt.errorMessage;
    dispatchForWidget(evt, widgetParams);
}
exports.dispatchInvalidParamError = dispatchInvalidParamError;
function dispatchForWidget(e, widgetParams) {
    if (!e || !e.eventName)
        return;
    var eventName = e.eventName;
    LegacyLogger_1.addLog('Dispatching widget event "' + eventName + '" for ' + widgetParams.lastSource + ' with this event object', e);
    //gigya.socialize._AdjustResponseStatus(eventObj);
    InternalFlows_1.handleSpecialFields(e);
    var arEvents = eventName.split(',');
    var result;
    for (var i = 0; i < arEvents.length; i++) {
        var eventName_1 = arEvents[i];
        var eventHandlerName = getEventHandlerName(eventName_1);
        if (widgetParams) {
            if (widgetParams.context) {
                e.context = widgetParams.context;
            }
            if (widgetParams.source) {
                e.source = widgetParams.source;
            }
            if (widgetParams.sourceData) {
                e.sourceData = widgetParams.sourceData;
            }
            if (widgetParams.containerID) {
                e.sourceContainerID = widgetParams.containerID;
            }
            if (widgetParams.instanceID) {
                e.instanceID = widgetParams.instanceID;
            }
        }
        if (widgetParams[eventHandlerName]) {
            result = dispatchEventObject(widgetParams[eventHandlerName], e);
        }
        if (typeof result === 'undefined') {
            result = true;
        }
        if (eventName_1.indexOf('login') == -1 && eventName_1.indexOf('logout') == -1 && eventName_1 != 'connectionRemoved' && eventName_1 != 'connectionAdded') {
            _dispatchFromMaps(e);
            var GenesisExchange_Gigya = window['GenesisExchange_Gigya'];
            var gigya_omniture_conf = window['gigya_omniture_conf'];
            var myOmnitureIntegrationFunc = window['myOmnitureIntegrationFunc'];
            if (typeof GenesisExchange_Gigya != 'undefined' && typeof gigya_omniture_conf != 'undefined') {
                var ge = new GenesisExchange_Gigya(gigya_omniture_conf);
                ge.processAction(e);
                if (typeof myOmnitureIntegrationFunc != 'undefined') {
                    myOmnitureIntegrationFunc(gigya_omniture_conf, e);
                }
            }
        }
    }
    return result;
}
exports.dispatchForWidget = dispatchForWidget;
function dispatchEventObject(handlers, e) {
    var result;
    try {
        if (typeof handlers == 'function') {
            result = handlers(e);
        }
        else if (!(handlers instanceof Array)) {
            LegacyLogger_1.addLog('Not a function or function array registered to event', handlers);
        }
        else {
            arrayUtils.forEach(handlers, function (handler) {
                if (typeof handler == 'function') {
                    handler(e);
                }
                else {
                    LegacyLogger_1.addLog('Not a function registered to event: ' + handler, handler);
                }
            });
            /// TODO: not collecting results.. should it?
        }
    }
    catch (ex) {
        LegacyLogger_1.addLog('Error invoking function registered to event', handlers);
    }
    return result;
}
exports.dispatchEventObject = dispatchEventObject;
function _dispatchFromMaps(evt, isGlobal) {
    if (isGlobal === void 0) { isGlobal = false; }
    var arDispatch = [];
    var stop = false;
    for (var i = 0; i < window.gigya.defaultEventMaps.length; i++) {
        var map = window.gigya.defaultEventMaps[i].eventMap;
        var defaultMethod = window.gigya.defaultEventMaps[i].defaultMethod;
        for (var u = 0; u < map.length; u++) {
            var oField = map[u];
            var processedArgs = [];
            if (!oField.args)
                oField.args = [];
            for (var iArg = 0; iArg < oField.args.length; iArg++) {
                if (oField.args[iArg] == '$event') {
                    processedArgs.push(evt);
                }
                else {
                    processedArgs.push(templatesUtils.fill(oField.args[iArg], evt));
                }
            }
            var sEvents = ',' + oField.events.toLowerCase() + ',';
            if (sEvents.indexOf(',*,') != -1 ||
                ((sEvents.indexOf(',' + 'on' + evt.eventName.toLowerCase() + ',') != -1 || sEvents.indexOf(',' + evt.eventName.toLowerCase() + ',') != -1) &&
                    ((!evt.source && !oField.sources) || !oField.sources || oField.sources.indexOf(evt.source) != -1))) {
                arDispatch.push(oField);
                var method = oField.method ? oField.method : defaultMethod;
                try {
                    method.apply(this, processedArgs);
                }
                catch (e) {
                    LegacyLogger_1.addLog("Error invoking function registered to events map's method", method);
                }
                if (oField.override) {
                    stop = true;
                }
            }
        }
        if (stop)
            break;
    }
}
exports._dispatchFromMaps = _dispatchFromMaps;


/***/ }),

/***/ "./src/core/Gigya.Js/app/GSErrors.ts":
/*!*******************************************!*\
  !*** ./src/core/Gigya.Js/app/GSErrors.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var GSErrors;
(function (GSErrors) {
    GSErrors[GSErrors["OK"] = 0] = "OK";
    GSErrors[GSErrors["Data_Pending"] = 100001] = "Data_Pending";
    GSErrors[GSErrors["NETWORK_ERROR"] = 500026] = "NETWORK_ERROR";
    GSErrors[GSErrors["DATA_PENDING"] = 100001] = "DATA_PENDING";
    GSErrors[GSErrors["OPERATION_CANCELED"] = 200001] = "OPERATION_CANCELED";
    GSErrors[GSErrors["PERMISSION_GRANTED"] = 200002] = "PERMISSION_GRANTED";
    GSErrors[GSErrors["PERMISSION_NOT_GRANTED"] = 200003] = "PERMISSION_NOT_GRANTED";
    GSErrors[GSErrors["REDIRECT"] = 200004] = "REDIRECT";
    GSErrors[GSErrors["NEW_USER"] = 200005] = "NEW_USER";
    GSErrors[GSErrors["OPERATION_DONE"] = 200006] = "OPERATION_DONE";
    GSErrors[GSErrors["UPDATE_USER"] = 200007] = "UPDATE_USER";
    GSErrors[GSErrors["OK_WITH_ERRORS"] = 200008] = "OK_WITH_ERRORS";
    GSErrors[GSErrors["ACCOUNTS_LINKED"] = 200009] = "ACCOUNTS_LINKED";
    GSErrors[GSErrors["OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS"] = 200010] = "OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS";
    GSErrors[GSErrors["ACCOUNT_PENDING_REGISTRATION"] = 206001] = "ACCOUNT_PENDING_REGISTRATION";
    GSErrors[GSErrors["ACCOUNT_PENDING_VERIFICATION"] = 206002] = "ACCOUNT_PENDING_VERIFICATION";
    GSErrors[GSErrors["ACCOUNT_MISSING_LOGINID"] = 206003] = "ACCOUNT_MISSING_LOGINID";
    GSErrors[GSErrors["IDENTITY_ALREADY_ASSIGNED"] = 206004] = "IDENTITY_ALREADY_ASSIGNED";
    GSErrors[GSErrors["AFTER_EMAIL_VERIFICATION"] = 206005] = "AFTER_EMAIL_VERIFICATION";
    GSErrors[GSErrors["PENDING_CODE_VERIFICATION"] = 206006] = "PENDING_CODE_VERIFICATION";
    GSErrors[GSErrors["CLIENT_LOG"] = 300001] = "CLIENT_LOG";
    GSErrors[GSErrors["INVALID_DATA_CENTER"] = 301001] = "INVALID_DATA_CENTER";
    GSErrors[GSErrors["INVALID_REQUEST_FORMAT"] = 400001] = "INVALID_REQUEST_FORMAT";
    GSErrors[GSErrors["MISSING_REQUIRED_PARAMETER"] = 400002] = "MISSING_REQUIRED_PARAMETER";
    GSErrors[GSErrors["UNIQUE_IDENTIFIER_EXISTS"] = 400003] = "UNIQUE_IDENTIFIER_EXISTS";
    GSErrors[GSErrors["INVALID_PARAMETER_FORMAT"] = 400004] = "INVALID_PARAMETER_FORMAT";
    GSErrors[GSErrors["INVALID_PARAMETER_VALUE"] = 400006] = "INVALID_PARAMETER_VALUE";
    GSErrors[GSErrors["DUPLICATE_VALUE"] = 400007] = "DUPLICATE_VALUE";
    GSErrors[GSErrors["INVALID_AUTHENTICATION_HEADER"] = 400008] = "INVALID_AUTHENTICATION_HEADER";
    GSErrors[GSErrors["VALIDATION_ERROR"] = 400009] = "VALIDATION_ERROR";
    GSErrors[GSErrors["INVALID_REDIRECT_URI"] = 400011] = "INVALID_REDIRECT_URI";
    GSErrors[GSErrors["INVALID_RESPONSE_TYPE"] = 400012] = "INVALID_RESPONSE_TYPE";
    GSErrors[GSErrors["UNSUPPORTED_GRANT_TYPE"] = 400013] = "UNSUPPORTED_GRANT_TYPE";
    GSErrors[GSErrors["INVALID_GRANT"] = 400014] = "INVALID_GRANT";
    GSErrors[GSErrors["CODE_EXPIRED"] = 400015] = "CODE_EXPIRED";
    GSErrors[GSErrors["SCHEMA_VALIDATION_FAILED"] = 400020] = "SCHEMA_VALIDATION_FAILED";
    GSErrors[GSErrors["CAPTCHA_VERIFICATION_FAILED"] = 400021] = "CAPTCHA_VERIFICATION_FAILED";
    GSErrors[GSErrors["UNIQUE_INDEX_VALIDATION_ERROR"] = 400022] = "UNIQUE_INDEX_VALIDATION_ERROR";
    GSErrors[GSErrors["INVALID_TYPE_VALIDATION_ERROR"] = 400023] = "INVALID_TYPE_VALIDATION_ERROR";
    GSErrors[GSErrors["DYNAMIC_FIELDS_VALIDATION_ERROR"] = 400024] = "DYNAMIC_FIELDS_VALIDATION_ERROR";
    GSErrors[GSErrors["WRITE_ACCESS_VALIDATION_ERROR"] = 400025] = "WRITE_ACCESS_VALIDATION_ERROR";
    GSErrors[GSErrors["INVALID_FORMAT_VALIDATION_ERROR"] = 400026] = "INVALID_FORMAT_VALIDATION_ERROR";
    GSErrors[GSErrors["REQUIRED_VALUE_VALIDATION_ERROR"] = 400027] = "REQUIRED_VALUE_VALIDATION_ERROR";
    GSErrors[GSErrors["EMAIL_NOT_VERIFIED"] = 400028] = "EMAIL_NOT_VERIFIED";
    GSErrors[GSErrors["SCHEMA_CONFLICT_ERROR"] = 400029] = "SCHEMA_CONFLICT_ERROR";
    GSErrors[GSErrors["OPERATION_NOT_ALLOWED"] = 400030] = "OPERATION_NOT_ALLOWED";
    GSErrors[GSErrors["SECURITY_VERIFICATION_FAILED"] = 400050] = "SECURITY_VERIFICATION_FAILED";
    GSErrors[GSErrors["INVALID_APIKEY_PARAMETER"] = 400093] = "INVALID_APIKEY_PARAMETER";
    GSErrors[GSErrors["NOT_SUPPORTED"] = 400096] = "NOT_SUPPORTED";
    GSErrors[GSErrors["UNSUPPORTED_USER_AGENT"] = 400097] = "UNSUPPORTED_USER_AGENT";
    GSErrors[GSErrors["NO_PROVIDERS"] = 400100] = "NO_PROVIDERS";
    GSErrors[GSErrors["POPUP_BLOCKED"] = 400101] = "POPUP_BLOCKED";
    GSErrors[GSErrors["INVALID_EVENT_HANDLER"] = 400102] = "INVALID_EVENT_HANDLER";
    GSErrors[GSErrors["INVALID_CONTAINERID"] = 400103] = "INVALID_CONTAINERID";
    GSErrors[GSErrors["NOT_CONNECTED"] = 400106] = "NOT_CONNECTED";
    GSErrors[GSErrors["INVALID_SITE_DOMAIN"] = 400120] = "INVALID_SITE_DOMAIN";
    GSErrors[GSErrors["PROVIDER_CONFIGURATION_ERROR"] = 400122] = "PROVIDER_CONFIGURATION_ERROR";
    GSErrors[GSErrors["LIMIT_REACHED"] = 400124] = "LIMIT_REACHED";
    GSErrors[GSErrors["FREQUENCY_LIMIT_REACHED"] = 400125] = "FREQUENCY_LIMIT_REACHED";
    GSErrors[GSErrors["INVALID_ACTION"] = 400126] = "INVALID_ACTION";
    GSErrors[GSErrors["INSUFFICIENT_POINTS_TO_REDEEM"] = 400127] = "INSUFFICIENT_POINTS_TO_REDEEM";
    GSErrors[GSErrors["SIGNATURE_TIMESTAMP_EXPIRED"] = 400128] = "SIGNATURE_TIMESTAMP_EXPIRED";
    GSErrors[GSErrors["Error_During_Extensions_Operation"] = 400302] = "Error_During_Extensions_Operation";
    GSErrors[GSErrors["Extension_Point_Custom_Error"] = 400303] = "Extension_Point_Custom_Error";
    GSErrors[GSErrors["INVALID_POLICY_CONFIGURATION"] = 401000] = "INVALID_POLICY_CONFIGURATION";
    GSErrors[GSErrors["SUSPECTED_SPAM"] = 401010] = "SUSPECTED_SPAM";
    GSErrors[GSErrors["LOGIN_FAILED_CAPTCHA_REQUIRED"] = 401020] = "LOGIN_FAILED_CAPTCHA_REQUIRED";
    GSErrors[GSErrors["REQUEST_FAILED_CAPTCHA_REQUIRED"] = 401023] = "REQUEST_FAILED_CAPTCHA_REQUIRED";
    GSErrors[GSErrors["LOGIN_FAILED_WRONG_CAPTCHA"] = 401021] = "LOGIN_FAILED_WRONG_CAPTCHA";
    GSErrors[GSErrors["OLD_PASSWORD_USED"] = 401030] = "OLD_PASSWORD_USED";
    GSErrors[GSErrors["FORBIDDEN"] = 403000] = "FORBIDDEN";
    GSErrors[GSErrors["INVALID_SESSION_TOKEN"] = 403001] = "INVALID_SESSION_TOKEN";
    GSErrors[GSErrors["REQUEST_HAS_EXPIRED"] = 403002] = "REQUEST_HAS_EXPIRED";
    GSErrors[GSErrors["INVALID_REQUEST_SIGNATURE"] = 403003] = "INVALID_REQUEST_SIGNATURE";
    GSErrors[GSErrors["DUPLICATE_NONCE"] = 403004] = "DUPLICATE_NONCE";
    GSErrors[GSErrors["UNAUTHORIZED_USER"] = 403005] = "UNAUTHORIZED_USER";
    GSErrors[GSErrors["SENSITIVE_DATA_SENT_OVER_HTTP"] = 403006] = "SENSITIVE_DATA_SENT_OVER_HTTP";
    GSErrors[GSErrors["PERMISSION_DENIED"] = 403007] = "PERMISSION_DENIED";
    GSErrors[GSErrors["INVALID_OPENID_URL"] = 403008] = "INVALID_OPENID_URL";
    GSErrors[GSErrors["PROVIDER_SESSION_EXPIRED"] = 403009] = "PROVIDER_SESSION_EXPIRED";
    GSErrors[GSErrors["INVALID_SECRET"] = 403010] = "INVALID_SECRET";
    GSErrors[GSErrors["SESSION_HAS_EXPIRED"] = 403011] = "SESSION_HAS_EXPIRED";
    GSErrors[GSErrors["NO_VALID_SESSION"] = 403012] = "NO_VALID_SESSION";
    GSErrors[GSErrors["UNVERIFIED_USER"] = 403013] = "UNVERIFIED_USER";
    GSErrors[GSErrors["MISSING_REQUEST_REFERRER"] = 403015] = "MISSING_REQUEST_REFERRER";
    GSErrors[GSErrors["UNEXPECTED_PROVIDER_USER"] = 403017] = "UNEXPECTED_PROVIDER_USER";
    GSErrors[GSErrors["PERMISSION_NOT_REQUESTED"] = 403022] = "PERMISSION_NOT_REQUESTED";
    GSErrors[GSErrors["NO_USER_PERMISSION"] = 403023] = "NO_USER_PERMISSION";
    GSErrors[GSErrors["PROVIDER_LIMIT_REACHED"] = 403024] = "PROVIDER_LIMIT_REACHED";
    GSErrors[GSErrors["INVALID_TOKEN"] = 403025] = "INVALID_TOKEN";
    GSErrors[GSErrors["UNAUTHORIZED_ACCESS_ERROR"] = 403026] = "UNAUTHORIZED_ACCESS_ERROR";
    GSErrors[GSErrors["DIFFERENT_USER_FOR_REAUTH"] = 403027] = "DIFFERENT_USER_FOR_REAUTH";
    GSErrors[GSErrors["SESSION_EXPIRED_RETRY"] = 403030] = "SESSION_EXPIRED_RETRY";
    GSErrors[GSErrors["APPROVED_BY_MODERATOR"] = 403031] = "APPROVED_BY_MODERATOR";
    GSErrors[GSErrors["TOKEN_HAS_RENEWED"] = 403032] = "TOKEN_HAS_RENEWED";
    GSErrors[GSErrors["NO_USER_COOKIE"] = 403035] = "NO_USER_COOKIE";
    GSErrors[GSErrors["UNAUTHORIZED_PARTNER"] = 403036] = "UNAUTHORIZED_PARTNER";
    GSErrors[GSErrors["POST_DENIED"] = 403037] = "POST_DENIED";
    GSErrors[GSErrors["NO_LOGIN_TICKET"] = 403040] = "NO_LOGIN_TICKET";
    GSErrors[GSErrors["ACCOUNT_DISABLED"] = 403041] = "ACCOUNT_DISABLED";
    GSErrors[GSErrors["INVALID_LOGINID"] = 403042] = "INVALID_LOGINID";
    GSErrors[GSErrors["LOGIN_IDENTIFIER_EXISTS"] = 403043] = "LOGIN_IDENTIFIER_EXISTS";
    GSErrors[GSErrors["UNDERAGE_USER"] = 403044] = "UNDERAGE_USER";
    GSErrors[GSErrors["INVALID_SITE_CONFIGURATION_ERROR"] = 403045] = "INVALID_SITE_CONFIGURATION_ERROR";
    GSErrors[GSErrors["LOGINID_DOES_NOT_EXIST"] = 403047] = "LOGINID_DOES_NOT_EXIST";
    GSErrors[GSErrors["API_RATE_LIMIT_EXCEEDED"] = 403048] = "API_RATE_LIMIT_EXCEEDED";
    GSErrors[GSErrors["PENDING_PASSWORD_CHANGE"] = 403100] = "PENDING_PASSWORD_CHANGE";
    GSErrors[GSErrors["ACCOUNT_PENDING_TFA_VERIFICATION"] = 403101] = "ACCOUNT_PENDING_TFA_VERIFICATION";
    GSErrors[GSErrors["ACCOUNT_PENDING_TFA_REGISTRATION"] = 403102] = "ACCOUNT_PENDING_TFA_REGISTRATION";
    GSErrors[GSErrors["ACCOUNT_PENDING_RECENT_LOGIN"] = 403110] = "ACCOUNT_PENDING_RECENT_LOGIN";
    GSErrors[GSErrors["ACCOUNT_TEMPORARILY_LOCKED_OUT"] = 403120] = "ACCOUNT_TEMPORARILY_LOCKED_OUT";
    GSErrors[GSErrors["REDUNDANT_OPERATION"] = 403200] = "REDUNDANT_OPERATION";
    GSErrors[GSErrors["INVALID_APPLICATION_ID"] = 403201] = "INVALID_APPLICATION_ID";
    GSErrors[GSErrors["NOT_FOUND"] = 404000] = "NOT_FOUND";
    GSErrors[GSErrors["FRIEND_NOT_FOUND"] = 404001] = "FRIEND_NOT_FOUND";
    GSErrors[GSErrors["CATEGORY_NOT_FOUND"] = 404002] = "CATEGORY_NOT_FOUND";
    GSErrors[GSErrors["UID_NOT_FOUND"] = 404003] = "UID_NOT_FOUND";
    GSErrors[GSErrors["RESOURCE_NOT_FOUND"] = 404004] = "RESOURCE_NOT_FOUND";
    GSErrors[GSErrors["INVALID_API_METHOD"] = 405001] = "INVALID_API_METHOD";
    GSErrors[GSErrors["IDENTITY_EXISTS"] = 409001] = "IDENTITY_EXISTS";
    GSErrors[GSErrors["GONE"] = 410000] = "GONE";
    GSErrors[GSErrors["REQUEST_ENTITY_TOO_LARGE"] = 413001] = "REQUEST_ENTITY_TOO_LARGE";
    GSErrors[GSErrors["COMMENT_TEXT_TOO_LARGE"] = 413002] = "COMMENT_TEXT_TOO_LARGE";
    GSErrors[GSErrors["OBJECT_TOO_LARGE"] = 413003] = "OBJECT_TOO_LARGE";
    GSErrors[GSErrors["PROFILE_PHOTO_TOO_LARGE"] = 413004] = "PROFILE_PHOTO_TOO_LARGE";
    GSErrors[GSErrors["REQUEST_URI_TOO_LONG"] = 414000] = "REQUEST_URI_TOO_LONG";
    GSErrors[GSErrors["MISSING_USER_PHOTO"] = 409010] = "MISSING_USER_PHOTO";
    GSErrors[GSErrors["COUNTER_NOT_REGISTERED"] = 409011] = "COUNTER_NOT_REGISTERED";
    GSErrors[GSErrors["INVALID_GMID_TICKET"] = 409012] = "INVALID_GMID_TICKET";
    GSErrors[GSErrors["SAML_MAPPED_ATTRIBUTE_NOT_FOUND"] = 409013] = "SAML_MAPPED_ATTRIBUTE_NOT_FOUND";
    GSErrors[GSErrors["SAML_CERTIFICATE_NOT_FOUND"] = 409014] = "SAML_CERTIFICATE_NOT_FOUND";
    GSErrors[GSErrors["SAML_MESSAGE_NOT_FOUND"] = 409015] = "SAML_MESSAGE_NOT_FOUND";
    GSErrors[GSErrors["GENERAL_SERVER_ERROR"] = 500001] = "GENERAL_SERVER_ERROR";
    GSErrors[GSErrors["SERVER_LOGIN_ERROR"] = 500002] = "SERVER_LOGIN_ERROR";
    GSErrors[GSErrors["DEFAULT_APPLICATION_CONFIGURATION_ERROR"] = 500003] = "DEFAULT_APPLICATION_CONFIGURATION_ERROR";
    GSErrors[GSErrors["SESSION_MIGRATION_ERROR"] = 500014] = "SESSION_MIGRATION_ERROR";
    GSErrors[GSErrors["PROVIDER_ERROR"] = 500023] = "PROVIDER_ERROR";
    GSErrors[GSErrors["DATABASE_ERROR"] = 500028] = "DATABASE_ERROR";
    GSErrors[GSErrors["USERNAME_REQUIRED"] = 500029] = "USERNAME_REQUIRED";
    GSErrors[GSErrors["NO_PROVIDER_APPLICATION"] = 500031] = "NO_PROVIDER_APPLICATION";
    GSErrors[GSErrors["LOAD_FAILED"] = 500032] = "LOAD_FAILED";
    GSErrors[GSErrors["INVALID_ENVIRONMENT_CONFIG"] = 500033] = "INVALID_ENVIRONMENT_CONFIG";
    GSErrors[GSErrors["ERROR_DURING_BACKEND_OPERATION"] = 500034] = "ERROR_DURING_BACKEND_OPERATION";
    GSErrors[GSErrors["TIMEOUT"] = 504001] = "TIMEOUT";
    GSErrors[GSErrors["CLIENTTIMEOUT"] = 504002] = "CLIENTTIMEOUT";
    GSErrors[GSErrors["INVALID_URL"] = 404004] = "INVALID_URL";
    GSErrors[GSErrors["MEDIA_ITEMS_NOT_SUPPORTED"] = 401001] = "MEDIA_ITEMS_NOT_SUPPORTED";
    GSErrors[GSErrors["MISSING_ERROR_CODE"] = 599999] = "MISSING_ERROR_CODE";
    GSErrors[GSErrors["THIS_AUTHENTICATION_METHOD_IS_CURRENTLY_DISABLED"] = 403300] = "THIS_AUTHENTICATION_METHOD_IS_CURRENTLY_DISABLED";
    GSErrors[GSErrors["FORCE_LINK_LOGIN_IDENTIFIER_EXISTS"] = 409003] = "FORCE_LINK_LOGIN_IDENTIFIER_EXISTS";
    GSErrors[GSErrors["PASSKEY_AUTHENTICATOR_REGISTERED"] = 400130] = "PASSKEY_AUTHENTICATOR_REGISTERED";
    GSErrors[GSErrors["PASSKEY_ABORTED"] = 400131] = "PASSKEY_ABORTED";
    GSErrors[GSErrors["PASSKEY_ERROR"] = 500131] = "PASSKEY_ERROR";
})(GSErrors = exports.GSErrors || (exports.GSErrors = {}));
var GSErrorDetails;
(function (GSErrorDetails) {
    GSErrorDetails[GSErrorDetails["None"] = 0] = "None";
    GSErrorDetails[GSErrorDetails["Same_password"] = 100001] = "Same_password";
    GSErrorDetails[GSErrorDetails["Invalid_password"] = 100002] = "Invalid_password";
    GSErrorDetails[GSErrorDetails["Invalid_counters_query_with_cursor"] = 100003] = "Invalid_counters_query_with_cursor";
})(GSErrorDetails = exports.GSErrorDetails || (exports.GSErrorDetails = {}));


/***/ }),

/***/ "./src/core/Gigya.Js/app/GlobalEvents.ts":
/*!***********************************************!*\
  !*** ./src/core/Gigya.Js/app/GlobalEvents.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var arrayUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/array */ "./src/core/Gigya.Js/app/Utils/array.ts");
var LegacyLogger_1 = __webpack_require__(/*! src/core/Gigya.Js/app/LegacyLogger */ "./src/core/Gigya.Js/app/LegacyLogger.ts");
var objectUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/object */ "./src/core/Gigya.Js/app/Utils/object.ts");
var InternalFlows_1 = __webpack_require__(/*! src/core/Gigya.Js/app/InternalFlows */ "./src/core/Gigya.Js/app/InternalFlows.ts");
var events = __webpack_require__(/*! src/core/Gigya.Js/app/Events */ "./src/core/Gigya.Js/app/Events.ts");
function getEventHandlerName(eventName) {
    if (eventName.substring(0, 2) === 'on') {
        return eventName;
    }
    else {
        return 'on' + eventName.substring(0, 1).toUpperCase() + eventName.substring(1);
    }
}
var _eventHandlers = {};
var _pendingEvents = {};
exports._activeNamespaces = {};
function add(eventName, eventHandler, type, context, namespace, params) {
    if (type === void 0) { type = 'other'; }
    if (namespace === void 0) { namespace = 'socialize'; }
    var fullEventName = namespace + '_' + getEventHandlerName(eventName);
    if (!_eventHandlers[fullEventName]) {
        _eventHandlers[fullEventName] = [];
    }
    var registeredHandler = {
        handler: eventHandler,
        type: type,
        context: context,
        params: params,
        fullEventName: fullEventName,
    };
    _eventHandlers[fullEventName].push(registeredHandler);
    if (!this._activeNamespaces[namespace] && window.gigya._.apiAdapter) {
        window.gigya._.apiAdapter.registerForNamespaceEvents(namespace);
    }
    this._activeNamespaces[namespace] = 1;
    var pendingEvents = _pendingEvents[fullEventName];
    if (pendingEvents && type == 'other') {
        _pendingEvents[fullEventName] = [];
        for (var i = 0; i < pendingEvents.length; i++) {
            var e = pendingEvents[i];
            dispatchRegisteredHandlers(e.eventObj, e.params, e.preProcess);
        }
    }
    return registeredHandler;
}
exports.add = add;
function remove(fullEventName, registeredHandler) {
    if (_eventHandlers[fullEventName]) {
        arrayUtils.removeByValue(_eventHandlers[fullEventName], registeredHandler);
    }
}
exports.remove = remove;
function dispatch(eventObj, params) {
    var dispatched = 0;
    var isInternal = eventObj.isInternal; //internal event should be dispatched to widgets/components only.
    var eventNameArr = eventObj['eventName'].split(',');
    LegacyLogger_1.addLog('Dispatching global event "' + eventObj['eventName'] + '" with this event object', eventObj);
    for (var i = 0; i < eventNameArr.length; i++) {
        var eventNameSegs = eventNameArr[i].split('.');
        var namespace = eventNameSegs.length > 1 ? eventNameSegs.shift() : 'socialize';
        var eventName = eventNameSegs[0];
        var eventHandlerName = getEventHandlerName(eventName);
        var fullEventName = namespace + '_' + eventHandlerName;
        var eventHandlers = objectUtils.clone(_eventHandlers[fullEventName]) || [];
        var baseEventObj = objectUtils.clone(eventObj);
        baseEventObj['isGlobal'] = true;
        baseEventObj.eventName = eventName;
        baseEventObj.fullEventName = eventNameArr[i];
        if (params) {
            if (params.source)
                baseEventObj.source = params.source;
            if (params.sourceData)
                baseEventObj.sourceData = params.sourceData;
            if (params.context)
                baseEventObj.context = params.context;
        }
        var ListenerTypes = ['component'];
        if (!isInternal)
            ListenerTypes.push('other');
        for (var iListenerType = 0; iListenerType < ListenerTypes.length; iListenerType++) {
            var listenerType = ListenerTypes[iListenerType];
            for (var iHandler = 0; iHandler < eventHandlers.length; iHandler++) {
                var oHandler = eventHandlers[iHandler]; //{type: 'other', handler:function, context: object}
                if (oHandler.type == listenerType) {
                    var eventObjCopy = objectUtils.clone(baseEventObj);
                    if (!eventObjCopy['context'] && oHandler.context) {
                        eventObjCopy['context'] = oHandler['context'];
                    }
                    if (!eventObjCopy['context']) {
                        delete eventObjCopy['context'];
                    }
                    //context is now taken from the call that dispatched the event
                    if (listenerType !== 'component') {
                        dispatched++;
                        InternalFlows_1.handleSpecialFields(eventObjCopy); // Make sure returned fields such as friends are returned as collections.
                    }
                    // Feature #34522
                    if (oHandler.params && oHandler.params['signKey']) {
                        eventObjCopy['UIDSignature'] = eventObj['signKeysUIDSignature'][oHandler.params['signKey']];
                        delete eventObjCopy['signKeysUIDSignature'];
                    }
                    try {
                        oHandler.handler(eventObjCopy);
                    }
                    catch (ex) {
                        LegacyLogger_1.addLog('Error while trying to invoke "' + eventObj['eventName'] + '" global event handler', ex);
                    }
                }
            }
        }
        if (!isInternal) {
            events._dispatchFromMaps(baseEventObj, true);
        }
        var GenesisExchange_Gigya = window['GenesisExchange_Gigya'];
        var gigya_omniture_conf = window['gigya_omniture_conf'];
        var myOmnitureIntegrationFunc = window['myOmnitureIntegrationFunc'];
        if (!isInternal && typeof GenesisExchange_Gigya != 'undefined' && typeof gigya_omniture_conf != 'undefined' && namespace == 'socialize') {
            var ge = new GenesisExchange_Gigya(gigya_omniture_conf);
            ge.processAction(baseEventObj);
            if (typeof myOmnitureIntegrationFunc != 'undefined') {
                myOmnitureIntegrationFunc(gigya_omniture_conf, baseEventObj);
            }
        }
    }
    return dispatched;
}
exports.dispatch = dispatch;
function dispatchWhenHandlerAdded(eventObj, params, preProcess) {
    if (params === void 0) { params = {}; }
    var eventNameSegs = eventObj['eventName'].split('.');
    var namespace = eventNameSegs.length > 1 ? eventNameSegs.shift() : 'socialize';
    var eventName = eventNameSegs[0];
    dispatchRegisteredHandlers(eventObj, params, preProcess, function (dispatched) {
        // If no handlers were dispatched, we need to wait for the handler to be added
        if (dispatched == 0) {
            var eventHandlerName = 'on' + eventName.substring(0, 1).toUpperCase() + eventName.substring(1);
            var fullEventName = namespace + '_' + eventHandlerName;
            if (!_pendingEvents[fullEventName])
                _pendingEvents[fullEventName] = [];
            _pendingEvents[fullEventName].push({ eventObj: eventObj, params: params, preProcess: preProcess });
        }
    });
}
exports.dispatchWhenHandlerAdded = dispatchWhenHandlerAdded;
function dispatchWhenHandlersAdded(eventNames, eventObj, params, preProcess) {
    if (params === void 0) { params = {}; }
    for (var _i = 0, eventNames_1 = eventNames; _i < eventNames_1.length; _i++) {
        var eventName = eventNames_1[_i];
        dispatchWhenHandlerAdded(tslib_1.__assign({ eventName: eventName }, eventObj), params, preProcess);
    }
}
exports.dispatchWhenHandlersAdded = dispatchWhenHandlersAdded;
function dispatchRegisteredHandlers(eventObj, params, preProcess, callback) {
    var fnDispatch = function (e) {
        var dispatched = 0;
        if (!e['cancel']) {
            dispatched = dispatch(e, params);
        }
        if (callback) {
            callback(dispatched);
        }
    };
    if (preProcess) {
        preProcess(eventObj, fnDispatch);
    }
    else {
        fnDispatch(eventObj);
    }
}
function getEventsForOperation(operation) {
    var activeLoginEvents = [];
    if (operation.toLowerCase().indexOf('login') != -1) {
        if (this._activeNamespaces.socialize)
            activeLoginEvents.push('socialize.login');
        if (this._activeNamespaces.accounts)
            activeLoginEvents.push('accounts.login');
    }
    else if (operation.toLowerCase().indexOf('addconnection') != -1) {
        if (this._activeNamespaces.socialize)
            activeLoginEvents.push('socialize.connectionAdded');
    }
    return activeLoginEvents.join(',');
}
exports.getEventsForOperation = getEventsForOperation;


/***/ }),

/***/ "./src/core/Gigya.Js/app/InternalFlows.ts":
/*!************************************************!*\
  !*** ./src/core/Gigya.Js/app/InternalFlows.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var LocalInfo_1 = __webpack_require__(/*! src/core/Gigya.Js/app/LocalInfo */ "./src/core/Gigya.Js/app/LocalInfo.ts");
var tokenStore = __webpack_require__(/*! src/core/Gigya.Js.Adapters.Web/app/TokenStore */ "./src/core/Gigya.Js.Adapters.Web/app/TokenStore.ts");
var localStorageUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/localStorage */ "./src/core/Gigya.Js/app/Utils/localStorage.ts");
var JSONUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/JSON */ "./src/core/Gigya.Js/app/Utils/JSON.ts");
var objectUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/object */ "./src/core/Gigya.Js/app/Utils/object.ts");
var URLUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/URL */ "./src/core/Gigya.Js/app/Utils/URL.ts");
var MessagingMethod;
(function (MessagingMethod) {
    MessagingMethod[MessagingMethod["LocalStorageListener"] = 0] = "LocalStorageListener";
    MessagingMethod[MessagingMethod["PostMessage"] = 1] = "PostMessage";
    MessagingMethod[MessagingMethod["Flash"] = 2] = "Flash";
})(MessagingMethod = exports.MessagingMethod || (exports.MessagingMethod = {}));
function checkCompleteRegistration(res, params, methodName, callback) {
    var screenSet;
    var retry;
    var pending = false;
    var providerSessionInfo;
    if (res['errorCode'] == GSErrors_1.GSErrors.AFTER_EMAIL_VERIFICATION) {
        // Handle autoLogin from registration link
        window.gigya.logger.info('finalizing registration after email verification');
        pending = true;
        window.gigya.accounts.finalizeRegistration({
            regToken: res['regToken'],
            ignoreApiQueue: true,
            callback: callback,
        });
    }
    else if (!params['ignoreInterruptions'] &&
        !params['dontHandleScreenSet'] &&
        (((res['regToken'] || params['regToken']) && // has regToken
            (res['errorCode'] == GSErrors_1.GSErrors.OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS || // socialLogin/setAccountInfo saved with loginID exist error
                res['errorCode'] == GSErrors_1.GSErrors.FORCE_LINK_LOGIN_IDENTIFIER_EXISTS || //forceLinking loginId exists
                res['errorCode'] == GSErrors_1.GSErrors.LOGIN_IDENTIFIER_EXISTS)) || // loginID exists
            res['errorCode'] == GSErrors_1.GSErrors.ACCOUNT_PENDING_REGISTRATION || // pending registration
            res['errorCode'] == GSErrors_1.GSErrors.ACCOUNT_PENDING_VERIFICATION || // pending email verification
            res['errorCode'] == GSErrors_1.GSErrors.ACCOUNT_MISSING_LOGINID || // pending LoginID
            res['errorCode'] == GSErrors_1.GSErrors.ACCOUNT_PENDING_TFA_VERIFICATION || // pending TFA verification
            res['errorCode'] == GSErrors_1.GSErrors.ACCOUNT_PENDING_TFA_REGISTRATION || // pending TFA registration
            res['errorCode'] == GSErrors_1.GSErrors.ACCOUNT_PENDING_RECENT_LOGIN || // pending recent login
            res['errorCode'] == GSErrors_1.GSErrors.PENDING_PASSWORD_CHANGE || // pending password change
            res['errorCode'] == GSErrors_1.GSErrors.PENDING_CODE_VERIFICATION) // pending code verification
    ) {
        if (res['errorCode'] == GSErrors_1.GSErrors.FORCE_LINK_LOGIN_IDENTIFIER_EXISTS) {
            providerSessionInfo = {
                access_token: res['access_token'],
                provider: res['provider'],
                provider_uid: res['provider_uid'],
                idToken: res['id_token'],
                code: res['code'],
                lastName: res['lastName'],
                firstName: res['firstName'],
            };
        }
        var newModal;
        if (res['errorCode'] == GSErrors_1.GSErrors.ACCOUNT_PENDING_RECENT_LOGIN) {
            retry = true;
            newModal = true;
        }
        if (params['defaultMobileRegScreenSet'] && LocalInfo_1.localInfo.isMobile) {
            screenSet = params['defaultMobileRegScreenSet'];
        }
        else if (params['defaultRegScreenSet']) {
            screenSet = params['defaultRegScreenSet'];
        }
    }
    if (screenSet) {
        window.gigya.logger.info("showing screenset '" + screenSet + "' for errorCode " + res['errorCode']);
        window.gigya.logger.group(screenSet);
        window.gigya.accounts.showScreenSet({
            ignoreApiQueue: true,
            newModal: newModal,
            screenSet: screenSet,
            initialMethod: methodName,
            initialResponse: res,
            suppressLoginEvent: params['suppressLoginEvent'],
            providerSessionInfo: providerSessionInfo,
            onError: function (e) {
                callback(res);
            },
            onHide: function (e) {
                window.gigya.logger.groupEnd(screenSet);
                if (e.reason === 'finished' && e.user) {
                    var successResponse = {
                        errorCode: 0,
                        userInfo: e.user,
                        source: e.source
                    };
                    callback(successResponse, true, retry);
                }
                else {
                    callback(res);
                }
            },
        });
    }
    else if (!pending) {
        callback(res);
    }
}
exports.checkCompleteRegistration = checkCompleteRegistration;
function checkGroupInvitation(params) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var confirmation, screenSet;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!params.invitationId) {
                        window.gigya.events.global.dispatchWhenHandlersAdded(['accounts.error', 'socialize.error'], {
                            status: 'MISSING_REQUIRED_PARAMETER',
                            statusMessage: 'Missing required parameter: invitationId',
                            errorCode: GSErrors_1.GSErrors.MISSING_REQUIRED_PARAMETER,
                            errorMessage: 'Missing required parameter: invitationId'
                        });
                    }
                    return [4 /*yield*/, confirmGroupInvitation(params.invitationId)];
                case 1:
                    confirmation = _a.sent();
                    if (!!confirmation.token) return [3 /*break*/, 2];
                    window.gigya.events.global.dispatchWhenHandlersAdded(['accounts.error', 'socialize.error'], confirmation);
                    return [3 /*break*/, 5];
                case 2:
                    if (!(tokenStore.get() === null)) return [3 /*break*/, 3];
                    window.gigya.accounts.addEventHandlers({
                        onLogin: function () {
                            return tslib_1.__awaiter(this, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, finalizeGroupInvitation(confirmation.token)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            });
                        }
                    });
                    screenSet = LocalInfo_1.localInfo.isMobile ? window.gigya.thisScript.globalConf.defaultMobileRegScreenSet : window.gigya.thisScript.globalConf.defaultRegScreenSet;
                    window.gigya.accounts.showScreenSet({
                        ignoreApiQueue: true,
                        screenSet: screenSet
                    });
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, finalizeGroupInvitation(confirmation.token)];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.checkGroupInvitation = checkGroupInvitation;
function confirmGroupInvitation(invitationId) {
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, new gigya.Promise(function (resolve) {
                    window.gigya.accounts.groups.invitationConfirm({
                        ignoreApiQueue: true,
                        invitationId: invitationId,
                        callback: resolve
                    });
                })];
        });
    });
}
function finalizeGroupInvitation(token) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, new gigya.Promise(function (resolve) {
                    window.gigya.accounts.groups.finalizeInvitation({
                        ignoreApiQueue: true,
                        token: token,
                        callback: function (result) {
                            if (result.errorCode !== GSErrors_1.GSErrors.OK) {
                                window.gigya.events.global.dispatchWhenHandlersAdded(['accounts.error', 'socialize.error'], result);
                            }
                            else {
                                window.gigya.events.global.dispatchWhenHandlersAdded(['accounts.finalizeGroupInvitation', 'socialize.finalizeGroupInvitation'], result);
                            }
                            resolve();
                        }
                    });
                })];
        });
    });
}
function getGigyaSettings(group) {
    var gigyaSettings = localStorageUtils.getObject('gigyaSettings');
    return JSONUtils.serialize(gigyaSettings[group]);
}
exports.getGigyaSettings = getGigyaSettings;
function setGigyaSettings(group, settings) {
    var _a;
    var gigyaSettings = localStorageUtils.getObject('gigyaSettings', (_a = {}, _a[group] = {}, _a));
    for (var p in settings) {
        gigyaSettings[group][p] = settings[p];
    }
    localStorageUtils.setItem('gigyaSettings', JSONUtils.serialize(gigyaSettings));
}
exports.setGigyaSettings = setGigyaSettings;
function delGigyaSettings(group) {
    if (!group) {
        localStorageUtils.removeItem('gigyaSettings');
    }
    else {
        var gigyaSettings = localStorageUtils.getObject('gigyaSettings');
        if (gigyaSettings) {
            delete gigyaSettings[group];
            localStorageUtils.setItem('gigyaSettings', JSONUtils.serialize(gigyaSettings));
        }
    }
}
exports.delGigyaSettings = delGigyaSettings;
function handleSpecialFields(o) {
    var collection = window.gigya.socialize.Collection;
    var toTyped = function (arr, ctor) {
        var oarr = [];
        var i = 0;
        var el = arr[i];
        while (el) {
            oarr.push(new ctor(el));
            if (oarr[i].identities) {
                convertIdentitiesArrayToObject(oarr[i]);
            }
            el = arr[++i];
        }
        return oarr;
    };
    if (o.photos)
        o.photos = new collection(o.photos, 'photoID');
    if (o.albums)
        o.albums = new collection(o.albums, 'albumID');
    if (o.contacts)
        o.contacts = new collection(toTyped(o.contacts, window.gigya.socialize.Contact), 'email');
    if (o.friend)
        o.friend = new collection(toTyped(o.friend, window.gigya.socialize.Friend), 'UID');
    if (o.user)
        o.user = new window.gigya.socialize.User(o.user);
    if (o.friends && o.friends instanceof Array) {
        var arUIDs = [];
        for (var i = 0; i < o.friends.length; i++) {
            arUIDs.push(o.friends[i].UID);
        }
        o.UIDs = arUIDs.join(',');
        o.friends = new collection(toTyped(o.friends, window.gigya.socialize.Friend), 'UID');
    }
}
exports.handleSpecialFields = handleSpecialFields;
function convertIdentitiesArrayToObject(o) {
    if (o.identities == null) {
        o.identities = {};
        return;
    }
    if (o.identities.constructor != Array) {
        return;
    }
    var identitiesArray = o.identities;
    o.identities = {};
    for (var i = 0; i < identitiesArray.length; i++) {
        o.identities[identitiesArray[i].provider] = new window.gigya.socialize.Identity(identitiesArray[i]);
    }
}
exports.convertIdentitiesArrayToObject = convertIdentitiesArrayToObject;
function addUserInfoToEvent(response, targetObject, addLoginProperties, useBasePhotoURL) {
    var oUser = response['user'] || response['userInfo'];
    if (targetObject == null)
        targetObject = {};
    if (oUser != null) {
        targetObject['user'] = objectUtils.clone(oUser);
        if (response['isLoggedIn'] != null)
            targetObject['user']['isLoggedIn'] = response['isLoggedIn'];
        if (response['isSiteUID'] != null)
            targetObject['user']['isSiteUID'] = response['isSiteUID'];
        if (response['iRank'] != null)
            targetObject['user']['iRank'] = response['iRank'];
    }
    if (addLoginProperties) {
        objectUtils.extractProperties(response, targetObject, 'signature|UIDSig|timestamp|UIDSignature|signatureTimestamp|UID|signKeysUIDSignature|dataCenter|id_token|groups');
        if (targetObject['user'] != null) {
            targetObject['UID'] = oUser.UID;
            targetObject['isSiteUID'] = oUser.isSiteUID;
            // isSiteUID is temporary for https://gigya.my.salesforce.com/5004000000T3qcZ
        }
    }
    return targetObject;
}
exports.addUserInfoToEvent = addUserInfoToEvent;
function sendEmailNative(params) {
    var userAction = params['userAction'] || {};
    var subject = userAction['title'] || '';
    var body = userAction['linkBack'] || '';
    document.location.href = 'mailto:?to=&subject=' + URLUtils.URLEncode(subject) + '&body=' + URLUtils.URLEncode(body);
    window.gigya.socialize.sendEmail(params, { dontSendEmail: true }); // To report that send without sending it
}
exports.sendEmailNative = sendEmailNative;


/***/ }),

/***/ "./src/core/Gigya.Js/app/LegacyLogger.ts":
/*!***********************************************!*\
  !*** ./src/core/Gigya.Js/app/LegacyLogger.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var objectUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/object */ "./src/core/Gigya.Js/app/Utils/object.ts");
var JSONUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/JSON */ "./src/core/Gigya.Js/app/Utils/JSON.ts");
var arrayUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/array */ "./src/core/Gigya.Js/app/Utils/array.ts");
var scriptUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/script */ "./src/core/Gigya.Js/app/Utils/script.ts");
var cdn_1 = __webpack_require__(/*! src/core/Gigya.Js/app/cdn */ "./src/core/Gigya.Js/app/cdn.ts");
var functionsUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/functions */ "./src/core/Gigya.Js/app/Utils/functions.ts");
var cookie_1 = __webpack_require__(/*! ./Utils/cookie */ "./src/core/Gigya.Js/app/Utils/cookie.ts");
exports.CONSOLE_LOG_LEVELS = ['debug', 'info', 'log', 'warn', 'error'];
exports.selectedConsoleLogLevels = [];
exports._log = [];
function enable() {
    cookie_1.default.set('_gig_dbgConsole_log', '1', null);
}
exports.enable = enable;
function disable() {
    cookie_1.default.set('_gig_dbgConsole_log', '0', null);
}
exports.disable = disable;
function _isEnabled() {
    var isManuallyEnabled = !window.gigya.localInfo.isNativeMobileApp && cookie_1.default.get('_gig_dbgConsole_log');
    if (typeof isManuallyEnabled !== 'undefined' && isManuallyEnabled != null) {
        return isManuallyEnabled === '1';
    }
    return exports.selectedConsoleLogLevels.length > 0;
}
exports._isEnabled = _isEnabled;
function addLog(title, obj, writeToConsole) {
    if (writeToConsole === void 0) { writeToConsole = false; }
    if (_isEnabled() || writeToConsole) {
        var sLog = title;
        obj = objectUtils.clone(obj, true, false, 4, null, true);
        if (obj != null)
            sLog += ':' + (typeof obj == 'object' ? '\n' : '') + JSONUtils.serialize(obj, true, true);
        if (writeToConsole && (typeof console == 'object' && console.log))
            console.log(sLog);
        if (_isEnabled()) {
            exports._log.push(sLog);
            if (document.getElementById('gigya_log') != null && show)
                show();
            var logType;
            if (arrayUtils.indexOf(exports.CONSOLE_LOG_LEVELS, title) != -1)
                logType = title;
            else
                logType = 'log';
            window.gigya._.apiAdapter.onJSLog(logType, sLog);
        }
    }
}
exports.addLog = addLog;
function logCall(name, params, lastSource) {
    if (!lastSource)
        lastSource = params.lastSource;
    addLog('Calling ' +
        name +
        (lastSource && lastSource != name ? ' for ' + lastSource : '') +
        (params.source && lastSource != params.source ? ' initiated from ' + params.source : '') +
        ' with these params', params);
}
exports.logCall = logCall;
function debug() {
    scriptUtils.load(cdn_1.getCdnResource('/js/gigya.services.socialize.plugins.log.min.js'), null, function () {
        showConfig();
    }, true);
}
exports.debug = debug;
function showLog() {
    scriptUtils.load(cdn_1.getCdnResource('/js/gigya.services.socialize.plugins.log.min.js'), null, function () {
        show();
    }, true);
}
exports.showLog = showLog;
function show() { }
exports.show = show;
function showConfig() { }
exports.showConfig = showConfig;
functionsUtils.createAlias('gigya.debug', debug);


/***/ }),

/***/ "./src/core/Gigya.Js/app/LocalInfo.ts":
/*!********************************************!*\
  !*** ./src/core/Gigya.Js/app/LocalInfo.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Local environment info (browser, capabilities, hosting domain)
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var userAgent = navigator.userAgent.toLowerCase();
exports.localInfo = {
    baseDomain: '',
    isBrowserSupportsFilesAPI: (function () {
        return typeof FileReader === 'function' || typeof FileReader === 'object';
    })(),
    initTime: new Date(),
    version: 0,
    pageDomain: document.location.hostname,
    protocol: document.location.protocol == 'http:' ? 'http' : 'https',
    userAgent: userAgent,
    isWin: userAgent.indexOf('win') != -1,
    isIE: userAgent.indexOf('msie') != -1 || (userAgent.indexOf('mozilla') != -1 && userAgent.indexOf('trident') != -1),
    isIE6: userAgent.indexOf('msie 6.') != -1,
    isIE7: userAgent.indexOf('msie 7.') != -1,
    isIE8: userAgent.indexOf('msie 8.') != -1,
    isIE9: userAgent.indexOf('msie 9.') != -1,
    isIE10: userAgent.indexOf('msie 10.') != -1,
    isIE11: userAgent.indexOf('mozilla') != -1 && userAgent.indexOf('trident/7.0') != -1,
    isEdgeLegacy: userAgent.indexOf('edge') != -1,
    isEdge: RegExp(/edg(?!e)/).test(userAgent),
    isIOS: userAgent.indexOf('iphone') != -1 || userAgent.indexOf('ipad') != -1 || userAgent.indexOf('ipod') != -1,
    isSafari534: userAgent.indexOf('safari/534') != -1,
    isWeChat: userAgent.indexOf('micromessenger') != -1,
    iosVersion: (function () {
        if (userAgent.indexOf('applewebkit') != -1 && userAgent.indexOf('version/') != -1) {
            return parseInt(userAgent.split('version/')[1].split(' ')[0]);
        }
        else
            return 0;
    })(),
    isAndroid: userAgent.indexOf('android') != -1,
    isAndroidBrowser: (function (userAgent) {
        if (userAgent.indexOf('mozilla/5.0') === -1)
            return false;
        if (userAgent.indexOf('android 4') === -1)
            return false;
        if (userAgent.indexOf('applewebkit') === -1)
            return false;
        if (userAgent.indexOf('windows phone') !== -1)
            return false;
        // Special user agents found so far that violate the existance of chrome rule
        // Bug 38367 Android Browser: Mozilla/5.0 (Linux; Android 4.2.2; en-us; SAMSUNG GT-I9500 Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Version/1.0 Chrome/18.0.1025.308 Mobile Safari/535.19
        // Bug 40209 Chrome Browser: Mozilla/5.0 (Linux; Android 4.2.2; SAMSUNG SGT-I747 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.93 Mobile Safari/537.36
        // Windows Phone Browser: Mozilla/5.0 (Mobile; Windows Phone 8.1; Android 4.0; ARM; Trident/7.0; Touch; rv:11.0; IEMobile/11.0; NOKIA; Lumia 920) like iPhone OS 7_0_3 Mac OS X AppleWebKit/537 (KHTML, like Gecko) Mobile Safari/537
        // Chrome Browser: Mozilla/5.0 (Linux; Android 4.2.2; en-gb; SAMSUNG GT-I9500 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Version/1.5 Chrome/28.0.1500.94 Mobile Safari/537.36
        var chromeInfo = /chrome\/(\d+)/.exec(userAgent);
        if (!chromeInfo)
            return true;
        var chromeVersion = parseInt(chromeInfo[1]);
        return chromeVersion < 20;
    })(userAgent),
    currentBrowser: '',
    androidVersion: (function () {
        if (userAgent.indexOf('android') != -1) {
            return parseFloat(userAgent.slice(userAgent.indexOf('android') + 8));
        }
        else
            return 0;
    })(),
    isChrome: userAgent.indexOf('chrome') != -1 && userAgent.indexOf('edg') == -1,
    isGoogleBot: userAgent.indexOf('googlebot') != -1,
    isFF: userAgent.indexOf('firefox') != -1,
    isOpera: userAgent.indexOf('opera') != -1,
    isSafari: navigator.appVersion &&
        navigator.appVersion.toLowerCase().indexOf('safari') != -1 &&
        navigator.appVersion.toLowerCase().indexOf('chrome') == -1 &&
        userAgent.indexOf('android') == -1,
    isIOSWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent),
    isIOSChrome: userAgent.indexOf('crios') != -1,
    isMAC: navigator.appVersion && navigator.appVersion.toLowerCase().indexOf('mac') != -1,
    isWindowsPhone: userAgent.indexOf('windows phone') != -1,
    isFacebookBrowser: userAgent.indexOf('fban') != -1 || userAgent.indexOf('fbav') != -1,
    supportsPostMessage: window.postMessage != null && (userAgent.indexOf('msie') == -1 || userAgent.indexOf('iemobile') != -1),
    supportsLocalStorage: false,
    supportsSessionStorage: false,
    supportsFlash: (function () {
        // http://stackoverflow.com/questions/998245/how-can-i-detect-if-flash-is-installed-and-if-not-display-a-hidden-div-that-inf
        var supportsFlash = false;
        try {
            if (navigator.mimeTypes &&
                navigator.mimeTypes['application/x-shockwave-flash'] != undefined &&
                navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
                supportsFlash = true;
            }
            else {
                var fo = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
                if (fo) {
                    supportsFlash = true;
                }
            }
        }
        catch (e) { }
        return supportsFlash;
    })(),
    quirksMode: document.compatMode == 'BackCompat' && userAgent.indexOf('msie') != -1,
    backCompat: document.compatMode == 'BackCompat',
    // TODO: Add isTablet function for devices non-Mobile
    isMobile: (function () {
        var mobileClients = [
            'iphone',
            'ipod',
            'android',
            'midp',
            '240x320',
            'blackberry',
            'netfront',
            'nokia',
            'panasonic',
            'portalmmm',
            'sharp',
            'sie-',
            'sonyericsson',
            'symbian',
            'windows ce',
            'benq',
            'mda',
            'mot-',
            'opera mini',
            'philips',
            'pocket pc',
            'sagem',
            'samsung',
            'htc',
        ];
        for (var i in mobileClients) {
            if (userAgent.indexOf(mobileClients[i]) != -1) {
                return true;
            }
        }
        return false;
    })(),
    isMobileApp: (function () {
        if (!document.getElementsByTagName)
            // for old IE
            return false;
        var metaTags = document.getElementsByTagName('meta');
        for (var i = 0; i < metaTags.length; i++) {
            if (metaTags[i].getAttribute('name') == 'viewport') {
                var content = metaTags[i].getAttribute('content');
                if (content && content.indexOf('width=device-width') !== -1)
                    return true;
            }
        }
        return false;
    })(),
    isNativeMobileApp: false,
    isTouch: (function () {
        if ('ontouchstart' in window)
            // works on most browsers
            return true;
        if ('onmsgesturechange' in window) {
            // works on ie10
            // Try to determine if IE is open in metro mode. Metro doesn't allow activeX, that's the best test available as of IE11.
            try {
                new ActiveXObject('htmlfile');
                return false;
            }
            catch (e) {
                return true;
            }
        }
        return false;
    })(),
    isOnLine: function () { return navigator.onLine; },
    messagingMethod: 1
};
var isStorageEnabled = function (storageName) {
    try {
        var storage = window[storageName];
        if (!storage) {
            return false;
        }
        var testName = '_gig_localStorage_test';
        var testValue = 'just checking for localStorage';
        storage.setItem(testName, testValue);
        var result = storage.getItem(testName) === testValue;
        storage.removeItem(testName);
        return result;
    }
    catch (ex) {
        // Reasons:
        // - Inside 3rd party API proxy iFrame.
        // - Safari in incognito mode will error with "quota exceeded".
        // - Chrome with 3rd party cookies disabled will throw an error if you access the window.localStorage object in ANY way.
        return false;
    }
};
exports.localInfo.supportsLocalStorage = isStorageEnabled('localStorage');
exports.localInfo.supportsSessionStorage = isStorageEnabled('sessionStorage');
exports.localInfo.isMAC = exports.localInfo.isMAC && !exports.localInfo.isIOS;
var os = exports.localInfo.isWin
    ? 'windows'
    : exports.localInfo.isWindowsPhone
        ? 'winphone'
        : exports.localInfo.isIOS
            ? 'ios-v' + exports.localInfo.iosVersion
            : exports.localInfo.isMAC
                ? 'mac'
                : exports.localInfo.isAndroid
                    ? 'android'
                    : '';
if (os)
    os += ' ';
var browser = exports.localInfo.isChrome
    ? 'chrome'
    : exports.localInfo.isFF
        ? 'firefox'
        : exports.localInfo.isSafari
            ? 'safari'
            : exports.localInfo.isEdge
                ? 'edge'
                : exports.localInfo.isEdgeLegacy
                    ? 'edge legacy'
                    : exports.localInfo.isIE11
                        ? 'ie11'
                        : exports.localInfo.isIE10
                            ? 'ie10'
                            : exports.localInfo.isIE9
                                ? 'ie9'
                                : exports.localInfo.isIE8
                                    ? 'ie8'
                                    : '';
exports.localInfo.currentBrowser = os + browser;
var ClientFeature = /** @class */ (function () {
    function ClientFeature(navigator, screen) {
        if (navigator === void 0) { navigator = window.gigya._.WindowProvider.navigator(); }
        if (screen === void 0) { screen = window.gigya._.WindowProvider.screen(); }
        this.navigator = navigator;
        this.screen = screen;
        this.collectData();
    }
    ClientFeature.prototype.collectData = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var permissionStatus, state, batteryInfo, _h, charging, chargingTime, dischargingTime, level;
            return tslib_1.__generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        this.userAgent = (_a = this.navigator) === null || _a === void 0 ? void 0 : _a.userAgent;
                        this.plugins = Array.from(((_b = this.navigator) === null || _b === void 0 ? void 0 : _b.plugins) || []).map(function (_a) {
                            var name = _a.name, filename = _a.filename, length = _a.length;
                            return ({ name: name, filename: filename, length: length });
                        });
                        this.localTime = new Date().toLocaleTimeString();
                        this.timezoneOffset = new Date().getTimezoneOffset();
                        return [4 /*yield*/, ((_d = (_c = this.navigator) === null || _c === void 0 ? void 0 : _c.permissions) === null || _d === void 0 ? void 0 : _d.query({ name: 'notifications' }))];
                    case 1:
                        permissionStatus = _j.sent();
                        if (permissionStatus) {
                            state = permissionStatus.state;
                            this.permissionStatus = { state: state };
                        }
                        this.webdriver = (_e = this.navigator) === null || _e === void 0 ? void 0 : _e.webdriver;
                        _h = this.navigator.getBattery;
                        if (!_h) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.navigator.getBattery()];
                    case 2:
                        _h = (_j.sent());
                        _j.label = 3;
                    case 3:
                        batteryInfo = _h;
                        if (batteryInfo) {
                            charging = batteryInfo.charging, chargingTime = batteryInfo.chargingTime, dischargingTime = batteryInfo.dischargingTime, level = batteryInfo.level;
                            this.batteryInfo = { charging: charging, chargingTime: chargingTime, dischargingTime: dischargingTime, level: level };
                        }
                        this.features = [
                            ((_f = this.navigator) === null || _f === void 0 ? void 0 : _f.maxTouchPoints) || ((_g = this.navigator) === null || _g === void 0 ? void 0 : _g.msMaxTouchPoints),
                            this.screen.width + "|" + this.screen.height + "|" + this.screen.colorDepth,
                            this.navigator.javaEnabled(),
                            'sendBeacon' in this.navigator
                        ];
                        return [2 /*return*/];
                }
            });
        });
    };
    return ClientFeature;
}());
exports.ClientFeature = ClientFeature;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Oauth/OauthService.ts":
/*!*****************************************************!*\
  !*** ./src/core/Gigya.Js/app/Oauth/OauthService.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var promise_1 = __webpack_require__(/*! ../Utils/promise */ "./src/core/Gigya.Js/app/Utils/promise.ts");
exports.DefaultGrantType = 'authorization_code';
exports.Oauth_Response_Type = 'code';
var OauthService = /** @class */ (function () {
    function OauthService() {
    }
    OauthService.prototype.register = function (params) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var idToken, rest, res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        idToken = params.idToken, rest = tslib_1.__rest(params, ["idToken"]);
                        window.gigya._.apiAdapters.web.tokenStore.setBearerToken(idToken);
                        return [4 /*yield*/, promise_1.promisify(window.gigya.oauth.register, tslib_1.__assign({}, rest))];
                    case 1:
                        res = _a.sent();
                        window.gigya._.apiAdapters.web.tokenStore.removeBearerToken();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    ;
    OauthService.prototype.connect = function (_a) {
        var idToken = _a.idToken, regToken = _a.regToken, ignoreApiQueue = _a.ignoreApiQueue;
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var res;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        window.gigya._.apiAdapters.web.tokenStore.setBearerToken(idToken);
                        return [4 /*yield*/, promise_1.promisify(window.gigya.oauth.connect, {
                                regToken: regToken, ignoreApiQueue: ignoreApiQueue
                            })];
                    case 1:
                        res = _b.sent();
                        window.gigya._.apiAdapters.web.tokenStore.removeBearerToken();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    ;
    OauthService.prototype.authorize = function (params) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        window.gigya._.apiAdapters.web.tokenStore.setBearerToken(params.idToken);
                        return [4 /*yield*/, promise_1.promisify(window.gigya.oauth.authorize, {
                                response_type: exports.Oauth_Response_Type
                            })];
                    case 1:
                        res = _a.sent();
                        window.gigya._.apiAdapters.web.tokenStore.removeBearerToken();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    OauthService.prototype.token = function (_a) {
        var grantType = _a.grantType, sessionExpiration = _a.sessionExpiration, code = _a.code, dontHandleScreenSet = _a.dontHandleScreenSet;
        return promise_1.promisify(window.gigya.oauth.token, {
            code: code,
            grant_type: grantType || exports.DefaultGrantType,
            sessionExpiration: sessionExpiration || '0',
            dontHandleScreenSet: dontHandleScreenSet || false
        });
    };
    return OauthService;
}());
exports.OauthService = OauthService;
exports.default = new OauthService();


/***/ }),

/***/ "./src/core/Gigya.Js/app/Passkey/CredentialService.ts":
/*!************************************************************!*\
  !*** ./src/core/Gigya.Js/app/Passkey/CredentialService.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils_1 = __webpack_require__(/*! ./utils */ "./src/core/Gigya.Js/app/Passkey/utils.ts");
var GSErrors_1 = __webpack_require__(/*! ../GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
exports.errorMap = {
    ConstraintError: {
        errorCode: GSErrors_1.GSErrors.NOT_SUPPORTED,
        errorDetails: 'Discoverable credentials were required but no available authenticator supported'
    },
    InvalidStateError: {
        errorCode: GSErrors_1.GSErrors.PASSKEY_AUTHENTICATOR_REGISTERED,
        errorDetails: 'The authenticator was previously registered'
    },
    NotAllowedError: {
        errorCode: GSErrors_1.GSErrors.OPERATION_CANCELED,
        errorDetails: 'User clicked cancel, or the registration ceremony timed out'
    },
    NotSupportedError: {
        errorCode: GSErrors_1.GSErrors.NOT_SUPPORTED,
        errorDetails: 'No available authenticator supported any of the specified pubKeyCredParams algorithms'
    },
    SecurityError: {
        errorCode: GSErrors_1.GSErrors.INVALID_SITE_CONFIGURATION_ERROR,
        errorDetails: "Hostname is an invalid domain / The RP ID is invalid for this domain"
    },
    TypeError: {
        errorCode: GSErrors_1.GSErrors.INVALID_SITE_CONFIGURATION_ERROR,
        errorDetails: "User ID was not between 1 and 64 characters"
    },
    AbortError: {
        errorCode: GSErrors_1.GSErrors.PASSKEY_ABORTED,
        errorDetails: 'Authentication ceremony was sent an abort signal'
    },
    UnknownError: {
        errorCode: GSErrors_1.GSErrors.PASSKEY_ERROR,
        errorDetails: 'The authenticator was unable to process the specified options, or could not create a new credential'
    },
    CredentialError: {
        errorCode: GSErrors_1.GSErrors.PASSKEY_ERROR,
        errorDetails: 'Unable to create/get credential'
    }
};
var CredentialService = /** @class */ (function () {
    function CredentialService() {
        this.abortService = new PasskeyAbortService();
    }
    Object.defineProperty(CredentialService.prototype, "credentials", {
        get: function () {
            return window.gigya._.WindowProvider.navigator().credentials;
        },
        enumerable: true,
        configurable: true
    });
    CredentialService.prototype.isConditionalMediationAvailable = function (pubKeyCred) {
        if (pubKeyCred === void 0) { pubKeyCred = PublicKeyCredential; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof pubKeyCred.isConditionalMediationAvailable === 'function')) return [3 /*break*/, 2];
                        return [4 /*yield*/, (pubKeyCred === null || pubKeyCred === void 0 ? void 0 : pubKeyCred.isConditionalMediationAvailable())];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, false];
                }
            });
        });
    };
    CredentialService.prototype.isSupported = function () {
        var _a, _b;
        return !(typeof this.credentials !== 'object' ||
            typeof ((_a = this.credentials) === null || _a === void 0 ? void 0 : _a.create) !== 'function' ||
            typeof ((_b = this.credentials) === null || _b === void 0 ? void 0 : _b.get) !== 'function');
    };
    CredentialService.prototype.get = function (options, mediation) {
        if (mediation === void 0) { mediation = undefined; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var publicKey, signal, _a, credential, error_1, id, rawId, response, type;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        publicKey = this.createPKCredentialRequest(options);
                        signal = this.abortService.createNewAbortSignal();
                        _a = mediation === 'conditional';
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.isConditionalMediationAvailable()];
                    case 1:
                        _a = !(_b.sent());
                        _b.label = 2;
                    case 2:
                        if (_a) {
                            mediation = undefined;
                        }
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.credentials.get({
                                mediation: mediation,
                                publicKey: publicKey,
                                signal: signal
                            })];
                    case 4:
                        credential = _b.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _b.sent();
                        throw exports.errorMap[error_1 === null || error_1 === void 0 ? void 0 : error_1.name] || exports.errorMap.UnknownError;
                    case 6:
                        if (!credential) {
                            throw exports.errorMap.CredentialError;
                        }
                        id = credential.id, rawId = credential.rawId, response = credential.response, type = credential.type;
                        return [2 /*return*/, {
                                id: id,
                                type: type,
                                rawId: utils_1.bufferToBase64URLString(rawId),
                                extensions: credential.getClientExtensionResults(),
                                response: {
                                    authenticatorData: utils_1.bufferToBase64URLString(response.authenticatorData),
                                    clientDataJSON: utils_1.bufferToBase64URLString(response.clientDataJSON),
                                    signature: utils_1.bufferToBase64URLString(response.signature),
                                    userHandle: null
                                }
                            }];
                }
            });
        });
    };
    CredentialService.prototype.create = function (options) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var publicKey, signal, credential, error_2, id, rawId, response, type, transport;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        publicKey = this.createPKCredentialCreate(options);
                        signal = this.abortService.createNewAbortSignal();
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.credentials.create({
                                signal: signal,
                                publicKey: publicKey
                            })];
                    case 2:
                        credential = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _b.sent();
                        throw exports.errorMap[error_2 === null || error_2 === void 0 ? void 0 : error_2.name] || exports.errorMap.UnknownError;
                    case 4:
                        if (!credential) {
                            throw exports.errorMap.CredentialError;
                        }
                        id = credential.id, rawId = credential.rawId, response = credential.response, type = credential.type;
                        transport = undefined;
                        if (typeof response.getTransports === 'function') {
                            transport = response.getTransports();
                        }
                        return [2 /*return*/, {
                                id: id,
                                type: type,
                                rawId: utils_1.bufferToBase64URLString(rawId),
                                response: {
                                    attestationObject: utils_1.bufferToBase64URLString(response.attestationObject),
                                    clientDataJSON: utils_1.bufferToBase64URLString(response.clientDataJSON),
                                    transport: transport
                                },
                                clientExtensionResults: credential.getClientExtensionResults(),
                                authenticatorSelection: tslib_1.__assign(tslib_1.__assign({}, options.authenticatorSelection), { authenticatorAttachment: ((_a = options.authenticatorSelection) === null || _a === void 0 ? void 0 : _a.authenticatorAttachment) || undefined }),
                                attestation: options.attestation || 'direct'
                            }];
                }
            });
        });
    };
    CredentialService.prototype.abortCurrentCeremony = function () {
        this.abortService.abort();
    };
    CredentialService.prototype.createPKCredentialRequest = function (options) {
        var _a;
        var allowCredentials;
        if (((_a = options.allowCredentials) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            allowCredentials = options.allowCredentials.map(function (c) {
                return tslib_1.__assign(tslib_1.__assign({}, c), { id: utils_1.base64URLStringToBuffer(c.id) });
            });
        }
        return tslib_1.__assign(tslib_1.__assign({}, options), { challenge: utils_1.base64URLStringToBuffer(options.challenge), allowCredentials: allowCredentials });
    };
    CredentialService.prototype.createPKCredentialCreate = function (options) {
        var _a;
        return tslib_1.__assign(tslib_1.__assign({}, options), { challenge: utils_1.base64URLStringToBuffer(options.challenge), user: tslib_1.__assign(tslib_1.__assign({}, options.user), { id: utils_1.utf8StringToBuffer(options.user.id) }), excludeCredentials: (_a = options.excludeCredentials) === null || _a === void 0 ? void 0 : _a.map(function (c) {
                return tslib_1.__assign(tslib_1.__assign({}, c), { id: utils_1.base64URLStringToBuffer(c.id) });
            }) });
    };
    return CredentialService;
}());
exports.CredentialService = CredentialService;
var PasskeyAbortService = /** @class */ (function () {
    function PasskeyAbortService() {
    }
    PasskeyAbortService.prototype.createNewAbortSignal = function () {
        if (this.controller) {
            this.controller.abort();
        }
        var newController = new AbortController();
        this.controller = newController;
        return newController.signal;
    };
    PasskeyAbortService.prototype.abort = function () {
        var _a;
        (_a = this.controller) === null || _a === void 0 ? void 0 : _a.abort();
        this.controller = null;
    };
    return PasskeyAbortService;
}());
exports.default = new CredentialService();


/***/ }),

/***/ "./src/core/Gigya.Js/app/Passkey/PasskeyService.ts":
/*!*********************************************************!*\
  !*** ./src/core/Gigya.Js/app/Passkey/PasskeyService.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var OauthService_1 = __webpack_require__(/*! ../Oauth/OauthService */ "./src/core/Gigya.Js/app/Oauth/OauthService.ts");
var GSErrors_1 = __webpack_require__(/*! ../GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var promise_1 = __webpack_require__(/*! ../Utils/promise */ "./src/core/Gigya.Js/app/Utils/promise.ts");
var globalEvents = __webpack_require__(/*! src/core/Gigya.Js/app/GlobalEvents */ "./src/core/Gigya.Js/app/GlobalEvents.ts");
var CredentialService_1 = __webpack_require__(/*! ./CredentialService */ "./src/core/Gigya.Js/app/Passkey/CredentialService.ts");
var PasskeyService = /** @class */ (function () {
    function PasskeyService() {
        this.eventHandlers = new Map();
    }
    PasskeyService.prototype.on = function (event, handler) {
        if (!this.eventHandlers.get(event)) {
            this.eventHandlers.set(event, []);
        }
        this.eventHandlers.get(event).push(handler);
    };
    PasskeyService.prototype.remove = function (event, handler) {
        var _a;
        this.eventHandlers.set(event, (_a = this.eventHandlers.get(event)) === null || _a === void 0 ? void 0 : _a.filter(function (fn) { return fn !== handler; }));
    };
    PasskeyService.prototype.isSupported = function () {
        return CredentialService_1.default.isSupported();
    };
    PasskeyService.prototype.isConditionalMediationAvailable = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, CredentialService_1.default.isConditionalMediationAvailable()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PasskeyService.prototype.authenticate = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.runOneAtATime(function () { return _this.internalAuthenticate(params); }, (params === null || params === void 0 ? void 0 : params.abortCurrentCeremony) || false)];
            });
        });
    };
    PasskeyService.prototype.registerPasskey = function (params, abortCurrentCeremony) {
        if (params === void 0) { params = {}; }
        if (abortCurrentCeremony === void 0) { abortCurrentCeremony = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                if (params.aToken) {
                    return [2 /*return*/, this.runOneAtATime(function () { return _this.internalRegister(params); }, abortCurrentCeremony)];
                }
                return [2 /*return*/, this.runOneAtATime(function () { return _this.internalConnect(params); }, abortCurrentCeremony)];
            });
        });
    };
    PasskeyService.prototype.removePasskey = function (credentialId, regToken) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, promise_1.promisify(window.gigya.accounts.auth.fido.removeCredential, {
                            credentialId: credentialId,
                            regToken: regToken,
                            ignoreApiQueue: true
                        })];
                    case 1:
                        response = _a.sent();
                        if (response.errorCode === GSErrors_1.GSErrors.OK) {
                            this.dispatchEvent('passkeyRemoved', {
                                credentialId: credentialId,
                                response: response
                            });
                        }
                        return [2 /*return*/, response];
                }
            });
        });
    };
    PasskeyService.prototype.getPasskeys = function (regToken) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, promise_1.promisify(window.gigya.accounts.auth.fido.getCredentials, {
                            regToken: regToken,
                            ignoreApiQueue: true
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PasskeyService.prototype.waitForService = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.currentRun];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PasskeyService.prototype.abortCurrentCeremony = function () {
        CredentialService_1.default.abortCurrentCeremony();
    };
    PasskeyService.prototype.dispatchEvent = function (event, data) {
        for (var _i = 0, _a = this.eventHandlers.get(event) || []; _i < _a.length; _i++) {
            var fn = _a[_i];
            fn(data);
        }
        globalEvents.dispatch(tslib_1.__assign({ eventName: "passkey." + event }, data));
    };
    PasskeyService.prototype.runOneAtATime = function (func, abortCurrentCeremony) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isSupported()) {
                            throw CredentialService_1.errorMap.NotSupportedError;
                        }
                        if (abortCurrentCeremony) {
                            CredentialService_1.default.abortCurrentCeremony();
                        }
                        return [4 /*yield*/, this.waitForService()];
                    case 1:
                        _a.sent();
                        this.currentRun = func();
                        return [2 /*return*/, this.currentRun];
                }
            });
        });
    };
    PasskeyService.prototype.internalRegister = function (params) {
        if (params === void 0) { params = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var createCredRes, lang, sessionExpiration, context, regSource, cid, source, regResponse, response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createAndRegisterCredential(params)];
                    case 1:
                        createCredRes = _a.sent();
                        lang = params.lang, sessionExpiration = params.sessionExpiration, context = params.context, regSource = params.regSource, cid = params.cid, source = params.source;
                        return [4 /*yield*/, OauthService_1.default.register({
                                idToken: createCredRes.idToken,
                                ignoreApiQueue: true,
                                ignoreInterruptions: true,
                                provider: 'site',
                                source: source, lang: lang, sessionExpiration: sessionExpiration, context: context, regSource: regSource, cid: cid
                            })];
                    case 2:
                        regResponse = _a.sent();
                        return [4 /*yield*/, promise_1.promisify(window.gigya.accounts.finalizeRegistration, {
                                regToken: regResponse.regToken,
                                ignoreInterruptions: true,
                                ignoreApiQueue: true,
                                provider: 'site',
                                source: source, context: context
                            })];
                    case 3:
                        response = _a.sent();
                        if (response.errorCode === GSErrors_1.GSErrors.OK) {
                            this.dispatchEvent('passkeyAdded', { response: createCredRes });
                        }
                        return [2 /*return*/, tslib_1.__assign(tslib_1.__assign({}, response), { regToken: regResponse.regToken })];
                }
            });
        });
    };
    PasskeyService.prototype.internalConnect = function (params) {
        if (params === void 0) { params = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var createCredRes, response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createAndRegisterCredential(params)];
                    case 1:
                        createCredRes = _a.sent();
                        return [4 /*yield*/, OauthService_1.default.connect({
                                idToken: createCredRes.idToken,
                                regToken: params.regToken,
                                ignoreApiQueue: true
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.errorCode === GSErrors_1.GSErrors.OK) {
                            this.dispatchEvent('passkeyAdded', { response: createCredRes });
                        }
                        return [2 /*return*/, response];
                }
            });
        });
    };
    PasskeyService.prototype.internalAuthenticate = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, token, options, authenticatorAssertion, verifyAssertionResponse, authorizeResponse;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, PasskeyService.getAssertionOptions()];
                    case 1:
                        _a = _b.sent(), token = _a[0], options = _a[1];
                        return [4 /*yield*/, CredentialService_1.default.get(options, params === null || params === void 0 ? void 0 : params.mediation)];
                    case 2:
                        authenticatorAssertion = _b.sent();
                        return [4 /*yield*/, promise_1.promisify(window.gigya.accounts.auth.fido.verifyAssertion, {
                                authenticatorAssertion: authenticatorAssertion,
                                token: token,
                                ignoreApiQueue: true
                            })];
                    case 3:
                        verifyAssertionResponse = _b.sent();
                        if (verifyAssertionResponse.errorCode !== GSErrors_1.GSErrors.OK || !verifyAssertionResponse.idToken) {
                            throw verifyAssertionResponse;
                        }
                        return [4 /*yield*/, OauthService_1.default.authorize({
                                idToken: verifyAssertionResponse.idToken,
                                ignoreApiQueue: true
                            })];
                    case 4:
                        authorizeResponse = _b.sent();
                        if (authorizeResponse.errorCode !== GSErrors_1.GSErrors.OK || !authorizeResponse.code) {
                            throw authorizeResponse;
                        }
                        return [4 /*yield*/, OauthService_1.default.token({
                                code: authorizeResponse.code,
                                dontHandleScreenSet: (params === null || params === void 0 ? void 0 : params.dontHandleScreenSet) || true,
                                sessionExpiration: params === null || params === void 0 ? void 0 : params.sessionExpiration,
                                ignoreApiQueue: true
                            })];
                    case 5: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    PasskeyService.prototype.createAndRegisterCredential = function (params) {
        if (params === void 0) { params = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, token, options, attestation, regToken, deviceName, ignoreInterruptions, registerCredentialsResponse;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, PasskeyService.getRegistrationOptions(params)];
                    case 1:
                        _a = _b.sent(), token = _a[0], options = _a[1];
                        return [4 /*yield*/, CredentialService_1.default.create(options)];
                    case 2:
                        attestation = _b.sent();
                        regToken = params.regToken, deviceName = params.deviceName, ignoreInterruptions = params.ignoreInterruptions;
                        return [4 /*yield*/, promise_1.promisify(window.gigya.accounts.auth.fido.registerCredentials, {
                                token: token,
                                attestation: attestation,
                                deviceName: deviceName,
                                regToken: regToken,
                                ignoreApiQueue: true
                            })];
                    case 3:
                        registerCredentialsResponse = _b.sent();
                        if (registerCredentialsResponse.errorCode !== GSErrors_1.GSErrors.OK || !registerCredentialsResponse.idToken) {
                            throw registerCredentialsResponse;
                        }
                        return [2 /*return*/, registerCredentialsResponse];
                }
            });
        });
    };
    PasskeyService.getAssertionOptions = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var requestOptions, options;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, promise_1.promisify(window.gigya.accounts.auth.fido.getAssertionOptions, {
                            ignoreApiQueue: true
                        })];
                    case 1:
                        requestOptions = _a.sent();
                        if (requestOptions.errorCode !== GSErrors_1.GSErrors.OK || !requestOptions.options || !requestOptions.token) {
                            throw requestOptions;
                        }
                        options = JSON.parse(requestOptions.options);
                        return [2 /*return*/, [requestOptions.token, options]];
                }
            });
        });
    };
    PasskeyService.getRegistrationOptions = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var requestOptions, options;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, promise_1.promisify(window.gigya.accounts.auth.fido.initRegisterCredentials, tslib_1.__assign(tslib_1.__assign({}, params), { ignoreApiQueue: true }))];
                    case 1:
                        requestOptions = _a.sent();
                        if (requestOptions.errorCode !== GSErrors_1.GSErrors.OK || !requestOptions.options || !requestOptions.token) {
                            throw requestOptions;
                        }
                        options = JSON.parse(requestOptions.options);
                        return [2 /*return*/, [requestOptions.token, options]];
                }
            });
        });
    };
    return PasskeyService;
}());
exports.PasskeyService = PasskeyService;
exports.default = new PasskeyService();


/***/ }),

/***/ "./src/core/Gigya.Js/app/Passkey/utils.ts":
/*!************************************************!*\
  !*** ./src/core/Gigya.Js/app/Passkey/utils.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function utf8StringToBuffer(value) {
    return new TextEncoder().encode(value);
}
exports.utf8StringToBuffer = utf8StringToBuffer;
function bufferToUTF8String(value) {
    return new TextDecoder('utf-8').decode(value);
}
exports.bufferToUTF8String = bufferToUTF8String;
function bufferToBase64URLString(buffer) {
    var bytes = new Uint8Array(buffer);
    var str = '';
    for (var i = 0; i < bytes.length; i++) {
        str += String.fromCharCode(bytes[i]);
    }
    var base64String = btoa(str);
    return base64String.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
}
exports.bufferToBase64URLString = bufferToBase64URLString;
function base64URLStringToBuffer(base64URLString) {
    // Convert from Base64URL to Base64
    var base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');
    /**
     * Pad with '=' until it's a multiple of four
     * (4 - (85 % 4 = 1) = 3) % 4 = 3 padding
     * (4 - (86 % 4 = 2) = 2) % 4 = 2 padding
     * (4 - (87 % 4 = 3) = 1) % 4 = 1 padding
     * (4 - (88 % 4 = 0) = 4) % 4 = 0 padding
     */
    var padLength = (4 - (base64.length % 4)) % 4;
    var padded = base64.padEnd(base64.length + padLength, '=');
    // Convert to a binary string
    var binary = atob(padded);
    // Convert binary string to buffer
    var buffer = new ArrayBuffer(binary.length);
    var bytes = new Uint8Array(buffer);
    for (var i = 0; i < binary.length; i++) {
        bytes[i] = binary.charCodeAt(i);
    }
    return buffer;
}
exports.base64URLStringToBuffer = base64URLStringToBuffer;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Services/FlagService.ts":
/*!*******************************************************!*\
  !*** ./src/core/Gigya.Js/app/Services/FlagService.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var FlagService = /** @class */ (function () {
    function FlagService() {
    }
    Object.defineProperty(FlagService, "forceWebSdkBootstrap", {
        get: function () {
            return this.get('forceWebSdkBootstrap');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "useGigyaJsBaseDomain", {
        get: function () {
            return this.get('useGigyaJsBaseDomain');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "hideSSOFrame", {
        get: function () {
            return this.get('hideSSOFrame');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "wcagContrastFix", {
        get: function () {
            return this.get('wcagContrastFix');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "newFormLinkInstanceElement", {
        get: function () {
            return this.get('newFormLinkInstanceElement');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "stopSendingReports", {
        get: function () {
            return this.get('stopSendingReports');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "setGroupApiDomainAfterLogin", {
        get: function () {
            return this.get('setGroupApiDomainAfterLogin');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "useHttpStatusCode", {
        get: function () {
            return this.get('useHttpStatusCode');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "alwaysCheckCookieSave", {
        get: function () {
            return this.get('alwaysCheckCookieSave');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "fixPhoneTFATranslations", {
        get: function () {
            return this.get('fixPhoneTFATranslations');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "loadSsoFrameOnlyOnce", {
        get: function () {
            return this.get('loadSsoFrameOnlyOnce');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "verifyLoginOnlyOnce", {
        get: function () {
            return this.get('verifyLoginOnlyOnce');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "sendLangForEmailOTP", {
        get: function () {
            return this.get('sendLangForEmailOTP');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "setProviderFromResponse", {
        get: function () {
            return this.get('setProviderFromResponse');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "setCookieSameSiteLaxSession", {
        get: function () {
            return this.get('setCookieSameSiteLaxSession');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "setCookieSameSiteLaxSocial", {
        get: function () {
            return this.get('setCookieSameSiteLaxSocial');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "setCookieSameSiteLaxLowPriority", {
        get: function () {
            return this.get('setCookieSameSiteLaxLowPriority');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "forceErrorReport", {
        get: function () {
            return this.get('forceErrorReport');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "skipSameScreenCheckOnSwitch", {
        get: function () {
            return this.get('skipSameScreenCheckOnSwitch');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "getOnlyVisibleField", {
        get: function () {
            return this.get('getOnlyVisibleField');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "updateAccountInfoAsync", {
        get: function () {
            return this.get('updateAccountInfoAsync');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "sanitizeEvaluatedValue", {
        get: function () {
            return this.get('sanitizeEvaluatedValue');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "useSessionVerify", {
        get: function () {
            return this.get('useSessionVerify');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "useExtendedPhoneNumberRegex", {
        get: function () {
            return this.get('useExtendedPhoneNumberRegex');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "generateNewCodeWcagCompliance", {
        get: function () {
            return this.get('generateNewCodeWcagCompliance');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "enforceAuthFlowRedirectForSocial", {
        get: function () {
            return this.get('enforceAuthFlowRedirectForSocial');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "useDecodeURIComponent", {
        get: function () {
            return this.get('useDecodeURIComponent');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "useOidcGetParamHashOldStyle", {
        get: function () {
            return this.get('useOidcGetParamHashOldStyle');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "useViewportPollerAction", {
        get: function () {
            return this.get('useViewportPollerAction');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "ignoreInterruptionsInOidcPassiveLogin", {
        get: function () {
            return this.get('ignoreInterruptionsInOidcPassiveLogin');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "overrideAllChildContext", {
        get: function () {
            return this.get('overrideAllChildContext');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagService, "dispatchLoginEventWhenHandlerAdded", {
        get: function () {
            return this.get('dispatchLoginEventWhenHandlerAdded');
        },
        enumerable: true,
        configurable: true
    });
    FlagService.get = function (name) {
        var _a, _b;
        return (((_a = window.gigya._.config) === null || _a === void 0 ? void 0 : _a.flags) && ((_b = window.gigya._.config) === null || _b === void 0 ? void 0 : _b.flags[name])) || false;
    };
    Object.defineProperty(FlagService, "apiFlags", {
        // Every flag that is associated with data modification related to the api layer
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    return FlagService;
}());
exports.FlagService = FlagService;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Services/SessionService.ts":
/*!**********************************************************!*\
  !*** ./src/core/Gigya.Js/app/Services/SessionService.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var sessionCache_1 = __webpack_require__(/*! ../Utils/sessionCache */ "./src/core/Gigya.Js/app/Utils/sessionCache.ts");
var object_1 = __webpack_require__(/*! ../Utils/object */ "./src/core/Gigya.Js/app/Utils/object.ts");
var SessionService = /** @class */ (function () {
    function SessionService() {
    }
    SessionService.prototype.isSessionVerified = function (glt, apiKey) {
        if (apiKey === void 0) { apiKey = window.gigya.thisScript.APIKey; }
        var key = this.createKey(glt, apiKey);
        return sessionCache_1.get(key) === 'true';
    };
    SessionService.prototype.setIsSessionVerified = function (glt, verified, apiKey) {
        if (apiKey === void 0) { apiKey = window.gigya.thisScript.APIKey; }
        var key = this.createKey(glt, apiKey);
        sessionCache_1.set(key, "" + verified);
    };
    SessionService.prototype.createKey = function (glt, apiKey) {
        var key = object_1.getMurmurHash(glt + "_" + apiKey, 15).toString();
        return btoa(key);
    };
    return SessionService;
}());
exports.sessionData = new SessionService();


/***/ }),

/***/ "./src/core/Gigya.Js/app/Services/SiteData.ts":
/*!****************************************************!*\
  !*** ./src/core/Gigya.Js/app/Services/SiteData.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var localStorage_1 = __webpack_require__(/*! ../Utils/localStorage */ "./src/core/Gigya.Js/app/Utils/localStorage.ts");
var object_1 = __webpack_require__(/*! ../Utils/object */ "./src/core/Gigya.Js/app/Utils/object.ts");
var _merge = __webpack_require__(/*! lodash.merge */ "../node_modules/lodash.merge/index.js");
var MAX_LIMIT_OF_USERS_PREFERRED_LOGIN_METHODS_PER_SITE = 10;
var SiteDataService = /** @class */ (function () {
    function SiteDataService() {
    }
    Object.defineProperty(SiteDataService, "SITE_PREFERENCES_KEY", {
        get: function () {
            return window.gigya.apiKey + "_preferences";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SiteDataService, "SITE_GIG_KEY", {
        get: function () {
            return window.gigya.apiKey + "_gig";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SiteDataService.prototype, "didForcedBootstrap", {
        get: function () {
            return this.getDataByKey(SiteDataService.SITE_GIG_KEY).didForcedBootstrap || null;
        },
        set: function (didForcedBootstrap) {
            this.setDataByKey(SiteDataService.SITE_GIG_KEY, { didForcedBootstrap: didForcedBootstrap });
        },
        enumerable: true,
        configurable: true
    });
    SiteDataService.prototype.getPreferredLoginMethod = function (identifier) {
        var _a, _b, _c, _d;
        if (!identifier) {
            return '';
        }
        var userPreferences = this.getDataByKey(SiteDataService.SITE_PREFERENCES_KEY);
        var usersPreferredLoginMethods = (_b = (_a = userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.authentication) === null || _a === void 0 ? void 0 : _a.usersPreferredLoginMethods) !== null && _b !== void 0 ? _b : [];
        return (_d = (_c = usersPreferredLoginMethods.find(function (user) { return user.identifier === identifier; })) === null || _c === void 0 ? void 0 : _c.preferredLoginMethod) !== null && _d !== void 0 ? _d : '';
    };
    SiteDataService.prototype.setPreferredLoginMethod = function (authMethod, identifier) {
        var _a, _b, _c, _d;
        if (!identifier) {
            return;
        }
        var userPreferences = this.getDataByKey(SiteDataService.SITE_PREFERENCES_KEY);
        var usersPreferredLoginMethods = tslib_1.__spreadArrays((_b = (_a = userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.authentication) === null || _a === void 0 ? void 0 : _a.usersPreferredLoginMethods) !== null && _b !== void 0 ? _b : []);
        var tfaPreferredMethod = (_d = (_c = userPreferences === null || userPreferences === void 0 ? void 0 : userPreferences.authentication) === null || _c === void 0 ? void 0 : _c.tfaPreferredMethod) !== null && _d !== void 0 ? _d : '';
        var isUserExists = usersPreferredLoginMethods.some(function (user) { return user.identifier === identifier; });
        if (this.isMaxLimitUsersPreferredLoginMethodsReached(usersPreferredLoginMethods) && !isUserExists) {
            usersPreferredLoginMethods = this.removeOldestUserPreferredLoginMethod(usersPreferredLoginMethods);
        }
        if (!isUserExists) {
            usersPreferredLoginMethods = this.addUserPreferredLoginMethod(usersPreferredLoginMethods, { identifier: identifier, preferredLoginMethod: authMethod });
        }
        if (isUserExists) {
            usersPreferredLoginMethods = this.refreshExistingUserPreferredLoginMethod({ authMethod: authMethod, identifier: identifier, usersPreferredLoginMethods: usersPreferredLoginMethods });
        }
        this.setDataByKey(SiteDataService.SITE_PREFERENCES_KEY, { authentication: { usersPreferredLoginMethods: usersPreferredLoginMethods, tfaPreferredMethod: tfaPreferredMethod } });
    };
    SiteDataService.prototype.setScreenVariant = function (screenSetId, screenId, testId, variantId) {
        var _a, _b, _c;
        this.setDataByKey(SiteDataService.SITE_PREFERENCES_KEY, (_a = {},
            _a[screenSetId] = {
                screens: (_b = {},
                    _b[screenId] = (_c = {}, _c[testId] = { variant: variantId }, _c),
                    _b)
            },
            _a));
    };
    SiteDataService.prototype.getScreenVariant = function (screenSetId, screenId, testId) {
        var _a, _b, _c, _d;
        var preferences = this.getDataByKey(SiteDataService.SITE_PREFERENCES_KEY);
        return (_d = (_c = (_b = (_a = preferences === null || preferences === void 0 ? void 0 : preferences[screenSetId]) === null || _a === void 0 ? void 0 : _a.screens) === null || _b === void 0 ? void 0 : _b[screenId]) === null || _c === void 0 ? void 0 : _c[testId]) === null || _d === void 0 ? void 0 : _d.variant;
    };
    SiteDataService.prototype.getDataByKey = function (key) {
        return localStorage_1.getObject(key, {});
    };
    SiteDataService.prototype.setDataByKey = function (key, newData) {
        var oldData = this.getDataByKey(key);
        try {
            localStorage_1.setObject(key, object_1.removeUndefined(_merge(oldData, newData)));
        }
        catch (error) {
            window.gigya.logger.report('Failed to save local site data', { error: error, key: key });
        }
    };
    SiteDataService.prototype.refreshExistingUserPreferredLoginMethod = function (_a) {
        var usersPreferredLoginMethods = _a.usersPreferredLoginMethods, identifier = _a.identifier, authMethod = _a.authMethod;
        var remainingMethods = this.removeUserPreferredLoginMethod(usersPreferredLoginMethods, identifier);
        return this.addUserPreferredLoginMethod(remainingMethods, { identifier: identifier, preferredLoginMethod: authMethod });
    };
    SiteDataService.prototype.removeUserPreferredLoginMethod = function (usersPreferredLoginMethods, identifier) {
        return usersPreferredLoginMethods.filter(function (userLoginMethod) { return userLoginMethod.identifier !== identifier; });
    };
    SiteDataService.prototype.isMaxLimitUsersPreferredLoginMethodsReached = function (usersPreferredLoginMethods) {
        return usersPreferredLoginMethods.length === MAX_LIMIT_OF_USERS_PREFERRED_LOGIN_METHODS_PER_SITE;
    };
    SiteDataService.prototype.removeOldestUserPreferredLoginMethod = function (usersPreferredLoginMethods) {
        var oldestMethod = usersPreferredLoginMethods[0];
        return this.removeUserPreferredLoginMethod(usersPreferredLoginMethods, oldestMethod === null || oldestMethod === void 0 ? void 0 : oldestMethod.identifier);
    };
    SiteDataService.prototype.addUserPreferredLoginMethod = function (usersPreferredLoginMethods, userPreferredLogin) {
        return tslib_1.__spreadArrays(usersPreferredLoginMethods, [userPreferredLogin]);
    };
    return SiteDataService;
}());
exports.SiteDataService = SiteDataService;
exports.siteData = new SiteDataService();


/***/ }),

/***/ "./src/core/Gigya.Js/app/TFA/TfaEventService.ts":
/*!******************************************************!*\
  !*** ./src/core/Gigya.Js/app/TFA/TfaEventService.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var eventDispatcher_1 = __webpack_require__(/*! ../Utils/eventDispatcher */ "./src/core/Gigya.Js/app/Utils/eventDispatcher.ts");
var TfaEventService = /** @class */ (function (_super) {
    tslib_1.__extends(TfaEventService, _super);
    function TfaEventService() {
        return _super.call(this, 'tfaEvents') || this;
    }
    TfaEventService.prototype.activateDevice = function (provider, deviceId) {
        this.dispatchEvent('changeActiveDevice', { provider: provider, deviceId: deviceId });
    };
    return TfaEventService;
}(eventDispatcher_1.EventDispatcher));
exports.default = new TfaEventService();


/***/ }),

/***/ "./src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService.ts":
/*!***************************************************************!*\
  !*** ./src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var constants_1 = __webpack_require__(/*! ../../../../accounts/constants */ "./src/accounts/constants.ts");
var apis_1 = __webpack_require__(/*! ./apis */ "./src/core/Gigya.Js/app/TFA/apis.ts");
var TfaGigyaAssertionService = /** @class */ (function () {
    function TfaGigyaAssertionService() {
        this.assertions = new Map();
    }
    TfaGigyaAssertionService.prototype.getAssertion = function (mode, provider, requestParams) {
        if (requestParams === void 0) { requestParams = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var existingAssertion, assertionValue;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        existingAssertion = this.getExistingAssertion(mode, provider);
                        if ((existingAssertion === null || existingAssertion === void 0 ? void 0 : existingAssertion.value) && this.isAssertionValid(existingAssertion.lastUpdatedTimestamp)) {
                            return [2 /*return*/, existingAssertion.value];
                        }
                        return [4 /*yield*/, this.fetchGigyaAssertion(tslib_1.__assign({ mode: mode,
                                provider: provider }, requestParams))];
                    case 1:
                        assertionValue = _a.sent();
                        this.updateAssertion(mode, provider, assertionValue);
                        return [2 /*return*/, assertionValue];
                }
            });
        });
    };
    TfaGigyaAssertionService.prototype.fetchGigyaAssertion = function (params) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, apis_1.sentInitTfaRequest(params)];
                    case 1:
                        res = _a.sent();
                        if ((res === null || res === void 0 ? void 0 : res.errorCode) == 0 && (res === null || res === void 0 ? void 0 : res.gigyaAssertion)) {
                            return [2 /*return*/, res.gigyaAssertion];
                        }
                        return [2 /*return*/, null];
                }
            });
        });
    };
    TfaGigyaAssertionService.prototype.getExistingAssertion = function (mode, provider) {
        var key = this.getKey(mode, provider);
        return this.assertions.get(key);
    };
    TfaGigyaAssertionService.prototype.updateAssertion = function (mode, provider, value) {
        var key = this.getKey(mode, provider);
        if (!value) {
            this.assertions.delete(key);
        }
        this.assertions.set(key, {
            value: value,
            lastUpdatedTimestamp: new Date().getTime()
        });
    };
    TfaGigyaAssertionService.prototype.getKey = function (mode, provider) {
        return mode + "-" + provider;
    };
    TfaGigyaAssertionService.prototype.isAssertionValid = function (assertionCreationTimestamp) {
        if (!assertionCreationTimestamp) {
            return false;
        }
        return new Date().getTime() - assertionCreationTimestamp < constants_1.gigyaAssertionExpiration;
    };
    return TfaGigyaAssertionService;
}());
exports.default = new TfaGigyaAssertionService();


/***/ }),

/***/ "./src/core/Gigya.Js/app/TFA/TfaManagementService.ts":
/*!***********************************************************!*\
  !*** ./src/core/Gigya.Js/app/TFA/TfaManagementService.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var eventDispatcher_1 = __webpack_require__(/*! ../Utils/eventDispatcher */ "./src/core/Gigya.Js/app/Utils/eventDispatcher.ts");
var apis_1 = __webpack_require__(/*! ./apis */ "./src/core/Gigya.Js/app/TFA/apis.ts");
var types_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/types */ "./src/core/Gigya.Js/app/TFA/types.ts");
var TfaGigyaAssertionService_1 = __webpack_require__(/*! src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService */ "./src/core/Gigya.Js/app/TFA/TfaGigyaAssertionService.ts");
var TfaManagementService = /** @class */ (function (_super) {
    tslib_1.__extends(TfaManagementService, _super);
    function TfaManagementService() {
        return _super.call(this, 'tfaManagement') || this;
    }
    TfaManagementService.prototype.removePhone = function (provider, deviceId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var gigyaAssertion, res, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, TfaGigyaAssertionService_1.default.getAssertion(types_1.TfaMode.edit, provider)];
                    case 1:
                        gigyaAssertion = _a.sent();
                        return [4 /*yield*/, apis_1.removeTfaPhone(gigyaAssertion, deviceId)];
                    case 2:
                        res = _a.sent();
                        if (res.errorCode === 0) {
                            this.dispatchEvent('removePhone');
                        }
                        else {
                            window.gigya.logger.error('tfa management - could not remove device', { res: res });
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        window.gigya.logger.error('tfa management - could not remove device', { e: e_1 });
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return TfaManagementService;
}(eventDispatcher_1.EventDispatcher));
exports.TfaManagementService = TfaManagementService;
exports.default = new TfaManagementService();


/***/ }),

/***/ "./src/core/Gigya.Js/app/TFA/apis.ts":
/*!*******************************************!*\
  !*** ./src/core/Gigya.Js/app/TFA/apis.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var promise_1 = __webpack_require__(/*! ../Utils/promise */ "./src/core/Gigya.Js/app/Utils/promise.ts");
function sentInitTfaRequest(params) {
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, promise_1.promisify(window.gigya.accounts.tfa.initTFA, params)];
        });
    });
}
exports.sentInitTfaRequest = sentInitTfaRequest;
function fetchTfaPhoneList(gigyaAssertion) {
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, promise_1.promisify(window.gigya.accounts.tfa.phone.getRegisteredPhoneNumbers, {
                    gigyaAssertion: gigyaAssertion
                })];
        });
    });
}
exports.fetchTfaPhoneList = fetchTfaPhoneList;
function fetchTfaEmailList(gigyaAssertion) {
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, promise_1.promisify(window.gigya.accounts.tfa.email.getEmails, {
                    gigyaAssertion: gigyaAssertion
                })];
        });
    });
}
exports.fetchTfaEmailList = fetchTfaEmailList;
function removeTfaPhone(gigyaAssertion, deviceId) {
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, promise_1.promisify(window.gigya.accounts.tfa.phone.removePhone, {
                    phoneId: deviceId,
                    gigyaAssertion: gigyaAssertion
                })];
        });
    });
}
exports.removeTfaPhone = removeTfaPhone;
function fetchAvailableProviders(params) {
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, promise_1.promisify(window.gigya.accounts.tfa.getProviders, params)];
        });
    });
}
exports.fetchAvailableProviders = fetchAvailableProviders;
function sendEmailVerificationCode(params) {
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, promise_1.promisify(window.gigya.accounts.tfa.email.sendVerificationCode, params)];
        });
    });
}
exports.sendEmailVerificationCode = sendEmailVerificationCode;
function sendPhoneVerificationCode(params) {
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, promise_1.promisify(window.gigya.accounts.tfa.phone.sendVerificationCode, params)];
        });
    });
}
exports.sendPhoneVerificationCode = sendPhoneVerificationCode;
function sendEmailCompleteVerification(params) {
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, promise_1.promisify(window.gigya.accounts.tfa.email.completeVerification, params)];
        });
    });
}
exports.sendEmailCompleteVerification = sendEmailCompleteVerification;
function sendPhoneCompleteVerification(params) {
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, promise_1.promisify(window.gigya.accounts.tfa.phone.completeVerification, params)];
        });
    });
}
exports.sendPhoneCompleteVerification = sendPhoneCompleteVerification;
function finalizeTFA(params) {
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, promise_1.promisify(window.gigya.accounts.tfa.finalizeTFA, params)];
        });
    });
}
exports.finalizeTFA = finalizeTFA;


/***/ }),

/***/ "./src/core/Gigya.Js/app/TFA/types.ts":
/*!********************************************!*\
  !*** ./src/core/Gigya.Js/app/TFA/types.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var TfaProvider;
(function (TfaProvider) {
    TfaProvider["email"] = "gigyaEmail";
    TfaProvider["phone"] = "gigyaPhone";
    TfaProvider["totp"] = "gigyaTotp";
    TfaProvider["push"] = "gigyaPush";
})(TfaProvider = exports.TfaProvider || (exports.TfaProvider = {}));
var TfaRiskOrderedProviders;
(function (TfaRiskOrderedProviders) {
    TfaRiskOrderedProviders[TfaRiskOrderedProviders["gigyaEmail"] = 0] = "gigyaEmail";
    TfaRiskOrderedProviders[TfaRiskOrderedProviders["gigyaPhone"] = 1] = "gigyaPhone";
    TfaRiskOrderedProviders[TfaRiskOrderedProviders["gigyaTotp"] = 2] = "gigyaTotp";
    TfaRiskOrderedProviders[TfaRiskOrderedProviders["gigyaPush"] = 3] = "gigyaPush";
})(TfaRiskOrderedProviders = exports.TfaRiskOrderedProviders || (exports.TfaRiskOrderedProviders = {}));
var TfaMode;
(function (TfaMode) {
    TfaMode["add"] = "add";
    TfaMode["edit"] = "edit";
    TfaMode["verify"] = "verify";
    TfaMode["register"] = "register";
})(TfaMode = exports.TfaMode || (exports.TfaMode = {}));
var TfaPhoneSendCodeMethod;
(function (TfaPhoneSendCodeMethod) {
    TfaPhoneSendCodeMethod["sms"] = "sms";
    TfaPhoneSendCodeMethod["voice"] = "voice";
})(TfaPhoneSendCodeMethod = exports.TfaPhoneSendCodeMethod || (exports.TfaPhoneSendCodeMethod = {}));


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/DOM.ts":
/*!********************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/DOM.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var LocalInfo_1 = __webpack_require__(/*! src/core/Gigya.Js/app/LocalInfo */ "./src/core/Gigya.Js/app/LocalInfo.ts");
var viewportUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/viewport */ "./src/core/Gigya.Js/app/Utils/viewport.ts");
var functionsUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/functions */ "./src/core/Gigya.Js/app/Utils/functions.ts");
exports._popupContainers = [];
exports._pseudoContainers = [];
var _nextZIndex = 999999999;
var backListener = null;
function getNextZIndex() {
    _nextZIndex++;
    return _nextZIndex;
}
exports.getNextZIndex = getNextZIndex;
function getGigyaScriptElement(fileNames) {
    var scripts = document.getElementsByTagName('script');
    var scriptElement;
    var gigyaCdnRegex = /\/\/cdn(s)?\.(ru1\.)?gigya.com/;
    for (var i = scripts.length - 1; i >= 0; i--) {
        var script = scripts[i];
        var src = script.src.toLowerCase();
        if (src !== '') {
            if (gigyaCdnRegex.test(src) || src.indexOf('?apikey=') > -1) {
                var isFileNameExistInSrc = fileNames.length === 0 || fileNames.some(function (fileName) { return src.indexOf(fileName) > -1; });
                if (isFileNameExistInSrc) {
                    scriptElement = script;
                    break;
                }
            }
        }
    }
    return scriptElement;
}
exports.getGigyaScriptElement = getGigyaScriptElement;
function dispatch(el, eventName) {
    var event;
    try {
        event = new Event(eventName);
    }
    catch (e) {
        // IE10 and below support
        event = document.createEvent('CustomEvent');
        event.initCustomEvent(eventName, true, true, {});
    }
    el.dispatchEvent(event);
}
exports.dispatch = dispatch;
function addButtonSubmitListener(el, handler, event, debugName) {
    if (event === void 0) { event = 'click'; }
    // Just in case the element does not exist.
    if (!el) {
        return;
    }
    el.setAttribute('role', 'button');
    if (el.getAttribute('tabindex') != '-1') {
        el.setAttribute('tabindex', '0');
    }
    addEventListener(el, event, function (e) { return handler(e); });
    addEventListener(el, 'keydown', function (e) {
        if ((e.which || e.keyCode) == 13) {
            e.preventDefault();
            handler(e);
        }
    });
}
exports.addButtonSubmitListener = addButtonSubmitListener;
function addEventListener(el, eventName, handler) {
    if (!el || !handler)
        return;
    if (el.addEventListener) {
        el.addEventListener(eventName, handler, true);
    }
    else {
        el.attachEvent('on' + eventName, handler);
    }
}
exports.addEventListener = addEventListener;
function addActivationHandler(el, handler) {
    if (!el || !handler)
        return;
    this.addEventListener(el, 'keydown', function (event) {
        if (event.code === 'Space' || event.code === 'Enter') {
            handler();
        }
    });
    this.addEventListener(el, 'click', handler);
}
exports.addActivationHandler = addActivationHandler;
function removeEventListener(el, eventName, handler) {
    if (!el || !handler)
        return;
    if (el.removeEventListener) {
        el.removeEventListener(eventName, handler, true);
    }
    else {
        el.detachEvent('on' + eventName, handler);
    }
}
exports.removeEventListener = removeEventListener;
function disableDefaultEventHandling(event) {
    if (event.preventDefault) {
        event.preventDefault();
    }
    else if (window.event) {
        window.event.returnValue = false;
    }
}
exports.disableDefaultEventHandling = disableDefaultEventHandling;
function addDialogBackListener(handler) {
    _removeDialogBackListener();
    // This should fire when back is clicked
    backListener = function (e) {
        if (e && e.newURL && e.newURL.indexOf('|gigyaMobileDialog') == -1) {
            handler(e);
            _removeDialogBackListener();
        }
    };
    // hash could change right after the call if it was initiated from a link that didn't return false
    window.setTimeout(function () {
        if (window.location.hash.indexOf('|gigyaMobileDialog') == -1) {
            window.location.hash = window.location.hash + '|gigyaMobileDialog';
        }
        addEventListener(window, 'hashchange', backListener);
    }, 50);
}
exports.addDialogBackListener = addDialogBackListener;
function _removeDialogBackListener() {
    if (!backListener)
        return;
    removeEventListener(window, 'hashchange', backListener);
    backListener = null;
    //restore previous hash
    window.location.hash = window.location.hash.replace('|gigyaMobileDialog', '');
}
exports._removeDialogBackListener = _removeDialogBackListener;
function prependToBody(el, document) {
    if (document === void 0) { document = window.document; }
    if (!document.body)
        return;
    if (document.body.insertBefore && document.body.firstChild) {
        document.body.insertBefore(el, document.body.firstChild);
    }
    else {
        // Backward compatibility
        document.body.appendChild(el);
    }
}
exports.prependToBody = prependToBody;
function appendToBody(el, document) {
    if (document === void 0) { document = window.document; }
    if (!document.body)
        return;
    document.body.appendChild(el);
}
exports.appendToBody = appendToBody;
function removeElement(el) {
    if (el && el.parentElement) {
        el.parentElement.removeChild(el);
    }
}
exports.removeElement = removeElement;
function isChildOf(child, parent) {
    var directParent = child.parentNode;
    while (directParent) {
        if (parent == directParent) {
            return true;
        }
        directParent = directParent.parentNode;
    }
    return false;
}
exports.isChildOf = isChildOf;
function isVisible(el) {
    while (el) {
        var computedStyle = getComputedStyle(el);
        if (computedStyle.display === 'none' || computedStyle.visibility === 'hidden') {
            return false;
        }
        else {
            el = el.parentElement;
        }
    }
    return true;
}
exports.isVisible = isVisible;
function getCenteredDivID(name) {
    return 'gig_' + LocalInfo_1.localInfo.initTime.getTime().toString() + '_' + name;
}
exports.getCenteredDivID = getCenteredDivID;
function createElementWithAttributes(domElemName, domElemAttrs) {
    var newDomElem = document.createElement(domElemName);
    if (domElemAttrs) {
        for (var elemAttr in domElemAttrs) {
            newDomElem[elemAttr] = domElemAttrs[elemAttr];
        }
    }
    return newDomElem;
}
exports.createElementWithAttributes = createElementWithAttributes;
function createTopLevelDiv(id) {
    var el = document.createElement('div');
    if (el.style.zIndex != null) {
        el.style.zIndex = '' + getNextZIndex();
    }
    el.innerHTML = '';
    if (id) {
        el.id = id;
    }
    if (document.body) {
        if (document.body.insertBefore && document.body.firstChild) {
            document.body.insertBefore(el, document.body.firstChild);
        }
        else if (document.body.appendChild) {
            document.body.appendChild(el);
        }
    }
    return el;
}
exports.createTopLevelDiv = createTopLevelDiv;
function hideByID(id) {
    var el = document.getElementById(id);
    if (el) {
        el.style.display = 'none';
    }
}
exports.hideByID = hideByID;
function showByID(id) {
    var el = document.getElementById(id);
    if (el) {
        el.style.display = LocalInfo_1.localInfo.isIE6 ? (el.tagName == 'TD' ? 'table-cell' : el.tagName == 'TR' ? '' : el.tagName == 'TABLE' ? '' : 'block') : '';
    }
}
exports.showByID = showByID;
function clearByID(id) {
    try {
        var c = document.getElementById(id);
        if (c != null) {
            c.innerHTML = '';
        }
    }
    catch (e) { }
}
exports.clearByID = clearByID;
function getHTMLSize(html, container) {
    var divMeasure = document.createElement('div');
    divMeasure.style.position = 'absolute';
    divMeasure.style.left = '-1000px';
    divMeasure.innerHTML = html;
    container.appendChild(divMeasure);
    var w = divMeasure.offsetWidth;
    var h = divMeasure.offsetHeight;
    divMeasure.parentNode.removeChild(divMeasure);
    return { w: w, h: h };
}
exports.getHTMLSize = getHTMLSize;
function getElementsByClass(parentElement, className, includeParent) {
    if (!parentElement) {
        return [];
    }
    var arEls = [];
    if (includeParent && isElementClass(parentElement, className)) {
        arEls.push(parentElement);
    }
    var els = parentElement.getElementsByTagName('*');
    for (var i = 0; i < els.length; i++) {
        if (isElementClass(els[i], className)) {
            arEls.push(els[i]);
        }
    }
    return arEls || [];
}
exports.getElementsByClass = getElementsByClass;
function getElementsByAttribute(parentElement, tagName, attributeName, attributeValue) {
    var arEls = [];
    var els = parentElement.getElementsByTagName(tagName);
    for (var i = 0; i < els.length; i++) {
        if (els[i].getAttribute(attributeName) == attributeValue) {
            arEls.push(els[i]);
        }
    }
    return arEls;
}
exports.getElementsByAttribute = getElementsByAttribute;
function getElementPosition(el) {
    if (!el) {
        return { left: 0, top: 0, bottom: 0, right: 0 };
    }
    var rect = el.getBoundingClientRect();
    var scroll = viewportUtils.getScroll();
    var left = rect.left + scroll.left;
    var top = rect.top + scroll.top;
    return {
        left: left,
        top: top,
        right: left + rect.width,
        bottom: top + rect.height,
    };
}
exports.getElementPosition = getElementPosition;
function addClassToElement(el, className) {
    if (!el) {
        return;
    }
    var existingClasses = el.className ? getClassNames(el) : [];
    var existingOriginalLength = existingClasses.length;
    var newClasses = className.split(' ');
    for (var j in newClasses) {
        var exists = false;
        if (!newClasses[j]) {
            break;
        }
        for (var i in existingClasses) {
            if (existingClasses[i] === newClasses[j]) {
                exists = true;
                break;
            }
        }
        if (!exists) {
            existingClasses.push(newClasses[j]);
        }
    }
    if (existingClasses.length !== existingOriginalLength) {
        el.className = existingClasses.join(' ');
    }
}
exports.addClassToElement = addClassToElement;
function removeClassFromElement(el, className, substring) {
    if (substring === void 0) { substring = false; }
    if (!el) {
        return;
    }
    var arClass = getClassNames(el);
    for (var i = arClass.length - 1; i >= 0; i--) {
        if (arClass[i] === className || (substring && arClass[i].indexOf(className) !== -1)) {
            arClass.splice(i, 1);
        }
    }
    el.className = arClass.join(' ');
}
exports.removeClassFromElement = removeClassFromElement;
function getClassNames(el) {
    var classes = [];
    if (typeof el.className === 'string') {
        classes = el.className.split(' ');
    }
    return classes;
}
exports.getClassNames = getClassNames;
function isElementClass(el, className) {
    if (!el)
        return false;
    else if (!className)
        return true;
    else if (!el.className)
        return false;
    var exists = false;
    var arClass = getClassNames(el);
    for (var i = 0; i < arClass.length; i++) {
        if (arClass[i] === className) {
            exists = true;
            break;
        }
    }
    return exists;
}
exports.isElementClass = isElementClass;
function cancelEvent(event) {
    if (!event)
        return;
    if ('cancelable' in event)
        // All browsers except <IE9
        event.preventDefault();
    else
        event.returnValue = false;
}
exports.cancelEvent = cancelEvent;
function createElement(type, name) {
    var divContainer = document.createElement('div');
    name = name || '';
    divContainer.innerHTML = '<' + type + ' name="' + name + '" id="' + name + '"></' + type + '>';
    return divContainer.firstChild;
}
exports.createElement = createElement;
function setSize(container, w, h, center) {
    if (container == null || container.style == null) {
        return;
    }
    if (w) {
        w = '' + w;
        var isWidthPrecentage = w.indexOf('%') > 0;
        if (!isNaN(w) || isWidthPrecentage) {
            var widthValue = '' + (isWidthPrecentage ? w : w + 'px');
            if (container.style.width != widthValue) {
                container.style.width = widthValue;
            }
        }
    }
    if (h) {
        h = '' + h;
        var isHeightPrecentage = h.indexOf('%') > 0;
        if (!isNaN(w) || isHeightPrecentage) {
            var heightValue = '' + (isHeightPrecentage ? h : h + 'px');
            if (container.style.height !== heightValue) {
                container.style.height = heightValue;
            }
        }
    }
    if (center && w && h) {
        if (container.style.zIndex == null || center) {
            container.style.zIndex = '' + getNextZIndex();
        }
        var vp = viewportUtils.getInnerSize();
        var scrl = viewportUtils.getScroll();
        var vpt = scrl.top;
        var vpl = scrl.left;
        container.style.top = '' + Math.max(0, vpt + Math.floor((vp.h - h) / 2)) + 'px';
        container.style.left = '' + Math.max(0, vpl + Math.floor((vp.w - w) / 2)) + 'px';
        container.style.visibility = '';
    }
}
exports.setSize = setSize;
function createHiddenIframe(src) {
    var ifr = document.createElement('iframe');
    ifr.src = src;
    ifr.style.width = '30px';
    ifr.style.height = '10px';
    ifr.style.position = 'absolute';
    ifr.style.top = '-1000px';
    ifr.style.left = '-1000px';
    if (document.body) {
        appendToBody(ifr);
    }
    else {
        functionsUtils.invokeOnPageLoad(function () {
            appendToBody(ifr);
        });
    }
    return ifr;
}
exports.createHiddenIframe = createHiddenIframe;
function attributeEncode(value) {
    return value
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/\"/g, '&quot;')
        .replace(/\'/g, '&#39;'); // IE8 doesn't support &apos;
}
exports.attributeEncode = attributeEncode;
function manipulateAttributes(elements, matcher, replacePredicate, criteria) {
    if (criteria === void 0) { criteria = function () { return true; }; }
    elements.forEach(function (el) {
        if (!el.attributes)
            return;
        Array.prototype.slice.call(el.attributes).forEach(function (attr) {
            if (criteria(attr)) {
                attr.value = attr.value.replace(matcher, replacePredicate);
            }
        });
    });
}
exports.manipulateAttributes = manipulateAttributes;
function textNodesUnder(el) {
    var n;
    var textNodes = [];
    var treeWalker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);
    while ((n = treeWalker.nextNode())) {
        textNodes.push(n);
    }
    return textNodes;
}
exports.textNodesUnder = textNodesUnder;
function isHTMLBooleanAttribute(attrName) {
    return ['autocomplete', 'autofocus', 'checked', 'disabled', 'hidden', 'readonly', 'required', 'selected'].indexOf(attrName) > -1;
}
exports.isHTMLBooleanAttribute = isHTMLBooleanAttribute;
function isBelongToGigyaFieldset(el) {
    if (!el || el instanceof HTMLFormElement) {
        return false; // end of recursion - element is not a child of a fieldset
    }
    if (isElementClass(el.parentElement, 'gigya-fieldset')) {
        return true;
    }
    return isBelongToGigyaFieldset(el.parentElement);
}
exports.isBelongToGigyaFieldset = isBelongToGigyaFieldset;
function getClosestElement(elem, selector, parent) {
    if (parent === void 0) { parent = document; }
    setMatchesPolyfill();
    // Get the closest matching element
    for (; elem && elem !== parent; elem = elem.parentNode) {
        if (elem === null || elem === void 0 ? void 0 : elem.matches(selector))
            return elem;
    }
    return null;
}
exports.getClosestElement = getClosestElement;
function createElementFromTemplate(template) {
    if (template === void 0) { template = ''; }
    var _a;
    var div = document.createElement('div');
    div.innerHTML = template === null || template === void 0 ? void 0 : template.trim();
    return (_a = div.firstChild) !== null && _a !== void 0 ? _a : div;
}
exports.createElementFromTemplate = createElementFromTemplate;
function setMatchesPolyfill() {
    if (!Element.prototype.matches) {
        // @ts-ignore
        Element.prototype.matches = Element.prototype.msMatchesSelector ||
            Element.prototype.webkitMatchesSelector;
    }
}
function isParentHasClass(nativeElement, className) {
    var _a;
    if ((_a = nativeElement === null || nativeElement === void 0 ? void 0 : nativeElement.classList) === null || _a === void 0 ? void 0 : _a.contains(className)) {
        return true;
    }
    if (!(nativeElement === null || nativeElement === void 0 ? void 0 : nativeElement.parentElement)) {
        return false;
    }
    return isParentHasClass(nativeElement === null || nativeElement === void 0 ? void 0 : nativeElement.parentElement, className);
}
exports.isParentHasClass = isParentHasClass;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/JSON.ts":
/*!*********************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/JSON.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function serialize(obj, includeFunctions, prettyPrint, l, maxLevel) {
    if (includeFunctions === void 0) { includeFunctions = false; }
    if (prettyPrint === void 0) { prettyPrint = false; }
    if (l === void 0) { l = 0; }
    if (maxLevel === void 0) { maxLevel = 20; }
    if (!window.gigya.localInfo.isIE8) {
        return window['JSON'].stringify(obj);
    }
    else {
        if (!l)
            l = 0;
        if (l > maxLevel)
            return '[Too deep]';
        var prefix = '';
        var newline = '';
        var tab = '';
        if (prettyPrint) {
            tab = '\t';
            newline = '\n';
            for (var i = 0; i < l + 1; i++) {
                prefix += tab;
            }
        }
        var t = typeof obj;
        if (t == 'function') {
            return t.toString();
        }
        if (t != 'object' || obj === null) {
            // simple data type
            if (t == 'string')
                obj = '"' + obj.replace(/(\"|\\)/g, '\\$1').replace(/\r\n|\r|\n/g, '\\n') + '"';
            return String(obj);
        }
        else {
            var n, v, json = [], arr = obj && obj.constructor == Array;
            if (arr) {
                for (var i = 0; i < obj.length; i++) {
                    v = obj[i];
                    t = typeof v;
                    if (v == null || t == 'undefined')
                        v = '';
                    else if (t == 'string')
                        v = '"' + v.replace(/(\"|\\)/g, '\\$1').replace(/\r\n|\r|\n/g, '\\n') + '"';
                    else if (t == 'function') {
                        if (includeFunctions)
                            v = 'Function';
                        else
                            v = '';
                    }
                    else if (v.parentNode && v.innerHTML)
                        v = 'HTMLElement';
                    else if (v.constructor == Date)
                        v = '';
                    else if (t == 'object' && v !== null)
                        v = serialize(v, includeFunctions, prettyPrint, l + 1);
                    if (String(v) != '')
                        json.push(prefix + tab + String(v));
                }
            }
            else {
                for (n in obj) {
                    v = obj[n];
                    t = typeof v;
                    if (v == null || t == 'undefined')
                        v = String(v);
                    else if (t == 'string')
                        v = '"' + v.replace(/(\"|\\)/g, '\\$1').replace(/\r\n|\r|\n/g, '\\n') + '"';
                    else if (t == 'function') {
                        if (includeFunctions) {
                            v = 'Function';
                        }
                        else {
                            v = '';
                        }
                    }
                    else if (v.parentNode && v.innerHTML)
                        v = 'HTMLElement';
                    else if (v.constructor == Date)
                        v = '';
                    else if (t == 'object' && v !== null)
                        v = newline + serialize(v, includeFunctions, prettyPrint, l + 1);
                    if (String(v) != '')
                        json.push(prefix + tab + '"' + n.replace(/(\"|\\)/g, '\\$1').replace(/\r\n|\r|\n/g, '\\n') + '":' + String(v));
                }
            }
            return newline + prefix + (arr ? '[' : '{') + newline + json.join(',' + newline) + newline + prefix + (arr ? ']' : '}');
        }
    }
}
exports.serialize = serialize;
function deserialize(json, defaultValue, scope) {
    // Return default value if is empty string (or similar).
    if (!json || !json.replace(/^\s+|\s+$/g, '')) {
        return defaultValue || {};
    }
    // Attempt to parse. On error, warn in console and return default value.
    try {
        var keys = [];
        var values = [];
        if (scope) {
            for (var key in scope) {
                keys.push(key);
                values.push(scope[key]);
            }
        }
        var fn = eval("(function(" + keys.join(',') + ") { return " + json.trim() + "; })");
        return fn.apply(undefined, values);
    }
    catch (e) {
        console.warn('Error deserializing JavaScript', e);
        return defaultValue || {};
    }
}
exports.deserialize = deserialize;
function parse(json, defaultValue) {
    if (window.gigya.localInfo.isIE8) {
        return deserialize(json, defaultValue);
    }
    else {
        try {
            return window['JSON'].parse(json);
        }
        catch (e) {
            return defaultValue || {};
        }
    }
}
exports.parse = parse;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/URL.ts":
/*!********************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/URL.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(/*! ./../../../../accounts/constants */ "./src/accounts/constants.ts");
var keyValueUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/keyValue */ "./src/core/Gigya.Js/app/Utils/keyValue.ts");
var objectUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/object */ "./src/core/Gigya.Js/app/Utils/object.ts");
function URLEncode(value) {
    return encodeURIComponent(value);
}
exports.URLEncode = URLEncode;
function URLDecode(value) {
    return decodeURIComponent(value.replace(/\+/g, ' '));
}
exports.URLDecode = URLDecode;
function URLDecodeRecursive(value) {
    var prevDecodingRes = '';
    var currDecodingRes = value;
    // keep decoding until we can't decode anymore
    while (currDecodingRes != prevDecodingRes) {
        // store the last decoding result
        prevDecodingRes = currDecodingRes;
        // decode the string once again
        currDecodingRes = URLDecode(prevDecodingRes);
    }
    return currDecodingRes;
}
exports.URLDecodeRecursive = URLDecodeRecursive;
function getParamsFromURL(url, keysToLower) {
    if (!url || url.indexOf('?') === -1) {
        return {};
    }
    return keyValueUtils.deserialize(url.split('#')[0].split('?')[1], '&', keysToLower);
}
exports.getParamsFromURL = getParamsFromURL;
function getGigParamsFromURL(config) {
    var _a = config || {}, url = _a.url, paramPrefix = _a.paramPrefix, keysToLower = _a.keysToLower, removePrefix = _a.removePrefix;
    var prefix = paramPrefix || constants_1.GIGYA_PARAM_PREFIX;
    var urlParams = getParamsFromURL(url, keysToLower);
    return Object.keys(urlParams)
        .filter(function (key) { return key.indexOf(prefix) === 0 && key !== prefix; })
        .reduce(function (obj, key) {
        var newKey = removePrefix ? key.slice(4) : key;
        obj[newKey] = urlParams[key];
        return obj;
    }, {});
}
exports.getGigParamsFromURL = getGigParamsFromURL;
function getParamValueFromURL(param, url, defaultValue) {
    if (null == url || '' == url) {
        return defaultValue;
    }
    var iqm = url.indexOf('?');
    if (iqm === -1) {
        return defaultValue;
    }
    var qs = '&' + url.substr(iqm + 1);
    var idx = qs.toLowerCase().indexOf('&' + param.toLowerCase() + '=');
    if (idx === -1) {
        return defaultValue;
    }
    var valAndMore = qs.substr(idx + (1 + param.length + 1)) + '&';
    idx = valAndMore.indexOf('&');
    return valAndMore.substr(0, idx);
}
exports.getParamValueFromURL = getParamValueFromURL;
function addParamsToURL(url, oParams) {
    var params = getParamsFromURL(url);
    objectUtils.add(params, oParams);
    var urlHashSplit = url.split('#');
    var finalUrl = urlHashSplit[0].split('?')[0] + '?' + keyValueUtils.serialize(params, '&');
    if (urlHashSplit.length > 1) {
        finalUrl += '#' + urlHashSplit[1];
    }
    return finalUrl;
}
exports.addParamsToURL = addParamsToURL;
var removeUnacceptableParams = function (params, unacceptableParams) {
    if (!unacceptableParams) {
        return params;
    }
    var validParams = {};
    Object.entries(params || {})
        .filter(function (_a) {
        var paramName = _a[0];
        return !unacceptableParams.test(paramName);
    })
        .forEach(function (_a) {
        var paramName = _a[0], paramValue = _a[1];
        return validParams[paramName] = paramValue;
    });
    return validParams;
};
function getContextParamsFromUrl(config) {
    var _a = config || {}, url = _a.url, paramPrefix = _a.paramPrefix, unacceptableParams = _a.unacceptableParams;
    if (!url) {
        return {};
    }
    var params = window.gigya.utils.URL.getGigParamsFromURL({ url: url, paramPrefix: paramPrefix });
    return removeUnacceptableParams(params, unacceptableParams);
}
exports.getContextParamsFromUrl = getContextParamsFromUrl;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/Uri.ts":
/*!********************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/Uri.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var stringUtilsUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/stringUtils */ "./src/core/Gigya.Js/app/Utils/stringUtils.ts");
var Uri = /** @class */ (function () {
    function Uri(url, isAbsolute) {
        if (isAbsolute === void 0) { isAbsolute = true; }
        this._anchor = document.createElement('a');
        var protocol = document.location.protocol == 'http:' ? 'http' : 'https';
        if (isAbsolute && url.indexOf('://') === -1 && url.charAt(0) !== '/')
            url = protocol + "://" + url;
        this._anchor.href = url;
    }
    Object.defineProperty(Uri.prototype, "domain", {
        get: function () {
            return this._anchor.hostname;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Uri.prototype, "path", {
        get: function () {
            return this._anchor.pathname;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Uri.prototype, "href", {
        get: function () {
            return this._anchor.href;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Uri.prototype, "search", {
        get: function () {
            return this._anchor.search.slice(1);
        } // dropping '?'
        ,
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Uri.prototype, "hash", {
        get: function () {
            return this._anchor.hash.slice(1);
        } // dropping '#'
        ,
        enumerable: true,
        configurable: true
    });
    Uri.prototype.toString = function () {
        return this._anchor.href;
    };
    Uri.prototype.addToSearch = function (params) {
        for (var name in params) {
            var val = params[name];
            if ((typeof val == 'boolean' || typeof val == 'number' || typeof val == 'string') && name != 'eventName') {
                var addition = this._anchor.search ? '&' : '';
                this._anchor.search += "" + addition + name + "=" + encodeURIComponent(params[name]);
            }
        }
        return this;
    };
    Uri.prototype.fetch = function (retries) {
        if (retries === void 0) { retries = 0; }
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var _a, e_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, , 8]);
                        if (!window.fetch) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.browserFetch()];
                    case 1:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.xhr()];
                    case 3:
                        _a = _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/, _a];
                    case 5:
                        e_1 = _b.sent();
                        if (retries <= 0)
                            throw new Error("fetch failed: " + e_1);
                        return [4 /*yield*/, this.delay(1)];
                    case 6:
                        _b.sent();
                        return [4 /*yield*/, this.fetch(retries - 1)];
                    case 7: return [2 /*return*/, _b.sent()];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    Uri.prototype.isBaseOf = function (url) {
        return Uri.parse(url).isIn(this);
    };
    Uri.prototype.isIn = function (base) {
        if (typeof base === 'string') {
            base = Uri.parse(base);
        }
        return ((this.domain == base.domain || // page is the base domain
            this.isSubDomainOf(base)) && // or sub-domain of it
            (!base.path || this.path.indexOf(base.path) == 0)); // page is also in base's defined path;
    };
    Uri.prototype.isForSubDomains = function () {
        return this.domain.indexOf('.') == 0;
    };
    Uri.prototype.isSubDomainOf = function (base) {
        var domain = '';
        if (!base.isForSubDomains())
            domain = '.';
        domain += base.domain;
        return stringUtilsUtils.endsWith(this.domain, domain);
    };
    Uri.parse = function (url, isAbsolute) {
        if (isAbsolute === void 0) { isAbsolute = true; }
        if (!url)
            return undefined;
        return new Uri(url, isAbsolute);
    };
    Uri.prototype.browserFetch = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var url, response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.toString();
                        return [4 /*yield*/, window.fetch(url)];
                    case 1:
                        response = _a.sent();
                        if (!response.ok)
                            throw new Error("fetch failed");
                        return [2 /*return*/, response.json()];
                }
            });
        });
    };
    Uri.prototype.xhr = function () {
        var url = this.toString();
        return new gigya.Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url);
            xhr.send();
            xhr.onerror = reject;
            xhr.onload = function () {
                if (xhr.readyState !== 4 || xhr.status !== 200) {
                    return reject("xhr failed - " + xhr.status + " - " + xhr.statusText);
                }
                try {
                    var jsonResponse = JSON.parse(xhr.responseText);
                    return resolve(jsonResponse);
                }
                catch (e) {
                    return reject(e);
                }
            };
        });
    };
    Uri.prototype.delay = function (ms) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new gigya.Promise(function (r) { return setTimeout(r, ms); })];
            });
        });
    };
    return Uri;
}());
exports.Uri = Uri;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/array.ts":
/*!**********************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/array.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function indexOf(ar, o) {
    for (var i = 0; i < ar.length; i++) {
        if (ar[i] == o)
            return i;
    }
    return -1;
}
exports.indexOf = indexOf;
function clone(ar) {
    var ar2 = [];
    for (var i = 0; i < ar.length; i++) {
        ar2[i] = ar[i];
    }
    return ar2;
}
exports.clone = clone;
function removeByValue(ar, value) {
    if (!ar)
        return;
    for (var i = ar.length - 1; i >= 0; i--) {
        if (ar[i] == value) {
            ar.splice(i, 1);
        }
    }
}
exports.removeByValue = removeByValue;
function removeByProperty(ar, property, value) {
    if (!ar)
        return;
    for (var i = ar.length - 1; i >= 0; i--) {
        if (ar[i][property] == value) {
            ar.splice(i, 1);
        }
    }
}
exports.removeByProperty = removeByProperty;
function getArrayFromString(str, delimiter, lowerCase) {
    // check for string type in the input and not empty.
    if (!str || typeof str != 'string')
        return [];
    // lowercase if demended
    if (lowerCase)
        str = str.toLowerCase();
    // clean the string:
    str = str.replace(/[ ]/g, '').replace(/,,/g, ',');
    // if string empty
    if (!str)
        return [];
    // return array from string
    return str.split(delimiter);
}
exports.getArrayFromString = getArrayFromString;
function intersect(array) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (array == null)
        return [];
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = array.length; i < length; i++) {
        var item = array[i];
        if (this.indexOf(result, item) != -1)
            continue;
        for (var j = 1; j < argsLength; j++) {
            var arr = arguments[j];
            if (arr == null || this.indexOf(arr, item) == -1)
                break;
        }
        if (j === argsLength)
            result.push(item);
    }
    return result;
}
exports.intersect = intersect;
function lastIndexOf(arr, val, fromIndex) {
    if (fromIndex === void 0) { fromIndex = 0; }
    for (var i = arr.length; --i >= fromIndex;) {
        if (arr[i] === val)
            return i;
    }
    return -1;
}
exports.lastIndexOf = lastIndexOf;
function forEach(arr, action) {
    for (var i = 0; i < arr.length; ++i)
        action(arr[i], i, arr);
}
exports.forEach = forEach;
function forEachProp(obj, action) {
    for (var name in obj) {
        if (obj.hasOwnProperty(name))
            action(obj[name], name, obj);
    }
}
exports.forEachProp = forEachProp;
function some(arr, condition) {
    for (var i = 0; i < arr.length; ++i) {
        if (condition(arr[i], i, arr))
            return true;
    }
    return false;
}
exports.some = some;
function every(arr, condition) {
    for (var i = 0; i < arr.length; ++i) {
        if (!condition(arr[i], i, arr))
            return false;
    }
    return true;
}
exports.every = every;
function everyProp(obj, condition) {
    for (var name in obj) {
        if (obj.hasOwnProperty(name) && !condition(obj[name], name, obj))
            return false;
    }
    return true;
}
exports.everyProp = everyProp;
function map(arr, action) {
    var result = new Array();
    forEach(arr, function (item, idx, arr) { return result.push(action(item, idx, arr)); });
    return result;
}
exports.map = map;
function firstIndex(arr, condition) {
    var result = -1;
    some(arr, function (item, index, arr) {
        if (condition(item, index, arr)) {
            result = index;
            return true;
        }
        return false;
    });
    return result;
}
exports.firstIndex = firstIndex;
function first(arr, condition) {
    return arr[firstIndex(arr, condition)];
}
exports.first = first;
function getAllEnumValues(enumType) {
    var results = [];
    for (var i in enumType)
        if (typeof enumType[i] == 'number')
            results.push(enumType[i]);
    return results;
}
exports.getAllEnumValues = getAllEnumValues;
function getUniqueValues(arr) {
    for (var i = 0; i < arr.length; ++i) {
        for (var j = i + 1; j < arr.length; j++)
            if (arr[i] === arr[j]) {
                arr.splice(j, 1);
            }
    }
    return arr;
}
exports.getUniqueValues = getUniqueValues;
function includes(arr, item) {
    if (arr === void 0) { arr = []; }
    return (arr === null || arr === void 0 ? void 0 : arr.indexOf(item)) >= 0;
}
exports.includes = includes;
function containsOnly(arr1, arr2) {
    if (!arr1 || !arr2)
        return false;
    if (arr1.length !== arr2.length)
        return false;
    if (arr1.length === 0 && arr2.length === 0)
        return true;
    return !arr1.some(function (elem) { return !includes(arr2, elem); });
}
exports.containsOnly = containsOnly;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/cookie.ts":
/*!***********************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/cookie.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var LocalInfo_1 = __webpack_require__(/*! src/core/Gigya.Js/app/LocalInfo */ "./src/core/Gigya.Js/app/LocalInfo.ts");
var global_1 = __webpack_require__(/*! ./global */ "./src/core/Gigya.Js/app/Utils/global.ts");
var CookieUtils = /** @class */ (function () {
    function CookieUtils(_cookieStore) {
        if (_cookieStore === void 0) { _cookieStore = new global_1.CookieStore(); }
        this._cookieStore = _cookieStore;
    }
    CookieUtils.prototype.set = function (name, value, expires_in, cookieDomain, dontUseRootPath, sameSite) {
        if (cookieDomain == null) {
            cookieDomain = this.getDefaultDomain();
        }
        var path = dontUseRootPath ? '' : '/';
        var expireMs = this._getExpirationInMs(expires_in);
        var expires = null;
        if (expireMs != null) {
            expires = new Date();
            expires.setTime(expires.getTime() + expireMs);
        }
        var cookieExist = this._setCookieInternal(name, value, path, expires, cookieDomain, sameSite);
        var shouldCookieExist = !expireMs || expireMs > 0;
        if (shouldCookieExist === cookieExist) {
            return true;
        }
        // If failed to set cookie, retry;
        // it might be because the domain is listed as TLD https://data.iana.org/TLD/tlds-alpha-by-domain.txt
        var pageDomain = LocalInfo_1.localInfo.pageDomain;
        cookieExist = this._setCookieInternal(name, value, path, expires, pageDomain, sameSite);
        return cookieExist === shouldCookieExist;
    };
    CookieUtils.prototype.get = function (name) {
        return this._cookieStore.getCookie(name);
    };
    CookieUtils.prototype.remove = function (name, domain) {
        if (domain === void 0) { domain = LocalInfo_1.localInfo.pageDomain; }
        this._removeFromBaseDomains(name, domain);
        this.set(name, '', -1, '', false);
        this.set(name, '', -1, '', true);
    };
    CookieUtils.prototype.getInfiniteExpirationTimeInSeconds = function () {
        // Set expiration time to 1 years
        return 60 * 60 * 24 * 365;
    };
    CookieUtils.prototype.canSaveCookie = function (cookieDomain) {
        if (cookieDomain === void 0) { cookieDomain = null; }
        try {
            return this.set(CookieUtils.testCookieName, 'true', 1, cookieDomain, null);
        }
        catch (e) {
            // iOS 10 webview throws in some scenarios
            return false;
        }
    };
    CookieUtils.prototype.getDefaultDomain = function (pageDomain, baseDomain) {
        if (pageDomain === void 0) { pageDomain = LocalInfo_1.localInfo.pageDomain; }
        if (baseDomain === void 0) { baseDomain = LocalInfo_1.localInfo.baseDomain || ''; }
        return baseDomain.length > 0 && pageDomain.length >= baseDomain.length && pageDomain.lastIndexOf(baseDomain) === pageDomain.length - baseDomain.length
            ? baseDomain
            : pageDomain;
    };
    CookieUtils.prototype._getExpirationInMs = function (expiresIn) {
        var expireMs;
        if (expiresIn == null || expiresIn === '' || isNaN(expiresIn)) {
            expireMs = 1000 * this.getInfiniteExpirationTimeInSeconds();
        }
        else if (expiresIn == 0) {
            // 0 means Session
            expireMs = null;
        }
        else {
            // Any other value is number of seconds (A negative value would mean expire now!)
            expireMs = expiresIn * 1000;
        }
        return expireMs;
    };
    CookieUtils.prototype._setCookieInternal = function (name, value, path, expires, cookieDomain, sameSiteMode) {
        if (sameSiteMode === void 0) { sameSiteMode = CookieUtils._getSameSiteMode(); }
        var _a;
        var protocol = (_a = LocalInfo_1.localInfo === null || LocalInfo_1.localInfo === void 0 ? void 0 : LocalInfo_1.localInfo.protocol) !== null && _a !== void 0 ? _a : document.location.protocol;
        var isSecured = protocol.indexOf('https') === 0;
        this._cookieStore.setCookie(name, value, {
            path: path,
            expires: expires,
            domain: cookieDomain,
            sameSite: sameSiteMode,
            secure: isSecured
        });
        if (this.get(name)) {
            return true;
        }
        if (!sameSiteMode) {
            //if failed to write cookie without sameSite mode, then stop here
            return false;
        }
        if (sameSiteMode !== 'None') {
            this._fallbackToSameSiteNone(name, value, path, expires, cookieDomain, isSecured);
        }
        if (this.get(name)) {
            this._reportFallback('Setting SameSite=None', { name: name, value: value, sameSiteMode: sameSiteMode });
            return true;
        }
        // If failed to write cookie with sameSite mode, retry without;
        this._cookieStore.setCookie(name, value, {
            path: path,
            expires: expires,
            domain: cookieDomain,
            secure: isSecured
        });
        if (this.get(name)) {
            this._reportFallback('Cookie established only without sameSite mode', { name: name, value: value, sameSiteMode: sameSiteMode });
            return true;
        }
        return false;
    };
    CookieUtils.prototype._removeFromBaseDomains = function (name, domain) {
        var domainParts = domain.split('.');
        // when clearing from a.b.c.d.com --> clear from a.b.c.d.com, b.c.d.com, c.d.com, d.com
        for (var i = 0; i < domainParts.length - 1; i++) {
            var domain_1 = domainParts.slice(i).join('.');
            this.set(name, '', -1, domain_1, false);
            this.set(name, '', -1, domain_1, true);
        }
    };
    CookieUtils._getSameSiteMode = function () {
        if (!CookieUtils._disallowSameSiteMode())
            return 'None';
    };
    CookieUtils._disallowSameSiteMode = function () {
        var _a, _b;
        var protocol = (_a = LocalInfo_1.localInfo === null || LocalInfo_1.localInfo === void 0 ? void 0 : LocalInfo_1.localInfo.protocol) !== null && _a !== void 0 ? _a : document.location.protocol;
        var ua = (_b = LocalInfo_1.localInfo === null || LocalInfo_1.localInfo === void 0 ? void 0 : LocalInfo_1.localInfo.userAgent) !== null && _b !== void 0 ? _b : navigator.userAgent.toLowerCase();
        var isSecured = protocol.indexOf('https') === 0;
        return !isSecured || !ua ||
            // Cover all iOS based browsers here. This includes:
            // - Safari on iOS 12 for iPhone, iPod Touch, iPad
            // - WkWebview on iOS 12 for iPhone, iPod Touch, iPad
            // - Chrome on iOS 12 for iPhone, iPod Touch, iPad
            // All of which are broken by SameSite=None, because they use the iOS networking stack
            ((ua.indexOf('CPU iPhone OS 12') > -1 || ua.indexOf('iPad; CPU OS 12') > -1) ||
                // Cover Mac OS X based browsers that use the Mac OS networking stack. This includes:
                // - Safari on Mac OS X.
                // This does not include:
                // - Chrome on Mac OS X
                // Because they do not use the Mac OS networking stack.
                (ua.indexOf('Macintosh; Intel Mac OS X 10_14') > -1 && ua.indexOf('Version/') > -1 && ua.indexOf('Safari') > -1) ||
                // Cover Chrome 50-69, because some versions are broken by SameSite=None,
                // and none in this range require it.
                // Note: this covers some pre-Chromium Edge versions,
                // but pre-Chromium Edge does not require SameSite=None.
                (ua.indexOf('Chrome/5') > -1 && ua.indexOf('Chrome/6') > -1));
    };
    CookieUtils.prototype._fallbackToSameSiteNone = function (name, value, path, expires, cookieDomain, secure) {
        this._cookieStore.setCookie(name, value, {
            path: path,
            expires: expires,
            domain: cookieDomain,
            sameSite: 'None',
            secure: secure
        });
    };
    CookieUtils.prototype._reportFallback = function (message, details) {
        window.gigya.logger.report("Cookie Policy Fallback: " + message, tslib_1.__assign(tslib_1.__assign({}, details), { isIframe: this._isIFrame() }), false);
    };
    CookieUtils.prototype._isIFrame = function () {
        var _a;
        try {
            return (window === null || window === void 0 ? void 0 : window.location) !== ((_a = window === null || window === void 0 ? void 0 : window.parent) === null || _a === void 0 ? void 0 : _a.location);
        }
        catch (e) {
            return true;
        }
    };
    CookieUtils.testCookieName = 'gig3pctest';
    return CookieUtils;
}());
exports.CookieUtils = CookieUtils;
exports.default = new CookieUtils();


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/domains.ts":
/*!************************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/domains.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
var Uri_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/Uri */ "./src/core/Gigya.Js/app/Utils/Uri.ts");
var stringUtilsUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/stringUtils */ "./src/core/Gigya.Js/app/Utils/stringUtils.ts");
var LocalInfo_1 = __webpack_require__(/*! src/core/Gigya.Js/app/LocalInfo */ "./src/core/Gigya.Js/app/LocalInfo.ts");
var FlagService_1 = __webpack_require__(/*! ../Services/FlagService */ "./src/core/Gigya.Js/app/Services/FlagService.ts");
var cookie_1 = __webpack_require__(/*! ./cookie */ "./src/core/Gigya.Js/app/Utils/cookie.ts");
// TODO: move to config
var baseDomains;
if ((_b = (_a = window.gigya.partnerSettings) === null || _a === void 0 ? void 0 : _a.baseDomains) === null || _b === void 0 ? void 0 : _b.length) {
    baseDomains = window.gigya.partnerSettings.baseDomains;
}
else {
    if (window.self === window.top) {
        // only in the top frame
        window.gigya.logger.warn('gigya: missing base domains for site');
    }
    baseDomains = [document.location.hostname];
}
LocalInfo_1.localInfo.baseDomain = getBaseDomain(baseDomains);
var gigyaDomainNamespaces = ['socialize', 'accounts', 'fidm', 'gm', 'comments', 'gcs', 'ids', 'ds', 'gscounters', 'reports'];
function apiDomainFactory(apiDomain, defaultApiDomain) {
    if (apiDomain === void 0) { apiDomain = resolveApiDomain(); }
    if (defaultApiDomain === void 0) { defaultApiDomain = window.gigya.defaultApiDomain; }
    var shouldAddNamespace = Uri_1.Uri.parse(apiDomain).isIn(Uri_1.Uri.parse(defaultApiDomain));
    return function (namespace) {
        if (namespace && shouldAddNamespace) {
            var subDomain = namespace.split('.')[0];
            if (subDomain === 'sdk' || subDomain === 'oauth') {
                subDomain = 'accounts';
            }
            else if (gigyaDomainNamespaces.indexOf(subDomain) == -1) {
                window.gigya.logger.error("trying to send request to an invalid domain");
                subDomain = gigyaDomainNamespaces[0];
            }
            return subDomain + "." + apiDomain;
        }
        else {
            return apiDomain;
        }
    };
}
exports.apiDomainFactory = apiDomainFactory;
function getGigyaDomain(namespace, dataCenter, defaultDomain) {
    if (dataCenter === void 0) { dataCenter = window.gigya.dataCenter; }
    if (defaultDomain === void 0) { defaultDomain = window.gigya.defaultApiDomain; }
    if (defaultDomain === 'sapcdm.cn' && dataCenter !== 'cn1') {
        defaultDomain = "cn1." + defaultDomain; //Fix for cn1-st1. it should be cn1-st1.cn1.sapcdm.cn and not cn1-st1.sapcdm.cn
    }
    var domain = dataCenter + "." + defaultDomain;
    if (namespace)
        return namespace + "." + domain;
    else
        return domain;
}
exports.getGigyaDomain = getGigyaDomain;
function getBaseDomain(baseDomains, currentDomain, defaultDomains) {
    if (baseDomains === void 0) { baseDomains = window.gigya.partnerSettings.baseDomains; }
    if (currentDomain === void 0) { currentDomain = location.hostname; }
    if (defaultDomains === void 0) { defaultDomains = ['gigya.com', 'cn1.sapcdm.cn', 'localhost', window.gigya.defaultApiDomain]; }
    // #49786 - Support webview without hostname.
    if (!currentDomain) {
        return '';
    }
    if (typeof baseDomains == 'string') {
        baseDomains = baseDomains.split(',');
    }
    var originURI = Uri_1.Uri.parse(currentDomain);
    if (defaultDomains) {
        baseDomains = baseDomains.concat(defaultDomains);
    }
    for (var _i = 0, baseDomains_1 = baseDomains; _i < baseDomains_1.length; _i++) {
        var rawDomain = baseDomains_1[_i];
        // This does not take care of wildcards in the middle of string.
        var baseDomain = stringUtilsUtils.replaceAll(rawDomain, '*', '');
        var baseUri = Uri_1.Uri.parse(baseDomain);
        if (baseUri && originURI.isIn(baseUri)) {
            if (!window.gigya._) {
                window.gigya._ = {};
            }
            window.gigya._.isTrustedDomain = true;
            if (baseUri.isForSubDomains()) {
                return originURI.domain;
            }
            else {
                return baseUri.domain;
            }
        }
    }
    // fallback to the parent's window domain (for backward compatibility).
    return originURI.domain;
}
exports.getBaseDomain = getBaseDomain;
function resolveApiDomain(customApiDomainPrefix, baseDomain, dataCenter, defaultApiDomain) {
    if (customApiDomainPrefix === void 0) { customApiDomainPrefix = window.gigya.partnerSettings && window.gigya.partnerSettings.customAPIDomainPrefix; }
    if (baseDomain === void 0) { baseDomain = LocalInfo_1.localInfo.baseDomain; }
    if (dataCenter === void 0) { dataCenter = window.gigya.dataCenter; }
    if (defaultApiDomain === void 0) { defaultApiDomain = window.gigya.defaultApiDomain; }
    var _a;
    var apiDomain = getHostedPagesApiDomainCookie();
    if (apiDomain) {
        return apiDomain;
    }
    // TODO: remove once a solution will be found for hosted pages
    if (baseDomain.endsWith(((_a = window.gigya._.config) === null || _a === void 0 ? void 0 : _a.hostedPagesDomain) || 'my.gigya-ext.com')) {
        return baseDomain;
    }
    if (customApiDomainPrefix && baseDomain && baseDomain !== defaultApiDomain) {
        return customApiDomainPrefix + "." + baseDomain;
    }
    return getGigyaDomain(undefined, dataCenter, defaultApiDomain);
}
exports.resolveApiDomain = resolveApiDomain;
function getStorageDomain() {
    var _a, _b, _c;
    var apiDomain = getHostedPagesApiDomainCookie();
    if (apiDomain) {
        return apiDomain;
    }
    if ((_b = (_a = window.gigya.thisScript) === null || _a === void 0 ? void 0 : _a.globalConf) === null || _b === void 0 ? void 0 : _b['storageDomainOverride']) {
        return window.gigya.thisScript.globalConf['storageDomainOverride'];
    }
    if (((_c = window.gigya.thisScript) === null || _c === void 0 ? void 0 : _c.baseDomain) && FlagService_1.FlagService.useGigyaJsBaseDomain) {
        return window.gigya.thisScript.baseDomain;
    }
    var domain = window.gigya.defaultApiDomain;
    if (window.gigya.utils.stringUtils.endsWith(domain, 'sapcdm.cn') && window.gigya.dataCenter !== 'cn1') { // special case with china domain staging
        domain = "cn1.sapcdm.cn";
    }
    var prefix = window.gigya.dataCenter !== 'global' ? "cdns." + window.gigya.dataCenter : "cdns";
    return prefix + "." + domain;
}
exports.getStorageDomain = getStorageDomain;
function getHostedPagesApiDomainCookie() {
    return cookie_1.default.get("pages_apiDomain_" + window.gigya.apiKey);
}


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/eventDispatcher.ts":
/*!********************************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/eventDispatcher.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var globalEvents = __webpack_require__(/*! ../GlobalEvents */ "./src/core/Gigya.Js/app/GlobalEvents.ts");
var EventDispatcher = /** @class */ (function () {
    function EventDispatcher(eventPrefix) {
        this.eventPrefix = eventPrefix;
        this.eventHandlers = new Map();
    }
    EventDispatcher.prototype.on = function (eventName, handler) {
        var fullEventName = this.getFullEventName(eventName);
        if (!this.eventHandlers.get(fullEventName)) {
            this.eventHandlers.set(fullEventName, []);
        }
        this.eventHandlers.get(fullEventName).push(handler);
    };
    EventDispatcher.prototype.unsubscribe = function (event) {
        var fullEventName = this.getFullEventName(event);
        this.eventHandlers.delete(fullEventName);
    };
    EventDispatcher.prototype.dispatchEvent = function (eventName, data) {
        var fullEventName = this.getFullEventName(eventName);
        for (var _i = 0, _a = this.eventHandlers.get(fullEventName) || []; _i < _a.length; _i++) {
            var fn = _a[_i];
            fn(data);
        }
        globalEvents.dispatch(tslib_1.__assign({ eventName: fullEventName }, data));
    };
    EventDispatcher.prototype.getFullEventName = function (eventName) {
        return "" + this.eventPrefix + eventName;
    };
    return EventDispatcher;
}());
exports.EventDispatcher = EventDispatcher;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/functions.ts":
/*!**************************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/functions.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var DOMUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/DOM */ "./src/core/Gigya.Js/app/Utils/DOM.ts");
var cdn_1 = __webpack_require__(/*! src/core/Gigya.Js/app/cdn */ "./src/core/Gigya.Js/app/cdn.ts");
var LocalInfo_1 = __webpack_require__(/*! src/core/Gigya.Js/app/LocalInfo */ "./src/core/Gigya.Js/app/LocalInfo.ts");
function callAsync(methodName, params) {
    if (params === void 0) { params = {}; }
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, new gigya.Promise(function (resolve) {
                    callFunction("gigya." + methodName, [tslib_1.__assign(tslib_1.__assign({}, params), { callback: resolve })]);
                })];
        });
    });
}
exports.callAsync = callAsync;
function callFunction(name, arParams) {
    var fn = eval(name);
    var arParts = name.split('.');
    arParts.splice(arParts.length - 1, 1);
    var scope = eval(arParts.join('.'));
    fn.apply(scope, arParams);
}
exports.callFunction = callFunction;
function invokeOnPageLoad(func, completeOnly) {
    if ((!document.readyState && document.body) ||
        document.readyState === 'complete' ||
        (!completeOnly && document.readyState === 'interactive' && document.body)) {
        func();
    }
    else {
        var called_1 = false;
        var fnOnLoad = function () {
            if (!called_1) {
                called_1 = true;
                func();
            }
        };
        window.setTimeout(fnOnLoad, 20000); // fallback - sometimes readystate stays stuck on interactive
        DOMUtils.addEventListener(window, 'load', fnOnLoad);
        DOMUtils.addEventListener(document, 'DOMContentLoaded', fnOnLoad);
    }
}
exports.invokeOnPageLoad = invokeOnPageLoad;
function createAlias(publicName, fnc) {
    var arNameSegments = publicName.split('.');
    var oCurrentSegment = window;
    for (var iSegment = 0; iSegment < arNameSegments.length - 1; iSegment++) {
        var sSegment = arNameSegments[iSegment];
        if (!oCurrentSegment[sSegment]) {
            oCurrentSegment[sSegment] = {};
        }
        oCurrentSegment = oCurrentSegment[sSegment];
    }
    oCurrentSegment[arNameSegments[arNameSegments.length - 1]] = fnc;
}
exports.createAlias = createAlias;
function debounce(fn, delayMilliseconds) {
    var timer = undefined;
    return function () {
        if (timer !== undefined) {
            clearTimeout(timer);
        }
        timer = setTimeout(function () {
            timer = undefined;
            fn();
        }, delayMilliseconds);
    };
}
exports.debounce = debounce;
function addSrcToIFrameIfNeeded(iframe, src) {
    if (src === void 0) { src = cdn_1.getCdnResource('/'); }
    if (LocalInfo_1.localInfo.isIOSWebView || (LocalInfo_1.localInfo.isIOS && LocalInfo_1.localInfo.isWeChat)) {
        iframe.setAttribute('src', src);
    }
}
exports.addSrcToIFrameIfNeeded = addSrcToIFrameIfNeeded;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/global.ts":
/*!***********************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/global.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var CookieStore = /** @class */ (function () {
    function CookieStore(_win) {
        if (_win === void 0) { _win = window; }
        this._win = _win;
    }
    CookieStore.prototype.setCookie = function (name, value, options) {
        var cookieString = name + "=" + escape(value);
        if (options.path)
            cookieString += "; path=" + options.path;
        if (options.expires)
            cookieString += "; expires=" + options.expires.toUTCString();
        if (options.domain && options.domain.indexOf('.') != -1)
            cookieString += "; domain=" + options.domain;
        if (options.sameSite)
            cookieString += "; sameSite=" + options.sameSite;
        if (options.secure)
            cookieString += "; secure";
        this._win.document.cookie = cookieString;
    };
    CookieStore.prototype.getCookie = function (name) {
        name = name.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1').replace(/^[ \t]+|[ \t]+$/g, '');
        var regex = new RegExp('(?:^|;)\\s?' + name + '=(.*?)(?:;|$)');
        var match = this._win.document.cookie.match(regex);
        return match && unescape(match[1]);
    };
    return CookieStore;
}());
exports.CookieStore = CookieStore;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/gltexp.ts":
/*!***********************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/gltexp.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function isValid(gltexp) {
    return getMillis(gltexp) > Date.now();
}
exports.isValid = isValid;
function getMax() {
    var gltexps = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        gltexps[_i] = arguments[_i];
    }
    if (!gltexps || !gltexps.length)
        return undefined;
    return gltexps.sort(function (gltexpA, gltexpB) { return getMillis(gltexpB) - getMillis(gltexpA); })[0];
}
exports.getMax = getMax;
function getMillis(gltExp) {
    return !gltExp ? 0 : Number(gltExp.substr(0, gltExp.indexOf('_'))) * 1000;
}
exports.getMillis = getMillis;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/keyValue.ts":
/*!*************************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/keyValue.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var URLUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/URL */ "./src/core/Gigya.Js/app/Utils/URL.ts");
var JSONUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/JSON */ "./src/core/Gigya.Js/app/Utils/JSON.ts");
var FlagService_1 = __webpack_require__(/*! ../Services/FlagService */ "./src/core/Gigya.Js/app/Services/FlagService.ts");
function serialize(oKeyValue, delimiter) {
    var a = [];
    if (!delimiter) {
        delimiter = '&';
    }
    for (var p in oKeyValue) {
        switch (typeof oKeyValue[p]) {
            case 'function':
                break;
            case 'object':
                if (oKeyValue[p] != null) {
                    a.push(p + '=' + URLUtils.URLEncode(JSONUtils.serialize(oKeyValue[p])));
                }
                break;
            case 'undefined':
                break;
            default:
                a.push(p + '=' + URLUtils.URLEncode(oKeyValue[p]));
        }
    }
    var s = a.join(delimiter);
    return s;
}
exports.serialize = serialize;
function deserialize(urlEncodedString, delimiter, keysToLower, useUnescape) {
    var o = {};
    if (!urlEncodedString) {
        return o;
    }
    if (!delimiter) {
        delimiter = '&';
    }
    var pairs = urlEncodedString.split(delimiter);
    for (var iPair = 0; iPair < pairs.length; iPair++) {
        var pair = pairs[iPair];
        var eqPos = pair.indexOf('=');
        if (eqPos === -1) {
            var key = keysToLower ? pair.toLowerCase() : pair;
            o[key] = '1';
        }
        else {
            var key = pair.substr(0, eqPos);
            if (keysToLower) {
                key = key.toLowerCase();
            }
            var serializedValue = pair.substr(eqPos + 1).replace(/\+/g, ' ');
            try {
                if (useUnescape) {
                    o[key] = FlagService_1.FlagService.useDecodeURIComponent ? compareResultsAndReturnURLDecode(serializedValue) : unescape(serializedValue);
                }
                else {
                    o[key] = URLUtils.URLDecode(serializedValue);
                }
            }
            catch (ex) {
                o[key] = FlagService_1.FlagService.useDecodeURIComponent ? URLUtils.URLDecode(serializedValue) : unescape(serializedValue);
            }
        }
    }
    return o;
}
exports.deserialize = deserialize;
function compareResultsAndReturnURLDecode(serializedValue) {
    var unescapedResult = unescape(serializedValue);
    var urlDecodeResult = URLUtils.URLDecode(serializedValue);
    unescapedResult.localeCompare(urlDecodeResult) !== 0 && window.gigya.logger.report('urlDecoder and unescaped have different values', {
        unescapedResult: unescapedResult,
        urlDecodeResult: urlDecodeResult
    });
    return urlDecodeResult;
}


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/localStorage.ts":
/*!*****************************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/localStorage.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var JSONUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/JSON */ "./src/core/Gigya.Js/app/Utils/JSON.ts");
var LocalInfo_1 = __webpack_require__(/*! src/core/Gigya.Js/app/LocalInfo */ "./src/core/Gigya.Js/app/LocalInfo.ts");
var cookie_1 = __webpack_require__(/*! ./cookie */ "./src/core/Gigya.Js/app/Utils/cookie.ts");
var AbstractLocalStorageAdapter = /** @class */ (function () {
    function AbstractLocalStorageAdapter() {
    }
    AbstractLocalStorageAdapter.getName = function () {
        return 'AbstractAdapter';
    };
    /**
     * Set object to storage.
     */
    AbstractLocalStorageAdapter.prototype.setObject = function (key, o) {
        this.setItem(key, JSONUtils.serialize(o));
    };
    /**
     * Get object from local storage.
     */
    AbstractLocalStorageAdapter.prototype.getObject = function (key, defaultValue) {
        return JSONUtils.deserialize(this.getItem(key), defaultValue);
    };
    /**
     * Is persistent storage. Returns false when data is not persisted.
     */
    AbstractLocalStorageAdapter.prototype.isPersistent = function () {
        return true;
    };
    return AbstractLocalStorageAdapter;
}());
exports.AbstractLocalStorageAdapter = AbstractLocalStorageAdapter;
var AbstractAsyncLocalStorageAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(AbstractAsyncLocalStorageAdapter, _super);
    function AbstractAsyncLocalStorageAdapter() {
        var _this = _super.call(this) || this;
        _this.isLoaded = false;
        return _this;
    }
    AbstractAsyncLocalStorageAdapter.prototype.isReady = function () {
        return this.isLoaded;
    };
    /**
     * Used when there is initialization time on the local storage adapter.
     */
    AbstractAsyncLocalStorageAdapter.prototype.waitForService = function (callback) {
        var _this = this;
        if (this.isReady()) {
            callback();
            return;
        }
        else {
            setTimeout(function () { return _this.waitForService(callback); }, 50);
        }
    };
    return AbstractAsyncLocalStorageAdapter;
}(AbstractLocalStorageAdapter));
exports.AbstractAsyncLocalStorageAdapter = AbstractAsyncLocalStorageAdapter;
var StorageAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(StorageAdapter, _super);
    function StorageAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StorageAdapter.prototype.getItem = function (key) {
        return this.storage[key];
    };
    StorageAdapter.prototype.setItem = function (key, value, expiresIn) {
        try {
            this.storage[key] = value;
        }
        catch (ex) { }
    };
    StorageAdapter.prototype.removeItem = function (key) {
        this.storage.removeItem(key);
    };
    return StorageAdapter;
}(AbstractLocalStorageAdapter));
var LocalStorageAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(LocalStorageAdapter, _super);
    function LocalStorageAdapter() {
        var _this = _super.call(this) || this;
        _this.storage = window.localStorage;
        return _this;
    }
    LocalStorageAdapter.getName = function () {
        return 'LocalStorageAdapter';
    };
    LocalStorageAdapter.isAvailable = function () {
        return LocalInfo_1.localInfo.supportsLocalStorage;
    };
    return LocalStorageAdapter;
}(StorageAdapter));
var SessionStorageAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(SessionStorageAdapter, _super);
    function SessionStorageAdapter() {
        var _this = _super.call(this) || this;
        _this.storage = window.sessionStorage;
        return _this;
    }
    SessionStorageAdapter.getName = function () {
        return 'SessionStorageAdapter';
    };
    SessionStorageAdapter.isAvailable = function () {
        return LocalInfo_1.localInfo.supportsSessionStorage;
    };
    return SessionStorageAdapter;
}(StorageAdapter));
var FirefoxStorageAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(FirefoxStorageAdapter, _super);
    function FirefoxStorageAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirefoxStorageAdapter.isAvailable = function () {
        return LocalInfo_1.localInfo.isFF && window['globalStorage'];
    };
    FirefoxStorageAdapter.getName = function () {
        return 'FirefoxStorageAdapter';
    };
    FirefoxStorageAdapter.prototype.getItem = function (key) {
        return window['globalStorage'][location.hostname][key];
    };
    FirefoxStorageAdapter.prototype.setItem = function (key, value, expiresIn) {
        try {
            window['globalStorage'][location.hostname][key] = value;
        }
        catch (ex) { }
    };
    FirefoxStorageAdapter.prototype.removeItem = function (key) {
        delete window['globalStorage'][location.hostname][key];
    };
    return FirefoxStorageAdapter;
}(AbstractLocalStorageAdapter));
var CookieStorageAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(CookieStorageAdapter, _super);
    function CookieStorageAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CookieStorageAdapter.isAvailable = function () {
        return cookie_1.default.canSaveCookie();
    };
    CookieStorageAdapter.getName = function () {
        return 'CookieStorageAdapter';
    };
    CookieStorageAdapter.prototype.getItem = function (key) {
        return cookie_1.default.get(key);
    };
    CookieStorageAdapter.prototype.setItem = function (key, value, expiresIn, domain, additionalParams) {
        if (additionalParams === void 0) { additionalParams = {}; }
        cookie_1.default.set(key, value, expiresIn, domain, additionalParams.dontUseRootPath, additionalParams.sameSite);
    };
    CookieStorageAdapter.prototype.removeItem = function (key) {
        cookie_1.default.remove(key);
    };
    return CookieStorageAdapter;
}(AbstractLocalStorageAdapter));
exports.CookieStorageAdapter = CookieStorageAdapter;
var MemoryStorageAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(MemoryStorageAdapter, _super);
    function MemoryStorageAdapter() {
        var _this = _super.call(this) || this;
        _this.memory = {};
        return _this;
    }
    MemoryStorageAdapter.isAvailable = function () {
        return true;
    };
    MemoryStorageAdapter.getName = function () {
        return 'MemoryStorageAdapter';
    };
    MemoryStorageAdapter.prototype.getItem = function (key) {
        return this.memory[key];
    };
    MemoryStorageAdapter.prototype.setItem = function (key, value, expiresIn) {
        this.memory[key] = value;
    };
    MemoryStorageAdapter.prototype.removeItem = function (key) {
        delete this.memory[key];
    };
    /**
     * Is persistent storage. Returns false when data is not persisted.
     */
    MemoryStorageAdapter.prototype.isPersistent = function () {
        return false;
    };
    return MemoryStorageAdapter;
}(AbstractLocalStorageAdapter));
exports.MemoryStorageAdapter = MemoryStorageAdapter;
exports.adapters = [
    LocalStorageAdapter,
    SessionStorageAdapter,
    FirefoxStorageAdapter,
    CookieStorageAdapter,
    MemoryStorageAdapter,
];
exports.instances = {};
function initializeAdapter(adapter) {
    var adapterName = adapter.getName() || adapter.name;
    if (!exports.instances[adapterName]) {
        exports.instances[adapterName] = new adapter();
    }
    return exports.instances[adapterName];
}
exports.initializeAdapter = initializeAdapter;
function waitForService(callback) {
    // Select compatible adapter.
    var storage;
    for (var _i = 0, adapters_1 = exports.adapters; _i < adapters_1.length; _i++) {
        var adapter_1 = adapters_1[_i];
        if (adapter_1.isAvailable()) {
            // Don't select adapter if it's async and a callback wasn't provided.
            if (adapter_1.prototype instanceof AbstractAsyncLocalStorageAdapter && !callback) {
                continue;
            }
            storage = initializeAdapter(adapter_1);
            break;
        }
    }
    // Fallback to memory-based non-persistent storage.
    if (!storage) {
        storage = initializeAdapter(MemoryStorageAdapter);
    }
    // Trigger callback when adapter finishes loading (or instantly, if not required to wait).
    if (callback) {
        if (storage instanceof AbstractAsyncLocalStorageAdapter) {
            storage.waitForService(function () {
                callback(storage);
            });
        }
        else {
            callback(storage);
        }
    }
    return storage;
}
exports.waitForService = waitForService;
var adapter = waitForService();
function getItem(key) {
    return adapter.getItem(key);
}
exports.getItem = getItem;
function setItem(key, value, expiresIn) {
    return adapter.setItem(key, value, expiresIn);
}
exports.setItem = setItem;
function removeItem(key) {
    return adapter.removeItem(key);
}
exports.removeItem = removeItem;
function setObject(key, o) {
    return adapter.setObject(key, o);
}
exports.setObject = setObject;
function getObject(key, defaultValue) {
    return adapter.getObject(key, defaultValue);
}
exports.getObject = getObject;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/object.ts":
/*!***********************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/object.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_Object_dot_assign) {Object.defineProperty(exports, "__esModule", { value: true });
var JSONUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/JSON */ "./src/core/Gigya.Js/app/Utils/JSON.ts");
var toggles_1 = __webpack_require__(/*! ./toggles */ "./src/core/Gigya.Js/app/Utils/toggles.ts");
function removeUndefined(o) {
    var o2 = {};
    for (var p in o) {
        if (o[p] != null && o[p] != undefined) {
            o2[p] = o[p];
        }
    }
    return o2;
}
exports.removeUndefined = removeUndefined;
function expressionHelper(context) {
    context = context || {};
    return {
        getField: function (path) {
            if (!path)
                return undefined;
            var paths = path.split('.'), current = context, i;
            for (i = 0; i < paths.length; ++i) {
                if (current[paths[i]] == undefined) {
                    return undefined;
                }
                else {
                    current = current[paths[i]];
                }
            }
            return current;
        },
    };
}
exports.expressionHelper = expressionHelper;
function getPropertyBySerializedName(o, name, createMissingObjects) {
    if (!name)
        return o;
    var oResult = o;
    var arNameSegments = name.split('.');
    for (var iSegment = 0; iSegment < arNameSegments.length; iSegment++) {
        var sSegment = arNameSegments[iSegment];
        var sIndex = null;
        //Support for array access. i.e. "obj.prop1[0].prop2"
        if (sSegment.match(/\[[0-9]+]/)) {
            sIndex = Number(sSegment.match(/\[[0-9]+]/)[0].replace(/[\[\]]/g, ''));
        }
        sSegment = sSegment.split(/\[[0-9]+]/).join('');
        var res = (sIndex || sIndex === 0) && oResult[sSegment] ? oResult[sSegment][sIndex] : oResult[sSegment];
        if (createMissingObjects && !oResult[sSegment]) {
            oResult[sSegment] = {};
        }
        else if (createMissingObjects && !res && res !== false) {
            oResult[sSegment] = [];
        }
        if (res || res === false) {
            oResult = res;
        }
        else {
            return null;
        }
    }
    return oResult;
}
exports.getPropertyBySerializedName = getPropertyBySerializedName;
function setPropertyBySerializedName(o, name, value) {
    var arNameSegments = name.split('.');
    var propertyName = arNameSegments.pop();
    getPropertyBySerializedName(o, arNameSegments.join('.'), true)[propertyName] = value;
}
exports.setPropertyBySerializedName = setPropertyBySerializedName;
function add(oTarget, o, dontOverride) {
    for (var p in o) {
        if (!dontOverride || typeof oTarget[p] === 'undefined') {
            oTarget[p] = o[p];
        }
    }
}
exports.add = add;
function getHash(o) {
    var ar = [];
    for (var p in o) {
        var s;
        if (typeof o[p] == 'object')
            s = JSONUtils.serialize(o[p], false);
        else if (o[p])
            s = o[p].toString();
        ar.push(p + '=' + s);
    }
    return ar.sort().join('&');
}
exports.getHash = getHash;
function getMurmurHash(key, seed) {
    if (!seed)
        seed = 0;
    var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i;
    remainder = key.length & 3; // key.length % 4
    bytes = key.length - remainder;
    h1 = seed;
    c1 = 0xcc9e2d51;
    c2 = 0x1b873593;
    i = 0;
    while (i < bytes) {
        k1 = (key.charCodeAt(i) & 0xff) | ((key.charCodeAt(++i) & 0xff) << 8) | ((key.charCodeAt(++i) & 0xff) << 16) | ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;
        k1 = ((k1 & 0xffff) * c1 + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((k1 & 0xffff) * c2 + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((h1 & 0xffff) * 5 + ((((h1 >>> 16) * 5) & 0xffff) << 16)) & 0xffffffff;
        h1 = (h1b & 0xffff) + 0x6b64 + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16);
    }
    k1 = 0;
    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= key.charCodeAt(i) & 0xff;
            k1 = ((k1 & 0xffff) * c1 + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = ((k1 & 0xffff) * c2 + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
            h1 ^= k1;
    }
    h1 ^= key.length;
    h1 ^= h1 >>> 16;
    h1 = ((h1 & 0xffff) * 0x85ebca6b + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = ((h1 & 0xffff) * 0xc2b2ae35 + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 16;
    return h1 >>> 0;
}
exports.getMurmurHash = getMurmurHash;
function clone(obj, deepCopy, ignoreFunctions, maxLevel, level, ignoreContext) {
    if (maxLevel === void 0) { maxLevel = 20; }
    if (level === void 0) { level = 0; }
    if (obj === window)
        return window; // do not clone the window object
    if (level > maxLevel)
        return null; // Too deep
    if (typeof obj == 'undefined' || obj == null) {
        return toggles_1.default.isOn('removeUndefinedProperties') ? obj : null;
    }
    else if (typeof obj == 'function' && ignoreFunctions) {
        return null;
    }
    else if (obj.constructor == Array) {
        var ar = [];
        for (var i = 0; i < obj.length; i++) {
            if (!ignoreFunctions || typeof obj[i] != 'function') {
                if (deepCopy) {
                    ar[i] = clone(obj[i], deepCopy, ignoreFunctions, maxLevel, level + 1, ignoreContext);
                }
                else {
                    ar[i] = obj[i];
                }
            }
        }
        return ar;
    }
    else if (typeof obj == 'object') {
        var o = {};
        for (var p in obj) {
            if (ignoreContext && p == 'context')
                continue;
            if (!ignoreFunctions || typeof obj[p] != 'function') {
                if (deepCopy) {
                    o[p] = clone(obj[p], deepCopy, ignoreFunctions, maxLevel, level + 1, ignoreContext);
                }
                else {
                    o[p] = obj[p];
                }
            }
        }
        return o;
    }
    else {
        return obj;
    }
}
exports.clone = clone;
function merge(args, isDeepMerge) {
    var o = {};
    for (var i = 0; i < args.length; i++) {
        if (args[i] && args[i].length) {
            for (var u = 0; u < args[i].length; u++) {
                for (var p in args[i][u]) {
                    o[p] = args[i][u][p];
                }
            }
        }
        else {
            // Merge objects.
            if (!isDeepMerge) {
                // Flat merge.
                for (var p in args[i]) {
                    o[p] = args[i][p];
                }
            }
            else {
                // Deep merge.
                for (var p in args[i]) {
                    //we override primitive / array
                    if (typeof o[p] !== 'object' || o[p] instanceof Array) {
                        o[p] = args[i][p];
                    }
                    else {
                        o[p] = merge([o[p], args[i][p]], true);
                    }
                }
            }
        }
    }
    return o;
}
exports.merge = merge;
function unflatten(data) {
    if (Object(data) !== data || Array.isArray(data)) {
        return data;
    }
    var result = {};
    for (var p in data) {
        var cur = result;
        var prop = '';
        var parts = p.replace(/\[([0-9])]/, '.$1').split('.');
        for (var i = 0; i < parts.length; i++) {
            var idx = !isNaN(Number(parts[i]));
            cur = cur[prop] || (cur[prop] = idx ? [] : {});
            prop = parts[i];
        }
        cur[prop] = data[p];
    }
    return result[''] || {};
}
exports.unflatten = unflatten;
function flatten(data, withBracket) {
    if (withBracket === void 0) { withBracket = false; }
    var result = {};
    function recurse(cur, prop) {
        if (Object(cur) !== cur) {
            result[prop] = cur;
        }
        else if (Array.isArray(cur)) {
            var l = cur.length;
            for (var i = 0; i < l; i++) {
                var nestedProperty = withBracket ? prop + "[" + i + "]" : prop + "." + i;
                recurse(cur[i], prop ? nestedProperty : String(i));
            }
            if (l === 0) {
                result[prop] = [];
            }
        }
        else {
            var isEmpty = true;
            for (var p in cur) {
                isEmpty = false;
                recurse(cur[p], prop ? prop + "." + p : p);
            }
            if (isEmpty && prop !== '') {
                result[prop] = {};
            }
        }
    }
    recurse(data, '');
    return result;
}
exports.flatten = flatten;
function extractProperties(src, dest, schema) {
    if (src == null)
        return;
    if (dest == null)
        dest = {};
    if (src.constructor == Array) {
        for (var iSrc = 0; iSrc < src.length; iSrc++) {
            extractProperties(src[iSrc], dest, schema);
        }
    }
    else if (schema) {
        var arSchema = schema.split('|');
        var srcLCase = {};
        for (var fieldName in src) {
            srcLCase[fieldName.toLowerCase()] = 1;
        }
        for (var i = 0; i < arSchema.length; i++) {
            var fieldName2 = arSchema[i];
            if (srcLCase[fieldName2.toLowerCase()])
                dest[fieldName2] = src[fieldName2];
        }
    }
    else {
        dest = clone(src, false);
    }
    return dest;
}
exports.extractProperties = extractProperties;
function extractProperty(src, paramName) {
    var params;
    return extractProperties(src, params, paramName)[paramName];
}
exports.extractProperty = extractProperty;
function parseToObject(str) {
    try {
        var parsedVal = window['JSON'].parse(str);
        if (typeof parsedVal == 'object') {
            return parsedVal;
        }
    }
    catch (e) { }
    return undefined;
}
exports.parseToObject = parseToObject;
function removePropertiesPrefix(obj, prefix) {
    if (obj === void 0) { obj = {}; }
    if (prefix === void 0) { prefix = ''; }
    return Object.keys(obj).reduce(function (acc, curr) {
        var _a;
        return (__webpack_provided_Object_dot_assign(acc, (_a = {}, _a[curr.replace(prefix, '')] = obj[curr], _a)));
    }, {});
}
exports.removePropertiesPrefix = removePropertiesPrefix;
function addPrefixToProperties(obj, prefix) {
    if (obj === void 0) { obj = {}; }
    if (prefix === void 0) { prefix = ''; }
    return Object.keys(obj).reduce(function (acc, key) {
        if (key.indexOf(prefix) !== 0) {
            acc["" + prefix + key] = obj[key];
        }
        else {
            acc[key] = obj[key];
        }
        return acc;
    }, {});
}
exports.addPrefixToProperties = addPrefixToProperties;
function normalizeObjectKeysToLowerCase(object) {
    // Normalize all keys to lowercase in addition to their original casing.
    for (var key in object) {
        object[key.toLowerCase()] = object[key];
    }
    return object;
}
exports.normalizeObjectKeysToLowerCase = normalizeObjectKeysToLowerCase;
function decodeObjectKeys(obj) {
    var decodeObjectKeys = {};
    for (var key in obj) {
        var decodedKey = key;
        while (decodedKey.indexOf('%') !== -1) {
            decodedKey = decodeURIComponent(decodedKey);
        }
        decodeObjectKeys[decodedKey] = obj[key];
    }
    return decodeObjectKeys;
}
exports.decodeObjectKeys = decodeObjectKeys;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js")["__assign"]))

/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/promise.ts":
/*!************************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/promise.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
function promisify(method, params) {
    if (params === void 0) { params = {}; }
    return new gigya.Promise(function (resolve) {
        method(tslib_1.__assign(tslib_1.__assign({}, params), { callback: function (response) {
                resolve(response);
            } }));
    });
}
exports.promisify = promisify;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/queue.ts":
/*!**********************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/queue.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var _q = {};
function _servicesStatus() {
    var services = {};
    for (var service in _q) {
        var active = isActive(service);
        if (active) {
            services[service] = {
                active: true,
                waitingFor: _q[service].ids,
                queuedCount: _q[service].q.length,
            };
        }
        else {
            services[service] = {
                active: false,
            };
        }
    }
    return services;
}
exports._servicesStatus = _servicesStatus;
function isActive(service) {
    if (!_q[service])
        return false;
    for (var id in _q[service].ids)
        return true;
    return false;
}
exports.isActive = isActive;
function release(id, service) {
    window.gigya.logger.debug("releasing " + service + " queue by " + id);
    if (!_q[service])
        return;
    delete _q[service].ids[id];
    if (!isActive(service)) {
        var q = _q[service].q;
        _q[service].q = [];
        while (q.length > 0) {
            var o = q.splice(0, 1)[0];
            try {
                o.func.apply(this, o.args);
            }
            catch (ex) {
                if (typeof console == 'object' && console.log) {
                    console.log('Gigya: Exception while invoking queued method (' + service + ': ' + id + ')');
                }
            }
            if (isActive(service)) {
                //queue became inactive
                _q[service].q = q;
                break;
            }
        }
    }
}
exports.release = release;
function hold(id, service) {
    window.gigya.logger.debug("locking queue " + service + " by " + id);
    if (!_q[service])
        _q[service] = { q: [], ids: {} };
    _q[service].ids[id] = true;
}
exports.hold = hold;
function waitFor(service, fnc, args) {
    if (!_q[service])
        _q[service] = { q: [], ids: {} };
    _q[service].q.push({ func: fnc, args: args });
}
exports.waitFor = waitFor;
function queueForExecution(service, func, args) {
    args = args || [];
    if (isActive(service)) {
        waitFor(service, func, args);
    }
    else {
        func.apply(this, args);
    }
}
exports.queueForExecution = queueForExecution;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/script.ts":
/*!***********************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/script.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Uri_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/Uri */ "./src/core/Gigya.Js/app/Utils/Uri.ts");
var LocalInfo_1 = __webpack_require__(/*! src/core/Gigya.Js/app/LocalInfo */ "./src/core/Gigya.Js/app/LocalInfo.ts");
var arrayUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/array */ "./src/core/Gigya.Js/app/Utils/array.ts");
var functionsUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/functions */ "./src/core/Gigya.Js/app/Utils/functions.ts");
var DOMUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/DOM */ "./src/core/Gigya.Js/app/Utils/DOM.ts");
var cdn_1 = __webpack_require__(/*! src/core/Gigya.Js/app/cdn */ "./src/core/Gigya.Js/app/cdn.ts");
var pending = {};
function addSdkVersion(url) {
    var scriptUrl = Uri_1.Uri.parse(url);
    scriptUrl.addToSearch({ version: window.gigya.build.version });
    return scriptUrl.toString();
}
function formatSrcUrl(src) {
    // remove cdn domain number
    return src.replace(/^http(s?):\/\/cdn(s?)[0-9]*.gigya.com\//, 'http$1://cdn$2.gigya.com/');
}
function isLoaded(src) {
    var pendingSrc = formatSrcUrl(src);
    return Boolean(pending[pendingSrc] && pending[pendingSrc].loaded);
}
exports.isLoaded = isLoaded;
function load(src, fnOnError, fnOnLoad, loadOnce, removeAfter, treatTogether) {
    if (removeAfter === void 0) { removeAfter = 5000; }
    var oScript;
    if (src.indexOf('//') === 0) {
        src = LocalInfo_1.localInfo.protocol + ':' + src;
    }
    if (loadOnce) {
        var pendingSrc = formatSrcUrl(src);
        if (pending[pendingSrc]) {
            if (pending[pendingSrc].loaded) {
                window.gigya.logger.debug("script was already loaded:", { src: src });
                if (fnOnLoad) {
                    fnOnLoad();
                }
            }
            else {
                pending[pendingSrc].onLoad.push(fnOnLoad);
                pending[pendingSrc].onError.push(fnOnError);
            }
            return;
        }
        oScript = pending[pendingSrc] = { loaded: false, onLoad: [fnOnLoad], onError: [fnOnError] };
        if (treatTogether && treatTogether.length > 0) {
            arrayUtils.forEach(treatTogether, function (url) {
                pending[url] = oScript;
            });
        }
    }
    else {
        // multiple loads
        oScript = { loaded: false, onLoad: [fnOnLoad], onError: [fnOnError] };
    }
    var scriptLoader = function () {
        var script = document.createElement('script');
        script.async = true;
        script.type = 'text/javascript';
        script.charset = 'UTF-8';
        var done = false;
        var fnOnScriptLoad = function () {
            if (!done) {
                if (oScript.onLoad && oScript.onLoad.length) {
                    for (var i = 0; i < oScript.onLoad.length; i++) {
                        if (typeof oScript.onLoad[i] === 'function') {
                            oScript.onLoad[i]();
                        }
                    }
                }
                oScript.loaded = true;
                oScript.onError = oScript.onLoad = null; // remove memory leak
                done = true;
                if (removeAfter === true) {
                    removeAfter = 0;
                }
                if (removeAfter !== false) {
                    setTimeout(function () {
                        if (script.parentNode) {
                            script.parentNode.removeChild(script);
                        }
                    }, removeAfter);
                }
            }
        };
        script.onload = fnOnScriptLoad;
        script['onreadystatechange'] = function () {
            if (this.readyState === 'loaded') {
                fnOnScriptLoad();
            }
        };
        script.onerror = function () {
            for (var i = 0; i < oScript.onError.length; i++) {
                if (typeof oScript.onError[i] === 'function') {
                    oScript.onError[i]();
                }
            }
            delete pending[src];
        };
        var head = document.getElementsByTagName('head');
        if (head && head.length > 0) {
            head[0].appendChild(script);
        }
        var fnSetScriptSrc = function () {
            var webSdkResourcesDomain = new RegExp("^https?://cdns?.*" + window.gigya.defaultApiDomain + "/.*gigya.js");
            var scriptSrc = webSdkResourcesDomain.test(src) ? addSdkVersion(src) : src;
            script.src = scriptSrc;
        };
        if (LocalInfo_1.localInfo.iosVersion >= 6) {
            // iOS 6 breaks setTimeout when animation is active (switching tabs back from a login sequence)
            fnSetScriptSrc();
        }
        else {
            setTimeout(fnSetScriptSrc, 1); // Doing this async gives better performance in older browsers
        }
    };
    if (LocalInfo_1.localInfo.isIE) {
        functionsUtils.invokeOnPageLoad(scriptLoader);
    }
    else {
        scriptLoader();
    }
}
exports.load = load;
var ResourceTypes;
(function (ResourceTypes) {
    ResourceTypes[ResourceTypes["script"] = 0] = "script";
    ResourceTypes[ResourceTypes["image"] = 1] = "image";
    ResourceTypes[ResourceTypes["iframe"] = 2] = "iframe";
})(ResourceTypes = exports.ResourceTypes || (exports.ResourceTypes = {}));
function triggerResource(url, callback, resourceType, removeAfter) {
    if (resourceType === void 0) { resourceType = ResourceTypes.image; }
    if (removeAfter === void 0) { removeAfter = 5000; }
    switch (resourceType) {
        case ResourceTypes.script:
            load(url, callback, callback, false, removeAfter);
            break;
        case ResourceTypes.image:
            loadImage(url, callback);
            break;
        case ResourceTypes.iframe:
            loadIframe(url, callback, removeAfter);
            break;
        default:
            throw new Error('Unsupported resource type');
    }
}
exports.triggerResource = triggerResource;
function loadImage(url, callback) {
    var img = new Image();
    var loaded = false;
    var fnOnLoad = function () {
        if (!loaded) {
            loaded = true;
            callback();
        }
    };
    img.onload = img.onerror = fnOnLoad;
    img.src = url;
}
function loadIframe(url, callback, removeAfter) {
    if (removeAfter === void 0) { removeAfter = 5000; }
    var ifr = document.createElement('iframe');
    ifr.style.width = '30px';
    ifr.style.height = '10px';
    ifr.style.position = 'absolute';
    ifr.style.top = '-1000px';
    ifr.style.left = '-1000px';
    if (removeAfter === true) {
        removeAfter = 0;
    }
    var fnOnLoad = function (e) {
        var el;
        if (e && e.srcElement) {
            el = e.srcElement;
        }
        else if (e && e.target) {
            el = e.target;
        }
        else {
            el = this;
        }
        if (!el.loaded && el.parentNode) {
            el.loaded = true;
            callback();
            if (removeAfter !== false) {
                window.setTimeout(function () {
                    try {
                        document.body.removeChild(el);
                    }
                    catch (ex) { }
                }, removeAfter);
            }
        }
    };
    DOMUtils.addEventListener(ifr, 'load', fnOnLoad);
    DOMUtils.addEventListener(ifr, 'error', fnOnLoad);
    ifr.onload = function (e) {
        fnOnLoad(e);
    };
    ifr.onerror = fnOnLoad;
    ifr.src = url;
    DOMUtils.appendToBody(ifr);
}
function loadService(serviceName, fnOnError, fnOnLoad) {
    var url = cdn_1.getCdnResource() + '/js/gigya.services.' + serviceName + '.js';
    load(url, function () {
        if (typeof console === 'object' && console.error) {
            console.error('error loading gigya service ' + serviceName + ' from url: ' + url);
            if (fnOnError) {
                fnOnError();
            }
        }
    }, fnOnLoad, true);
}
exports.loadService = loadService;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/sessionCache.ts":
/*!*****************************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/sessionCache.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var JSONUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/JSON */ "./src/core/Gigya.Js/app/Utils/JSON.ts");
var queueUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/queue */ "./src/core/Gigya.Js/app/Utils/queue.ts");
var FlagService_1 = __webpack_require__(/*! ../Services/FlagService */ "./src/core/Gigya.Js/app/Services/FlagService.ts");
var sessionStorageEnabled;
try {
    sessionStorageEnabled = Boolean(window.sessionStorage); // when 3pc blocked, chrome throws when trying to access session storage.
}
catch (ex) {
    sessionStorageEnabled = false;
}
function set(key, response) {
    if (!sessionStorageEnabled)
        return;
    var oGigya;
    try {
        oGigya = JSONUtils.deserialize(window.sessionStorage.getItem('gigyaCache'));
        if (response == null && oGigya[key]) {
            delete oGigya[key];
        }
        else {
            var time = new Date().getTime();
            oGigya[key] = { response: response, time: time };
            if (key.indexOf('gig_oidcContext_') >= 0) {
                window.gigya.logger.report('oidc storage logs - set', {
                    key: key,
                    value: oGigya[key]
                }, false, FlagService_1.FlagService.forceErrorReport);
            }
        }
        window.sessionStorage.setItem('gigyaCache', JSONUtils.serialize(oGigya));
    }
    catch (ex) { }
    queueUtils.release('cache', 'cache_' + key);
}
exports.set = set;
function get(key, cacheTimeout) {
    if (cacheTimeout === void 0) { cacheTimeout = -1; }
    if (!sessionStorageEnabled) {
        return null;
    }
    try {
        if (!queueUtils.isActive('cache_' + key)) {
            var sGigyaCache = window.sessionStorage.getItem('gigyaCache');
            var oGigya = JSONUtils.deserialize(sGigyaCache);
            var cached = oGigya[key];
            if (cached) {
                var currentTime = new Date().getTime();
                if (cacheTimeout < 0 || cacheTimeout + cached.time > currentTime) {
                    //cached
                    return cached.response;
                }
                else {
                    if (key.indexOf('gig_oidcContext_') >= 0) {
                        window.gigya.logger.report('oidc storage logs - get', {
                            key: key,
                            value: oGigya[key],
                            cacheTime: cached.time,
                            currentTime: currentTime
                        }, false, FlagService_1.FlagService.forceErrorReport);
                    }
                    //expired
                    remove(key);
                    return null;
                }
            }
            if (!cached) {
                //not cached (first time)
                queueUtils.hold('cache', 'cache_' + key); //so that future requests will wait for the first one's response.
                return null;
            }
        }
        else {
            //wait for first response
            queueUtils.waitFor('cache_' + key, get, arguments);
            return null;
        }
    }
    catch (ex) { }
    return null;
}
exports.get = get;
function remove(key) {
    set(key, null);
}
exports.remove = remove;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/stringUtils.ts":
/*!****************************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/stringUtils.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function trim(s) {
    return s.replace(/^\s*(\S*(.*\S)?)\s*$/, '$1');
}
exports.trim = trim;
function format(s) {
    var rest = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rest[_i - 1] = arguments[_i];
    }
    for (var i = 0; i < arguments.length - 1; i++) {
        if (arguments[i + 1] != null) {
            s = s.split('{' + i + '}').join(arguments[i + 1]);
        }
    }
    return s;
}
exports.format = format;
function capitalize(s) {
    return s.substring(0, 1).toUpperCase() + s.substring(1);
}
exports.capitalize = capitalize;
function endsWith(s, suffix) {
    return s.indexOf(suffix, s.length - suffix.length) !== -1;
}
exports.endsWith = endsWith;
function escapeRegExp(str) {
    return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1');
}
exports.escapeRegExp = escapeRegExp;
function replaceAll(str, find, replace) {
    if (!find)
        return str;
    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
}
exports.replaceAll = replaceAll;
function mergeCommaSeparatedValues(str1, str2) {
    if (str1 === void 0) { str1 = ''; }
    if (str2 === void 0) { str2 = ''; }
    var arr = str1.concat(',', str2).split(',');
    return window.gigya.utils.array.getUniqueValues(arr).filter(function (x) { return x; }).join(',');
}
exports.mergeCommaSeparatedValues = mergeCommaSeparatedValues;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/templates.ts":
/*!**************************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/templates.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function fill(template, o) {
    if (typeof template == 'function') {
        template = template(o);
    }
    if (template instanceof Array) {
        template = template.join('');
    }
    var p = /(\$)(!?)([a-z_][a-z_.\d]*)([(][^()]*[)])?|(\$)(!?)\{([a-z_][a-z_.\d]*)([(][^()]*[)])?\}/gi;
    p.lastIndex = 0;
    var res = template;
    var matches = p.exec(res);
    var offset;
    while (matches != null) {
        if (matches[1] == '$') {
            offset = 0;
        }
        else {
            offset = 4;
        }
        var blnDontInject = matches[2 + offset] == '!';
        var identifier = matches[3 + offset]; // 0 is the entire expr and 1/5=$ 2/6=! 3/7=identifier 4/8=()'s
        var para = matches[4 + offset];
        if (para == null)
            para = '';
        var dbg = 0;
        if (identifier.substring(0, 1) == '.') {
            identifier = identifier.substring(1);
        }
        if (identifier.substring(0, 3) == 'DBG') {
            identifier = identifier.substring(3);
            dbg = 1;
        }
        var preTemp = '';
        var postTemp = identifier + para;
        while (postTemp != preTemp) {
            preTemp = postTemp;
            var lastIndex = p.lastIndex;
            postTemp = fill(preTemp, o);
            p.lastIndex = lastIndex;
        }
        var v = '';
        var skipChars = 0;
        if (o[identifier.split('.')[0]] != null) {
            try {
                v = new Function('o', 'p', 'return eval("o." + p)')(o, postTemp);
            }
            catch (e) { }
        }
        else {
            v = '$' + (blnDontInject ? '!' : '') + postTemp;
            skipChars = 1;
        }
        if (blnDontInject) {
            res = res.replace(matches[0], '');
        }
        else {
            res = res.substr(0, matches.index) + v + res.substr(matches.index + matches[0].length);
            //res=res.split(matches[0]).join(v);
        }
        p.lastIndex = matches.index + skipChars; // to allow recursive changes in templates that contain templates.
        matches = p.exec(res);
    }
    return res;
}
exports.fill = fill;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/toggles.ts":
/*!************************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/toggles.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var objectUtils = __webpack_require__(/*! ./object */ "./src/core/Gigya.Js/app/Utils/object.ts");
var WebSDKToggles = /** @class */ (function () {
    function WebSDKToggles() {
    }
    WebSDKToggles.prototype.has = function (key) {
        return typeof this._toggles[key] != 'undefined';
    };
    WebSDKToggles.prototype.get = function (key) {
        return this._toggles[key];
    };
    WebSDKToggles.prototype.isOn = function (key) {
        return this.has(key) && this.get(key);
    };
    Object.defineProperty(WebSDKToggles.prototype, "_toggles", {
        get: function () {
            return objectUtils.merge([
                this._globalConfToggles,
                this._webSdkConfigToggles
            ]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebSDKToggles.prototype, "_globalConfToggles", {
        get: function () {
            var _a, _b;
            return ((_b = (_a = window.gigya.thisScript) === null || _a === void 0 ? void 0 : _a.globalConf) === null || _b === void 0 ? void 0 : _b.toggles) || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebSDKToggles.prototype, "_webSdkConfigToggles", {
        get: function () {
            var _a, _b;
            var toggles = ((_b = (_a = window.gigya._) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.toggles) || {};
            return Object.keys(toggles).reduce(function (newToggles, key) {
                newToggles[key] = toggles[key] === 'on';
                return newToggles;
            }, {});
        },
        enumerable: true,
        configurable: true
    });
    return WebSDKToggles;
}());
exports.default = new WebSDKToggles();


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/validation.ts":
/*!***************************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/validation.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function isExplicitTrue(val) {
    var lc = ('' + val).toLowerCase();
    return lc == 'true' || lc == '1';
}
exports.isExplicitTrue = isExplicitTrue;
function isExplicitFalse(val) {
    var lc = ('' + val).toLowerCase();
    return lc == 'false' || lc == '0';
}
exports.isExplicitFalse = isExplicitFalse;
function isLaterThanNow(expirationTime) {
    return expirationTime > new Date().getTime();
}
exports.isLaterThanNow = isLaterThanNow;
function allDefinedOrAllUndefined() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var anyUndefined = args.some(function (x) { return typeof x === 'undefined'; });
    var anyDefined = args.some(function (x) { return typeof x !== 'undefined'; });
    return (anyDefined && !anyUndefined) || (!anyDefined && anyUndefined);
}
exports.allDefinedOrAllUndefined = allDefinedOrAllUndefined;


/***/ }),

/***/ "./src/core/Gigya.Js/app/Utils/viewport.ts":
/*!*************************************************!*\
  !*** ./src/core/Gigya.Js/app/Utils/viewport.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function getScroll() {
    var scrOfX = 0, scrOfY = 0;
    if (typeof window.pageYOffset == 'number') {
        scrOfY = window.pageYOffset;
        scrOfX = window.pageXOffset;
    }
    else if (document.body && (document.body.scrollLeft || document.body.scrollTop)) {
        scrOfY = document.body.scrollTop;
        scrOfX = document.body.scrollLeft;
    }
    else if (document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {
        scrOfY = document.documentElement.scrollTop;
        scrOfX = document.documentElement.scrollLeft;
    }
    return { left: scrOfX, top: scrOfY };
}
exports.getScroll = getScroll;
function getFullSize() {
    var de = document.documentElement;
    var db = document.body;
    var h = de.clientHeight;
    if (h == 0)
        h = db.clientHeight;
    var w = de.clientWidth;
    if (w == 0)
        w = db.clientWidth;
    return { w: w, h: h };
}
exports.getFullSize = getFullSize;
function getOrientation() {
    var orientation = parseInt(window['orientation'] || '0');
    if (orientation < 0)
        orientation += 360;
    return orientation;
}
exports.getOrientation = getOrientation;
function getOuterSize() {
    var h;
    var w;
    var de = document.documentElement;
    var db = document.body;
    if (window.outerHeight) {
        h = window.outerHeight;
        w = window.outerWidth;
    }
    else {
        h = de.clientHeight;
        if (h == 0)
            h = db.clientHeight;
        w = de.clientWidth;
        if (w == 0)
            w = db.clientWidth;
    }
    return { w: w, h: h };
}
exports.getOuterSize = getOuterSize;
function getInnerSize() {
    var h;
    var w;
    var de = document.documentElement;
    var db = document.body;
    if (window.innerHeight) {
        h = window.innerHeight;
        w = window.innerWidth;
    }
    else {
        h = de.clientHeight;
        if (h == 0)
            h = db.clientHeight;
        w = de.clientWidth;
        if (w == 0)
            w = db.clientWidth;
    }
    return { w: w, h: h };
}
exports.getInnerSize = getInnerSize;
function getMiddleCenter() {
    var scroll = getScroll();
    var size = getInnerSize();
    return {
        top: scroll.top + Math.floor(size.h / 2),
        left: scroll.left + Math.floor(size.w / 2),
    };
}
exports.getMiddleCenter = getMiddleCenter;
function isRectHorizontallyVisible(rect) {
    var scroll = getScroll();
    var size = getInnerSize();
    return rect.left >= scroll.left && rect.right <= scroll.left + size.w;
}
exports.isRectHorizontallyVisible = isRectHorizontallyVisible;
function isRectFullyVisible(rect) {
    var scroll = getScroll();
    var size = getInnerSize();
    return rect.top >= scroll.top && rect.bottom <= scroll.top + size.h && rect.left >= scroll.left && rect.right <= scroll.left + size.w;
}
exports.isRectFullyVisible = isRectFullyVisible;
function scrollIntoView(element) {
    if (element && element.scrollIntoView) {
        element.scrollIntoView();
    }
}
exports.scrollIntoView = scrollIntoView;


/***/ }),

/***/ "./src/core/Gigya.Js/app/apiBootstrap.ts":
/*!***********************************************!*\
  !*** ./src/core/Gigya.Js/app/apiBootstrap.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var domains_1 = __webpack_require__(/*! ./Utils/domains */ "./src/core/Gigya.Js/app/Utils/domains.ts");
var Uri_1 = __webpack_require__(/*! ./Utils/Uri */ "./src/core/Gigya.Js/app/Utils/Uri.ts");
var defaultStorageDomain = function () { return (window.gigya === null || window.gigya === void 0 ? void 0 : window.gigya.configHostnameOverride) || domains_1.getStorageDomain(); };
var defaultApiDomain = function () { return domains_1.resolveApiDomain(); };
function getSdkConfig(domain, retries) {
    if (domain === void 0) { domain = defaultStorageDomain(); }
    if (retries === void 0) { retries = 0; }
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        var apiKey;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    apiKey = window.gigya.apiKey;
                    return [4 /*yield*/, Uri_1.Uri.parse(domain + "/sdk.config.get")
                            .addToSearch({ apiKey: apiKey, httpStatusCodes: true })
                            .fetch(retries)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getSdkConfig = getSdkConfig;
function getSsoContext(ssoToken, domain, retries) {
    if (domain === void 0) { domain = defaultApiDomain(); }
    if (retries === void 0) { retries = 0; }
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        var APIKey, e_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    APIKey = window.gigya.apiKey;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, Uri_1.Uri.parse(domain + "/accounts.sso.getContext")
                            .addToSearch({ APIKey: APIKey, ssoToken: ssoToken, format: 'json' })
                            .fetch(retries)];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    e_1 = _a.sent();
                    return [2 /*return*/, {}];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.getSsoContext = getSsoContext;
// Consent status currently return only by api domain because the configuration is set by minor DC( should be save on major always)
// We should change the gigya._.getApiDomain('accounts') to defaultStorageDomain once the config is updated.
function getConsentStatus(config) {
    return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
        var domain, retries, apiKey, url;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    domain = (config === null || config === void 0 ? void 0 : config.domain) || window.gigya._.getApiDomain('accounts');
                    retries = (config === null || config === void 0 ? void 0 : config.retries) || 0;
                    apiKey = window.gigya.apiKey;
                    url = domain + "/sdk.getConsentStatus";
                    return [4 /*yield*/, Uri_1.Uri.parse(url)
                            .addToSearch({ apiKey: apiKey })
                            .fetch(retries)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.getConsentStatus = getConsentStatus;


/***/ }),

/***/ "./src/core/Gigya.Js/app/cdn.ts":
/*!**************************************!*\
  !*** ./src/core/Gigya.Js/app/cdn.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var selectedCdnHostsIndex = 0;
exports.CDN_HOSTS = {
    http: ['cdn.gigya.com', 'cdn1.gigya.com', 'cdn2.gigya.com', 'cdn3.gigya.com'],
    https: ['cdns.gigya.com', 'cdns1.gigya.com', 'cdns2.gigya.com', 'cdns3.gigya.com'],
};
function getCdnResource(path) {
    var _a, _b, _c, _d;
    // gigya.thisScript may not exist if loaded for ssoOrig.
    var baseDomain = (_b = (_a = window.gigya.thisScript) === null || _a === void 0 ? void 0 : _a.baseDomain) !== null && _b !== void 0 ? _b : '';
    var protocol = (_d = (_c = window.gigya.thisScript) === null || _c === void 0 ? void 0 : _c.protocol) !== null && _d !== void 0 ? _d : 'https';
    // If no base domain or if base domain ends with .gigya.com, use Gigya CDN.
    // Otherwise use the base domain.
    if (!baseDomain || /cdns?\.gigya\.com$/.test(baseDomain)) {
        var selectedSchemaRepository = exports.CDN_HOSTS[protocol];
        if (selectedSchemaRepository.length <= selectedCdnHostsIndex) {
            selectedCdnHostsIndex = 0;
        }
        baseDomain = selectedSchemaRepository[selectedCdnHostsIndex++];
    }
    // Ensure the path starts with "/".
    if (path) {
        if (path.indexOf('/') !== 0) {
            path = '/' + path;
        }
    }
    return protocol + '://' + baseDomain + (path || '');
}
exports.getCdnResource = getCdnResource;
function getImgCdnResource() {
    return getCdnResource('/gs/i/');
}
exports.getImgCdnResource = getImgCdnResource;


/***/ }),

/***/ "./src/core/ServiceProxy/ServiceProxy.ts":
/*!***********************************************!*\
  !*** ./src/core/ServiceProxy/ServiceProxy.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var utils = __webpack_require__(/*! src/core/ServiceProxy/utils */ "./src/core/ServiceProxy/utils.ts");
var ServiceProxy = /** @class */ (function () {
    function ServiceProxy(url, timeout, _idCreator, _iframeCreator, getIframeHost, _win) {
        var _this = this;
        if (timeout === void 0) { timeout = 60000; }
        if (_idCreator === void 0) { _idCreator = utils.generateId; }
        if (_iframeCreator === void 0) { _iframeCreator = utils.createIframe; }
        if (getIframeHost === void 0) { getIframeHost = function () {
            return new gigya.Promise(function (resolve) {
                if (document.body)
                    resolve(document.body);
                else
                    document.addEventListener('DOMContentLoaded', function () { return resolve(document.body); });
            });
        }; }
        if (_win === void 0) { _win = window; }
        this.url = url;
        this.timeout = timeout;
        this._idCreator = _idCreator;
        this._iframeCreator = _iframeCreator;
        this.getIframeHost = getIframeHost;
        this._win = _win;
        this._pendingReqs = [];
        this._mutationObservers = [];
        this.onResponse = function (e) {
            // arrow function to preserve context
            var msg = window.gigya.utils.JSON.parse(e.data);
            if (msg && _this._pendingReqs[msg.id] && _this.validateOrigin(e.origin)) {
                _this._pendingReqs[msg.id](msg);
                delete _this._pendingReqs[msg.id];
            }
        };
    }
    Object.defineProperty(ServiceProxy.prototype, "isInit", {
        get: function () {
            return Boolean(this._iframe);
        },
        enumerable: true,
        configurable: true
    });
    ServiceProxy.prototype.init = function (title) {
        var _this = this;
        if (this.isInit)
            return gigya.Promise.reject('proxy already initialized');
        else
            return new gigya.Promise(function (resolve, reject) {
                _this._iframe = _this._iframeCreator(title);
                _this._iframe.src = _this.url;
                _this.getIframeHost().then(function (host) {
                    _this._iframeHost = host;
                    _this._iframeHost.appendChild(_this._iframe);
                    if (window.gigya.logger.isEnabled) {
                        // observe iframe removal only if gigya.logger is explicitly enabled
                        _this.startObservingIFrameRemoval();
                    }
                    var timeoutId = _this._win.setTimeout(function () { return reject('proxy init timeout'); }, _this.timeout);
                    var onInitResponse = function (e) {
                        if (_this.validateOrigin(e.origin)) {
                            var response = _this._tryParseResponse(e.data);
                            if (response === null || response === void 0 ? void 0 : response.signal) {
                                _this._win.clearTimeout(timeoutId);
                                _this._win.removeEventListener('message', onInitResponse, true);
                                switch (response.signal) {
                                    case 'listening':
                                        _this._win.addEventListener('message', _this.onResponse, true);
                                        resolve(response.res);
                                        break;
                                    case 'error':
                                    case 'stop':
                                        reject(response.res);
                                        break;
                                    default:
                                        reject('unsupported response');
                                        break;
                                }
                            }
                        }
                    };
                    _this._win.addEventListener('message', onInitResponse, true);
                });
            });
    };
    ServiceProxy.prototype.validateOrigin = function (checked) {
        return utils.validateOrigin(this._iframe.src, checked);
    };
    ServiceProxy.prototype.postToIFrame = function (req) {
        var onMsgResponse = this.registerMessage(req);
        var message = typeof req === 'object' ? JSON.stringify(req) : req;
        this._iframe.contentWindow.postMessage(message, this._iframe.src);
        return onMsgResponse;
    };
    ServiceProxy.prototype.registerMessage = function (req, timeout) {
        var _this = this;
        if (timeout === void 0) { timeout = this.timeout; }
        return new gigya.Promise(function (resolve, reject) {
            var timeoutId = _this._win.setTimeout(function () {
                reject('proxy request timeout');
            }, timeout);
            _this._pendingReqs[req.id] = function (e) {
                _this._win.clearTimeout(timeoutId);
                if (e.signal === 'error') {
                    reject(e.res);
                }
                else {
                    resolve(e.res);
                }
            };
        });
    };
    ServiceProxy.prototype.sendRequest = function (methodName, params) {
        return this.postToIFrame({
            id: this._idCreator(),
            methodName: methodName,
            params: params,
        });
    };
    ServiceProxy.prototype.stop = function (forceClose) {
        if (forceClose === void 0) { forceClose = false; }
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var error, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.isInit) return [3 /*break*/, 1];
                        throw 'proxy is not active';
                    case 1:
                        error = void 0;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, 5, 6]);
                        return [4 /*yield*/, this.postToIFrame({
                                id: this._idCreator(),
                                signal: 'stop',
                            })];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        e_1 = _a.sent();
                        error = e_1;
                        throw e_1;
                    case 5:
                        if (!error || forceClose) {
                            if (this._mutationObservers && this._mutationObservers.length) {
                                // disconnect mutation observers, if any.
                                this.stopObservingIFrameRemoval();
                            }
                            this._win.removeEventListener('message', this.onResponse, true);
                            this._iframeHost.removeChild(this._iframe);
                            delete this._iframe;
                        }
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ServiceProxy.prototype.wrapWith = function (type) {
        var keys;
        if (typeof type === 'function')
            keys = utils.getAllClassMethodsNames(type);
        else if (type instanceof Array)
            keys = type;
        else if (typeof type === 'object')
            keys = Object.keys(type);
        //.concat(getAllClassMethodsNames(Object.getPrototypeOf(type)));
        else
            throw 'unsupported type for wrapper';
        return this.proxyFromKeys(keys);
    };
    ServiceProxy.prototype.proxyFromKeys = function (keys) {
        var _this = this;
        var proxy = {};
        keys.forEach(function (key) { return (proxy[key] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return _this.sendRequest(key, args);
        }); });
        return proxy;
    };
    ServiceProxy.prototype.startObservingIFrameRemoval = function () {
        var targetNode = this._iframe;
        while (targetNode.parentElement) {
            // observe the iframe and its parents (iframe,body)
            this.addMutationObserver(targetNode);
            targetNode = targetNode.parentElement;
        }
    };
    ServiceProxy.prototype.stopObservingIFrameRemoval = function () {
        this._mutationObservers.forEach(function (observer) {
            if (observer && observer.disconnect) {
                observer.disconnect();
            }
        });
        this._mutationObservers = [];
    };
    ServiceProxy.prototype.addMutationObserver = function (targetNode) {
        var _this = this;
        var mutationCallback = function (mutationsList) {
            for (var _i = 0, mutationsList_1 = mutationsList; _i < mutationsList_1.length; _i++) {
                var mutation = mutationsList_1[_i];
                if (mutation.type == 'childList' && mutation.removedNodes.length) {
                    // A child node has been removed.
                    for (var i = 0; i < mutation.removedNodes.length; i++) {
                        var removedNode = mutation.removedNodes.item(i);
                        if (removedNode === targetNode) {
                            window.gigya.logger.warn("### Gigya's service proxy has been unexpectedly detached from the DOM. " +
                                'This may cause unexpected behavior including a complete loss of service. ###');
                            _this.stopObservingIFrameRemoval(); // can stop observing for iframe removal
                            return; // stop the loop
                        }
                    }
                }
            }
        };
        // Create an observer instance linked to the callback function to execute when mutations are observed
        var observer = new MutationObserver(mutationCallback);
        // Start observing the the target-node's parent element for configured mutations
        observer.observe(targetNode.parentElement, {
            childList: true,
            subtree: false,
        });
        this._mutationObservers.push(observer);
    };
    ServiceProxy.prototype._tryParseResponse = function (dataStr) {
        try {
            return JSON.parse(dataStr);
        }
        catch (e) {
            window.gigya.logger.warn("received message with invalid format", {
                data: dataStr
            });
        }
    };
    return ServiceProxy;
}());
exports.ServiceProxy = ServiceProxy;


/***/ }),

/***/ "./src/core/ServiceProxy/utils.ts":
/*!****************************************!*\
  !*** ./src/core/ServiceProxy/utils.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.getParentUrl = function (win, doc) {
    if (win === void 0) { win = window; }
    if (doc === void 0) { doc = document; }
    return (win.location != win.parent.location ? doc.referrer : doc.location.href);
};
exports.getBodyElement = function (doc) {
    if (doc === void 0) { doc = document; }
    return new gigya.Promise(function (resolve) {
        if (doc.body)
            resolve(doc.body);
        else
            doc.addEventListener('DOMContentLoaded', function () { return resolve(doc.body); });
    });
};
exports.validateOrigin = function (origin, checked) { var _a; return ((_a = origin === null || origin === void 0 ? void 0 : origin.toLowerCase()) === null || _a === void 0 ? void 0 : _a.indexOf(checked === null || checked === void 0 ? void 0 : checked.toLowerCase())) === 0; };
exports.createIframe = function (title, doc) {
    if (title === void 0) { title = 'Gigya Frame'; }
    if (doc === void 0) { doc = document; }
    var iframe = doc.createElement('iframe');
    iframe.style.position = 'absolute';
    iframe.style.height = '0px';
    iframe.style.width = '0px';
    iframe.style.display = 'none';
    iframe.title = title;
    iframe.setAttribute('aria-hidden', 'true');
    return iframe;
};
var _counter = 1;
exports.generateId = function () {
    return String(_counter++);
};
function isClass(type) {
    return !!type.prototype;
}
exports.getAllClassMethodsNames = function (type) {
    var props = [];
    var proto = isClass(type) ? type.prototype : type;
    do {
        try {
            /** initial implementation - using filter **/
            var l = Object.getOwnPropertyNames(proto)
                // .concat(Object.getOwnPropertySymbols(proto).map(s => s.toString()))
                .map(function (s) { return s.toString(); })
                .sort()
                .filter(function (p, i, arr) {
                return typeof proto[p] === 'function' && //only the methods
                    p !== 'constructor' && //not the constructor
                    (i == 0 || p !== arr[i - 1]) && //not overriding in this prototype
                    props.indexOf(p) === -1;
            });
            props = props.concat(l);
        }
        catch (e) {
            /** bug fix implementation - using custom our own filter logic
             case of Array.filter polyfill causing "can not read property '0' of undefined" **/
            var arr = Object.getOwnPropertyNames(proto)
                // .concat(Object.getOwnPropertySymbols(proto).map(s => s.toString()))
                .map(function (s) { return s.toString(); })
                .sort();
            var l = [];
            for (var i = 0; i < arr.length; i++) {
                var p = arr[i];
                if (typeof proto[p] === 'function' && //only the methods
                    p !== 'constructor' && //not the constructor
                    (i == 0 || p !== arr[i - 1]) && //not overriding in this prototype
                    props.indexOf(p) === -1) {
                    //not overridden in a child
                    l.push(p);
                }
            }
            props = props.concat(l);
        }
    } while ((proto = Object.getPrototypeOf(proto)) && //walk-up the prototype chain
        Object.getPrototypeOf(proto) //not the the Object prototype methods (hasOwnProperty, etc...)
    );
    return props;
};


/***/ }),

/***/ "./src/fidm/Gigya.JS.SSO/app/globalProvider.ts":
/*!*****************************************************!*\
  !*** ./src/fidm/Gigya.JS.SSO/app/globalProvider.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var GlobalProvider = /** @class */ (function () {
    function GlobalProvider() {
    }
    GlobalProvider.prototype.documentLocation = function () {
        return document.location;
    };
    GlobalProvider.prototype.postMessageToParent = function (message, targetOrigin, transfer) {
        window.parent.postMessage(message, targetOrigin, transfer);
    };
    return GlobalProvider;
}());
exports.GlobalProvider = GlobalProvider;
exports.default = new GlobalProvider();


/***/ }),

/***/ "./src/fidm/Gigya.JS.SSO/app/sso.ts":
/*!******************************************!*\
  !*** ./src/fidm/Gigya.JS.SSO/app/sso.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
var GSErrors_1 = __webpack_require__(/*! src/core/Gigya.Js/app/GSErrors */ "./src/core/Gigya.Js/app/GSErrors.ts");
var ssoUtils_1 = __webpack_require__(/*! src/fidm/Gigya.JS.SSO/app/ssoUtils */ "./src/fidm/Gigya.JS.SSO/app/ssoUtils.ts");
var Sso = /** @class */ (function () {
    function Sso(_apiKey, _siteApiKey, _ssoSegment, _ssoConfig, _utils, _storage) {
        var _this = this;
        if (_ssoConfig === void 0) { _ssoConfig = {
            validDomains: [],
            logoutURLs: {},
            canaryCookiesNames: {
                isCanary: 'gig_isCanary',
                version: 'gig_canary_ver'
            }
        }; }
        if (_utils === void 0) { _utils = new ssoUtils_1.SsoUtils(); }
        if (_storage === void 0) { _storage = _utils.getCookiesStorage(); }
        this._apiKey = _apiKey;
        this._siteApiKey = _siteApiKey;
        this._ssoSegment = _ssoSegment;
        this._ssoConfig = _ssoConfig;
        this._utils = _utils;
        this._storage = _storage;
        this._checkFragment = function () {
            var fragment = _this._utils.getFragment();
            if (fragment && fragment !== _this._currentFragment) {
                _this._currentFragment = fragment;
                _this._start(_this._utils.deserialize(fragment));
            }
            window.setTimeout(_this._checkFragment, 200);
        };
        this._storageKey = this._createKey('gig_loginToken');
        var canaryCookiesNames = this._ssoConfig.canaryCookiesNames;
        if (typeof canaryCookiesNames !== 'undefined') {
            this._canaryKey = this._createKey(canaryCookiesNames.isCanary);
            this._canaryVerKey = this._createKey(canaryCookiesNames.version);
        }
    }
    Sso.prototype.init = function () {
        // Start repeatedly checking fragment for a new call.
        this._checkFragment();
    };
    Sso.prototype._start = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this._mode = params.m;
                        this._requestDomain = params.d; // Receiving domain.
                        this._lid = params.lid;
                        this._callbackID = params.callbackID;
                        this._siteApiKey = params.sAPIKey;
                        // Abort if not in iFrame
                        if (!window.parent) {
                            console.log("gigya sso: invalid use");
                            return [2 /*return*/];
                        }
                        else if (!this._utils.isValidDomain(this._ssoConfig.validDomains, this._requestDomain)) {
                            console.log("gigya sso: " + this._requestDomain + " is not in valid domain: " + this._ssoConfig.validDomains.join(','));
                            return [2 /*return*/];
                        }
                        _a = params.m;
                        switch (_a) {
                            case 'logout': return [3 /*break*/, 1];
                            case 'removeToken': return [3 /*break*/, 3];
                            case 'getToken': return [3 /*break*/, 5];
                            case 'setToken': return [3 /*break*/, 7];
                            case 'setGroupContext': return [3 /*break*/, 9];
                            case 'setLoginTokenExp': return [3 /*break*/, 11];
                            case 'getLoginTokenExp': return [3 /*break*/, 13];
                            case 'checkTokenRenew': return [3 /*break*/, 15];
                            case 'syncCanaryIndication': return [3 /*break*/, 17];
                            case 'setGroupApiDomain': return [3 /*break*/, 19];
                            case 'getGroupApiDomain': return [3 /*break*/, 21];
                        }
                        return [3 /*break*/, 23];
                    case 1: return [4 /*yield*/, this.logout()];
                    case 2:
                        response = _b.sent();
                        return [3 /*break*/, 24];
                    case 3: return [4 /*yield*/, this.removeToken()];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 24];
                    case 5: return [4 /*yield*/, this.getToken()];
                    case 6:
                        response = _b.sent();
                        return [3 /*break*/, 24];
                    case 7: return [4 /*yield*/, this.setToken(params.lt, String(params.expiration), params.gltexp)];
                    case 8:
                        _b.sent();
                        return [3 /*break*/, 24];
                    case 9: return [4 /*yield*/, this.setGroupContext(params.groupContext)];
                    case 10:
                        _b.sent();
                        return [3 /*break*/, 24];
                    case 11: return [4 /*yield*/, this.setTokenExpiration(params.loginTokenExp)];
                    case 12:
                        response = _b.sent();
                        return [3 /*break*/, 24];
                    case 13: return [4 /*yield*/, this.getTokenExpiration()];
                    case 14:
                        response = _b.sent();
                        return [3 /*break*/, 24];
                    case 15: return [4 /*yield*/, this.checkTokenRenew(params.loginToken)];
                    case 16:
                        response = _b.sent();
                        return [3 /*break*/, 24];
                    case 17: return [4 /*yield*/, this.syncCanaryIndication(params.isCanary, params.canaryVersion)];
                    case 18:
                        response = _b.sent();
                        return [3 /*break*/, 24];
                    case 19: return [4 /*yield*/, this.setGroupApiDomain(params.domain)];
                    case 20:
                        _b.sent();
                        return [3 /*break*/, 24];
                    case 21: return [4 /*yield*/, this.getGroupApiDomain()];
                    case 22:
                        response = _b.sent();
                        return [3 /*break*/, 24];
                    case 23:
                        response = {
                            errorCode: GSErrors_1.GSErrors.INVALID_API_METHOD,
                        };
                        _b.label = 24;
                    case 24:
                        this._utils.sendMessage(response, this._callbackID, this._requestDomain);
                        return [2 /*return*/];
                }
            });
        });
    };
    Sso.prototype.getGroupApiDomain = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var domain;
            return tslib_1.__generator(this, function (_a) {
                domain = this._storage.getItem("apiDomain_" + this._apiKey);
                return [2 /*return*/, {
                        errorCode: GSErrors_1.GSErrors.OK,
                        domain: domain
                    }];
            });
        });
    };
    Sso.prototype.setGroupApiDomain = function (domain) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            return tslib_1.__generator(this, function (_a) {
                this._storage.setItem("apiDomain_" + this._apiKey, domain);
                return [2 /*return*/];
            });
        });
    };
    Sso.prototype.logout = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var logoutURLs;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logoutURLs = this._getLogoutURLs();
                        return [4 /*yield*/, this.removeToken()];
                    case 1:
                        _a.sent();
                        this._storage.removeItem(this._storageKey + "_visited");
                        return [2 /*return*/, { logoutURLs: logoutURLs }];
                }
            });
        });
    };
    Sso.prototype.removeToken = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var loginToken;
            return tslib_1.__generator(this, function (_a) {
                loginToken = this._storage.getItem(this._storageKey);
                if (loginToken) {
                    this._markRevokedLoginToken(loginToken);
                    this._storage.removeItem(this._storageKey);
                }
                this._storage.removeItem(this._storageKey + "_exp");
                this._storage.removeItem(this._storageKey + "_gltexp");
                this._storage.removeItem(this._storageKey + "_session");
                this._storage.removeItem(this._storageKey + "_context");
                return [2 /*return*/];
            });
        });
    };
    Sso.prototype.getToken = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var errorCode, lt, storageExp, exp, twoYearFromNow, gltexp, groupContext, inSession, response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        errorCode = 0;
                        lt = this._storage.getItem(this._storageKey);
                        storageExp = this._storage.getItem(this._storageKey + "_exp");
                        if (storageExp === 'undefined') {
                            exp = Date.now() - 1000;
                        }
                        else {
                            exp = Number(storageExp);
                            twoYearFromNow = Date.now() + (1000 * 60 * 60 * 24 * 365 * 2);
                            if (exp > twoYearFromNow) {
                                exp = Date.now() - 1000;
                            }
                        }
                        gltexp = this._storage.getItem(this._storageKey + "_gltexp");
                        groupContext = this._storage.getItem(this._storageKey + "_context");
                        inSession = gltexp || this._storage.getItem(this._storageKey + "_session") === '1';
                        if (!(!isNaN(exp) && ((exp === 0 && !inSession) || (exp > 0 && new Date().getTime() > exp)))) return [3 /*break*/, 2];
                        // expired!
                        return [4 /*yield*/, this.removeToken()];
                    case 1:
                        // expired!
                        _a.sent();
                        lt = undefined;
                        _a.label = 2;
                    case 2:
                        if (!lt) {
                            // no user
                            return [2 /*return*/, {
                                    errorCode: GSErrors_1.GSErrors.UNAUTHORIZED_USER,
                                }];
                        }
                        else {
                            this._markSiteVisited();
                        }
                        response = {
                            errorCode: errorCode,
                            login_token: lt,
                            expires_in: exp === 0 ? 0 : Math.round((exp - new Date().getTime()) / 1000),
                        };
                        if (groupContext) {
                            response.groupContext = groupContext;
                        }
                        if (exp === 0 && gltexp) {
                            response.gltexp = gltexp;
                        }
                        return [2 /*return*/, response];
                }
            });
        });
    };
    Sso.prototype.setToken = function (lt, expiration, gltexp) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var oldToken, expiresIn, expiresInMs;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        lt = lt.split('|')[0];
                        oldToken = (_a = this._storage.getItem(this._storageKey)) === null || _a === void 0 ? void 0 : _a.split('|')[0];
                        if (lt !== oldToken) {
                            this._markRevokedLoginToken(oldToken);
                        }
                        if (lt) {
                            this._storage.setItem(this._storageKey, lt);
                        }
                        if (expiration) {
                            expiresIn = typeof expiration === 'string' && expiration ? Number(expiration) : expiration;
                            if (expiresIn === 0) {
                                // Session cookie or dynamic session cookie.
                                // Either way, flag the expiration as 0.
                                expiration = 0;
                            }
                            else {
                                expiresInMs = void 0;
                                if (!expiresIn || expiresIn === -2) {
                                    expiresInMs = 1000 * 60 * 60 * 24 * 365;
                                }
                                else {
                                    expiresInMs = Number(expiresIn) * 1000;
                                }
                                // Convert expires in milliseconds to an a timestamp (also milliseconds).
                                expiresIn = Date.now() + expiresInMs;
                            }
                            this._storage.setItem(this._storageKey + "_exp", "" + expiresIn);
                            if (expiration === 0) {
                                this._storage.setItem(this._storageKey + "_session", '1', 0);
                            }
                        }
                        if (!(gltexp !== undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.setTokenExpiration(gltexp)];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!lt) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._markSiteVisited()];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Sso.prototype.setGroupContext = function (groupContext) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this._storage.setItem(this._storageKey + "_context", JSON.stringify(groupContext));
                return [2 /*return*/];
            });
        });
    };
    Sso.prototype.setTokenExpiration = function (gltexp) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var _a, _b, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!!this._utils.isValidGltExp(gltexp)) return [3 /*break*/, 1];
                        this._storage.removeItem(this._storageKey + "_gltexp");
                        gltexp = null;
                        return [3 /*break*/, 3];
                    case 1:
                        _b = (_a = this._utils).getMaxGltExp;
                        _c = [gltexp];
                        return [4 /*yield*/, this.getTokenExpiration()];
                    case 2:
                        gltexp = _b.apply(_a, _c.concat([(_d.sent()).gltexp]));
                        this._storage.setItem(this._storageKey + "_gltexp", gltexp);
                        this._storage.removeItem(this._storageKey + "_exp");
                        _d.label = 3;
                    case 3: return [2 /*return*/, {
                            errorCode: GSErrors_1.GSErrors.OK,
                            gltexp: gltexp,
                        }];
                }
            });
        });
    };
    Sso.prototype.getTokenExpiration = function () {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var lt;
            return tslib_1.__generator(this, function (_a) {
                lt = this._storage.getItem(this._storageKey);
                if (!lt) {
                    return [2 /*return*/, {
                            errorCode: GSErrors_1.GSErrors.UNAUTHORIZED_USER,
                        }];
                }
                return [2 /*return*/, {
                        errorCode: GSErrors_1.GSErrors.OK,
                        gltexp: this._storage.getItem(this._storageKey + "_gltexp"),
                    }];
            });
        });
    };
    Sso.prototype.checkTokenRenew = function (loginToken) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var groupToken, invalidTokens, isInvalid;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getToken()];
                    case 1:
                        groupToken = _a.sent();
                        invalidTokens = this._storage.getItem(this._storageKey + "_revoked_tokens") || '';
                        isInvalid = invalidTokens.indexOf(loginToken) >= 0;
                        if (!!isInvalid) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.setToken(loginToken)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, { errorCode: GSErrors_1.GSErrors.OK }];
                    case 3:
                        if (groupToken.errorCode === GSErrors_1.GSErrors.OK && invalidTokens.indexOf(groupToken.login_token) < 0) {
                            // just changing the error code - but returning the same session info of the group
                            groupToken.errorCode = GSErrors_1.GSErrors.TOKEN_HAS_RENEWED;
                            return [2 /*return*/, groupToken];
                        }
                        else {
                            return [2 /*return*/, { errorCode: GSErrors_1.GSErrors.INVALID_TOKEN }];
                        }
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Sso.prototype.syncCanaryIndication = function (isCanary, versionSignature) {
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function () {
            var SSOIsCanary, SSOVersionSignature, response, siteCanaryVersion, SSOCanaryVersion;
            return tslib_1.__generator(this, function (_a) {
                if (!this._canaryKey || !this._canaryVerKey) {
                    return [2 /*return*/, { errorCode: GSErrors_1.GSErrors.INVALID_ENVIRONMENT_CONFIG }];
                }
                SSOIsCanary = this._storage.getItem(this._canaryKey);
                SSOVersionSignature = this._storage.getItem(this._canaryVerKey);
                response = {
                    errorCode: GSErrors_1.GSErrors.OK,
                    isCanary: isCanary,
                    canaryVersion: versionSignature,
                };
                if (!this._utils.validations().allDefinedOrAllUndefined(SSOIsCanary, SSOVersionSignature)) {
                    // not legal
                    response.errorCode = GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE;
                    return [2 /*return*/, response];
                }
                if (!this._utils.validations().allDefinedOrAllUndefined(isCanary, versionSignature)) {
                    // not legal
                    return [2 /*return*/, {
                            errorCode: GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE,
                            isCanary: SSOIsCanary,
                            canaryVersion: SSOVersionSignature,
                        }];
                }
                siteCanaryVersion = this._parseCanaryVersionSignature(versionSignature);
                SSOCanaryVersion = this._parseCanaryVersionSignature(SSOVersionSignature);
                if (siteCanaryVersion.timestamp > SSOCanaryVersion.timestamp) {
                    this._storage.setItem(this._canaryKey, isCanary);
                    this._storage.setItem(this._canaryVerKey, versionSignature);
                }
                else {
                    response.isCanary = SSOIsCanary;
                    response.canaryVersion = SSOVersionSignature;
                }
                return [2 /*return*/, response];
            });
        });
    };
    Sso.prototype._markSiteVisited = function () {
        var visitedStorageKey = this._storageKey + "_visited";
        var visited = this._storage.getItem(visitedStorageKey) || '';
        if (visited.indexOf(this._siteApiKey) === -1) {
            visited += ',' + this._siteApiKey;
        }
        this._storage.setItem(visitedStorageKey, visited);
    };
    Sso.prototype._markRevokedLoginToken = function (loginToken) {
        if (!loginToken)
            return;
        var invalidTokensStorageKey = this._storageKey + "_revoked_tokens";
        var invalidTokens = this._storage.getItem(invalidTokensStorageKey) || '';
        var arrInvalidTokens = invalidTokens.split(',');
        if (arrInvalidTokens.length > 3) {
            //delete one old revoked token
            arrInvalidTokens.splice(1, 1); // first element is always empty
        }
        invalidTokens = arrInvalidTokens.join(',');
        if (invalidTokens.indexOf(loginToken) < 0) {
            invalidTokens += ',' + loginToken;
        }
        this._storage.setItem(invalidTokensStorageKey, invalidTokens);
    };
    Sso.prototype._getLogoutURLs = function () {
        var visited = this._storage.getItem(this._storageKey + "_visited");
        if (!visited) {
            return '';
        }
        var arLogoutURLs = [];
        for (var siteKey in this._ssoConfig.logoutURLs) {
            if (visited.indexOf(',' + siteKey) !== -1) {
                arLogoutURLs.push(this._ssoConfig.logoutURLs[siteKey]);
            }
        }
        return arLogoutURLs.join(',');
    };
    Sso.prototype._createKey = function (name) {
        return name + "_" + this._apiKey + (this._ssoSegment ? "_" + this._ssoSegment : '');
    };
    Sso.prototype._parseCanaryVersionSignature = function (canaryVersionSig) {
        var defaultData = { build: 0, probability: 0, timestamp: -1 };
        if (!canaryVersionSig)
            return defaultData;
        var parts = canaryVersionSig.split('-');
        if (parts.length < 3) {
            return defaultData;
        }
        return {
            build: Number(parts[0]),
            probability: Number(parts[1]),
            timestamp: Number(parts[2]),
        };
    };
    return Sso;
}());
exports.Sso = Sso;


/***/ }),

/***/ "./src/fidm/Gigya.JS.SSO/app/ssoUtils.ts":
/*!***********************************************!*\
  !*** ./src/fidm/Gigya.JS.SSO/app/ssoUtils.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var Uri_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/Uri */ "./src/core/Gigya.Js/app/Utils/Uri.ts");
var validationUtils = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/validation */ "./src/core/Gigya.Js/app/Utils/validation.ts");
var globalProvider_1 = __webpack_require__(/*! ./globalProvider */ "./src/fidm/Gigya.JS.SSO/app/globalProvider.ts");
var localStorage_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/localStorage */ "./src/core/Gigya.Js/app/Utils/localStorage.ts");
var keyValue_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/keyValue */ "./src/core/Gigya.Js/app/Utils/keyValue.ts");
var gltexp_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/gltexp */ "./src/core/Gigya.Js/app/Utils/gltexp.ts");
var URL_1 = __webpack_require__(/*! src/core/Gigya.Js/app/Utils/URL */ "./src/core/Gigya.Js/app/Utils/URL.ts");
var defaultValidDomains = ['gigya-api.com', 'gigya-api.cn', 'gigya.com', 'my.gigya-ext.com', 'localhost'];
var SsoUtils = /** @class */ (function () {
    function SsoUtils(_global, _defaultValidDomains) {
        if (_global === void 0) { _global = globalProvider_1.default; }
        if (_defaultValidDomains === void 0) { _defaultValidDomains = defaultValidDomains; }
        this._global = _global;
        this._defaultValidDomains = _defaultValidDomains;
    }
    SsoUtils.prototype.getPageUrl = function () {
        return this._global.documentLocation().toString();
    };
    SsoUtils.prototype.isValidDomain = function (validDomains, candidate) {
        var domain = Uri_1.Uri.parse(candidate).domain;
        var arValidDomains = validDomains.concat(this._defaultValidDomains);
        for (var i = 0; i < arValidDomains.length; i++) {
            var validDomain = arValidDomains[i].replace('*', '').split(':')[0];
            var indexOfValidDomain = domain.indexOf(validDomain);
            if (indexOfValidDomain >= 0 &&
                indexOfValidDomain === domain.length - validDomain.length &&
                (indexOfValidDomain === 0 || domain.charAt(indexOfValidDomain - 1) === '.' || domain.charAt(indexOfValidDomain - 1) === '/')) {
                return true;
            }
        }
        return false;
    };
    SsoUtils.prototype.sendMessage = function (res, callbackID, requestDomain) {
        var strMessage = '';
        for (var p in res) {
            if (res[p] != null) {
                strMessage += escape(p + '=' + encodeURIComponent(res[p]) + '&');
            }
        }
        this._global.postMessageToParent(callbackID + '=' + strMessage, requestDomain);
    };
    SsoUtils.prototype.isValidGltExp = function (gltExp) {
        return gltexp_1.isValid(gltExp);
    };
    SsoUtils.prototype.getMaxGltExp = function (gltExp1, gltExp2) {
        return gltexp_1.getMax(gltExp1, gltExp2);
    };
    SsoUtils.prototype.decodeUrl = function (value) {
        return URL_1.URLDecodeRecursive(value);
    };
    SsoUtils.prototype.deserialize = function (value) {
        return keyValue_1.deserialize(value);
    };
    SsoUtils.prototype.getCookiesStorage = function () {
        return localStorage_1.initializeAdapter(localStorage_1.CookieStorageAdapter);
    };
    SsoUtils.prototype.validations = function () {
        return validationUtils;
    };
    SsoUtils.prototype.UriFactory = function (url, isAbsolute) {
        if (isAbsolute === void 0) { isAbsolute = true; }
        return new Uri_1.Uri(url, isAbsolute);
    };
    SsoUtils.prototype.getFragment = function () {
        var pageURL = this.getPageUrl();
        if (pageURL.indexOf('#') !== -1) {
            return pageURL.split('#')[1];
        }
        return null;
    };
    ;
    return SsoUtils;
}());
exports.SsoUtils = SsoUtils;


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,