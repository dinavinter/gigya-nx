import {Runner} from "../type-maker";

type APIMap = {
    "socialize.login": Runner<{
        methodName: "socialize.login";
        settings: {
            oauth: true;
            preprocessor: any;
        };
        schema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication";
        requiresSession: false;
        adapterSettings: {
            clearSessionCondition: any;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.addConnection": Runner<{
        methodName: "socialize.addConnection";
        settings: {
            oauth: true;
        };
        schema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.requestPermissions": Runner<{
        methodName: "socialize.requestPermissions";
        settings: {
            oauth: true;
            defaultParams: {
                forcePermissions: true;
            };
        };
        schema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.socialLogin": Runner<{
        methodName: "accounts.socialLogin";
        settings: {
            oauth: true;
            preprocessor: any;
        };
        schema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication";
        requiresSession: false;
        adapterSettings: {
            clearSessionCondition: any;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    showDebugUI: Runner<{
        methodName: "showDebugUI";
        settings: {
            allowPopup: true;
            defaultParams: {
            };
            defaultPopupParams: {
            };
            requiredParams: "";
        };
        jsName: "socialize.plugins.debug";
    }>;
    "accounts.showMyPhotoUI": Runner<{
        methodName: "showMyPhotoUI";
        settings: {
            useBasePlugin: true;
            defaultParams: {
            };
            defaultPopupParams: {
            };
            requiredParams: "";
        };
        jsName: "accounts.plugins.profilePhoto";
        namespace: "accounts";
        className: "profilePhoto.MyPhotoPlugin";
        instanceMethods: {
        };
    }>;
    "_.runJsUnitTests": Runner<{
        methodName: "runJsUnitTests";
        settings: {
            useBasePlugin: true;
            defaultParams: {
            };
            defaultPopupParams: {
            };
            requiredParams: "";
        };
        jsName: "_.plugins.jsUtRunner";
        namespace: "_";
        className: "JsUtRunner.Jasmine.JasmineUtRunnerPlugin";
        instanceMethods: {
        };
    }>;
    "_.loadBasePlugin": Runner<{
        methodName: "loadBasePlugin";
        settings: {
            useBasePlugin: true;
            defaultParams: {
            };
            defaultPopupParams: {
            };
            requiredParams: "";
        };
        jsName: "_.plugins.mock";
        namespace: "_";
        className: "Mock.MockPlugin";
        instanceMethods: {
        };
    }>;
    showLoginUI_v1: Runner<{
        methodName: "showLoginUI_v1";
        settings: {
            allowPopup: true;
            defaultParams: {
                width: number;
                height: number;
            };
            defaultPopupParams: {
                width: number;
                height: number;
            };
            requiredParams: "";
        };
        jsName: "socialize.plugins.login";
    }>;
    "socialize.showLoginUI_v2": Runner<{
        methodName: "showLoginUI_v2";
        settings: {
            useBasePlugin: true;
            defaultParams: {
            };
            defaultPopupParams: {
            };
            requiredParams: "";
        };
        jsName: "socialize.plugins.login_v2";
        namespace: "socialize";
        className: "login_v2.LoginPlugin";
        instanceMethods: {
        };
    }>;
    showLoginUI: Runner<{
        methodName: "showLoginUI";
        _versions: [{"versionName":"1"},{"versionName":"2"}];
        _defaultVersionIndex: number;
    }>;
    showAddConnectionsUI_v1: Runner<{
        methodName: "showAddConnectionsUI_v1";
        settings: {
            allowPopup: true;
            defaultParams: {
                width: number;
                height: number;
            };
            defaultPopupParams: {
                width: number;
                height: number;
            };
            requiredParams: "";
        };
        jsName: "socialize.plugins.login";
    }>;
    "socialize.showAddConnectionsUI_v2": Runner<{
        methodName: "showAddConnectionsUI_v2";
        settings: {
            useBasePlugin: true;
            defaultParams: {
            };
            defaultPopupParams: {
            };
            requiredParams: "";
        };
        jsName: "socialize.plugins.login_v2";
        namespace: "socialize";
        className: "login_v2.LoginPlugin";
        instanceMethods: {
        };
    }>;
    showAddConnectionsUI: Runner<{
        methodName: "showAddConnectionsUI";
        _versions: [{"versionName":"1"},{"versionName":"2"}];
        _defaultVersionIndex: number;
    }>;
    "socialize.showEditConnectionsUI": Runner<{
        methodName: "showEditConnectionsUI";
        settings: {
            useBasePlugin: true;
            defaultParams: {
            };
            defaultPopupParams: {
            };
            requiredParams: "";
        };
        jsName: "socialize.plugins.edit";
        namespace: "socialize";
        className: "editConnections.EditConnectionPlugin";
        instanceMethods: {
        };
    }>;
    showSimpleShareUI: Runner<{
        methodName: "showSimpleShareUI";
        settings: {
            allowPopup: true;
            dontLoadPluginsCore: true;
            waitForAPIQueue: true;
            defaultParams: {
                width: number;
                height: number;
            };
            defaultPopupParams: {
            };
            requiredParams: "userAction";
        };
        jsName: "socialize.plugins.simpleShare";
    }>;
    showShareMobileUI: Runner<{
        methodName: "showShareMobileUI";
        settings: {
            allowPopup: true;
            defaultParams: {
            };
            defaultPopupParams: {
            };
            requiredParams: "userAction";
        };
        jsName: "socialize.plugins.shareMobile";
    }>;
    showTfaUI: Runner<{
        methodName: "showTfaUI";
        settings: {
            defaultParams: {
                width: number;
            };
            defaultPopupParams: {
            };
            requiredParams: "";
        };
        jsName: "accounts.plugins.tfa";
    }>;
    "accounts.initHostedPage": Runner<{
        methodName: "initHostedPage";
        settings: {
            useBasePlugin: true;
            defaultParams: {
            };
            defaultPopupParams: {
            };
            requiredParams: "";
        };
        jsName: "accounts.plugins.pages";
        namespace: "accounts";
        className: "Pages.PagesPlugin";
        instanceMethods: {
        };
    }>;
    "accounts.showScreenSet": Runner<{
        methodName: "showScreenSet";
        settings: {
            useBasePlugin: true;
            defaultParams: {
            };
            defaultPopupParams: {
            };
            requiredParams: "";
        };
        jsName: "accounts.plugins.screenSet";
        namespace: "accounts";
        className: "ScreenSet.ScreenSetPlugin";
        instanceMethods: ["hideScreenSet","switchScreen"];
        pluginType: any;
        injectionInfo: {
            name: "screenSet";
            namespace: "accounts";
            methodName: "showScreenSet";
            jsName: "gigya.services.accounts.plugins.screenSet";
            publicMethods: {
                hideScreenSet: {
                    instanceMethod: "cancel";
                    argNames: {
                    };
                };
                switchScreen: {
                    instanceMethod: "switchScreen";
                    argNames: ["screen"];
                };
            };
        };
    }>;
    "socialize.getAvailableProviders": Runner<{
        methodName: "socialize.getAvailableProviders";
        settings: {
        };
        schema: "enabledProviders|disabledProviders|requiredCapabilities";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.notifyLogin": Runner<{
        methodName: "socialize.notifyLogin";
        settings: {
        };
        schema: "siteUID|UIDTimestamp|UIDSig|UIDNonce|provider|authToken|tokenSecret|regSource|tokenExpiration|sessionHandle|sessionHandleExpiration|userInfo|providerSessions|sessionExpiration|authCode|includeAllIdentitiesincludeiRank|group|settings|extraFields|signIDs|newUser|actionAttributes|profileAttributes|bp_channel_url|lang|signKeys";
        requiresSession: false;
        adapterSettings: {
            clearSession: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.convertAction": Runner<{
        methodName: "socialize.convertAction";
        settings: {
        };
        schema: "userAction|[providerCapability=actions]UserAction|provider";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.deleteAccount": Runner<{
        methodName: "socialize.deleteAccount";
        settings: {
        };
        schema: undefined;
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.delUserSettings": Runner<{
        methodName: "socialize.delUserSettings";
        settings: {
        };
        schema: "group|settings";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.getContacts": Runner<{
        methodName: "socialize.getContacts";
        settings: {
        };
        schema: "enabledProviders|disabledProviders";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.getRawData": Runner<{
        methodName: "socialize.getRawData";
        settings: {
        };
        schema: "provider|UID|fields|dataFormat|path";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.getSessionInfo": Runner<{
        methodName: "socialize.getSessionInfo";
        settings: {
        };
        schema: "provider|paddingMode|encrypt|signIDs|encryptAll";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.getUserInfo": Runner<{
        methodName: "socialize.getUserInfo";
        settings: {
        };
        schema: "enabledProviders|disabledProviders|signIDs|includeiRank|includeAllIdentities|extraFields|group|settings|includeOpenidUID|include";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.checkin": Runner<{
        methodName: "socialize.checkin";
        settings: {
        };
        schema: "enabledProviders|disabledProviders|placeID|comment|latitude|longitude|actionAttributes|profileAttributes";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.logout": Runner<{
        methodName: "socialize.logout";
        settings: {
            preprocessor: any;
            disableCache: true;
        };
        schema: "signIDs|samlContext|sustainLogoutURLs";
        requiresSession: true;
        adapterSettings: {
            requiresSession: any;
            forceHttps: true;
        };
        altSessionParams: undefined;
    }>;
    "socialize.notifyRegistration": Runner<{
        methodName: "socialize.notifyRegistration";
        settings: {
        };
        schema: "siteUID|UIDTimestamp|UIDSig";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.removeConnection": Runner<{
        methodName: "socialize.removeConnection";
        settings: {
        };
        schema: "provider|lastIdentityHandling|removeLoginID";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.setUID": Runner<{
        methodName: "socialize.setUID";
        settings: {
        };
        schema: "siteUID|UIDTimestamp|UIDSig";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.unlinkAccounts": Runner<{
        methodName: "socialize.unlinkAccounts";
        settings: {
        };
        schema: undefined;
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.facebookGraphOperation": Runner<{
        methodName: "socialize.facebookGraphOperation";
        settings: {
        };
        schema: "graphPath|graphParams|authRequired|method|authType";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "socialize.notifySSOLogin": Runner<{
        methodName: "socialize.notifySSOLogin";
        settings: {
        };
        schema: "bp_channel_url";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "gcs.getUserData": Runner<{
        methodName: "gcs.getUserData";
        settings: {
        };
        schema: "type|fields";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "gcs.setUserData": Runner<{
        methodName: "gcs.setUserData";
        settings: {
        };
        schema: "data|type|updateBehavior";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "gcs.search": Runner<{
        methodName: "gcs.search";
        settings: {
        };
        schema: "expTime|querySig|query";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "gcs.getSchema": Runner<{
        methodName: "gcs.getSchema";
        settings: {
        };
        schema: "schemaType";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.b2b.registerOrganization": Runner<{
        methodName: "accounts.b2b.registerOrganization";
        settings: {
        };
        schema: "organization|requester";
        requiresSession: false;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.b2b.getOrganizationSchema": Runner<{
        methodName: "accounts.b2b.getOrganizationSchema";
        settings: {
            preprocessor: any;
        };
        schema: "";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.login": Runner<{
        methodName: "accounts.login";
        settings: {
            riskAssessment: true;
        };
        schema: "loginID|password|sessionExpiration|targetEnv|regToken|include|actionAttributes|profileAttributes|includeUserInfo|includeDynamicSchema|bp_channel_url|captchaToken|blackBoxToken|captchaType|captchaText|loginMode|signKeys|lang|riskContext|aToken";
        requiresSession: false;
        adapterSettings: {
            clearSessionCondition: any;
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.linkAccounts": Runner<{
        methodName: "accounts.linkAccounts";
        settings: {
        };
        schema: "loginID|password|sessionExpiration|targetEnv|include|regToken|includeUserInfo|bp_channel_url|signKeys";
        requiresSession: false;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.notifySocialLogin": Runner<{
        methodName: "accounts.notifySocialLogin";
        settings: {
        };
        schema: "loginMode|providerSessions|sessionExpiration";
        requiresSession: true;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: "providerSessions";
    }>;
    "accounts.initRegistration": Runner<{
        methodName: "accounts.initRegistration";
        settings: {
            preprocessor: any;
        };
        schema: "sdk|isLite|dataCenter";
        requiresSession: false;
        adapterSettings: {
            clearSession: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.initProgression": Runner<{
        methodName: "accounts.initProgression";
        settings: {
            preprocessor: any;
        };
        schema: "sdk|regToken";
        requiresSession: false;
        adapterSettings: {
            clearSession: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.register": Runner<{
        methodName: "accounts.register";
        settings: {
            riskAssessment: true;
        };
        schema: "username|email|password|UID|regToken|siteUID|secretQuestion|secretAnswer|regSource|profile|preferences|displayedPreferences|data|captchaText|captchaType|captchaToken|blackBoxToken|lang|hashedPassword|pwHashAlgorithm|skipVerification|finalizeRegistration|targetEnv|sessionExpiration|include|actionAttributes|profileAttributes|includeUserInfo|bp_channel_url|signKeys|subscriptions|communications|addresses";
        requiresSession: false;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.finalizeRegistration": Runner<{
        methodName: "accounts.finalizeRegistration";
        settings: {
        };
        schema: "regToken|targetEnv|include|includeUserInfo|bp_channel_url|allowAccountsLinking|signKeys|subscriptions";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.captchaImage": Runner<{
        methodName: "accounts.captchaImage";
        settings: {
        };
        schema: "regToken";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.importProfilePhoto": Runner<{
        methodName: "accounts.importProfilePhoto";
        settings: {
        };
        schema: "regToken|URL|publish";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.setProfilePhoto": Runner<{
        methodName: "accounts.setProfilePhoto";
        settings: {
        };
        schema: "regToken|publish|photoBytes";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.resetPassword": Runner<{
        methodName: "accounts.resetPassword";
        settings: {
            riskAssessment: true;
        };
        schema: "lang|loginID|passwordResetToken|secretAnswer|securityFields|newPassword|email|captchaType|captchaToken|blackBoxToken";
        requiresSession: false;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.removeProfilePhoto": Runner<{
        methodName: "accounts.removeProfilePhoto";
        settings: {
        };
        schema: "regToken";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.isAvailableLoginID": Runner<{
        methodName: "accounts.isAvailableLoginID";
        settings: {
        };
        schema: "loginID";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.address.suggestions.get": Runner<{
        methodName: "accounts.address.suggestions.get";
        settings: {
        };
        schema: "address|country|apiKey|suggestionreply|longitude|latitude";
        requiresSession: undefined;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.resendVerificationCode": Runner<{
        methodName: "accounts.resendVerificationCode";
        settings: {
        };
        schema: "regToken|email";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.getCaptcha": Runner<{
        methodName: "accounts.getCaptcha";
        settings: {
        };
        schema: "";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.getPolicies": Runner<{
        methodName: "accounts.getPolicies";
        settings: {
            preprocessor: any;
        };
        schema: "sections";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.getSchema": Runner<{
        methodName: "accounts.getSchema";
        settings: {
            preprocessor: any;
        };
        schema: "sections|schemaType";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.getSiteConsentDetails": Runner<{
        methodName: "accounts.getSiteConsentDetails";
        settings: {
            preprocessor: any;
        };
        schema: "";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.getLegalStatements": Runner<{
        methodName: "accounts.getLegalStatements";
        settings: {
            preprocessor: any;
        };
        schema: "consentId|lang";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.verifyLogin": Runner<{
        methodName: "accounts.verifyLogin";
        settings: {
        };
        schema: "include|extraProfileFields|targetEnv";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.getAccountInfo": Runner<{
        methodName: "accounts.getAccountInfo";
        settings: {
        };
        schema: "include|extraProfileFields|regToken|lang|includeCommunications";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: "regToken";
    }>;
    "accounts.setAccountInfo": Runner<{
        methodName: "accounts.setAccountInfo";
        settings: {
            riskAssessment: true;
        };
        schema: "profile|preferences|displayedPreferences|data|regToken|verifyToken|oldPassword|password|newPassword|addLoginEmails|removeLoginEmails|username|secretQuestion|secretAnswer|requirePasswordChange|conflictHandling|tfaStatus|rba|subscriptions|communications|preferences|lang|captchaToken|blackBoxToken|captchaType|customIdentifiers|addresses";
        requiresSession: true;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: "regToken";
    }>;
    "accounts.logout": Runner<{
        methodName: "accounts.logout";
        settings: {
            preprocessor: any;
            disableCache: true;
        };
        schema: "signIDs|samlContext|sustainLogoutURLs";
        requiresSession: true;
        adapterSettings: {
            requiresSession: any;
            forceHttps: true;
        };
        altSessionParams: undefined;
    }>;
    "accounts.search": Runner<{
        methodName: "accounts.search";
        settings: {
        };
        schema: "expTime|querySig|query";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.getScreenSets": Runner<{
        methodName: "accounts.getScreenSets";
        settings: {
            preprocessor: any;
        };
        schema: "screenSetIDs|include|lang|screenSetVersion";
        requiresSession: false;
        adapterSettings: {
            useHttpStatusCodes: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.sso.login": Runner<{
        methodName: "accounts.sso.login";
        settings: {
            oauth: true;
        };
        schema: "redirectURL|state|authFlow|context|useChildContext";
        requiresSession: false;
        adapterSettings: {
            oauthMode: number;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.getConflictingAccount": Runner<{
        methodName: "accounts.getConflictingAccount";
        settings: {
        };
        schema: "regToken|loginID";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.resetSitePreferences": Runner<{
        methodName: "accounts.resetSitePreferences";
        settings: {
            postprocessor: any;
        };
        schema: "";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.getJWT": Runner<{
        methodName: "accounts.getJWT";
        settings: {
        };
        schema: "fields|expiration|audience";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.getProviders": Runner<{
        methodName: "accounts.tfa.getProviders";
        settings: {
        };
        schema: "regToken";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: "regToken";
    }>;
    "accounts.tfa.initTFA": Runner<{
        methodName: "accounts.tfa.initTFA";
        settings: {
        };
        schema: "provider|mode|regToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.finalizeTFA": Runner<{
        methodName: "accounts.tfa.finalizeTFA";
        settings: {
        };
        schema: "gigyaAssertion|providerAssertion|tempDevice|regToken";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: "regToken";
    }>;
    "accounts.tfa.deactivateProvider": Runner<{
        methodName: "accounts.tfa.deactivateProvider";
        settings: {
        };
        schema: "provider";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.unregisterDevice": Runner<{
        methodName: "accounts.tfa.unregisterDevice";
        settings: {
        };
        schema: "allDevices";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.backupcodes.get": Runner<{
        methodName: "accounts.tfa.backupcodes.get";
        settings: {
        };
        schema: "gigyaAssertion";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.backupcodes.create": Runner<{
        methodName: "accounts.tfa.backupcodes.create";
        settings: {
        };
        schema: "gigyaAssertion";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.backupcodes.verify": Runner<{
        methodName: "accounts.tfa.backupcodes.verify";
        settings: {
        };
        schema: "gigyaAssertion|code|regToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.phone.getRegisteredPhoneNumbers": Runner<{
        methodName: "accounts.tfa.phone.getRegisteredPhoneNumbers";
        settings: {
            preprocessor: any;
        };
        schema: "gigyaAssertion";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.phone.removePhone": Runner<{
        methodName: "accounts.tfa.phone.removePhone";
        settings: {
        };
        schema: "gigyaAssertion|phoneId";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.phone.sendVerificationCode": Runner<{
        methodName: "accounts.tfa.phone.sendVerificationCode";
        settings: {
        };
        schema: "gigyaAssertion|lang|phoneID|phone|method|regToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.phone.completeVerification": Runner<{
        methodName: "accounts.tfa.phone.completeVerification";
        settings: {
        };
        schema: "gigyaAssertion|phvToken|code|regToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.email.getEmails": Runner<{
        methodName: "accounts.tfa.email.getEmails";
        settings: {
            preprocessor: any;
        };
        schema: "gigyaAssertion";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.email.sendVerificationCode": Runner<{
        methodName: "accounts.tfa.email.sendVerificationCode";
        settings: {
        };
        schema: "emailID|gigyaAssertion|lang|regToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.email.completeVerification": Runner<{
        methodName: "accounts.tfa.email.completeVerification";
        settings: {
        };
        schema: "gigyaAssertion|phvToken|code|regToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.totp.register": Runner<{
        methodName: "accounts.tfa.totp.register";
        settings: {
        };
        schema: "gigyaAssertion|includeSecret";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.totp.verify": Runner<{
        methodName: "accounts.tfa.totp.verify";
        settings: {
        };
        schema: "gigyaAssertion|sctToken|code|name|regToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.totp.getRegistered": Runner<{
        methodName: "accounts.tfa.totp.getRegistered";
        settings: {
            preprocessor: any;
        };
        schema: "gigyaAssertion";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.totp.remove": Runner<{
        methodName: "accounts.tfa.totp.remove";
        settings: {
        };
        schema: "gigyaAssertion|id";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.push.isVerified": Runner<{
        methodName: "accounts.tfa.push.isVerified";
        settings: {
        };
        schema: "gigyaAssertion|regToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.tfa.push.sendVerification": Runner<{
        methodName: "accounts.tfa.push.sendVerification";
        settings: {
        };
        schema: "gigyaAssertion|regToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.b2b.delegatedAdminLogin": Runner<{
        methodName: "accounts.b2b.delegatedAdminLogin";
        settings: {
        };
        schema: "orgId|lang";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.b2b.getOrganizationInfo": Runner<{
        methodName: "accounts.b2b.getOrganizationInfo";
        settings: {
        };
        schema: "orgId|bpid";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.b2b.setOrganizationContext": Runner<{
        methodName: "accounts.b2b.setOrganizationContext";
        settings: {
        };
        schema: "bpid";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.b2b.getOrganizationContext": Runner<{
        methodName: "accounts.b2b.getOrganizationContext";
        settings: {
        };
        schema: "";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.b2b.auth.getAssets": Runner<{
        methodName: "accounts.b2b.auth.getAssets";
        settings: {
        };
        schema: "appId|bpid|orgId|includePolicies|environments";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.getSchema": Runner<{
        methodName: "accounts.groups.getSchema";
        settings: {
        };
        schema: "model";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.registerGroup": Runner<{
        methodName: "accounts.groups.registerGroup";
        settings: {
        };
        schema: "model|groupId|groupData";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.setGroupInfo": Runner<{
        methodName: "accounts.groups.setGroupInfo";
        settings: {
        };
        schema: "model|groupId|groupData";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.getGroupInfo": Runner<{
        methodName: "accounts.groups.getGroupInfo";
        settings: {
        };
        schema: "model|groupId";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.deleteGroup": Runner<{
        methodName: "accounts.groups.deleteGroup";
        settings: {
        };
        schema: "model|groupId";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.setGroupMemberInfo": Runner<{
        methodName: "accounts.groups.setGroupMemberInfo";
        settings: {
        };
        schema: "model|groupId|uid|relationshipData|permissions";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.getGroupMemberInfo": Runner<{
        methodName: "accounts.groups.getGroupMemberInfo";
        settings: {
        };
        schema: "model|groupId|uid|include";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.removeMember": Runner<{
        methodName: "accounts.groups.removeMember";
        settings: {
        };
        schema: "model|groupId|uid";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.getAllMemberGroups": Runner<{
        methodName: "accounts.groups.getAllMemberGroups";
        settings: {
        };
        schema: "uid|flatNestedFields";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.searchGroupMembers": Runner<{
        methodName: "accounts.groups.searchGroupMembers";
        settings: {
        };
        schema: "model|groupId|limit|start";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.createInvitation": Runner<{
        methodName: "accounts.groups.createInvitation";
        settings: {
        };
        schema: "model|groupId|isOneTime";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.invitationConfirm": Runner<{
        methodName: "accounts.groups.invitationConfirm";
        settings: {
        };
        schema: "invitationId";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.groups.finalizeInvitation": Runner<{
        methodName: "accounts.groups.finalizeInvitation";
        settings: {
        };
        schema: "token";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.otp.sendCode": Runner<{
        methodName: "accounts.otp.sendCode";
        settings: {
            riskAssessment: true;
            preprocessor: any;
        };
        schema: "regToken|phoneNumber|email|lang|captchaToken|captchaType|blackBoxToken|dataCenter|phvToken";
        requiresSession: false;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.otp.login": Runner<{
        methodName: "accounts.otp.login";
        settings: {
        };
        schema: "vToken|code|targetEnv|includeUserInfo|include|regSource|sessionExpiration";
        requiresSession: false;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.otp.update": Runner<{
        methodName: "accounts.otp.update";
        settings: {
        };
        schema: "vToken|code|regToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.guest": Runner<{
        methodName: "accounts.auth.guest";
        settings: {
        };
        schema: "identifier|identifierType";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.otp.verify": Runner<{
        methodName: "accounts.auth.otp.verify";
        settings: {
        };
        schema: "vToken|code";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.otp.authenticate": Runner<{
        methodName: "accounts.auth.otp.authenticate";
        settings: {
        };
        schema: "vToken|code";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.getMethods": Runner<{
        methodName: "accounts.auth.getMethods";
        settings: {
        };
        schema: "identifier|aToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.push.sendVerification": Runner<{
        methodName: "accounts.auth.push.sendVerification";
        settings: {
        };
        schema: "identifier";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.push.isVerified": Runner<{
        methodName: "accounts.auth.push.isVerified";
        settings: {
        };
        schema: "vToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.magiclink.email.send": Runner<{
        methodName: "accounts.auth.magiclink.email.send";
        settings: {
        };
        schema: "email|context|lang";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.magiclink.email.login": Runner<{
        methodName: "accounts.auth.magiclink.email.login";
        settings: {
        };
        schema: "vToken|code|targetEnv|includeUserInfo|include|regSource|sessionExpiration";
        requiresSession: false;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.otp.email.sendCode": Runner<{
        methodName: "accounts.auth.otp.email.sendCode";
        settings: {
        };
        schema: "email|lang";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.otp.email.login": Runner<{
        methodName: "accounts.auth.otp.email.login";
        settings: {
        };
        schema: "code|vToken|targetEnv|includeUserInfo|include|regSource|sessionExpiration";
        requiresSession: false;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.identifier.createToken": Runner<{
        methodName: "accounts.identifier.createToken";
        settings: {
        };
        schema: "identifier|identifierType";
        requiresSession: false;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.identity.authorize": Runner<{
        methodName: "accounts.identity.authorize";
        settings: {
        };
        schema: "authorization_details|grant_type";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.fido.initRegisterCredentials": Runner<{
        methodName: "accounts.auth.fido.initRegisterCredentials";
        settings: {
            preprocessor: any;
        };
        schema: "regToken|aToken";
        requiresSession: true;
        adapterSettings: {
            clearSessionCondition: any;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: "regToken|aToken";
    }>;
    "accounts.auth.fido.registerCredentials": Runner<{
        methodName: "accounts.auth.fido.registerCredentials";
        settings: {
            preprocessor: any;
        };
        schema: "token|attestation|deviceName|regToken";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.fido.getAssertionOptions": Runner<{
        methodName: "accounts.auth.fido.getAssertionOptions";
        settings: {
        };
        schema: "";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.fido.verifyAssertion": Runner<{
        methodName: "accounts.auth.fido.verifyAssertion";
        settings: {
        };
        schema: "token|authenticatorAssertion";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "accounts.auth.fido.getCredentials": Runner<{
        methodName: "accounts.auth.fido.getCredentials";
        settings: {
            preprocessor: any;
        };
        schema: "regToken";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: "regToken";
    }>;
    "accounts.auth.fido.removeCredential": Runner<{
        methodName: "accounts.auth.fido.removeCredential";
        settings: {
            preprocessor: any;
        };
        schema: "credentialId|regToken";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: "regToken";
    }>;
    "accounts.session.verify": Runner<{
        methodName: "accounts.session.verify";
        settings: {
        };
        schema: "";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "oauth.register": Runner<{
        methodName: "oauth.register";
        settings: {
        };
        schema: "lang|regSource|cid|context|sessionExpiration|userInfo|verifyToken|authMode";
        requiresSession: false;
        adapterSettings: {
            forcePost: true;
            useBearerToken: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "oauth.connect": Runner<{
        methodName: "oauth.connect";
        settings: {
            preprocessor: any;
        };
        schema: "regToken";
        requiresSession: true;
        adapterSettings: {
            forcePost: true;
            useBearerToken: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: "regToken";
    }>;
    "oauth.disconnect": Runner<{
        methodName: "oauth.disconnect";
        settings: {
            preprocessor: any;
        };
        schema: "regToken";
        requiresSession: true;
        adapterSettings: {
            forcePost: true;
            useBearerToken: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: "regToken";
    }>;
    "oauth.authorize": Runner<{
        methodName: "oauth.authorize";
        settings: {
        };
        schema: "response_type|authMode";
        requiresSession: false;
        adapterSettings: {
            forcePost: true;
            useBearerToken: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "oauth.token": Runner<{
        methodName: "oauth.token";
        settings: {
        };
        schema: "grant_type|code|targetEnv|sessionExpiration";
        requiresSession: false;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "auth.token.authenticationContext": Runner<{
        methodName: "auth.token.authenticationContext";
        settings: {
        };
        schema: "regToken";
        requiresSession: true;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: "regToken";
    }>;
    "accounts.auth.login": Runner<{
        methodName: "accounts.auth.login";
        settings: {
        };
        schema: "accessToken|sessionExpiration|targetEnv|include|includeUserInfo|loginMode|lang";
        requiresSession: false;
        adapterSettings: {
            clearSessionCondition: any;
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "ds.store": Runner<{
        methodName: "ds.store";
        settings: {
        };
        schema: "type|data|oid|updateBehavior";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "ds.get": Runner<{
        methodName: "ds.get";
        settings: {
        };
        schema: "type|data|oid|fields";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "ds.search": Runner<{
        methodName: "ds.search";
        settings: {
        };
        schema: "expTime|querySig|query";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "ds.getSchema": Runner<{
        methodName: "ds.getSchema";
        settings: {
        };
        schema: "";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "ds.delete": Runner<{
        methodName: "ds.delete";
        settings: {
        };
        schema: "type|oid|fields";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "ids.getAccountInfo": Runner<{
        methodName: "ids.getAccountInfo";
        settings: {
        };
        schema: "include|extraProfileFields";
        requiresSession: true;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "ids.setAccountInfo": Runner<{
        methodName: "ids.setAccountInfo";
        settings: {
        };
        schema: "profile|preferences|data|oldPassword|password|newPassword|addLoginEmails|removeLoginEmails|username|secretQuestion|secretAnswer|requirePasswordChange|lang";
        requiresSession: false;
        adapterSettings: {
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "ids.search": Runner<{
        methodName: "ids.search";
        settings: {
        };
        schema: "expTime|querySig|query";
        requiresSession: undefined;
        adapterSettings: {
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "fidm.oidc.op.deviceContinue": Runner<{
        methodName: "fidm.oidc.op.deviceContinue";
        settings: {
            restUrl: "oidc/op/v1.0/{APIKey}/device_continue";
        };
        schema: "user_code";
        requiresSession: true;
        adapterSettings: {
            namespace: "fidm";
            forcePost: true;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
    "fidm.oidc.op.getContextData": Runner<{
        methodName: "fidm.oidc.op.getContextData";
        settings: {
            restUrl: "oidc/op/v1.0/{APIKey}/contextData";
        };
        schema: "oidc_context";
        requiresSession: false;
        adapterSettings: {
            namespace: "fidm";
            forcePost: false;
            forceHttps: true;
            requiresSession: any;
        };
        altSessionParams: undefined;
    }>;
};



 export const build = {
    number: 15622,
    version: "latest"
};
export const partnerSettings = {
    authMode: "cookie",
    captchaProvider: "Google",
    plugins: {
        connectWithoutLoginBehavior: "alwaysLogin",
        defaultRegScreenSet: "Default-RegistrationLogin",
        defaultMobileRegScreenSet: "Default-RegistrationLogin",
        sessionExpiration: 0,
        rememberSessionExpiration: 0,
        apiDomain: "eu1.gigya.com",
        workflow: {
            path: "workflow/resources/js/entryPoint.js"
        }
    },
    baseDomains: "local.pyzlo.in",
    customAPIDomainPrefix: "gigya"
};
export const providersConfig = {};
export const samlConfig = {
    errorPageURL: null,
    proxyPageURL: null
};
export const canary = {
    isActive: false,
    config: {
        version: "15622-3-28373025",
        isEnabled: true,
        probability: 3,
        cookiesNames: {
            isCanary: "gig_canary",
            version: "gig_canary_ver"
        }
    }
};
export const errorReport = {
    enabled: true,
    probability: 1
};
export const sso = {};
export const services = {
    proxy: {
        utils: {}
    },
    TokenKeys: {
        GMID: "gig_gmid",
        UCID: "gig_ucid",
        GMID_TICKET: "gmidTicket",
        GMID_TICKET_EXPIRATION_TIME: "gmidTicketExpiration"
    },
    RequestType: {
        GET: "GET",
        POST: "POST"
    },
    accountService: {},
    siteData: {},
    socialize: {},
    gcs: {},
    accounts: {
        b2b: {
            auth: {}
        },
        auth: {
            fido: {},
            otp: {
                email: {}
            },
            push: {},
            magiclink: {
                email: {}
            }
        },
        address: {
            suggestions: {}
        },
        sso: {},
        tfa: {
            backupcodes: {},
            phone: {},
            email: {},
            totp: {},
            push: {}
        },
        groups: {},
        otp: {},
        identifier: {},
        identity: {},
        session: {}
    }
};
export const socialize = {
    ApiMap["socialize.login"],
    ApiMap["socialize.addConnection"],
    ApiMap["socialize.requestPermissions"],
    ApiMap["socialize.showDebugUI"],
    ApiMap["socialize.showLoginUI_v1"],
    ApiMap["socialize.showLoginUI_v2"],
    ApiMap["socialize.showAddConnectionsUI_v1"],
    ApiMap["socialize.showAddConnectionsUI_v2"],
    ApiMap["socialize.showEditConnectionsUI"],
    ApiMap["socialize.showSimpleShareUI"],
    ApiMap["socialize.showShareMobileUI"],
    ApiMap["socialize.getAvailableProviders"],
    ApiMap["socialize.notifyLogin"],
    ApiMap["socialize.convertAction"],
    ApiMap["socialize.deleteAccount"],
    ApiMap["socialize.delUserSettings"],
    ApiMap["socialize.getContacts"],
    ApiMap["socialize.getRawData"],
    ApiMap["socialize.getSessionInfo"],
    ApiMap["socialize.getUserInfo"],
    ApiMap["socialize.checkin"],
    ApiMap["socialize.logout"],
    ApiMap["socialize.notifyRegistration"],
    ApiMap["socialize.removeConnection"],
    ApiMap["socialize.setUID"],
    ApiMap["socialize.unlinkAccounts"],
    ApiMap["socialize.facebookGraphOperation"],
    ApiMap["socialize.notifySSOLogin"]
};
export const gcs = {
    ApiMap["gcs.getUserData"],
    ApiMap["gcs.setUserData"],
    ApiMap["gcs.search"],
    ApiMap["gcs.getSchema"]
};
export const gm = {};
export const comments = {};
export const accounts = {
    b2b: {
        ApiMap["accounts.b2b.registerOrganization"],
        ApiMap["accounts.b2b.getOrganizationSchema"],
        ApiMap["accounts.b2b.delegatedAdminLogin"],
        ApiMap["accounts.b2b.getOrganizationInfo"],
        ApiMap["accounts.b2b.setOrganizationContext"],
        ApiMap["accounts.b2b.getOrganizationContext"],
        auth: {
            ApiMap["accounts.b2b.auth.getAssets"]
        }
    },
    auth: {
        fido: {
            ApiMap["accounts.auth.fido.initRegisterCredentials"],
            ApiMap["accounts.auth.fido.registerCredentials"],
            ApiMap["accounts.auth.fido.getAssertionOptions"],
            ApiMap["accounts.auth.fido.verifyAssertion"],
            ApiMap["accounts.auth.fido.getCredentials"],
            ApiMap["accounts.auth.fido.removeCredential"]
        },
        ApiMap["accounts.auth.guest"],
        otp: {
            ApiMap["accounts.auth.otp.verify"],
            ApiMap["accounts.auth.otp.authenticate"],
            email: {
                ApiMap["accounts.auth.otp.email.sendCode"],
                ApiMap["accounts.auth.otp.email.login"]
            }
        },
        ApiMap["accounts.auth.getMethods"],
        push: {
            ApiMap["accounts.auth.push.sendVerification"],
            ApiMap["accounts.auth.push.isVerified"]
        },
        magiclink: {
            email: {
                ApiMap["accounts.auth.magiclink.email.send"],
                ApiMap["accounts.auth.magiclink.email.login"]
            }
        },
        ApiMap["accounts.auth.login"]
    },
    ApiMap["accounts.socialLogin"],
    ApiMap["accounts.showMyPhotoUI"],
    ApiMap["accounts.showTfaUI"],
    ApiMap["accounts.initHostedPage"],
    ApiMap["accounts.showScreenSet"],
    ApiMap["accounts.login"],
    ApiMap["accounts.linkAccounts"],
    ApiMap["accounts.notifySocialLogin"],
    ApiMap["accounts.initRegistration"],
    ApiMap["accounts.initProgression"],
    ApiMap["accounts.register"],
    ApiMap["accounts.finalizeRegistration"],
    ApiMap["accounts.captchaImage"],
    ApiMap["accounts.importProfilePhoto"],
    ApiMap["accounts.setProfilePhoto"],
    ApiMap["accounts.resetPassword"],
    ApiMap["accounts.removeProfilePhoto"],
    ApiMap["accounts.isAvailableLoginID"],
    address: {
        suggestions: {
            ApiMap["accounts.address.suggestions.get"]
        }
    },
    ApiMap["accounts.resendVerificationCode"],
    ApiMap["accounts.getCaptcha"],
    ApiMap["accounts.getPolicies"],
    ApiMap["accounts.getSchema"],
    ApiMap["accounts.getSiteConsentDetails"],
    ApiMap["accounts.getLegalStatements"],
    ApiMap["accounts.verifyLogin"],
    ApiMap["accounts.getAccountInfo"],
    ApiMap["accounts.setAccountInfo"],
    ApiMap["accounts.logout"],
    ApiMap["accounts.search"],
    ApiMap["accounts.getScreenSets"],
    sso: {
        ApiMap["accounts.sso.login"]
    },
    ApiMap["accounts.getConflictingAccount"],
    ApiMap["accounts.resetSitePreferences"],
    ApiMap["accounts.getJWT"],
    tfa: {
        ApiMap["accounts.tfa.getProviders"],
        ApiMap["accounts.tfa.initTFA"],
        ApiMap["accounts.tfa.finalizeTFA"],
        ApiMap["accounts.tfa.deactivateProvider"],
        ApiMap["accounts.tfa.unregisterDevice"],
        backupcodes: {
            ApiMap["accounts.tfa.backupcodes.get"],
            ApiMap["accounts.tfa.backupcodes.create"],
            ApiMap["accounts.tfa.backupcodes.verify"]
        },
        phone: {
            ApiMap["accounts.tfa.phone.getRegisteredPhoneNumbers"],
            ApiMap["accounts.tfa.phone.removePhone"],
            ApiMap["accounts.tfa.phone.sendVerificationCode"],
            ApiMap["accounts.tfa.phone.completeVerification"]
        },
        email: {
            ApiMap["accounts.tfa.email.getEmails"],
            ApiMap["accounts.tfa.email.sendVerificationCode"],
            ApiMap["accounts.tfa.email.completeVerification"]
        },
        totp: {
            ApiMap["accounts.tfa.totp.register"],
            ApiMap["accounts.tfa.totp.verify"],
            ApiMap["accounts.tfa.totp.getRegistered"],
            ApiMap["accounts.tfa.totp.remove"]
        },
        push: {
            ApiMap["accounts.tfa.push.isVerified"],
            ApiMap["accounts.tfa.push.sendVerification"]
        }
    },
    groups: {
        ApiMap["accounts.groups.getSchema"],
        ApiMap["accounts.groups.registerGroup"],
        ApiMap["accounts.groups.setGroupInfo"],
        ApiMap["accounts.groups.getGroupInfo"],
        ApiMap["accounts.groups.deleteGroup"],
        ApiMap["accounts.groups.setGroupMemberInfo"],
        ApiMap["accounts.groups.getGroupMemberInfo"],
        ApiMap["accounts.groups.removeMember"],
        ApiMap["accounts.groups.getAllMemberGroups"],
        ApiMap["accounts.groups.searchGroupMembers"],
        ApiMap["accounts.groups.createInvitation"],
        ApiMap["accounts.groups.invitationConfirm"],
        ApiMap["accounts.groups.finalizeInvitation"]
    },
    otp: {
        ApiMap["accounts.otp.sendCode"],
        ApiMap["accounts.otp.login"],
        ApiMap["accounts.otp.update"]
    },
    identifier: {
        ApiMap["accounts.identifier.createToken"]
    },
    identity: {
        ApiMap["accounts.identity.authorize"]
    },
    session: {
        ApiMap["accounts.session.verify"]
    }
};
export const gscounters = {};
export const utils = {
    toggles: {},
    array: {},
    browser: {},
    cookie: {
        _cookieStore: {}
    },
    date: {},
    delegate: {},
    DOM: {
        _popupContainers: [],
        _pseudoContainers: []
    },
    functions: {},
    gltexp: {},
    HTTP: {},
    JSON: {},
    keyboard: {
        Keys: {
            8: "backspace",
            13: "enter",
            27: "escape",
            escape: 27,
            backspace: 8,
            enter: 13
        },
        keyCodes: {
            8: "Backspace",
            13: "Enter",
            27: "Escape"
        }
    },
    keyValue: {},
    localStorage: {
        adapters: [
            function LocalStorageAdapter1() {
                var _this1 = _super.call(this) || this;
                _this1.storage = window.localStorage;
                return _this1;
            },
            function SessionStorageAdapter1() {
                var _this1 = _super.call(this) || this;
                _this1.storage = window.sessionStorage;
                return _this1;
            },
            function FirefoxStorageAdapter1() {
                return _super !== null && _super.apply(this, arguments) || this;
            },
            function CookieStorageAdapter1() {
                return _super !== null && _super.apply(this, arguments) || this;
            },
            function MemoryStorageAdapter1() {
                var _this1 = _super.call(this) || this;
                _this1.memory = {};
                return _this1;
            }
        ],
        instances: {
            LocalStorageAdapter: {
                storage: {}
            }
        }
    },
    mouse: {},
    object: {},
    queue: {},
    sanitize: {},
    script: {
        ResourceTypes: {
            0: "script",
            1: "image",
            2: "iframe",
            script: 0,
            image: 1,
            iframe: 2
        }
    },
    sessionCache: {},
    localCache: {},
    stringUtils: {},
    templates: {},
    URL: {},
    validation: {},
    viewport: {},
    win: {
        _openedWindows: {},
        _uniqueWindowCounter: 0
    },
    xd: {
        _flashListenerID: "flid1702382143789"
    },
    recaptcha: {},
    tabbable: {
        bindings: []
    }
};
export const logger = {
    _global: {
        document: {
            location: {
                ancestorOrigins: {},
                href: "https://local.pyzlo.in/",
                origin: "https://local.pyzlo.in",
                protocol: "https:",
                host: "local.pyzlo.in",
                hostname: "local.pyzlo.in",
                port: "",
                pathname: "/",
                search: "",
                hash: ""
            }
        },
        name: "",
        customElements: {},
        history: {},
        navigation: {},
        locationbar: {},
        menubar: {},
        personalbar: {},
        scrollbars: {},
        statusbar: {},
        toolbar: {},
        status: "",
        closed: false,
        length: 0,
        opener: null,
        frameElement: null,
        navigator: {},
        origin: "https://local.pyzlo.in",
        external: {},
        screen: {},
        innerWidth: 1995,
        innerHeight: 1393,
        scrollX: 0,
        pageXOffset: 0,
        scrollY: 0,
        pageYOffset: 0,
        visualViewport: {},
        screenX: 0,
        screenY: 38,
        outerWidth: 1728,
        outerHeight: 1014,
        devicePixelRatio: 1.3333333730697632,
        screenLeft: 0,
        screenTop: 38,
        styleMedia: {},
        onsearch: null,
        isSecureContext: true,
        trustedTypes: {},
        performance: {
            timeOrigin: 1702382142266.7,
            timing: {
                connectStart: 1702382142298,
                navigationStart: 1702382142266,
                secureConnectionStart: 0,
                fetchStart: 1702382142298,
                domContentLoadedEventStart: 1702382143680,
                responseStart: 1702382142813,
                domInteractive: 1702382142883,
                domainLookupEnd: 1702382142298,
                responseEnd: 1702382142814,
                redirectStart: 0,
                requestStart: 1702382142806,
                unloadEventEnd: 1702382142870,
                unloadEventStart: 1702382142870,
                domLoading: 1702382142879,
                domComplete: 1702382143831,
                domainLookupStart: 1702382142298,
                loadEventStart: 1702382143831,
                domContentLoadedEventEnd: 1702382143680,
                loadEventEnd: 1702382143831,
                redirectEnd: 0,
                connectEnd: 1702382142298
            },
            navigation: {
                type: 1,
                redirectCount: 0
            }
        },
        onappinstalled: null,
        onbeforeinstallprompt: null,
        crypto: {},
        indexedDB: {},
        sessionStorage: {},
        localStorage: {},
        onbeforexrselect: null,
        onabort: null,
        onbeforeinput: null,
        onbeforetoggle: null,
        onblur: null,
        oncancel: null,
        oncanplay: null,
        oncanplaythrough: null,
        onchange: null,
        onclick: null,
        onclose: null,
        oncontextlost: null,
        oncontextmenu: null,
        oncontextrestored: null,
        oncuechange: null,
        ondblclick: null,
        ondrag: null,
        ondragend: null,
        ondragenter: null,
        ondragleave: null,
        ondragover: null,
        ondragstart: null,
        ondrop: null,
        ondurationchange: null,
        onemptied: null,
        onended: null,
        onerror: null,
        onfocus: null,
        onformdata: null,
        oninput: null,
        oninvalid: null,
        onkeydown: null,
        onkeypress: null,
        onkeyup: null,
        onload: null,
        onloadeddata: null,
        onloadedmetadata: null,
        onloadstart: null,
        onmousedown: null,
        onmouseenter: null,
        onmouseleave: null,
        onmousemove: null,
        onmouseout: null,
        onmouseover: null,
        onmouseup: null,
        onmousewheel: null,
        onpause: null,
        onplay: null,
        onplaying: null,
        onprogress: null,
        onratechange: null,
        onreset: null,
        onresize: null,
        onscroll: null,
        onsecuritypolicyviolation: null,
        onseeked: null,
        onseeking: null,
        onselect: null,
        onslotchange: null,
        onstalled: null,
        onsubmit: null,
        onsuspend: null,
        ontimeupdate: null,
        ontoggle: null,
        onvolumechange: null,
        onwaiting: null,
        onwebkitanimationend: null,
        onwebkitanimationiteration: null,
        onwebkitanimationstart: null,
        onwebkittransitionend: null,
        onwheel: null,
        onauxclick: null,
        ongotpointercapture: null,
        onlostpointercapture: null,
        onpointerdown: null,
        onpointermove: null,
        onpointerrawupdate: null,
        onpointerup: null,
        onpointercancel: null,
        onpointerover: null,
        onpointerout: null,
        onpointerenter: null,
        onpointerleave: null,
        onselectstart: null,
        onselectionchange: null,
        onanimationend: null,
        onanimationiteration: null,
        onanimationstart: null,
        ontransitionrun: null,
        ontransitionstart: null,
        ontransitionend: null,
        ontransitioncancel: null,
        onafterprint: null,
        onbeforeprint: null,
        onbeforeunload: null,
        onhashchange: null,
        onlanguagechange: null,
        onmessage: null,
        onmessageerror: null,
        onoffline: null,
        ononline: null,
        onpagehide: null,
        onpageshow: null,
        onpopstate: null,
        onrejectionhandled: null,
        onstorage: null,
        onunhandledrejection: null,
        onunload: null,
        crossOriginIsolated: false,
        scheduler: {},
        chrome: {
            app: {
                isInstalled: false,
                InstallState: {
                    DISABLED: "disabled",
                    INSTALLED: "installed",
                    NOT_INSTALLED: "not_installed"
                },
                RunningState: {
                    CANNOT_RUN: "cannot_run",
                    READY_TO_RUN: "ready_to_run",
                    RUNNING: "running"
                }
            }
        },
        fence: null,
        caches: {},
        cookieStore: {},
        ondevicemotion: null,
        ondeviceorientation: null,
        ondeviceorientationabsolute: null,
        launchQueue: {},
        sharedStorage: {},
        documentPictureInPicture: {},
        onbeforematch: null,
        originAgentCluster: false,
        credentialless: false,
        speechSynthesis: {},
        oncontentvisibilityautostatechange: null,
        onscrollend: null,
        litIssuedWarnings: {},
        litHtmlVersions: [
            "3.1.0"
        ],
        litPropertyMetadata: {},
        reactiveElementVersions: [
            "2.0.2"
        ],
        litElementVersions: [
            "4.0.2"
        ],
        webpackJsonp: [],
        monaco: {
            editor: {
                AccessibilitySupport: {
                    0: "Unknown",
                    1: "Disabled",
                    2: "Enabled",
                    Unknown: 0,
                    Disabled: 1,
                    Enabled: 2
                },
                ContentWidgetPositionPreference: {
                    0: "EXACT",
                    1: "ABOVE",
                    2: "BELOW",
                    EXACT: 0,
                    ABOVE: 1,
                    BELOW: 2
                },
                CursorChangeReason: {
                    0: "NotSet",
                    1: "ContentFlush",
                    2: "RecoverFromMarkers",
                    3: "Explicit",
                    4: "Paste",
                    5: "Undo",
                    6: "Redo",
                    NotSet: 0,
                    ContentFlush: 1,
                    RecoverFromMarkers: 2,
                    Explicit: 3,
                    Paste: 4,
                    Undo: 5,
                    Redo: 6
                },
                DefaultEndOfLine: {
                    1: "LF",
                    2: "CRLF",
                    LF: 1,
                    CRLF: 2
                },
                EditorAutoIndentStrategy: {
                    0: "None",
                    1: "Keep",
                    2: "Brackets",
                    3: "Advanced",
                    4: "Full",
                    None: 0,
                    Keep: 1,
                    Brackets: 2,
                    Advanced: 3,
                    Full: 4
                },
                EditorOption: {
                    0: "acceptSuggestionOnCommitCharacter",
                    1: "acceptSuggestionOnEnter",
                    2: "accessibilitySupport",
                    3: "accessibilityPageSize",
                    4: "ariaLabel",
                    5: "autoClosingBrackets",
                    6: "autoClosingOvertype",
                    7: "autoClosingQuotes",
                    8: "autoIndent",
                    9: "automaticLayout",
                    10: "autoSurround",
                    11: "codeLens",
                    12: "colorDecorators",
                    13: "columnSelection",
                    14: "comments",
                    15: "contextmenu",
                    16: "copyWithSyntaxHighlighting",
                    17: "cursorBlinking",
                    18: "cursorSmoothCaretAnimation",
                    19: "cursorStyle",
                    20: "cursorSurroundingLines",
                    21: "cursorSurroundingLinesStyle",
                    22: "cursorWidth",
                    23: "disableLayerHinting",
                    24: "disableMonospaceOptimizations",
                    25: "dragAndDrop",
                    26: "emptySelectionClipboard",
                    27: "extraEditorClassName",
                    28: "fastScrollSensitivity",
                    29: "find",
                    30: "fixedOverflowWidgets",
                    31: "folding",
                    32: "foldingStrategy",
                    33: "foldingHighlight",
                    34: "unfoldOnClickAfterEndOfLine",
                    35: "fontFamily",
                    36: "fontInfo",
                    37: "fontLigatures",
                    38: "fontSize",
                    39: "fontWeight",
                    40: "formatOnPaste",
                    41: "formatOnType",
                    42: "glyphMargin",
                    43: "gotoLocation",
                    44: "hideCursorInOverviewRuler",
                    45: "highlightActiveIndentGuide",
                    46: "hover",
                    47: "inDiffEditor",
                    48: "letterSpacing",
                    49: "lightbulb",
                    50: "lineDecorationsWidth",
                    51: "lineHeight",
                    52: "lineNumbers",
                    53: "lineNumbersMinChars",
                    54: "links",
                    55: "matchBrackets",
                    56: "minimap",
                    57: "mouseStyle",
                    58: "mouseWheelScrollSensitivity",
                    59: "mouseWheelZoom",
                    60: "multiCursorMergeOverlapping",
                    61: "multiCursorModifier",
                    62: "multiCursorPaste",
                    63: "occurrencesHighlight",
                    64: "overviewRulerBorder",
                    65: "overviewRulerLanes",
                    66: "padding",
                    67: "parameterHints",
                    68: "peekWidgetDefaultFocus",
                    69: "definitionLinkOpensInPeek",
                    70: "quickSuggestions",
                    71: "quickSuggestionsDelay",
                    72: "readOnly",
                    73: "renameOnType",
                    74: "renderControlCharacters",
                    75: "renderIndentGuides",
                    76: "renderFinalNewline",
                    77: "renderLineHighlight",
                    78: "renderLineHighlightOnlyWhenFocus",
                    79: "renderValidationDecorations",
                    80: "renderWhitespace",
                    81: "revealHorizontalRightPadding",
                    82: "roundedSelection",
                    83: "rulers",
                    84: "scrollbar",
                    85: "scrollBeyondLastColumn",
                    86: "scrollBeyondLastLine",
                    87: "scrollPredominantAxis",
                    88: "selectionClipboard",
                    89: "selectionHighlight",
                    90: "selectOnLineNumbers",
                    91: "showFoldingControls",
                    92: "showUnused",
                    93: "snippetSuggestions",
                    94: "smoothScrolling",
                    95: "stopRenderingLineAfter",
                    96: "suggest",
                    97: "suggestFontSize",
                    98: "suggestLineHeight",
                    99: "suggestOnTriggerCharacters",
                    100: "suggestSelection",
                    101: "tabCompletion",
                    102: "tabIndex",
                    103: "unusualLineTerminators",
                    104: "useTabStops",
                    105: "wordSeparators",
                    106: "wordWrap",
                    107: "wordWrapBreakAfterCharacters",
                    108: "wordWrapBreakBeforeCharacters",
                    109: "wordWrapColumn",
                    110: "wordWrapMinified",
                    111: "wrappingIndent",
                    112: "wrappingStrategy",
                    113: "showDeprecated",
                    114: "editorClassName",
                    115: "pixelRatio",
                    116: "tabFocusMode",
                    117: "layoutInfo",
                    118: "wrappingInfo",
                    acceptSuggestionOnCommitCharacter: 0,
                    acceptSuggestionOnEnter: 1,
                    accessibilitySupport: 2,
                    accessibilityPageSize: 3,
                    ariaLabel: 4,
                    autoClosingBrackets: 5,
                    autoClosingOvertype: 6,
                    autoClosingQuotes: 7,
                    autoIndent: 8,
                    automaticLayout: 9,
                    autoSurround: 10,
                    codeLens: 11,
                    colorDecorators: 12,
                    columnSelection: 13,
                    comments: 14,
                    contextmenu: 15,
                    copyWithSyntaxHighlighting: 16,
                    cursorBlinking: 17,
                    cursorSmoothCaretAnimation: 18,
                    cursorStyle: 19,
                    cursorSurroundingLines: 20,
                    cursorSurroundingLinesStyle: 21,
                    cursorWidth: 22,
                    disableLayerHinting: 23,
                    disableMonospaceOptimizations: 24,
                    dragAndDrop: 25,
                    emptySelectionClipboard: 26,
                    extraEditorClassName: 27,
                    fastScrollSensitivity: 28,
                    find: 29,
                    fixedOverflowWidgets: 30,
                    folding: 31,
                    foldingStrategy: 32,
                    foldingHighlight: 33,
                    unfoldOnClickAfterEndOfLine: 34,
                    fontFamily: 35,
                    fontInfo: 36,
                    fontLigatures: 37,
                    fontSize: 38,
                    fontWeight: 39,
                    formatOnPaste: 40,
                    formatOnType: 41,
                    glyphMargin: 42,
                    gotoLocation: 43,
                    hideCursorInOverviewRuler: 44,
                    highlightActiveIndentGuide: 45,
                    hover: 46,
                    inDiffEditor: 47,
                    letterSpacing: 48,
                    lightbulb: 49,
                    lineDecorationsWidth: 50,
                    lineHeight: 51,
                    lineNumbers: 52,
                    lineNumbersMinChars: 53,
                    links: 54,
                    matchBrackets: 55,
                    minimap: 56,
                    mouseStyle: 57,
                    mouseWheelScrollSensitivity: 58,
                    mouseWheelZoom: 59,
                    multiCursorMergeOverlapping: 60,
                    multiCursorModifier: 61,
                    multiCursorPaste: 62,
                    occurrencesHighlight: 63,
                    overviewRulerBorder: 64,
                    overviewRulerLanes: 65,
                    padding: 66,
                    parameterHints: 67,
                    peekWidgetDefaultFocus: 68,
                    definitionLinkOpensInPeek: 69,
                    quickSuggestions: 70,
                    quickSuggestionsDelay: 71,
                    readOnly: 72,
                    renameOnType: 73,
                    renderControlCharacters: 74,
                    renderIndentGuides: 75,
                    renderFinalNewline: 76,
                    renderLineHighlight: 77,
                    renderLineHighlightOnlyWhenFocus: 78,
                    renderValidationDecorations: 79,
                    renderWhitespace: 80,
                    revealHorizontalRightPadding: 81,
                    roundedSelection: 82,
                    rulers: 83,
                    scrollbar: 84,
                    scrollBeyondLastColumn: 85,
                    scrollBeyondLastLine: 86,
                    scrollPredominantAxis: 87,
                    selectionClipboard: 88,
                    selectionHighlight: 89,
                    selectOnLineNumbers: 90,
                    showFoldingControls: 91,
                    showUnused: 92,
                    snippetSuggestions: 93,
                    smoothScrolling: 94,
                    stopRenderingLineAfter: 95,
                    suggest: 96,
                    suggestFontSize: 97,
                    suggestLineHeight: 98,
                    suggestOnTriggerCharacters: 99,
                    suggestSelection: 100,
                    tabCompletion: 101,
                    tabIndex: 102,
                    unusualLineTerminators: 103,
                    useTabStops: 104,
                    wordSeparators: 105,
                    wordWrap: 106,
                    wordWrapBreakAfterCharacters: 107,
                    wordWrapBreakBeforeCharacters: 108,
                    wordWrapColumn: 109,
                    wordWrapMinified: 110,
                    wrappingIndent: 111,
                    wrappingStrategy: 112,
                    showDeprecated: 113,
                    editorClassName: 114,
                    pixelRatio: 115,
                    tabFocusMode: 116,
                    layoutInfo: 117,
                    wrappingInfo: 118
                },
                EndOfLinePreference: {
                    0: "TextDefined",
                    1: "LF",
                    2: "CRLF",
                    TextDefined: 0,
                    LF: 1,
                    CRLF: 2
                },
                EndOfLineSequence: {
                    0: "LF",
                    1: "CRLF",
                    LF: 0,
                    CRLF: 1
                },
                MinimapPosition: {
                    1: "Inline",
                    2: "Gutter",
                    Inline: 1,
                    Gutter: 2
                },
                MouseTargetType: {
                    0: "UNKNOWN",
                    1: "TEXTAREA",
                    2: "GUTTER_GLYPH_MARGIN",
                    3: "GUTTER_LINE_NUMBERS",
                    4: "GUTTER_LINE_DECORATIONS",
                    5: "GUTTER_VIEW_ZONE",
                    6: "CONTENT_TEXT",
                    7: "CONTENT_EMPTY",
                    8: "CONTENT_VIEW_ZONE",
                    9: "CONTENT_WIDGET",
                    10: "OVERVIEW_RULER",
                    11: "SCROLLBAR",
                    12: "OVERLAY_WIDGET",
                    13: "OUTSIDE_EDITOR",
                    UNKNOWN: 0,
                    TEXTAREA: 1,
                    GUTTER_GLYPH_MARGIN: 2,
                    GUTTER_LINE_NUMBERS: 3,
                    GUTTER_LINE_DECORATIONS: 4,
                    GUTTER_VIEW_ZONE: 5,
                    CONTENT_TEXT: 6,
                    CONTENT_EMPTY: 7,
                    CONTENT_VIEW_ZONE: 8,
                    CONTENT_WIDGET: 9,
                    OVERVIEW_RULER: 10,
                    SCROLLBAR: 11,
                    OVERLAY_WIDGET: 12,
                    OUTSIDE_EDITOR: 13
                },
                OverlayWidgetPositionPreference: {
                    0: "TOP_RIGHT_CORNER",
                    1: "BOTTOM_RIGHT_CORNER",
                    2: "TOP_CENTER",
                    TOP_RIGHT_CORNER: 0,
                    BOTTOM_RIGHT_CORNER: 1,
                    TOP_CENTER: 2
                },
                OverviewRulerLane: {
                    1: "Left",
                    2: "Center",
                    4: "Right",
                    7: "Full",
                    Left: 1,
                    Center: 2,
                    Right: 4,
                    Full: 7
                },
                RenderLineNumbersType: {
                    0: "Off",
                    1: "On",
                    2: "Relative",
                    3: "Interval",
                    4: "Custom",
                    Off: 0,
                    On: 1,
                    Relative: 2,
                    Interval: 3,
                    Custom: 4
                },
                RenderMinimap: {
                    0: "None",
                    1: "Text",
                    2: "Blocks",
                    None: 0,
                    Text: 1,
                    Blocks: 2
                },
                ScrollbarVisibility: {
                    1: "Auto",
                    2: "Hidden",
                    3: "Visible",
                    Auto: 1,
                    Hidden: 2,
                    Visible: 3
                },
                ScrollType: {
                    0: "Smooth",
                    1: "Immediate",
                    Smooth: 0,
                    Immediate: 1
                },
                TextEditorCursorBlinkingStyle: {
                    0: "Hidden",
                    1: "Blink",
                    2: "Smooth",
                    3: "Phase",
                    4: "Expand",
                    5: "Solid",
                    Hidden: 0,
                    Blink: 1,
                    Smooth: 2,
                    Phase: 3,
                    Expand: 4,
                    Solid: 5
                },
                TextEditorCursorStyle: {
                    1: "Line",
                    2: "Block",
                    3: "Underline",
                    4: "LineThin",
                    5: "BlockOutline",
                    6: "UnderlineThin",
                    Line: 1,
                    Block: 2,
                    Underline: 3,
                    LineThin: 4,
                    BlockOutline: 5,
                    UnderlineThin: 6
                },
                TrackedRangeStickiness: {
                    0: "AlwaysGrowsWhenTypingAtEdges",
                    1: "NeverGrowsWhenTypingAtEdges",
                    2: "GrowsOnlyWhenTypingBefore",
                    3: "GrowsOnlyWhenTypingAfter",
                    AlwaysGrowsWhenTypingAtEdges: 0,
                    NeverGrowsWhenTypingAtEdges: 1,
                    GrowsOnlyWhenTypingBefore: 2,
                    GrowsOnlyWhenTypingAfter: 3
                },
                WrappingIndent: {
                    0: "None",
                    1: "Same",
                    2: "Indent",
                    3: "DeepIndent",
                    None: 0,
                    Same: 1,
                    Indent: 2,
                    DeepIndent: 3
                },
                ConfigurationChangedEvent: class a {
                    hasChanged(e21) {
                        return this._values[e21];
                    }
                    constructor(e21) {
                        this._values = e21;
                    }
                },
                BareFontInfo: class s {
                    static createFromValidatedSettings(e21, t21, n21) {
                        const i21 = e21.get(35), r21 = e21.get(39), o21 = e21.get(38), a21 = e21.get(37), l1 = e21.get(51), c3 = e21.get(48);
                        return s._create(i21, r21, o21, a21, l1, c3, t21, n21);
                    }
                    static _create(e21, t21, n21, i21, a21, l1, c3, d1) {
                        a21 === 0 ? a21 = Math.round(o * n21) : a21 < 8 && (a21 = 8);
                        const h2 = 1 + (d1 ? 0 : 0.1 * r.a.getZoomLevel());
                        return new s({
                            zoomLevel: c3,
                            fontFamily: e21,
                            fontWeight: t21,
                            fontSize: n21 *= h2,
                            fontFeatureSettings: i21,
                            lineHeight: a21 *= h2,
                            letterSpacing: l1
                        });
                    }
                    getId() {
                        return this.zoomLevel + "-" + this.fontFamily + "-" + this.fontWeight + "-" + this.fontSize + "-" + this.fontFeatureSettings + "-" + this.lineHeight + "-" + this.letterSpacing;
                    }
                    getMassagedFontFamily() {
                        return /[,"']/.test(this.fontFamily) ? this.fontFamily : /[+ ]/.test(this.fontFamily) ? `"${this.fontFamily}"` : this.fontFamily;
                    }
                    constructor(e21) {
                        this.zoomLevel = e21.zoomLevel, this.fontFamily = String(e21.fontFamily), this.fontWeight = String(e21.fontWeight), this.fontSize = e21.fontSize, this.fontFeatureSettings = e21.fontFeatureSettings, this.lineHeight = 0 | e21.lineHeight, this.letterSpacing = e21.letterSpacing;
                    }
                },
                FontInfo: class a extends s {
                    equals(e21) {
                        return this.fontFamily === e21.fontFamily && this.fontWeight === e21.fontWeight && this.fontSize === e21.fontSize && this.fontFeatureSettings === e21.fontFeatureSettings && this.lineHeight === e21.lineHeight && this.letterSpacing === e21.letterSpacing && this.typicalHalfwidthCharacterWidth === e21.typicalHalfwidthCharacterWidth && this.typicalFullwidthCharacterWidth === e21.typicalFullwidthCharacterWidth && this.canUseHalfwidthRightwardsArrow === e21.canUseHalfwidthRightwardsArrow && this.spaceWidth === e21.spaceWidth && this.middotWidth === e21.middotWidth && this.wsmiddotWidth === e21.wsmiddotWidth && this.maxDigitWidth === e21.maxDigitWidth;
                    }
                    constructor(e21, t21) {
                        super(e21), this.isTrusted = t21, this.isMonospace = e21.isMonospace, this.typicalHalfwidthCharacterWidth = e21.typicalHalfwidthCharacterWidth, this.typicalFullwidthCharacterWidth = e21.typicalFullwidthCharacterWidth, this.canUseHalfwidthRightwardsArrow = e21.canUseHalfwidthRightwardsArrow, this.spaceWidth = e21.spaceWidth, this.middotWidth = e21.middotWidth, this.wsmiddotWidth = e21.wsmiddotWidth, this.maxDigitWidth = e21.maxDigitWidth;
                    }
                },
                TextModelResolvedOptions: class o {
                    equals(e21) {
                        return this.tabSize === e21.tabSize && this.indentSize === e21.indentSize && this.insertSpaces === e21.insertSpaces && this.defaultEOL === e21.defaultEOL && this.trimAutoWhitespace === e21.trimAutoWhitespace;
                    }
                    createChangeEvent(e21) {
                        return {
                            tabSize: this.tabSize !== e21.tabSize,
                            indentSize: this.indentSize !== e21.indentSize,
                            insertSpaces: this.insertSpaces !== e21.insertSpaces,
                            trimAutoWhitespace: this.trimAutoWhitespace !== e21.trimAutoWhitespace
                        };
                    }
                    constructor(e21) {
                        this.tabSize = Math.max(1, 0 | e21.tabSize), this.indentSize = 0 | e21.tabSize, this.insertSpaces = Boolean(e21.insertSpaces), this.defaultEOL = 0 | e21.defaultEOL, this.trimAutoWhitespace = Boolean(e21.trimAutoWhitespace);
                    }
                },
                FindMatch: class s {
                    constructor(e21, t21) {
                        this.range = e21, this.matches = t21;
                    }
                },
                EditorType: {
                    ICodeEditor: "vs.editor.ICodeEditor",
                    IDiffEditor: "vs.editor.IDiffEditor"
                },
                EditorOptions: {
                    acceptSuggestionOnCommitCharacter: {
                        id: 0,
                        name: "acceptSuggestionOnCommitCharacter",
                        defaultValue: true,
                        schema: {
                            markdownDescription: "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    acceptSuggestionOnEnter: {
                        id: 1,
                        name: "acceptSuggestionOnEnter",
                        defaultValue: "on",
                        schema: {
                            markdownEnumDescriptions: [
                                "",
                                "Only accept a suggestion with `Enter` when it makes a textual change.",
                                ""
                            ],
                            markdownDescription: "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.",
                            type: "string",
                            enum: [
                                "on",
                                "smart",
                                "off"
                            ],
                            default: "on",
                            scope: 5
                        }
                    },
                    accessibilitySupport: {
                        id: 2,
                        name: "accessibilitySupport",
                        defaultValue: 0,
                        schema: {
                            type: "string",
                            enum: [
                                "auto",
                                "on",
                                "off"
                            ],
                            enumDescriptions: [
                                "The editor will use platform APIs to detect when a Screen Reader is attached.",
                                "The editor will be permanently optimized for usage with a Screen Reader.",
                                "The editor will never be optimized for usage with a Screen Reader."
                            ],
                            default: "auto",
                            description: "Controls whether the editor should run in a mode where it is optimized for screen readers.",
                            scope: 5
                        }
                    },
                    accessibilityPageSize: {
                        id: 3,
                        name: "accessibilityPageSize",
                        defaultValue: 10,
                        schema: {
                            description: "Controls the number of lines in the editor that can be read out by a screen reader. Warning: this has a performance implication for numbers larger than the default.",
                            type: "integer",
                            default: 10,
                            minimum: 1,
                            maximum: 1073741824,
                            scope: 5
                        },
                        minimum: 1,
                        maximum: 1073741824
                    },
                    ariaLabel: {
                        id: 4,
                        name: "ariaLabel",
                        defaultValue: "Editor content"
                    },
                    autoClosingBrackets: {
                        id: 5,
                        name: "autoClosingBrackets",
                        defaultValue: "languageDefined",
                        schema: {
                            enumDescriptions: [
                                "",
                                "Use language configurations to determine when to autoclose brackets.",
                                "Autoclose brackets only when the cursor is to the left of whitespace.",
                                ""
                            ],
                            description: "Controls whether the editor should automatically close brackets after the user adds an opening bracket.",
                            type: "string",
                            enum: [
                                "always",
                                "languageDefined",
                                "beforeWhitespace",
                                "never"
                            ],
                            default: "languageDefined",
                            scope: 5
                        }
                    },
                    autoClosingOvertype: {
                        id: 6,
                        name: "autoClosingOvertype",
                        defaultValue: "auto",
                        schema: {
                            enumDescriptions: [
                                "",
                                "Type over closing quotes or brackets only if they were automatically inserted.",
                                ""
                            ],
                            description: "Controls whether the editor should type over closing quotes or brackets.",
                            type: "string",
                            enum: [
                                "always",
                                "auto",
                                "never"
                            ],
                            default: "auto",
                            scope: 5
                        }
                    },
                    autoClosingQuotes: {
                        id: 7,
                        name: "autoClosingQuotes",
                        defaultValue: "languageDefined",
                        schema: {
                            enumDescriptions: [
                                "",
                                "Use language configurations to determine when to autoclose quotes.",
                                "Autoclose quotes only when the cursor is to the left of whitespace.",
                                ""
                            ],
                            description: "Controls whether the editor should automatically close quotes after the user adds an opening quote.",
                            type: "string",
                            enum: [
                                "always",
                                "languageDefined",
                                "beforeWhitespace",
                                "never"
                            ],
                            default: "languageDefined",
                            scope: 5
                        }
                    },
                    autoIndent: {
                        id: 8,
                        name: "autoIndent",
                        defaultValue: 3,
                        schema: {
                            enumDescriptions: [
                                "The editor will not insert indentation automatically.",
                                "The editor will keep the current line's indentation.",
                                "The editor will keep the current line's indentation and honor language defined brackets.",
                                "The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.",
                                "The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages."
                            ],
                            description: "Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.",
                            type: "string",
                            enum: [
                                "none",
                                "keep",
                                "brackets",
                                "advanced",
                                "full"
                            ],
                            default: "full",
                            scope: 5
                        }
                    },
                    automaticLayout: {
                        id: 9,
                        name: "automaticLayout",
                        defaultValue: false
                    },
                    autoSurround: {
                        id: 10,
                        name: "autoSurround",
                        defaultValue: "languageDefined",
                        schema: {
                            enumDescriptions: [
                                "Use language configurations to determine when to automatically surround selections.",
                                "Surround with quotes but not brackets.",
                                "Surround with brackets but not quotes.",
                                ""
                            ],
                            description: "Controls whether the editor should automatically surround selections.",
                            type: "string",
                            enum: [
                                "languageDefined",
                                "quotes",
                                "brackets",
                                "never"
                            ],
                            default: "languageDefined",
                            scope: 5
                        }
                    },
                    codeLens: {
                        id: 11,
                        name: "codeLens",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether the editor shows CodeLens.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    colorDecorators: {
                        id: 12,
                        name: "colorDecorators",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether the editor should render the inline color decorators and color picker.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    columnSelection: {
                        id: 13,
                        name: "columnSelection",
                        defaultValue: false,
                        schema: {
                            description: "Enable that the selection with the mouse and keys is doing column selection.",
                            type: "boolean",
                            default: false,
                            scope: 5
                        }
                    },
                    comments: {
                        id: 14,
                        name: "comments",
                        defaultValue: {
                            insertSpace: true,
                            ignoreEmptyLines: true
                        },
                        schema: {
                            "editor.comments.insertSpace": {
                                type: "boolean",
                                default: true,
                                description: "Controls whether a space character is inserted when commenting.",
                                scope: 5
                            },
                            "editor.comments.ignoreEmptyLines": {
                                type: "boolean",
                                default: true,
                                description: "Controls if empty lines should be ignored with toggle, add or remove actions for line comments.",
                                scope: 5
                            }
                        }
                    },
                    contextmenu: {
                        id: 15,
                        name: "contextmenu",
                        defaultValue: true
                    },
                    copyWithSyntaxHighlighting: {
                        id: 16,
                        name: "copyWithSyntaxHighlighting",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether syntax highlighting should be copied into the clipboard.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    cursorBlinking: {
                        id: 17,
                        name: "cursorBlinking",
                        defaultValue: 1,
                        schema: {
                            description: "Control the cursor animation style.",
                            type: "string",
                            enum: [
                                "blink",
                                "smooth",
                                "phase",
                                "expand",
                                "solid"
                            ],
                            default: "blink",
                            scope: 5
                        }
                    },
                    cursorSmoothCaretAnimation: {
                        id: 18,
                        name: "cursorSmoothCaretAnimation",
                        defaultValue: false,
                        schema: {
                            description: "Controls whether the smooth caret animation should be enabled.",
                            type: "boolean",
                            default: false,
                            scope: 5
                        }
                    },
                    cursorStyle: {
                        id: 19,
                        name: "cursorStyle",
                        defaultValue: 1,
                        schema: {
                            description: "Controls the cursor style.",
                            type: "string",
                            enum: [
                                "line",
                                "block",
                                "underline",
                                "line-thin",
                                "block-outline",
                                "underline-thin"
                            ],
                            default: "line",
                            scope: 5
                        }
                    },
                    cursorSurroundingLines: {
                        id: 20,
                        name: "cursorSurroundingLines",
                        defaultValue: 0,
                        schema: {
                            description: "Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or `scrollOffset` in some other editors.",
                            type: "integer",
                            default: 0,
                            minimum: 0,
                            maximum: 1073741824,
                            scope: 5
                        },
                        minimum: 0,
                        maximum: 1073741824
                    },
                    cursorSurroundingLinesStyle: {
                        id: 21,
                        name: "cursorSurroundingLinesStyle",
                        defaultValue: "default",
                        schema: {
                            enumDescriptions: [
                                "`cursorSurroundingLines` is enforced only when triggered via the keyboard or API.",
                                "`cursorSurroundingLines` is enforced always."
                            ],
                            description: "Controls when `cursorSurroundingLines` should be enforced.",
                            type: "string",
                            enum: [
                                "default",
                                "all"
                            ],
                            default: "default",
                            scope: 5
                        }
                    },
                    cursorWidth: {
                        id: 22,
                        name: "cursorWidth",
                        defaultValue: 0,
                        schema: {
                            markdownDescription: "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.",
                            type: "integer",
                            default: 0,
                            minimum: 0,
                            maximum: 1073741824,
                            scope: 5
                        },
                        minimum: 0,
                        maximum: 1073741824
                    },
                    disableLayerHinting: {
                        id: 23,
                        name: "disableLayerHinting",
                        defaultValue: false
                    },
                    disableMonospaceOptimizations: {
                        id: 24,
                        name: "disableMonospaceOptimizations",
                        defaultValue: false
                    },
                    dragAndDrop: {
                        id: 25,
                        name: "dragAndDrop",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether the editor should allow moving selections via drag and drop.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    emptySelectionClipboard: {
                        id: 26,
                        name: "emptySelectionClipboard",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether copying without a selection copies the current line.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    extraEditorClassName: {
                        id: 27,
                        name: "extraEditorClassName",
                        defaultValue: ""
                    },
                    fastScrollSensitivity: {
                        id: 28,
                        name: "fastScrollSensitivity",
                        defaultValue: 5,
                        schema: {
                            markdownDescription: "Scrolling speed multiplier when pressing `Alt`.",
                            type: "number",
                            default: 5,
                            scope: 5
                        },
                        validationFn: (e21) => e21 <= 0 ? 5 : e21
                    },
                    find: {
                        id: 29,
                        name: "find",
                        defaultValue: {
                            cursorMoveOnType: true,
                            seedSearchStringFromSelection: true,
                            autoFindInSelection: "never",
                            globalFindClipboard: false,
                            addExtraSpaceOnTop: true,
                            loop: true
                        },
                        schema: {
                            "editor.find.cursorMoveOnType": {
                                type: "boolean",
                                default: true,
                                description: "Controls whether the cursor should jump to find matches while typing.",
                                scope: 5
                            },
                            "editor.find.seedSearchStringFromSelection": {
                                type: "boolean",
                                default: true,
                                description: "Controls whether the search string in the Find Widget is seeded from the editor selection.",
                                scope: 5
                            },
                            "editor.find.autoFindInSelection": {
                                type: "string",
                                enum: [
                                    "never",
                                    "always",
                                    "multiline"
                                ],
                                default: "never",
                                enumDescriptions: [
                                    "Never turn on Find in selection automatically (default)",
                                    "Always turn on Find in selection automatically",
                                    "Turn on Find in selection automatically when multiple lines of content are selected."
                                ],
                                description: "Controls the condition for turning on find in selection automatically.",
                                scope: 5
                            },
                            "editor.find.globalFindClipboard": {
                                type: "boolean",
                                default: false,
                                description: "Controls whether the Find Widget should read or modify the shared find clipboard on macOS.",
                                included: true,
                                scope: 5
                            },
                            "editor.find.addExtraSpaceOnTop": {
                                type: "boolean",
                                default: true,
                                description: "Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.",
                                scope: 5
                            },
                            "editor.find.loop": {
                                type: "boolean",
                                default: true,
                                description: "Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.",
                                scope: 5
                            }
                        }
                    },
                    fixedOverflowWidgets: {
                        id: 30,
                        name: "fixedOverflowWidgets",
                        defaultValue: false
                    },
                    folding: {
                        id: 31,
                        name: "folding",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether the editor has code folding enabled.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    foldingStrategy: {
                        id: 32,
                        name: "foldingStrategy",
                        defaultValue: "auto",
                        schema: {
                            enumDescriptions: [
                                "Use a language-specific folding strategy if available, else the indentation-based one.",
                                "Use the indentation-based folding strategy."
                            ],
                            description: "Controls the strategy for computing folding ranges.",
                            type: "string",
                            enum: [
                                "auto",
                                "indentation"
                            ],
                            default: "auto",
                            scope: 5
                        }
                    },
                    foldingHighlight: {
                        id: 33,
                        name: "foldingHighlight",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether the editor should highlight folded ranges.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    unfoldOnClickAfterEndOfLine: {
                        id: 34,
                        name: "unfoldOnClickAfterEndOfLine",
                        defaultValue: false,
                        schema: {
                            description: "Controls whether clicking on the empty content after a folded line will unfold the line.",
                            type: "boolean",
                            default: false,
                            scope: 5
                        }
                    },
                    fontFamily: {
                        id: 35,
                        name: "fontFamily",
                        defaultValue: "Menlo, Monaco, 'Courier New', monospace",
                        schema: {
                            description: "Controls the font family.",
                            type: "string",
                            default: "Menlo, Monaco, 'Courier New', monospace",
                            scope: 5
                        }
                    },
                    fontInfo: {
                        id: 36,
                        name: "_never_",
                        deps: null
                    },
                    fontLigatures2: {
                        id: 37,
                        name: "fontLigatures",
                        defaultValue: "\"liga\" off, \"calt\" off",
                        schema: {
                            anyOf: [
                                {
                                    type: "boolean",
                                    description: "Enables/Disables font ligatures."
                                },
                                {
                                    type: "string",
                                    description: "Explicit font-feature-settings."
                                }
                            ],
                            description: "Configures font ligatures or font features.",
                            default: false,
                            scope: 5
                        }
                    },
                    fontSize: {
                        id: 38,
                        name: "fontSize",
                        defaultValue: 12,
                        schema: {
                            type: "number",
                            minimum: 6,
                            maximum: 100,
                            default: 12,
                            description: "Controls the font size in pixels.",
                            scope: 5
                        }
                    },
                    fontWeight: {
                        id: 39,
                        name: "fontWeight",
                        defaultValue: "normal",
                        schema: {
                            anyOf: [
                                {
                                    type: "number",
                                    minimum: 1,
                                    maximum: 1000,
                                    errorMessage: "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed."
                                },
                                {
                                    type: "string",
                                    pattern: "^(normal|bold|1000|[1-9][0-9]{0,2})$"
                                },
                                {
                                    enum: [
                                        "normal",
                                        "bold",
                                        "100",
                                        "200",
                                        "300",
                                        "400",
                                        "500",
                                        "600",
                                        "700",
                                        "800",
                                        "900"
                                    ]
                                }
                            ],
                            default: "normal",
                            description: "Controls the font weight. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000.",
                            scope: 5
                        }
                    },
                    formatOnPaste: {
                        id: 40,
                        name: "formatOnPaste",
                        defaultValue: false,
                        schema: {
                            description: "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.",
                            type: "boolean",
                            default: false,
                            scope: 5
                        }
                    },
                    formatOnType: {
                        id: 41,
                        name: "formatOnType",
                        defaultValue: false,
                        schema: {
                            description: "Controls whether the editor should automatically format the line after typing.",
                            type: "boolean",
                            default: false,
                            scope: 5
                        }
                    },
                    glyphMargin: {
                        id: 42,
                        name: "glyphMargin",
                        defaultValue: false,
                        schema: {
                            description: "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    gotoLocation: {
                        id: 43,
                        name: "gotoLocation",
                        defaultValue: {
                            multiple: "peek",
                            multipleDefinitions: "peek",
                            multipleTypeDefinitions: "peek",
                            multipleDeclarations: "peek",
                            multipleImplementations: "peek",
                            multipleReferences: "peek",
                            alternativeDefinitionCommand: "editor.action.goToReferences",
                            alternativeTypeDefinitionCommand: "editor.action.goToReferences",
                            alternativeDeclarationCommand: "editor.action.goToReferences",
                            alternativeImplementationCommand: "",
                            alternativeReferenceCommand: ""
                        },
                        schema: {
                            "editor.gotoLocation.multiple": {
                                deprecationMessage: "This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.",
                                default: null,
                                scope: 5
                            },
                            "editor.gotoLocation.multipleDefinitions": {
                                description: "Controls the behavior the 'Go to Definition'-command when multiple target locations exist.",
                                type: "string",
                                enum: [
                                    "peek",
                                    "gotoAndPeek",
                                    "goto"
                                ],
                                default: "peek",
                                enumDescriptions: [
                                    "Show peek view of the results (default)",
                                    "Go to the primary result and show a peek view",
                                    "Go to the primary result and enable peek-less navigation to others"
                                ],
                                scope: 5
                            },
                            "editor.gotoLocation.multipleTypeDefinitions": {
                                description: "Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.",
                                type: "string",
                                default: "peek",
                                scope: 5
                            },
                            "editor.gotoLocation.multipleDeclarations": {
                                description: "Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.",
                                type: "string",
                                default: "peek",
                                scope: 5
                            },
                            "editor.gotoLocation.multipleImplementations": {
                                description: "Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.",
                                type: "string",
                                default: "peek",
                                scope: 5
                            },
                            "editor.gotoLocation.multipleReferences": {
                                description: "Controls the behavior the 'Go to References'-command when multiple target locations exist.",
                                type: "string",
                                default: "peek",
                                scope: 5
                            },
                            "editor.gotoLocation.alternativeDefinitionCommand": {
                                type: "string",
                                default: "editor.action.goToReferences",
                                description: "Alternative command id that is being executed when the result of 'Go to Definition' is the current location.",
                                scope: 5
                            },
                            "editor.gotoLocation.alternativeTypeDefinitionCommand": {
                                type: "string",
                                default: "editor.action.goToReferences",
                                description: "Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.",
                                scope: 5
                            },
                            "editor.gotoLocation.alternativeDeclarationCommand": {
                                type: "string",
                                default: "editor.action.goToReferences",
                                description: "Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.",
                                scope: 5
                            },
                            "editor.gotoLocation.alternativeImplementationCommand": {
                                type: "string",
                                default: "",
                                description: "Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.",
                                scope: 5
                            },
                            "editor.gotoLocation.alternativeReferenceCommand": {
                                type: "string",
                                default: "",
                                description: "Alternative command id that is being executed when the result of 'Go to Reference' is the current location.",
                                scope: 5
                            }
                        }
                    },
                    hideCursorInOverviewRuler: {
                        id: 44,
                        name: "hideCursorInOverviewRuler",
                        defaultValue: false,
                        schema: {
                            description: "Controls whether the cursor should be hidden in the overview ruler.",
                            type: "boolean",
                            default: false,
                            scope: 5
                        }
                    },
                    highlightActiveIndentGuide: {
                        id: 45,
                        name: "highlightActiveIndentGuide",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether the editor should highlight the active indent guide.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    hover: {
                        id: 46,
                        name: "hover",
                        defaultValue: {
                            enabled: true,
                            delay: 300,
                            sticky: true
                        },
                        schema: {
                            "editor.hover.enabled": {
                                type: "boolean",
                                default: true,
                                description: "Controls whether the hover is shown.",
                                scope: 5
                            },
                            "editor.hover.delay": {
                                type: "number",
                                default: 300,
                                description: "Controls the delay in milliseconds after which the hover is shown.",
                                scope: 5
                            },
                            "editor.hover.sticky": {
                                type: "boolean",
                                default: true,
                                description: "Controls whether the hover should remain visible when mouse is moved over it.",
                                scope: 5
                            }
                        }
                    },
                    inDiffEditor: {
                        id: 47,
                        name: "inDiffEditor",
                        defaultValue: false
                    },
                    letterSpacing: {
                        id: 48,
                        name: "letterSpacing",
                        defaultValue: 0,
                        schema: {
                            description: "Controls the letter spacing in pixels.",
                            type: "number",
                            default: 0,
                            scope: 5
                        },
                        validationFn: (e21) => g.clamp(e21, -5, 20)
                    },
                    lightbulb: {
                        id: 49,
                        name: "lightbulb",
                        defaultValue: {
                            enabled: true
                        },
                        schema: {
                            "editor.lightbulb.enabled": {
                                type: "boolean",
                                default: true,
                                description: "Enables the code action lightbulb in the editor.",
                                scope: 5
                            }
                        }
                    },
                    lineDecorationsWidth: {
                        id: 50,
                        name: "lineDecorationsWidth",
                        defaultValue: 10
                    },
                    lineHeight: {
                        id: 51,
                        name: "lineHeight",
                        defaultValue: 0,
                        schema: {
                            description: "Controls the line height. Use 0 to compute the line height from the font size.",
                            type: "integer",
                            default: 0,
                            minimum: 0,
                            maximum: 150,
                            scope: 5
                        },
                        minimum: 0,
                        maximum: 150
                    },
                    lineNumbers: {
                        id: 52,
                        name: "lineNumbers",
                        defaultValue: {
                            renderType: 1,
                            renderFn: null
                        },
                        schema: {
                            type: "string",
                            enum: [
                                "off",
                                "on",
                                "relative",
                                "interval"
                            ],
                            enumDescriptions: [
                                "Line numbers are not rendered.",
                                "Line numbers are rendered as absolute number.",
                                "Line numbers are rendered as distance in lines to cursor position.",
                                "Line numbers are rendered every 10 lines."
                            ],
                            default: "on",
                            description: "Controls the display of line numbers.",
                            scope: 5
                        }
                    },
                    lineNumbersMinChars: {
                        id: 53,
                        name: "lineNumbersMinChars",
                        defaultValue: 5,
                        minimum: 1,
                        maximum: 300
                    },
                    links: {
                        id: 54,
                        name: "links",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether the editor should detect links and make them clickable.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    matchBrackets: {
                        id: 55,
                        name: "matchBrackets",
                        defaultValue: "always",
                        schema: {
                            description: "Highlight matching brackets.",
                            type: "string",
                            enum: [
                                "always",
                                "near",
                                "never"
                            ],
                            default: "always",
                            scope: 5
                        }
                    },
                    minimap: {
                        id: 56,
                        name: "minimap",
                        defaultValue: {
                            enabled: true,
                            size: "proportional",
                            side: "right",
                            showSlider: "mouseover",
                            renderCharacters: true,
                            maxColumn: 120,
                            scale: 1
                        },
                        schema: {
                            "editor.minimap.enabled": {
                                type: "boolean",
                                default: true,
                                description: "Controls whether the minimap is shown.",
                                scope: 5
                            },
                            "editor.minimap.size": {
                                type: "string",
                                enum: [
                                    "proportional",
                                    "fill",
                                    "fit"
                                ],
                                enumDescriptions: [
                                    "The minimap has the same size as the editor contents (and might scroll).",
                                    "The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).",
                                    "The minimap will shrink as necessary to never be larger than the editor (no scrolling)."
                                ],
                                default: "proportional",
                                description: "Controls the size of the minimap.",
                                scope: 5
                            },
                            "editor.minimap.side": {
                                type: "string",
                                enum: [
                                    "left",
                                    "right"
                                ],
                                default: "right",
                                description: "Controls the side where to render the minimap.",
                                scope: 5
                            },
                            "editor.minimap.showSlider": {
                                type: "string",
                                enum: [
                                    "always",
                                    "mouseover"
                                ],
                                default: "mouseover",
                                description: "Controls when the minimap slider is shown.",
                                scope: 5
                            },
                            "editor.minimap.scale": {
                                type: "number",
                                default: 1,
                                minimum: 1,
                                maximum: 3,
                                enum: [
                                    1,
                                    2,
                                    3
                                ],
                                description: "Scale of content drawn in the minimap: 1, 2 or 3.",
                                scope: 5
                            },
                            "editor.minimap.renderCharacters": {
                                type: "boolean",
                                default: true,
                                description: "Render the actual characters on a line as opposed to color blocks.",
                                scope: 5
                            },
                            "editor.minimap.maxColumn": {
                                type: "number",
                                default: 120,
                                description: "Limit the width of the minimap to render at most a certain number of columns.",
                                scope: 5
                            }
                        }
                    },
                    mouseStyle: {
                        id: 57,
                        name: "mouseStyle",
                        defaultValue: "text",
                        _allowedValues: [
                            "text",
                            "default",
                            "copy"
                        ]
                    },
                    mouseWheelScrollSensitivity: {
                        id: 58,
                        name: "mouseWheelScrollSensitivity",
                        defaultValue: 1,
                        schema: {
                            markdownDescription: "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.",
                            type: "number",
                            default: 1,
                            scope: 5
                        },
                        validationFn: (e21) => e21 === 0 ? 1 : e21
                    },
                    mouseWheelZoom: {
                        id: 59,
                        name: "mouseWheelZoom",
                        defaultValue: false,
                        schema: {
                            markdownDescription: "Zoom the font of the editor when using mouse wheel and holding `Ctrl`.",
                            type: "boolean",
                            default: false,
                            scope: 5
                        }
                    },
                    multiCursorMergeOverlapping: {
                        id: 60,
                        name: "multiCursorMergeOverlapping",
                        defaultValue: true,
                        schema: {
                            description: "Merge multiple cursors when they are overlapping.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    multiCursorModifier: {
                        id: 61,
                        name: "multiCursorModifier",
                        defaultValue: "altKey",
                        schema: {
                            markdownEnumDescriptions: [
                                "Maps to `Control` on Windows and Linux and to `Command` on macOS.",
                                "Maps to `Alt` on Windows and Linux and to `Option` on macOS."
                            ],
                            markdownDescription: "The modifier to be used to add multiple cursors with the mouse. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).",
                            type: "string",
                            enum: [
                                "ctrlCmd",
                                "alt"
                            ],
                            default: "alt",
                            scope: 5
                        }
                    },
                    multiCursorPaste: {
                        id: 62,
                        name: "multiCursorPaste",
                        defaultValue: "spread",
                        schema: {
                            markdownEnumDescriptions: [
                                "Each cursor pastes a single line of the text.",
                                "Each cursor pastes the full text."
                            ],
                            markdownDescription: "Controls pasting when the line count of the pasted text matches the cursor count.",
                            type: "string",
                            enum: [
                                "spread",
                                "full"
                            ],
                            default: "spread",
                            scope: 5
                        }
                    },
                    occurrencesHighlight: {
                        id: 63,
                        name: "occurrencesHighlight",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether the editor should highlight semantic symbol occurrences.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    overviewRulerBorder: {
                        id: 64,
                        name: "overviewRulerBorder",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether a border should be drawn around the overview ruler.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    overviewRulerLanes: {
                        id: 65,
                        name: "overviewRulerLanes",
                        defaultValue: 2,
                        minimum: 0,
                        maximum: 3
                    },
                    padding: {
                        id: 66,
                        name: "padding",
                        defaultValue: {
                            top: 0,
                            bottom: 0
                        },
                        schema: {
                            "editor.padding.top": {
                                type: "number",
                                default: 0,
                                minimum: 0,
                                maximum: 1000,
                                description: "Controls the amount of space between the top edge of the editor and the first line.",
                                scope: 5
                            },
                            "editor.padding.bottom": {
                                type: "number",
                                default: 0,
                                minimum: 0,
                                maximum: 1000,
                                description: "Controls the amount of space between the bottom edge of the editor and the last line.",
                                scope: 5
                            }
                        }
                    },
                    parameterHints: {
                        id: 67,
                        name: "parameterHints",
                        defaultValue: {
                            enabled: true,
                            cycle: false
                        },
                        schema: {
                            "editor.parameterHints.enabled": {
                                type: "boolean",
                                default: true,
                                description: "Enables a pop-up that shows parameter documentation and type information as you type.",
                                scope: 5
                            },
                            "editor.parameterHints.cycle": {
                                type: "boolean",
                                default: false,
                                description: "Controls whether the parameter hints menu cycles or closes when reaching the end of the list.",
                                scope: 5
                            }
                        }
                    },
                    peekWidgetDefaultFocus: {
                        id: 68,
                        name: "peekWidgetDefaultFocus",
                        defaultValue: "tree",
                        schema: {
                            enumDescriptions: [
                                "Focus the tree when opening peek",
                                "Focus the editor when opening peek"
                            ],
                            description: "Controls whether to focus the inline editor or the tree in the peek widget.",
                            type: "string",
                            enum: [
                                "tree",
                                "editor"
                            ],
                            default: "tree",
                            scope: 5
                        }
                    },
                    definitionLinkOpensInPeek: {
                        id: 69,
                        name: "definitionLinkOpensInPeek",
                        defaultValue: false,
                        schema: {
                            description: "Controls whether the Go to Definition mouse gesture always opens the peek widget.",
                            type: "boolean",
                            default: false,
                            scope: 5
                        }
                    },
                    quickSuggestions: {
                        id: 70,
                        name: "quickSuggestions",
                        defaultValue: {
                            other: true,
                            comments: false,
                            strings: false
                        },
                        schema: {
                            anyOf: [
                                {
                                    type: "boolean"
                                },
                                {
                                    type: "object",
                                    properties: {
                                        strings: {
                                            type: "boolean",
                                            default: false,
                                            description: "Enable quick suggestions inside strings."
                                        },
                                        comments: {
                                            type: "boolean",
                                            default: false,
                                            description: "Enable quick suggestions inside comments."
                                        },
                                        other: {
                                            type: "boolean",
                                            default: true,
                                            description: "Enable quick suggestions outside of strings and comments."
                                        }
                                    }
                                }
                            ],
                            description: "Controls whether suggestions should automatically show up while typing.",
                            scope: 5
                        }
                    },
                    quickSuggestionsDelay: {
                        id: 71,
                        name: "quickSuggestionsDelay",
                        defaultValue: 10,
                        schema: {
                            description: "Controls the delay in milliseconds after which quick suggestions will show up.",
                            type: "integer",
                            default: 10,
                            minimum: 0,
                            maximum: 1073741824,
                            scope: 5
                        },
                        minimum: 0,
                        maximum: 1073741824
                    },
                    readOnly: {
                        id: 72,
                        name: "readOnly",
                        defaultValue: false
                    },
                    renameOnType: {
                        id: 73,
                        name: "renameOnType",
                        defaultValue: false,
                        schema: {
                            description: "Controls whether the editor auto renames on type.",
                            type: "boolean",
                            default: false,
                            scope: 5
                        }
                    },
                    renderControlCharacters: {
                        id: 74,
                        name: "renderControlCharacters",
                        defaultValue: false,
                        schema: {
                            description: "Controls whether the editor should render control characters.",
                            type: "boolean",
                            default: false,
                            scope: 5
                        }
                    },
                    renderIndentGuides: {
                        id: 75,
                        name: "renderIndentGuides",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether the editor should render indent guides.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    renderFinalNewline: {
                        id: 76,
                        name: "renderFinalNewline",
                        defaultValue: true,
                        schema: {
                            description: "Render last line number when the file ends with a newline.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    renderLineHighlight: {
                        id: 77,
                        name: "renderLineHighlight",
                        defaultValue: "line",
                        schema: {
                            enumDescriptions: [
                                "",
                                "",
                                "",
                                "Highlights both the gutter and the current line."
                            ],
                            description: "Controls how the editor should render the current line highlight.",
                            type: "string",
                            enum: [
                                "none",
                                "gutter",
                                "line",
                                "all"
                            ],
                            default: "line",
                            scope: 5
                        }
                    },
                    renderLineHighlightOnlyWhenFocus: {
                        id: 78,
                        name: "renderLineHighlightOnlyWhenFocus",
                        defaultValue: false,
                        schema: {
                            description: "Controls if the editor should render the current line highlight only when the editor is focused",
                            type: "boolean",
                            default: false,
                            scope: 5
                        }
                    },
                    renderValidationDecorations: {
                        id: 79,
                        name: "renderValidationDecorations",
                        defaultValue: "editable",
                        _allowedValues: [
                            "editable",
                            "on",
                            "off"
                        ]
                    },
                    renderWhitespace: {
                        id: 80,
                        name: "renderWhitespace",
                        defaultValue: "selection",
                        schema: {
                            enumDescriptions: [
                                "",
                                "Render whitespace characters except for single spaces between words.",
                                "Render whitespace characters only on selected text.",
                                "Render only trailing whitespace characters",
                                ""
                            ],
                            description: "Controls how the editor should render whitespace characters.",
                            type: "string",
                            enum: [
                                "none",
                                "boundary",
                                "selection",
                                "trailing",
                                "all"
                            ],
                            default: "selection",
                            scope: 5
                        }
                    },
                    revealHorizontalRightPadding: {
                        id: 81,
                        name: "revealHorizontalRightPadding",
                        defaultValue: 30,
                        minimum: 0,
                        maximum: 1000
                    },
                    roundedSelection: {
                        id: 82,
                        name: "roundedSelection",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether selections should have rounded corners.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    rulers: {
                        id: 83,
                        name: "rulers",
                        defaultValue: [],
                        schema: {
                            type: "array",
                            items: {
                                anyOf: [
                                    {
                                        type: "number",
                                        description: "Number of monospace characters at which this editor ruler will render."
                                    },
                                    {
                                        type: [
                                            "object"
                                        ],
                                        properties: {
                                            color: {
                                                type: "string",
                                                description: "Color of this editor ruler.",
                                                format: "color-hex"
                                            }
                                        }
                                    }
                                ]
                            },
                            description: "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.",
                            scope: 5
                        }
                    },
                    scrollbar: {
                        id: 84,
                        name: "scrollbar",
                        defaultValue: {
                            vertical: 1,
                            horizontal: 1,
                            arrowSize: 11,
                            useShadows: true,
                            verticalHasArrows: false,
                            horizontalHasArrows: false,
                            horizontalScrollbarSize: 12,
                            horizontalSliderSize: 12,
                            verticalScrollbarSize: 14,
                            verticalSliderSize: 14,
                            handleMouseWheel: true,
                            alwaysConsumeMouseWheel: true
                        }
                    },
                    scrollBeyondLastColumn: {
                        id: 85,
                        name: "scrollBeyondLastColumn",
                        defaultValue: 5,
                        schema: {
                            description: "Controls the number of extra characters beyond which the editor will scroll horizontally.",
                            type: "integer",
                            default: 5,
                            minimum: 0,
                            maximum: 1073741824,
                            scope: 5
                        },
                        minimum: 0,
                        maximum: 1073741824
                    },
                    scrollBeyondLastLine: {
                        id: 86,
                        name: "scrollBeyondLastLine",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether the editor will scroll beyond the last line.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    scrollPredominantAxis: {
                        id: 87,
                        name: "scrollPredominantAxis",
                        defaultValue: true,
                        schema: {
                            description: "Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    selectionClipboard: {
                        id: 88,
                        name: "selectionClipboard",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether the Linux primary clipboard should be supported.",
                            included: false,
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    selectionHighlight: {
                        id: 89,
                        name: "selectionHighlight",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether the editor should highlight matches similar to the selection.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    selectOnLineNumbers: {
                        id: 90,
                        name: "selectOnLineNumbers",
                        defaultValue: true
                    },
                    showFoldingControls: {
                        id: 91,
                        name: "showFoldingControls",
                        defaultValue: "mouseover",
                        schema: {
                            enumDescriptions: [
                                "Always show the folding controls.",
                                "Only show the folding controls when the mouse is over the gutter."
                            ],
                            description: "Controls when the folding controls on the gutter are shown.",
                            type: "string",
                            enum: [
                                "always",
                                "mouseover"
                            ],
                            default: "mouseover",
                            scope: 5
                        }
                    },
                    showUnused: {
                        id: 92,
                        name: "showUnused",
                        defaultValue: true,
                        schema: {
                            description: "Controls fading out of unused code.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    showDeprecated: {
                        id: 113,
                        name: "showDeprecated",
                        defaultValue: true,
                        schema: {
                            description: "Controls strikethrough deprecated variables.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    snippetSuggestions: {
                        id: 93,
                        name: "snippetSuggestions",
                        defaultValue: "inline",
                        schema: {
                            enumDescriptions: [
                                "Show snippet suggestions on top of other suggestions.",
                                "Show snippet suggestions below other suggestions.",
                                "Show snippets suggestions with other suggestions.",
                                "Do not show snippet suggestions."
                            ],
                            description: "Controls whether snippets are shown with other suggestions and how they are sorted.",
                            type: "string",
                            enum: [
                                "top",
                                "bottom",
                                "inline",
                                "none"
                            ],
                            default: "inline",
                            scope: 5
                        }
                    },
                    smoothScrolling: {
                        id: 94,
                        name: "smoothScrolling",
                        defaultValue: false,
                        schema: {
                            description: "Controls whether the editor will scroll using an animation.",
                            type: "boolean",
                            default: false,
                            scope: 5
                        }
                    },
                    stopRenderingLineAfter: {
                        id: 95,
                        name: "stopRenderingLineAfter",
                        defaultValue: 10000,
                        minimum: -1,
                        maximum: 1073741824
                    },
                    suggest: {
                        id: 96,
                        name: "suggest",
                        defaultValue: {
                            insertMode: "insert",
                            filterGraceful: true,
                            snippetsPreventQuickSuggestions: true,
                            localityBonus: false,
                            shareSuggestSelections: false,
                            showIcons: true,
                            maxVisibleSuggestions: 12,
                            showMethods: true,
                            showFunctions: true,
                            showConstructors: true,
                            showFields: true,
                            showVariables: true,
                            showClasses: true,
                            showStructs: true,
                            showInterfaces: true,
                            showModules: true,
                            showProperties: true,
                            showEvents: true,
                            showOperators: true,
                            showUnits: true,
                            showValues: true,
                            showConstants: true,
                            showEnums: true,
                            showEnumMembers: true,
                            showKeywords: true,
                            showWords: true,
                            showColors: true,
                            showFiles: true,
                            showReferences: true,
                            showFolders: true,
                            showTypeParameters: true,
                            showSnippets: true,
                            showUsers: true,
                            showIssues: true,
                            statusBar: {
                                visible: false
                            }
                        },
                        schema: {
                            "editor.suggest.insertMode": {
                                type: "string",
                                enum: [
                                    "insert",
                                    "replace"
                                ],
                                enumDescriptions: [
                                    "Insert suggestion without overwriting text right of the cursor.",
                                    "Insert suggestion and overwrite text right of the cursor."
                                ],
                                default: "insert",
                                description: "Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.",
                                scope: 5
                            },
                            "editor.suggest.filterGraceful": {
                                type: "boolean",
                                default: true,
                                description: "Controls whether filtering and sorting suggestions accounts for small typos.",
                                scope: 5
                            },
                            "editor.suggest.localityBonus": {
                                type: "boolean",
                                default: false,
                                description: "Controls whether sorting favours words that appear close to the cursor.",
                                scope: 5
                            },
                            "editor.suggest.shareSuggestSelections": {
                                type: "boolean",
                                default: false,
                                markdownDescription: "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).",
                                scope: 5
                            },
                            "editor.suggest.snippetsPreventQuickSuggestions": {
                                type: "boolean",
                                default: true,
                                description: "Controls whether an active snippet prevents quick suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showIcons": {
                                type: "boolean",
                                default: true,
                                description: "Controls whether to show or hide icons in suggestions.",
                                scope: 5
                            },
                            "editor.suggest.maxVisibleSuggestions": {
                                type: "number",
                                default: 12,
                                minimum: 1,
                                maximum: 15,
                                description: "Controls how many suggestions IntelliSense will show before showing a scrollbar (maximum 15).",
                                scope: 5
                            },
                            "editor.suggest.filteredTypes": {
                                type: "object",
                                deprecationMessage: "This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.",
                                default: {},
                                scope: 5
                            },
                            "editor.suggest.showMethods": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `method`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showFunctions": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `function`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showConstructors": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `constructor`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showFields": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `field`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showVariables": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `variable`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showClasses": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `class`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showStructs": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `struct`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showInterfaces": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `interface`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showModules": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `module`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showProperties": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `property`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showEvents": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `event`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showOperators": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `operator`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showUnits": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `unit`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showValues": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `value`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showConstants": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `constant`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showEnums": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `enum`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showEnumMembers": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `enumMember`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showKeywords": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `keyword`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showWords": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `text`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showColors": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `color`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showFiles": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `file`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showReferences": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `reference`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showCustomcolors": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `customcolor`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showFolders": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `folder`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showTypeParameters": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `typeParameter`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showSnippets": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `snippet`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showUsers": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `user`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.showIssues": {
                                type: "boolean",
                                default: true,
                                markdownDescription: "When enabled IntelliSense shows `issues`-suggestions.",
                                scope: 5
                            },
                            "editor.suggest.statusBar.visible": {
                                type: "boolean",
                                default: false,
                                markdownDescription: "Controls the visibility of the status bar at the bottom of the suggest widget.",
                                scope: 5
                            }
                        }
                    },
                    suggestFontSize: {
                        id: 97,
                        name: "suggestFontSize",
                        defaultValue: 0,
                        schema: {
                            markdownDescription: "Font size for the suggest widget. When set to `0`, the value of `#editor.fontSize#` is used.",
                            type: "integer",
                            default: 0,
                            minimum: 0,
                            maximum: 1000,
                            scope: 5
                        },
                        minimum: 0,
                        maximum: 1000
                    },
                    suggestLineHeight: {
                        id: 98,
                        name: "suggestLineHeight",
                        defaultValue: 0,
                        schema: {
                            markdownDescription: "Line height for the suggest widget. When set to `0`, the value of `#editor.lineHeight#` is used.",
                            type: "integer",
                            default: 0,
                            minimum: 0,
                            maximum: 1000,
                            scope: 5
                        },
                        minimum: 0,
                        maximum: 1000
                    },
                    suggestOnTriggerCharacters: {
                        id: 99,
                        name: "suggestOnTriggerCharacters",
                        defaultValue: true,
                        schema: {
                            description: "Controls whether suggestions should automatically show up when typing trigger characters.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    suggestSelection: {
                        id: 100,
                        name: "suggestSelection",
                        defaultValue: "recentlyUsed",
                        schema: {
                            markdownEnumDescriptions: [
                                "Always select the first suggestion.",
                                "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.",
                                "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`."
                            ],
                            description: "Controls how suggestions are pre-selected when showing the suggest list.",
                            type: "string",
                            enum: [
                                "first",
                                "recentlyUsed",
                                "recentlyUsedByPrefix"
                            ],
                            default: "recentlyUsed",
                            scope: 5
                        }
                    },
                    tabCompletion: {
                        id: 101,
                        name: "tabCompletion",
                        defaultValue: "off",
                        schema: {
                            enumDescriptions: [
                                "Tab complete will insert the best matching suggestion when pressing tab.",
                                "Disable tab completions.",
                                "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled."
                            ],
                            description: "Enables tab completions.",
                            type: "string",
                            enum: [
                                "on",
                                "off",
                                "onlySnippets"
                            ],
                            default: "off",
                            scope: 5
                        }
                    },
                    tabIndex: {
                        id: 102,
                        name: "tabIndex",
                        defaultValue: 0,
                        minimum: -1,
                        maximum: 1073741824
                    },
                    unusualLineTerminators: {
                        id: 103,
                        name: "unusualLineTerminators",
                        defaultValue: "prompt",
                        schema: {
                            enumDescriptions: [
                                "Unusual line terminators are ignored.",
                                "Unusual line terminators prompt to be removed.",
                                "Unusual line terminators are automatically removed."
                            ],
                            description: "Remove unusual line terminators that might cause problems.",
                            type: "string",
                            enum: [
                                "off",
                                "prompt",
                                "auto"
                            ],
                            default: "prompt",
                            scope: 5
                        }
                    },
                    useTabStops: {
                        id: 104,
                        name: "useTabStops",
                        defaultValue: true,
                        schema: {
                            description: "Inserting and deleting whitespace follows tab stops.",
                            type: "boolean",
                            default: true,
                            scope: 5
                        }
                    },
                    wordSeparators: {
                        id: 105,
                        name: "wordSeparators",
                        defaultValue: "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
                        schema: {
                            description: "Characters that will be used as word separators when doing word related navigations or operations.",
                            type: "string",
                            default: "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
                            scope: 5
                        }
                    },
                    wordWrap: {
                        id: 106,
                        name: "wordWrap",
                        defaultValue: "off",
                        schema: {
                            markdownEnumDescriptions: [
                                "Lines will never wrap.",
                                "Lines will wrap at the viewport width.",
                                "Lines will wrap at `#editor.wordWrapColumn#`.",
                                "Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`."
                            ],
                            description: "Controls how lines should wrap.",
                            type: "string",
                            enum: [
                                "off",
                                "on",
                                "wordWrapColumn",
                                "bounded"
                            ],
                            default: "off",
                            scope: 5
                        }
                    },
                    wordWrapBreakAfterCharacters: {
                        id: 107,
                        name: "wordWrapBreakAfterCharacters",
                        defaultValue: " \t})]?|/&.,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ”〉》」』】〕）］｝｣"
                    },
                    wordWrapBreakBeforeCharacters: {
                        id: 108,
                        name: "wordWrapBreakBeforeCharacters",
                        defaultValue: "([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋"
                    },
                    wordWrapColumn: {
                        id: 109,
                        name: "wordWrapColumn",
                        defaultValue: 80,
                        schema: {
                            markdownDescription: "Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.",
                            type: "integer",
                            default: 80,
                            minimum: 1,
                            maximum: 1073741824,
                            scope: 5
                        },
                        minimum: 1,
                        maximum: 1073741824
                    },
                    wordWrapMinified: {
                        id: 110,
                        name: "wordWrapMinified",
                        defaultValue: true
                    },
                    wrappingIndent: {
                        id: 111,
                        name: "wrappingIndent",
                        defaultValue: 0,
                        schema: {
                            enumDescriptions: [
                                "No indentation. Wrapped lines begin at column 1.",
                                "Wrapped lines get the same indentation as the parent.",
                                "Wrapped lines get +1 indentation toward the parent.",
                                "Wrapped lines get +2 indentation toward the parent."
                            ],
                            description: "Controls the indentation of wrapped lines.",
                            type: "string",
                            enum: [
                                "none",
                                "same",
                                "indent",
                                "deepIndent"
                            ],
                            default: "same",
                            scope: 5
                        }
                    },
                    wrappingStrategy: {
                        id: 112,
                        name: "wrappingStrategy",
                        defaultValue: "simple",
                        schema: {
                            enumDescriptions: [
                                "Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.",
                                "Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases."
                            ],
                            description: "Controls the algorithm that computes wrapping points.",
                            type: "string",
                            enum: [
                                "simple",
                                "advanced"
                            ],
                            default: "simple",
                            scope: 5
                        }
                    },
                    editorClassName: {
                        id: 114,
                        name: "_never_",
                        deps: [
                            57,
                            27
                        ]
                    },
                    pixelRatio: {
                        id: 115,
                        name: "_never_",
                        deps: null
                    },
                    tabFocusMode: {
                        id: 116,
                        name: "_never_",
                        deps: [
                            72
                        ]
                    },
                    layoutInfo: {
                        id: 117,
                        name: "_never_",
                        deps: [
                            42,
                            50,
                            31,
                            56,
                            84,
                            52,
                            53,
                            86,
                            106,
                            109,
                            110,
                            2
                        ]
                    },
                    wrappingInfo: {
                        id: 118,
                        name: "_never_",
                        deps: [
                            117
                        ]
                    }
                }
            },
            languages: {
                DocumentHighlightKind: {
                    0: "Text",
                    1: "Read",
                    2: "Write",
                    Text: 0,
                    Read: 1,
                    Write: 2
                },
                CompletionItemKind: {
                    0: "Method",
                    1: "Function",
                    2: "Constructor",
                    3: "Field",
                    4: "Variable",
                    5: "Class",
                    6: "Struct",
                    7: "Interface",
                    8: "Module",
                    9: "Property",
                    10: "Event",
                    11: "Operator",
                    12: "Unit",
                    13: "Value",
                    14: "Constant",
                    15: "Enum",
                    16: "EnumMember",
                    17: "Keyword",
                    18: "Text",
                    19: "Color",
                    20: "File",
                    21: "Reference",
                    22: "Customcolor",
                    23: "Folder",
                    24: "TypeParameter",
                    25: "User",
                    26: "Issue",
                    27: "Snippet",
                    Method: 0,
                    Function: 1,
                    Constructor: 2,
                    Field: 3,
                    Variable: 4,
                    Class: 5,
                    Struct: 6,
                    Interface: 7,
                    Module: 8,
                    Property: 9,
                    Event: 10,
                    Operator: 11,
                    Unit: 12,
                    Value: 13,
                    Constant: 14,
                    Enum: 15,
                    EnumMember: 16,
                    Keyword: 17,
                    Text: 18,
                    Color: 19,
                    File: 20,
                    Reference: 21,
                    Customcolor: 22,
                    Folder: 23,
                    TypeParameter: 24,
                    User: 25,
                    Issue: 26,
                    Snippet: 27
                },
                CompletionItemTag: {
                    1: "Deprecated",
                    Deprecated: 1
                },
                CompletionItemInsertTextRule: {
                    1: "KeepWhitespace",
                    4: "InsertAsSnippet",
                    KeepWhitespace: 1,
                    InsertAsSnippet: 4
                },
                SymbolKind: {
                    0: "File",
                    1: "Module",
                    2: "Namespace",
                    3: "Package",
                    4: "Class",
                    5: "Method",
                    6: "Property",
                    7: "Field",
                    8: "Constructor",
                    9: "Enum",
                    10: "Interface",
                    11: "Function",
                    12: "Variable",
                    13: "Constant",
                    14: "String",
                    15: "Number",
                    16: "Boolean",
                    17: "Array",
                    18: "Object",
                    19: "Key",
                    20: "Null",
                    21: "EnumMember",
                    22: "Struct",
                    23: "Event",
                    24: "Operator",
                    25: "TypeParameter",
                    File: 0,
                    Module: 1,
                    Namespace: 2,
                    Package: 3,
                    Class: 4,
                    Method: 5,
                    Property: 6,
                    Field: 7,
                    Constructor: 8,
                    Enum: 9,
                    Interface: 10,
                    Function: 11,
                    Variable: 12,
                    Constant: 13,
                    String: 14,
                    Number: 15,
                    Boolean: 16,
                    Array: 17,
                    Object: 18,
                    Key: 19,
                    Null: 20,
                    EnumMember: 21,
                    Struct: 22,
                    Event: 23,
                    Operator: 24,
                    TypeParameter: 25
                },
                SymbolTag: {
                    1: "Deprecated",
                    Deprecated: 1
                },
                IndentAction: {
                    0: "None",
                    1: "Indent",
                    2: "IndentOutdent",
                    3: "Outdent",
                    None: 0,
                    Indent: 1,
                    IndentOutdent: 2,
                    Outdent: 3
                },
                CompletionTriggerKind: {
                    0: "Invoke",
                    1: "TriggerCharacter",
                    2: "TriggerForIncompleteCompletions",
                    Invoke: 0,
                    TriggerCharacter: 1,
                    TriggerForIncompleteCompletions: 2
                },
                SignatureHelpTriggerKind: {
                    1: "Invoke",
                    2: "TriggerCharacter",
                    3: "ContentChange",
                    Invoke: 1,
                    TriggerCharacter: 2,
                    ContentChange: 3
                },
                FoldingRangeKind: class C {
                    constructor(e21) {
                        this.value = e21;
                    }
                },
                typescript: {
                    ModuleKind: {
                        0: "None",
                        1: "CommonJS",
                        2: "AMD",
                        3: "UMD",
                        4: "System",
                        5: "ES2015",
                        99: "ESNext",
                        None: 0,
                        CommonJS: 1,
                        AMD: 2,
                        UMD: 3,
                        System: 4,
                        ES2015: 5,
                        ESNext: 99
                    },
                    JsxEmit: {
                        0: "None",
                        1: "Preserve",
                        2: "React",
                        3: "ReactNative",
                        None: 0,
                        Preserve: 1,
                        React: 2,
                        ReactNative: 3
                    },
                    NewLineKind: {
                        0: "CarriageReturnLineFeed",
                        1: "LineFeed",
                        CarriageReturnLineFeed: 0,
                        LineFeed: 1
                    },
                    ScriptTarget: {
                        0: "ES3",
                        1: "ES5",
                        2: "ES2015",
                        3: "ES2016",
                        4: "ES2017",
                        5: "ES2018",
                        6: "ES2019",
                        7: "ES2020",
                        99: "Latest",
                        100: "JSON",
                        ES3: 0,
                        ES5: 1,
                        ES2015: 2,
                        ES2016: 3,
                        ES2017: 4,
                        ES2018: 5,
                        ES2019: 6,
                        ES2020: 7,
                        ESNext: 99,
                        JSON: 100,
                        Latest: 99
                    },
                    ModuleResolutionKind: {
                        1: "Classic",
                        2: "NodeJs",
                        Classic: 1,
                        NodeJs: 2
                    },
                    typescriptVersion: "4.0.3",
                    typescriptDefaults: {
                        _onDidChange: {
                            _disposed: false
                        },
                        _onDidExtraLibsChange: {
                            _disposed: false
                        },
                        _extraLibs: {},
                        _removedExtraLibs: {},
                        _eagerModelSync: false,
                        _compilerOptions: {
                            allowNonTsExtensions: true,
                            target: 99
                        },
                        _diagnosticsOptions: {
                            noSemanticValidation: false,
                            noSyntaxValidation: false
                        },
                        _workerOptions: {},
                        _onDidExtraLibsChangeTimeout: -1
                    },
                    javascriptDefaults: {
                        _onDidChange: {
                            _disposed: false,
                            _event: (e21, t21, n21) => {
                                this._listeners || (this._listeners = new s.a());
                                const i21 = this._listeners.isEmpty();
                                i21 && this._options && this._options.onFirstListenerAdd && this._options.onFirstListenerAdd(this);
                                const r21 = this._listeners.push(t21 ? [
                                    e21,
                                    t21
                                ] : e21);
                                let l21, c21;
                                return i21 && this._options && this._options.onFirstListenerDidAdd && this._options.onFirstListenerDidAdd(this), this._options && this._options.onListenerDidAdd && this._options.onListenerDidAdd(this, e21, t21), this._leakageMon && (l21 = this._leakageMon.check(this._listeners.size)), c21 = {
                                    dispose: () => {
                                        if (l21 && l21(), c21.dispose = a._noop, !this._disposed && (r21(), this._options && this._options.onLastListenerRemove)) {
                                            this._listeners && !this._listeners.isEmpty() || this._options.onLastListenerRemove(this);
                                        }
                                    }
                                }, n21 instanceof o.b ? n21.add(c21) : Array.isArray(n21) && n21.push(c21), c21;
                            },
                            _listeners: {
                                _first: {
                                    next: {
                                        next: {}
                                    }
                                },
                                _size: 2
                            }
                        },
                        _onDidExtraLibsChange: {
                            _disposed: false,
                            _event: (e21, t21, n21) => {
                                this._listeners || (this._listeners = new s.a());
                                const i21 = this._listeners.isEmpty();
                                i21 && this._options && this._options.onFirstListenerAdd && this._options.onFirstListenerAdd(this);
                                const r21 = this._listeners.push(t21 ? [
                                    e21,
                                    t21
                                ] : e21);
                                let l21, c21;
                                return i21 && this._options && this._options.onFirstListenerDidAdd && this._options.onFirstListenerDidAdd(this), this._options && this._options.onListenerDidAdd && this._options.onListenerDidAdd(this, e21, t21), this._leakageMon && (l21 = this._leakageMon.check(this._listeners.size)), c21 = {
                                    dispose: () => {
                                        if (l21 && l21(), c21.dispose = a._noop, !this._disposed && (r21(), this._options && this._options.onLastListenerRemove)) {
                                            this._listeners && !this._listeners.isEmpty() || this._options.onLastListenerRemove(this);
                                        }
                                    }
                                }, n21 instanceof o.b ? n21.add(c21) : Array.isArray(n21) && n21.push(c21), c21;
                            },
                            _listeners: {
                                _first: {
                                    next: {}
                                },
                                _size: 2
                            }
                        },
                        _extraLibs: {},
                        _removedExtraLibs: {},
                        _eagerModelSync: false,
                        _compilerOptions: {
                            allowNonTsExtensions: true,
                            allowJs: true,
                            target: 99
                        },
                        _diagnosticsOptions: {
                            noSemanticValidation: true,
                            noSyntaxValidation: false
                        },
                        _workerOptions: {},
                        _onDidExtraLibsChangeTimeout: -1
                    }
                },
                css: {
                    cssDefaults: {
                        _onDidChange: {
                            _disposed: false
                        },
                        _languageId: "css",
                        _diagnosticsOptions: {
                            validate: true,
                            lint: {
                                compatibleVendorPrefixes: "ignore",
                                vendorPrefix: "warning",
                                duplicateProperties: "warning",
                                emptyRules: "warning",
                                importStatement: "ignore",
                                boxModel: "ignore",
                                universalSelector: "ignore",
                                zeroUnits: "ignore",
                                fontFaceProperties: "warning",
                                hexColorLength: "error",
                                argumentsInColorFunction: "error",
                                unknownProperties: "warning",
                                ieHack: "ignore",
                                unknownVendorSpecificProperties: "ignore",
                                propertyIgnoredDueToDisplay: "warning",
                                important: "ignore",
                                float: "ignore",
                                idSelector: "ignore"
                            }
                        },
                        _modeConfiguration: {
                            completionItems: true,
                            hovers: true,
                            documentSymbols: true,
                            definitions: true,
                            references: true,
                            documentHighlights: true,
                            rename: true,
                            colors: true,
                            foldingRanges: true,
                            diagnostics: true,
                            selectionRanges: true
                        }
                    },
                    lessDefaults: {
                        _onDidChange: {
                            _disposed: false
                        },
                        _languageId: "less"
                    },
                    scssDefaults: {
                        _onDidChange: {
                            _disposed: false
                        },
                        _languageId: "scss"
                    }
                },
                json: {
                    jsonDefaults: {
                        _onDidChange: {
                            _disposed: false
                        },
                        _languageId: "json",
                        _diagnosticsOptions: {
                            validate: true,
                            allowComments: true,
                            schemas: [],
                            enableSchemaRequest: false
                        },
                        _modeConfiguration: {
                            documentFormattingEdits: true,
                            documentRangeFormattingEdits: true,
                            completionItems: true,
                            hovers: true,
                            documentSymbols: true,
                            tokens: true,
                            colors: true,
                            foldingRanges: true,
                            diagnostics: true,
                            selectionRanges: true
                        }
                    }
                },
                html: {
                    htmlDefaults: {
                        _onDidChange: {
                            _disposed: false
                        },
                        _languageId: "html",
                        _options: {
                            format: {
                                tabSize: 4,
                                insertSpaces: false,
                                wrapLineLength: 120,
                                unformatted: "default\": \"a, abbr, acronym, b, bdo, big, br, button, cite, code, dfn, em, i, img, input, kbd, label, map, object, q, samp, select, small, span, strong, sub, sup, textarea, tt, var",
                                contentUnformatted: "pre",
                                indentInnerHtml: false,
                                preserveNewLines: true,
                                maxPreserveNewLines: null,
                                indentHandlebars: false,
                                endWithNewline: false,
                                extraLiners: "head, body, /html",
                                wrapAttributes: "auto"
                            },
                            suggest: {
                                html5: true,
                                angular1: true,
                                ionic: true
                            }
                        },
                        _modeConfiguration: {
                            completionItems: true,
                            hovers: true,
                            documentSymbols: true,
                            links: true,
                            documentHighlights: true,
                            rename: true,
                            colors: true,
                            foldingRanges: true,
                            selectionRanges: true,
                            diagnostics: true,
                            documentFormattingEdits: true,
                            documentRangeFormattingEdits: true
                        }
                    },
                    razorDefaults: {
                        _onDidChange: {
                            _disposed: false
                        },
                        _languageId: "razor",
                        _options: {
                            suggest: {
                                html5: true,
                                razor: true
                            }
                        },
                        _modeConfiguration: {
                            completionItems: true,
                            hovers: true,
                            documentSymbols: true,
                            links: true,
                            documentHighlights: true,
                            rename: true,
                            colors: true,
                            foldingRanges: true,
                            selectionRanges: true,
                            diagnostics: false,
                            documentFormattingEdits: false,
                            documentRangeFormattingEdits: false
                        }
                    },
                    handlebarDefaults: {
                        _onDidChange: {
                            _disposed: false
                        },
                        _languageId: "handlebars",
                        _options: {
                            suggest: {
                                html5: true
                            }
                        },
                        _modeConfiguration: {
                            completionItems: true,
                            hovers: true,
                            documentSymbols: true,
                            links: true,
                            documentHighlights: true,
                            rename: true,
                            colors: true,
                            foldingRanges: true,
                            selectionRanges: true,
                            diagnostics: false,
                            documentFormattingEdits: false,
                            documentRangeFormattingEdits: false
                        }
                    }
                }
            },
            CancellationTokenSource: class a {
                get token() {
                    return this._token || (this._token = new s()), this._token;
                }
                cancel() {
                    this._token ? this._token instanceof s && this._token.cancel() : this._token = o.Cancelled;
                }
                dispose(e21 = false) {
                    e21 && this.cancel(), this._parentListener && this._parentListener.dispose(), this._token ? this._token instanceof s && this._token.dispose() : this._token = o.None;
                }
                constructor(e21) {
                    this._token = void 0, this._parentListener = void 0, this._parentListener = e21 && e21.onCancellationRequested(this.cancel, this);
                }
            },
            Emitter: class a {
                get event() {
                    return this._event || (this._event = (e21, t21, n21) => {
                        this._listeners || (this._listeners = new s.a());
                        const i21 = this._listeners.isEmpty();
                        i21 && this._options && this._options.onFirstListenerAdd && this._options.onFirstListenerAdd(this);
                        const r21 = this._listeners.push(t21 ? [
                            e21,
                            t21
                        ] : e21);
                        let l21, c21;
                        return i21 && this._options && this._options.onFirstListenerDidAdd && this._options.onFirstListenerDidAdd(this), this._options && this._options.onListenerDidAdd && this._options.onListenerDidAdd(this, e21, t21), this._leakageMon && (l21 = this._leakageMon.check(this._listeners.size)), c21 = {
                            dispose: () => {
                                if (l21 && l21(), c21.dispose = a._noop, !this._disposed && (r21(), this._options && this._options.onLastListenerRemove)) {
                                    this._listeners && !this._listeners.isEmpty() || this._options.onLastListenerRemove(this);
                                }
                            }
                        }, n21 instanceof o.b ? n21.add(c21) : Array.isArray(n21) && n21.push(c21), c21;
                    }), this._event;
                }
                fire(e21) {
                    if (this._listeners) {
                        this._deliveryQueue || (this._deliveryQueue = new s.a());
                        for (let t21 of this._listeners)
                            this._deliveryQueue.push([
                                t21,
                                e21
                            ]);
                        for (; this._deliveryQueue.size > 0;) {
                            const [e31, t21] = this._deliveryQueue.shift();
                            try {
                                typeof e31 == "function" ? e31.call(void 0, t21) : e31[0].call(e31[1], t21);
                            }
                            catch (e41) {
                                Object(r.e)(e41);
                            }
                        }
                    }
                }
                dispose() {
                    this._listeners && this._listeners.clear(), this._deliveryQueue && this._deliveryQueue.clear(), this._leakageMon && this._leakageMon.dispose(), this._disposed = true;
                }
                constructor(e21) {
                    this._disposed = false, this._options = e21, this._leakageMon = void 0;
                }
            },
            KeyCode: {
                0: "Unknown",
                1: "Backspace",
                2: "Tab",
                3: "Enter",
                4: "Shift",
                5: "Ctrl",
                6: "Alt",
                7: "PauseBreak",
                8: "CapsLock",
                9: "Escape",
                10: "Space",
                11: "PageUp",
                12: "PageDown",
                13: "End",
                14: "Home",
                15: "LeftArrow",
                16: "UpArrow",
                17: "RightArrow",
                18: "DownArrow",
                19: "Insert",
                20: "Delete",
                21: "KEY_0",
                22: "KEY_1",
                23: "KEY_2",
                24: "KEY_3",
                25: "KEY_4",
                26: "KEY_5",
                27: "KEY_6",
                28: "KEY_7",
                29: "KEY_8",
                30: "KEY_9",
                31: "KEY_A",
                32: "KEY_B",
                33: "KEY_C",
                34: "KEY_D",
                35: "KEY_E",
                36: "KEY_F",
                37: "KEY_G",
                38: "KEY_H",
                39: "KEY_I",
                40: "KEY_J",
                41: "KEY_K",
                42: "KEY_L",
                43: "KEY_M",
                44: "KEY_N",
                45: "KEY_O",
                46: "KEY_P",
                47: "KEY_Q",
                48: "KEY_R",
                49: "KEY_S",
                50: "KEY_T",
                51: "KEY_U",
                52: "KEY_V",
                53: "KEY_W",
                54: "KEY_X",
                55: "KEY_Y",
                56: "KEY_Z",
                57: "Meta",
                58: "ContextMenu",
                59: "F1",
                60: "F2",
                61: "F3",
                62: "F4",
                63: "F5",
                64: "F6",
                65: "F7",
                66: "F8",
                67: "F9",
                68: "F10",
                69: "F11",
                70: "F12",
                71: "F13",
                72: "F14",
                73: "F15",
                74: "F16",
                75: "F17",
                76: "F18",
                77: "F19",
                78: "NumLock",
                79: "ScrollLock",
                80: "US_SEMICOLON",
                81: "US_EQUAL",
                82: "US_COMMA",
                83: "US_MINUS",
                84: "US_DOT",
                85: "US_SLASH",
                86: "US_BACKTICK",
                87: "US_OPEN_SQUARE_BRACKET",
                88: "US_BACKSLASH",
                89: "US_CLOSE_SQUARE_BRACKET",
                90: "US_QUOTE",
                91: "OEM_8",
                92: "OEM_102",
                93: "NUMPAD_0",
                94: "NUMPAD_1",
                95: "NUMPAD_2",
                96: "NUMPAD_3",
                97: "NUMPAD_4",
                98: "NUMPAD_5",
                99: "NUMPAD_6",
                100: "NUMPAD_7",
                101: "NUMPAD_8",
                102: "NUMPAD_9",
                103: "NUMPAD_MULTIPLY",
                104: "NUMPAD_ADD",
                105: "NUMPAD_SEPARATOR",
                106: "NUMPAD_SUBTRACT",
                107: "NUMPAD_DECIMAL",
                108: "NUMPAD_DIVIDE",
                109: "KEY_IN_COMPOSITION",
                110: "ABNT_C1",
                111: "ABNT_C2",
                112: "MAX_VALUE",
                Unknown: 0,
                Backspace: 1,
                Tab: 2,
                Enter: 3,
                Shift: 4,
                Ctrl: 5,
                Alt: 6,
                PauseBreak: 7,
                CapsLock: 8,
                Escape: 9,
                Space: 10,
                PageUp: 11,
                PageDown: 12,
                End: 13,
                Home: 14,
                LeftArrow: 15,
                UpArrow: 16,
                RightArrow: 17,
                DownArrow: 18,
                Insert: 19,
                Delete: 20,
                KEY_0: 21,
                KEY_1: 22,
                KEY_2: 23,
                KEY_3: 24,
                KEY_4: 25,
                KEY_5: 26,
                KEY_6: 27,
                KEY_7: 28,
                KEY_8: 29,
                KEY_9: 30,
                KEY_A: 31,
                KEY_B: 32,
                KEY_C: 33,
                KEY_D: 34,
                KEY_E: 35,
                KEY_F: 36,
                KEY_G: 37,
                KEY_H: 38,
                KEY_I: 39,
                KEY_J: 40,
                KEY_K: 41,
                KEY_L: 42,
                KEY_M: 43,
                KEY_N: 44,
                KEY_O: 45,
                KEY_P: 46,
                KEY_Q: 47,
                KEY_R: 48,
                KEY_S: 49,
                KEY_T: 50,
                KEY_U: 51,
                KEY_V: 52,
                KEY_W: 53,
                KEY_X: 54,
                KEY_Y: 55,
                KEY_Z: 56,
                Meta: 57,
                ContextMenu: 58,
                F1: 59,
                F2: 60,
                F3: 61,
                F4: 62,
                F5: 63,
                F6: 64,
                F7: 65,
                F8: 66,
                F9: 67,
                F10: 68,
                F11: 69,
                F12: 70,
                F13: 71,
                F14: 72,
                F15: 73,
                F16: 74,
                F17: 75,
                F18: 76,
                F19: 77,
                NumLock: 78,
                ScrollLock: 79,
                US_SEMICOLON: 80,
                US_EQUAL: 81,
                US_COMMA: 82,
                US_MINUS: 83,
                US_DOT: 84,
                US_SLASH: 85,
                US_BACKTICK: 86,
                US_OPEN_SQUARE_BRACKET: 87,
                US_BACKSLASH: 88,
                US_CLOSE_SQUARE_BRACKET: 89,
                US_QUOTE: 90,
                OEM_8: 91,
                OEM_102: 92,
                NUMPAD_0: 93,
                NUMPAD_1: 94,
                NUMPAD_2: 95,
                NUMPAD_3: 96,
                NUMPAD_4: 97,
                NUMPAD_5: 98,
                NUMPAD_6: 99,
                NUMPAD_7: 100,
                NUMPAD_8: 101,
                NUMPAD_9: 102,
                NUMPAD_MULTIPLY: 103,
                NUMPAD_ADD: 104,
                NUMPAD_SEPARATOR: 105,
                NUMPAD_SUBTRACT: 106,
                NUMPAD_DECIMAL: 107,
                NUMPAD_DIVIDE: 108,
                KEY_IN_COMPOSITION: 109,
                ABNT_C1: 110,
                ABNT_C2: 111,
                MAX_VALUE: 112
            },
            KeyMod: class u {
                static chord(e21, t21) {
                    return Object(o.a)(e21, t21);
                }
            },
            Position: class i {
                with(e21 = this.lineNumber, t21 = this.column) {
                    return e21 === this.lineNumber && t21 === this.column ? this : new i(e21, t21);
                }
                delta(e21 = 0, t21 = 0) {
                    return this.with(this.lineNumber + e21, this.column + t21);
                }
                equals(e21) {
                    return i.equals(this, e21);
                }
                static equals(e21, t21) {
                    return !e21 && !t21 || !!e21 && !!t21 && e21.lineNumber === t21.lineNumber && e21.column === t21.column;
                }
                isBefore(e21) {
                    return i.isBefore(this, e21);
                }
                static isBefore(e21, t21) {
                    return e21.lineNumber < t21.lineNumber || !(t21.lineNumber < e21.lineNumber) && e21.column < t21.column;
                }
                isBeforeOrEqual(e21) {
                    return i.isBeforeOrEqual(this, e21);
                }
                static isBeforeOrEqual(e21, t21) {
                    return e21.lineNumber < t21.lineNumber || !(t21.lineNumber < e21.lineNumber) && e21.column <= t21.column;
                }
                static compare(e21, t21) {
                    let n21 = 0 | e21.lineNumber, i21 = 0 | t21.lineNumber;
                    if (n21 === i21) {
                        return (0 | e21.column) - (0 | t21.column);
                    }
                    return n21 - i21;
                }
                clone() {
                    return new i(this.lineNumber, this.column);
                }
                toString() {
                    return "(" + this.lineNumber + "," + this.column + ")";
                }
                static lift(e21) {
                    return new i(e21.lineNumber, e21.column);
                }
                static isIPosition(e21) {
                    return e21 && typeof e21.lineNumber == "number" && typeof e21.column == "number";
                }
                constructor(e21, t21) {
                    this.lineNumber = e21, this.column = t21;
                }
            },
            Range: class r {
                isEmpty() {
                    return r.isEmpty(this);
                }
                static isEmpty(e21) {
                    return e21.startLineNumber === e21.endLineNumber && e21.startColumn === e21.endColumn;
                }
                containsPosition(e21) {
                    return r.containsPosition(this, e21);
                }
                static containsPosition(e21, t21) {
                    return !(t21.lineNumber < e21.startLineNumber || t21.lineNumber > e21.endLineNumber) && !(t21.lineNumber === e21.startLineNumber && t21.column < e21.startColumn) && !(t21.lineNumber === e21.endLineNumber && t21.column > e21.endColumn);
                }
                containsRange(e21) {
                    return r.containsRange(this, e21);
                }
                static containsRange(e21, t21) {
                    return !(t21.startLineNumber < e21.startLineNumber || t21.endLineNumber < e21.startLineNumber) && !(t21.startLineNumber > e21.endLineNumber || t21.endLineNumber > e21.endLineNumber) && !(t21.startLineNumber === e21.startLineNumber && t21.startColumn < e21.startColumn) && !(t21.endLineNumber === e21.endLineNumber && t21.endColumn > e21.endColumn);
                }
                strictContainsRange(e21) {
                    return r.strictContainsRange(this, e21);
                }
                static strictContainsRange(e21, t21) {
                    return !(t21.startLineNumber < e21.startLineNumber || t21.endLineNumber < e21.startLineNumber) && !(t21.startLineNumber > e21.endLineNumber || t21.endLineNumber > e21.endLineNumber) && !(t21.startLineNumber === e21.startLineNumber && t21.startColumn <= e21.startColumn) && !(t21.endLineNumber === e21.endLineNumber && t21.endColumn >= e21.endColumn);
                }
                plusRange(e21) {
                    return r.plusRange(this, e21);
                }
                static plusRange(e21, t21) {
                    let n21, i21, o1, s1;
                    return t21.startLineNumber < e21.startLineNumber ? (n21 = t21.startLineNumber, i21 = t21.startColumn) : t21.startLineNumber === e21.startLineNumber ? (n21 = t21.startLineNumber, i21 = Math.min(t21.startColumn, e21.startColumn)) : (n21 = e21.startLineNumber, i21 = e21.startColumn), t21.endLineNumber > e21.endLineNumber ? (o1 = t21.endLineNumber, s1 = t21.endColumn) : t21.endLineNumber === e21.endLineNumber ? (o1 = t21.endLineNumber, s1 = Math.max(t21.endColumn, e21.endColumn)) : (o1 = e21.endLineNumber, s1 = e21.endColumn), new r(n21, i21, o1, s1);
                }
                intersectRanges(e21) {
                    return r.intersectRanges(this, e21);
                }
                static intersectRanges(e21, t21) {
                    let n21 = e21.startLineNumber, i21 = e21.startColumn, o1 = e21.endLineNumber, s1 = e21.endColumn, a1 = t21.startLineNumber, l1 = t21.startColumn, c3 = t21.endLineNumber, d1 = t21.endColumn;
                    return n21 < a1 ? (n21 = a1, i21 = l1) : n21 === a1 && (i21 = Math.max(i21, l1)), o1 > c3 ? (o1 = c3, s1 = d1) : o1 === c3 && (s1 = Math.min(s1, d1)), n21 > o1 || n21 === o1 && i21 > s1 ? null : new r(n21, i21, o1, s1);
                }
                equalsRange(e21) {
                    return r.equalsRange(this, e21);
                }
                static equalsRange(e21, t21) {
                    return !!e21 && !!t21 && e21.startLineNumber === t21.startLineNumber && e21.startColumn === t21.startColumn && e21.endLineNumber === t21.endLineNumber && e21.endColumn === t21.endColumn;
                }
                getEndPosition() {
                    return r.getEndPosition(this);
                }
                static getEndPosition(e21) {
                    return new i.a(e21.endLineNumber, e21.endColumn);
                }
                getStartPosition() {
                    return r.getStartPosition(this);
                }
                static getStartPosition(e21) {
                    return new i.a(e21.startLineNumber, e21.startColumn);
                }
                toString() {
                    return "[" + this.startLineNumber + "," + this.startColumn + " -> " + this.endLineNumber + "," + this.endColumn + "]";
                }
                setEndPosition(e21, t21) {
                    return new r(this.startLineNumber, this.startColumn, e21, t21);
                }
                setStartPosition(e21, t21) {
                    return new r(e21, t21, this.endLineNumber, this.endColumn);
                }
                collapseToStart() {
                    return r.collapseToStart(this);
                }
                static collapseToStart(e21) {
                    return new r(e21.startLineNumber, e21.startColumn, e21.startLineNumber, e21.startColumn);
                }
                static fromPositions(e21, t21 = e21) {
                    return new r(e21.lineNumber, e21.column, t21.lineNumber, t21.column);
                }
                static lift(e21) {
                    return e21 ? new r(e21.startLineNumber, e21.startColumn, e21.endLineNumber, e21.endColumn) : null;
                }
                static isIRange(e21) {
                    return e21 && typeof e21.startLineNumber == "number" && typeof e21.startColumn == "number" && typeof e21.endLineNumber == "number" && typeof e21.endColumn == "number";
                }
                static areIntersectingOrTouching(e21, t21) {
                    return !(e21.endLineNumber < t21.startLineNumber || e21.endLineNumber === t21.startLineNumber && e21.endColumn < t21.startColumn) && !(t21.endLineNumber < e21.startLineNumber || t21.endLineNumber === e21.startLineNumber && t21.endColumn < e21.startColumn);
                }
                static areIntersecting(e21, t21) {
                    return !(e21.endLineNumber < t21.startLineNumber || e21.endLineNumber === t21.startLineNumber && e21.endColumn <= t21.startColumn) && !(t21.endLineNumber < e21.startLineNumber || t21.endLineNumber === e21.startLineNumber && t21.endColumn <= e21.startColumn);
                }
                static compareRangesUsingStarts(e21, t21) {
                    if (e21 && t21) {
                        const n21 = 0 | e21.startLineNumber, i21 = 0 | t21.startLineNumber;
                        if (n21 === i21) {
                            const n31 = 0 | e21.startColumn, i31 = 0 | t21.startColumn;
                            if (n31 === i31) {
                                const n41 = 0 | e21.endLineNumber, i41 = 0 | t21.endLineNumber;
                                if (n41 === i41) {
                                    return (0 | e21.endColumn) - (0 | t21.endColumn);
                                }
                                return n41 - i41;
                            }
                            return n31 - i31;
                        }
                        return n21 - i21;
                    }
                    return (e21 ? 1 : 0) - (t21 ? 1 : 0);
                }
                static compareRangesUsingEnds(e21, t21) {
                    return e21.endLineNumber === t21.endLineNumber ? e21.endColumn === t21.endColumn ? e21.startLineNumber === t21.startLineNumber ? e21.startColumn - t21.startColumn : e21.startLineNumber - t21.startLineNumber : e21.endColumn - t21.endColumn : e21.endLineNumber - t21.endLineNumber;
                }
                static spansMultipleLines(e21) {
                    return e21.endLineNumber > e21.startLineNumber;
                }
                constructor(e21, t21, n21, i21) {
                    e21 > n21 || e21 === n21 && t21 > i21 ? (this.startLineNumber = n21, this.startColumn = i21, this.endLineNumber = e21, this.endColumn = t21) : (this.startLineNumber = e21, this.startColumn = t21, this.endLineNumber = n21, this.endColumn = i21);
                }
            },
            Selection: class o extends r.a {
                toString() {
                    return "[" + this.selectionStartLineNumber + "," + this.selectionStartColumn + " -> " + this.positionLineNumber + "," + this.positionColumn + "]";
                }
                equalsSelection(e21) {
                    return o.selectionsEqual(this, e21);
                }
                static selectionsEqual(e21, t21) {
                    return e21.selectionStartLineNumber === t21.selectionStartLineNumber && e21.selectionStartColumn === t21.selectionStartColumn && e21.positionLineNumber === t21.positionLineNumber && e21.positionColumn === t21.positionColumn;
                }
                getDirection() {
                    return this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn ? 0 : 1;
                }
                setEndPosition(e21, t21) {
                    return this.getDirection() === 0 ? new o(this.startLineNumber, this.startColumn, e21, t21) : new o(e21, t21, this.startLineNumber, this.startColumn);
                }
                getPosition() {
                    return new i.a(this.positionLineNumber, this.positionColumn);
                }
                setStartPosition(e21, t21) {
                    return this.getDirection() === 0 ? new o(e21, t21, this.endLineNumber, this.endColumn) : new o(this.endLineNumber, this.endColumn, e21, t21);
                }
                static fromPositions(e21, t21 = e21) {
                    return new o(e21.lineNumber, e21.column, t21.lineNumber, t21.column);
                }
                static liftSelection(e21) {
                    return new o(e21.selectionStartLineNumber, e21.selectionStartColumn, e21.positionLineNumber, e21.positionColumn);
                }
                static selectionsArrEqual(e21, t21) {
                    if (e21 && !t21 || !e21 && t21)
                        return false;
                    if (!e21 && !t21)
                        return true;
                    if (e21.length !== t21.length)
                        return false;
                    for (let n21 = 0, i21 = e21.length; n21 < i21; n21++)
                        if (!this.selectionsEqual(e21[n21], t21[n21]))
                            return false;
                    return true;
                }
                static isISelection(e21) {
                    return e21 && typeof e21.selectionStartLineNumber == "number" && typeof e21.selectionStartColumn == "number" && typeof e21.positionLineNumber == "number" && typeof e21.positionColumn == "number";
                }
                static createWithDirection(e21, t21, n21, i21, r21) {
                    return r21 === 0 ? new o(e21, t21, n21, i21) : new o(n21, i21, e21, t21);
                }
                constructor(e21, t21, n21, i21) {
                    super(e21, t21, n21, i21), this.selectionStartLineNumber = e21, this.selectionStartColumn = t21, this.positionLineNumber = n21, this.positionColumn = i21;
                }
            },
            SelectionDirection: {
                0: "LTR",
                1: "RTL",
                LTR: 0,
                RTL: 1
            },
            MarkerSeverity: {
                1: "Hint",
                2: "Info",
                4: "Warning",
                8: "Error",
                Hint: 1,
                Info: 2,
                Warning: 4,
                Error: 8
            },
            MarkerTag: {
                1: "Unnecessary",
                2: "Deprecated",
                Unnecessary: 1,
                Deprecated: 2
            },
            Uri: class d {
                static isUri(e21) {
                    return e21 instanceof d || !!e21 && typeof e21.authority == "string" && typeof e21.fragment == "string" && typeof e21.path == "string" && typeof e21.query == "string" && typeof e21.scheme == "string" && typeof e21.fsPath == "function" && typeof e21.with == "function" && typeof e21.toString == "function";
                }
                get fsPath() {
                    return f(this, false);
                }
                with(e21) {
                    if (!e21)
                        return this;
                    let { scheme: t21, authority: n21, path: i21, query: r21, fragment: o21 } = e21;
                    return t21 === void 0 ? t21 = this.scheme : t21 === null && (t21 = ""), n21 === void 0 ? n21 = this.authority : n21 === null && (n21 = ""), i21 === void 0 ? i21 = this.path : i21 === null && (i21 = ""), r21 === void 0 ? r21 = this.query : r21 === null && (r21 = ""), o21 === void 0 ? o21 = this.fragment : o21 === null && (o21 = ""), t21 === this.scheme && n21 === this.authority && i21 === this.path && r21 === this.query && o21 === this.fragment ? this : new u(t21, n21, i21, r21, o21);
                }
                static parse(e21, t21 = false) {
                    const n21 = c.exec(e21);
                    return n21 ? new u(n21[2] || "", v(n21[4] || ""), v(n21[5] || ""), v(n21[7] || ""), v(n21[9] || ""), t21) : new u("", "", "", "", "");
                }
                static file(e21) {
                    let t21 = "";
                    if (i.i && (e21 = e21.replace(/\\/g, l)), e21[0] === l && e21[1] === l) {
                        const n21 = e21.indexOf(l, 2);
                        n21 === -1 ? (t21 = e21.substring(2), e21 = l) : (t21 = e21.substring(2, n21), e21 = e21.substring(n21) || l);
                    }
                    return new u("file", t21, e21, "", "");
                }
                static from(e21) {
                    return new u(e21.scheme, e21.authority, e21.path, e21.query, e21.fragment);
                }
                static joinPath(e21, ...t21) {
                    if (!e21.path)
                        throw new Error("[UriError]: cannot call joinPaths on URI without path");
                    let n21;
                    return n21 = i.i && e21.scheme === "file" ? d.file(r.i.join(f(e21, true), ...t21)).path : r.e.join(e21.path, ...t21), e21.with({
                        path: n21
                    });
                }
                toString(e21 = false) {
                    return b(this, e21);
                }
                toJSON() {
                    return this;
                }
                static revive(e21) {
                    if (e21) {
                        if (e21 instanceof d)
                            return e21;
                        {
                            const t21 = new u(e21);
                            return t21._formatted = e21.external, t21._fsPath = e21._sep === h ? e21.fsPath : null, t21;
                        }
                    }
                    return e21;
                }
                constructor(e21, t21, n21, i21, r21, c21 = false) {
                    typeof e21 == "object" ? (this.scheme = e21.scheme || "", this.authority = e21.authority || "", this.path = e21.path || "", this.query = e21.query || "", this.fragment = e21.fragment || "") : (this.scheme = function (e31, t31) {
                        return e31 || t31 ? e31 : "file";
                    }(e21, c21), this.authority = t21 || "", this.path = function (e31, t31) {
                        switch (e31) {
                            case "https":
                            case "http":
                            case "file":
                                t31 ? t31[0] !== l && (t31 = l + t31) : t31 = l;
                        }
                        return t31;
                    }(this.scheme, n21 || ""), this.query = i21 || "", this.fragment = r21 || "", function (e31, t31) {
                        if (!e31.scheme && t31)
                            throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${e31.authority}", path: "${e31.path}", query: "${e31.query}", fragment: "${e31.fragment}"}`);
                        if (e31.scheme && !o.test(e31.scheme))
                            throw new Error("[UriError]: Scheme contains illegal characters.");
                        if (e31.path) {
                            if (e31.authority) {
                                if (!s.test(e31.path))
                                    throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
                            }
                            else if (a.test(e31.path))
                                throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
                        }
                    }(this, c21));
                }
            },
            Token: class i {
                toString() {
                    return "(" + this.offset + ", " + this.type + ")";
                }
                constructor(e21, t21, n21) {
                    this.offset = 0 | e21, this.type = t21, this.language = n21;
                }
            }
        },
        MonacoEnvironment: {},
        gigya: {
            isGigya: true,
            apiKey: "4_aeFS_UyzRnmP5k_MI59ejg",
            defaultApiDomain: "gigya.com",
            dataCenter: "eu1",
            build: {
                number: 15622,
                version: "latest"
            },
            gmidVersion: "ver4",
            partnerSettings: {
                authMode: "cookie",
                captchaProvider: "Google",
                plugins: {
                    connectWithoutLoginBehavior: "alwaysLogin",
                    defaultRegScreenSet: "Default-RegistrationLogin",
                    defaultMobileRegScreenSet: "Default-RegistrationLogin",
                    sessionExpiration: 0,
                    rememberSessionExpiration: 0,
                    apiDomain: "eu1.gigya.com",
                    workflow: {
                        path: "workflow/resources/js/entryPoint.js"
                    }
                },
                baseDomains: "local.pyzlo.in",
                customAPIDomainPrefix: "gigya"
            },
            providersConfig: {},
            samlConfig: {
                errorPageURL: null,
                proxyPageURL: null
            },
            canary: {
                isActive: false,
                config: {
                    version: "15622-3-28373025",
                    isEnabled: true,
                    probability: 3,
                    cookiesNames: {
                        isCanary: "gig_canary",
                        version: "gig_canary_ver"
                    }
                }
            },
            errorReport: {
                enabled: true,
                probability: 1
            },
            bypassCaptchaV1: true,
            __initialized: true,
            _: {
                isTrustedDomain: true,
                apiAdapters: {
                    web: {
                        sso: {
                            _requestTimeout: 3000
                        },
                        tokenStore: {
                            activeNamespaces: {}
                        },
                        webAdapterName: "Web"
                    },
                    mobile: {
                        mobileCallbacks: {}
                    },
                    OAuthMode: {
                        0: "Social",
                        1: "Sso",
                        Social: 0,
                        Sso: 1
                    }
                },
                providers: {
                    _aliases: {
                        google: "googleplus",
                        googleplus: "googleplus",
                        messenger: "messenger",
                        microsoft: "messenger",
                        wechat: "wechat",
                        weixin: "wechat"
                    },
                    arProviders: [
                        {
                            ID: 64,
                            displayName: "Facebook",
                            width: 650,
                            height: 400,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "places",
                                "status",
                                "actions",
                                "photos"
                            ],
                            name: "facebook"
                        },
                        {
                            ID: 9012,
                            displayName: "Twitter",
                            width: 800,
                            height: 440,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "notifications",
                                "actions",
                                "status",
                                "places",
                                "checkins"
                            ],
                            name: "twitter"
                        },
                        {
                            ID: 72,
                            displayName: "Google",
                            width: 560,
                            height: 600,
                            explicitOnly: false,
                            aliases: "google|googleplus",
                            arDefaultCapabilities: [
                                "login",
                                "contacts"
                            ],
                            name: "googleplus"
                        },
                        {
                            ID: 9042,
                            displayName: "LinkedIn",
                            width: 865,
                            height: 450,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "status",
                                "actions",
                                "notifications",
                                "contacts"
                            ],
                            name: "linkedin"
                        },
                        {
                            ID: 9058,
                            displayName: "Amazon",
                            width: 785,
                            height: 510,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "amazon"
                        },
                        {
                            ID: 9803,
                            displayName: "Yahoo",
                            width: 500,
                            height: 567,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "contacts",
                                "notifications"
                            ],
                            name: "yahoo"
                        },
                        {
                            ID: 1047,
                            displayName: "Microsoft",
                            width: 380,
                            height: 540,
                            explicitOnly: false,
                            aliases: "messenger|microsoft",
                            arDefaultCapabilities: [
                                "login",
                                " friends"
                            ],
                            name: "messenger"
                        },
                        {
                            ID: 9222,
                            displayName: "Odnoklassniki",
                            width: 888,
                            height: 425,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "odnoklassniki"
                        },
                        {
                            ID: 9007,
                            displayName: "FourSquare",
                            width: 1000,
                            height: 650,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "places",
                                "checkins"
                            ],
                            name: "foursquare"
                        },
                        {
                            ID: 8191,
                            displayName: "Renren",
                            width: 450,
                            height: 350,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "status",
                                "actions"
                            ],
                            name: "renren"
                        },
                        {
                            ID: 8203,
                            displayName: "QQ",
                            width: 570,
                            height: 460,
                            arDefaultCapabilities: [
                                "login",
                                "actions"
                            ],
                            name: "qq"
                        },
                        {
                            ID: 9821,
                            displayName: "Sina",
                            width: 640,
                            height: 380,
                            arDefaultCapabilities: [
                                "login",
                                "status",
                                "actions"
                            ],
                            name: "sina"
                        },
                        {
                            ID: 4228,
                            displayName: "Mixi",
                            width: 1000,
                            height: 720,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "actions",
                                "photos"
                            ],
                            name: "mixi"
                        },
                        {
                            ID: 9830,
                            displayName: "Yahoo! JAPAN",
                            width: 980,
                            height: 700,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "yahoojapan"
                        },
                        {
                            ID: 8205,
                            displayName: "Spiceworks",
                            width: 640,
                            height: 380,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "spiceworks"
                        },
                        {
                            ID: 9041,
                            displayName: "VKontakte",
                            width: 610,
                            height: 510,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "photos",
                                "status",
                                "actions"
                            ],
                            name: "vkontakte"
                        },
                        {
                            ID: 4096,
                            displayName: "WordPress",
                            width: 700,
                            height: 540,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "wordpress"
                        },
                        {
                            ID: 256,
                            displayName: "Blogger",
                            width: 760,
                            height: 400,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "blogger"
                        },
                        {
                            ID: 4218,
                            displayName: "Netlog",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "netlog"
                        },
                        {
                            ID: 5002,
                            displayName: "Livedoor",
                            width: 970,
                            height: 700,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "livedoor"
                        },
                        {
                            ID: 5004,
                            displayName: "Fox News",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "foxnews"
                        },
                        {
                            ID: 1051,
                            displayName: "PayPal",
                            width: 400,
                            height: 550,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "paypal"
                        },
                        {
                            ID: 9219,
                            displayName: "Xing",
                            width: 785,
                            height: 510,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login",
                                "friends"
                            ],
                            name: "xing"
                        },
                        {
                            ID: 8206,
                            displayName: "WeChat",
                            width: 730,
                            height: 590,
                            explicitOnly: false,
                            aliases: "wechat|weixin",
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "wechat"
                        },
                        {
                            ID: 4121,
                            displayName: "OpenID",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "customopenid"
                        },
                        {
                            ID: 4122,
                            displayName: "Custom SAML",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "customsaml"
                        },
                        {
                            ID: 10001,
                            displayName: "OpenID Connect",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "openidconnect"
                        },
                        {
                            ID: 6002,
                            displayName: "Site",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                ""
                            ],
                            name: "site"
                        },
                        {
                            ID: 1052,
                            displayName: "PayPal",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "paypaloauth"
                        },
                        {
                            ID: 8207,
                            displayName: "Line",
                            width: 730,
                            height: 590,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "line"
                        },
                        {
                            ID: 20001,
                            displayName: "Kakao",
                            width: 500,
                            height: 600,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "kakao"
                        },
                        {
                            ID: 20002,
                            displayName: "Naver",
                            width: 780,
                            height: 555,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "naver"
                        },
                        {
                            ID: 20003,
                            displayName: "DocCheck",
                            width: 874,
                            height: 844,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "doccheck"
                        },
                        {
                            ID: 20004,
                            displayName: "Apple",
                            width: 874,
                            height: 844,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "apple"
                        }
                    ]
                },
                plugins: {
                    instances: {
                        screenSet: {
                            params: {
                                screenSet: "Default-RegistrationLogin",
                                connectWithoutLoginBehavior: "alwaysLogin",
                                defaultRegScreenSet: "Default-RegistrationLogin",
                                defaultMobileRegScreenSet: "Default-RegistrationLogin",
                                sessionExpiration: 0,
                                rememberSessionExpiration: 0,
                                apiDomain: "eu1.gigya.com",
                                lang: "en",
                                APIKey: "4_aeFS_UyzRnmP5k_MI59ejg",
                                startScreen: "gigya-register-screen",
                                apiKey: "4_aeFS_UyzRnmP5k_MI59ejg",
                                source: "showScreenSet",
                                pluginsStack: [
                                    {
                                        source: "showScreenSet"
                                    }
                                ],
                                lastSource: "showScreenSet",
                                _reportedLoad: true,
                                instanceID: "screenSet",
                                onDisposed: [
                                    function () {
                                        return UiApiHelpers_1.removePluginInstance(params, _this.injectionInfo);
                                    }
                                ],
                                deviceType: "auto"
                            },
                            explicitParams: {
                                screenSet: "Default-RegistrationLogin",
                                startScreen: "gigya-register-screen",
                                apiKey: "4_aeFS_UyzRnmP5k_MI59ejg"
                            },
                            _logger: {
                                _groupsStack: [],
                                _currColorIdx: 0,
                                configKey: "gig_loggerConfig",
                                _console: {
                                    memory: {}
                                },
                                _config: {
                                    logLevel: 0,
                                    clientMuteLevel: 0,
                                    logTheme: 1
                                }
                            },
                            _errorDispatcher: {
                                global: {
                                    _activeNamespaces: {
                                        socialize: 1
                                    }
                                }
                            },
                            _isDisposed: false,
                            _eventWrappers: {
                                onDisposed: {}
                            },
                            _globalEventHandlers: {},
                            _id: 1,
                            injectionInfo: {
                                name: "screenSet",
                                namespace: "accounts",
                                methodName: "showScreenSet",
                                jsName: "gigya.services.accounts.plugins.screenSet",
                                publicMethods: {
                                    hideScreenSet: {
                                        instanceMethod: "cancel",
                                        argNames: []
                                    },
                                    switchScreen: {
                                        instanceMethod: "switchScreen",
                                        argNames: [
                                            "screen"
                                        ]
                                    }
                                }
                            },
                            _pixelRatio: 2,
                            _imgBase: "https://cdns1.gigya.com/gs/i/",
                            _imgExt: "png",
                            MOBILE_MODAL_MIN_WIDTH: 400,
                            lang: "en",
                            _style: 3,
                            _poller: {
                                _actions: [
                                    {
                                        _propery: "container"
                                    }
                                ]
                            },
                            POLL_INTERVAL: 150,
                            config: {
                                name: "screenSet",
                                namespace: "accounts",
                                methodName: "showScreenSet",
                                jsName: "gigya.services.accounts.plugins.screenSet",
                                requiredParams: [
                                    "screenSet"
                                ],
                                defaultParams: {
                                    screenSet: ""
                                },
                                defaultModalParams: {
                                    screenSet: ""
                                },
                                defaultDeviceType: 3,
                                hasMobileUI: true,
                                allowModal: true,
                                disableModalContainerInit: true,
                                defaultDialogStyle: 2,
                                supportsResponsive: true,
                                enableSizePolling: true,
                                enableViewportPolling: true
                            },
                            localizedJsName: "gigya.services.accounts.plugins.screenSet.js",
                            _addedCSS: false,
                            _screens: {},
                            _random: 0.34162837521741984,
                            _placeholderIntervalID: -1,
                            isModal: true,
                            _templates: {
                                legacyModal: "<div id=\"gigya-screen-dialog-page-overlay\" style=\"display:${overlayDisplay}\"></div>\n<div class=\"gigya-screen-dialog-inner\">\n    <div class=\"gigya-screen-dialog-top\">\n        <div class=\"gigya-screen-dialog-caption\" id=\"gigya-screen-dialog-caption-${modalID}\">$title</div>\n        <div class=\"gigya-screen-dialog-close\"></div>\n    </div>\n</div>",
                                modal: "<div id=\"gigya-screen-dialog-page-overlay\" style=\"display:${overlayDisplay}\"></div>\r\n<div class=\"gigya-screen-dialog-main\">\r\n    <div class=\"gigya-screen-dialog-top\">\r\n        <div class=\"gigya-screen-dialog-caption\" tabindex=\"0\" id=\"gigya-screen-dialog-caption-${modalID}\">$title</div>\r\n        <div class=\"gigya-screen-dialog-close\">\r\n            <a aria-label=\"close window\" role=\"button\" tabindex=\"0\" >${closeImage}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"gigya-screen-dialog-inner\">\r\n    </div>\r\n</div>\r\n",
                                modalCloseButton: "<img src=\"${imgUrl}\" alt=\"close\" height=\"${imgHeight}\" width=\"${imgWidth}\" />\n",
                                passwordStrength: "<div class=\"${scoreClass}\" aria-atomic=\"true\" aria-live=\"polite\">${content}</div>\n",
                                passwordStrength_strengthMeter: "<div class=\"gigya-passwordStrength-text\">\n    <span class=\"gigya-passwordStrength-text\">$TEXT('password_strength_colon')</span>\n    <span class=\"gigya-passwordStrength-text gigya-passwordStrength-scoreText\">${scoreText}</span>\n</div>\n<div class=\"gigya-passwordStrength-bar\">\n    <div class=\"${barIndicatorClass}\"></div>\n</div>\n",
                                passwordStrength_minimumRequirements: "<div class=\"gigya-passwordStrength-text-requirements\">$requirements</div>\n",
                                screenSet_dialog: "<div id=\"${innerContainerID}\" class=\"gigya-screen-content\"></div>",
                                screenSet: "<h1 class=\"gigya-screen-caption\" id=\"${innerContainerID}_caption\"></h1>\r\n<div id=\"${childContainerID}\" class=\"gigya-hidden\"></div>\r\n<div id=\"${innerContainerID}\" class=\"gigya-screen-content\"></div>\r\n",
                                photoUpload_ui: "<div class=\"gigya-photo-upload-image\" id=\"${photoElementID}\"></div>\n<div>\n    <div class=\"gigya-photo-upload-button\">$choose_file</div>\n    <div class=\"gigya-photo-upload-path\" id=\"${pathContainerID}\">$no_file_chosen</div>\n    <div class=\"gigya-photo-upload-text\">$tip</div>\n</div>\n",
                                photoUpload_form: "<form enctype=\"multipart/form-data\" method=\"post\" class=\"gigya-photo-upload-form\" target=\"${formTarget}\" action=\"\">\n    <input type=\"file\" accept=\"image/*\" name=\"_profilePhoto\" />\n</form>\n",
                                inlinedPasswordStrength: "<div class=\"gigya-password-strength\" data-on-focus-bubble=\"true\" data-bubble-orientation=\"${orientation}\"></div>\n",
                                consent: "<div class=\"consent\" data-id=\"v1\">\n\n  <div class=\"gigya-consent-title\">${label}</div>\n  <div class=\"gigya-consent-subtitle\" >${docId}</div>\n  <span class=\"gigya-consent-text\">${approvedOnLabel}</span> <span class=\"gigya-consent-text\">${approved}</span>\n\n</div>\n\n<div class=\"consent\" data-id=\"v2\">\n\n  <div class=\"gigya-consent-title\">${label}</div>\n\n  <div class=\"gigya-version-content\">\n    <span class=\"gigya-consent-text version-label\">${versionLabel}</span> <span class=\"gigya-consent-text version\">${docId}</span>\n  </div>\n\n  <div class=\"gigya-locale-content\">\n    <span class=\"gigya-consent-text locale-label\">${localeLabel}</span> <span class=\"gigya-consent-text locale\">${locale}</span>\n  </div>\n\n  <div class=\"gigya-approved-on-content\">\n    <span class=\"gigya-consent-text gigya-disabled-color approved-on-label\">${approvedOnLabel}</span> <span class=\"gigya-consent-text gigya-disabled-color approved-on\">${approved}</span>\n  </div>\n\n</div>",
                                communicationCheckbox: "<div class=\"subs-widget-container\" aria-invalid=\"false\">\n    <input class=\"gigya-input-checkbox subscription-checkbox\"\n           id=\"subs-checkbox-${topic}-${channel}\" name=\"${gigyaName}\" type=\"checkbox\"\n           ${checked}\n           data-communication-status=\"${status}\"\n           data-communication-topic=\"${topic}\"\n           data-communication-channel=\"${channel}\"\n    >\n    <label class=\"subscription-name-label\" for=\"subs-checkbox-${topic}-${channel}\"\n           style=\"display: inline-block; vertical-align: middle; padding-left: 5px;\">\n        ${label}\n    </label>\n</div>\n"
                            },
                            _css: {
                                legacy_modal: "/* legacy modal */\n\ndiv.gigya-screen-dialog {\n    position: absolute;\n    display: inline-block;\n    top: 25px;\n    left: 25px;\n    border: 8px solid #CCCCCC;\n    border-radius: 8px;\n    background-color: #FFFFFF;\n    outline: none;\n}\n\ndiv.gigya-screen-dialog-inner {\n    border: 1px solid #AAAAAA;\n}\n\ndiv.gigya-screen-dialog-close {\n    line-height: 33px;\n    height: 33px;\n    width: 20px;\n    float: right;\n    cursor: pointer;\n    background-image: url('${imgBase}/accounts/close_dialog.png');\n    background-position: right;\n    background-repeat: no-repeat;\n}\n\ndiv.gigya-screen-dialog-caption {\n    float: left;\n    font-weight: bold;\n    font-size: 16px;\n    font-family: arial;\n}\n\ndiv.gigya-screen-dialog-mobile {\n    position: absolute;\n    display: inline-block;\n    top: 0;\n    left: 0;\n    background-color: #FFFFFF;\n    width: 100%;\n}\n\ndiv.gigya-screen-dialog-top {\n    overflow: hidden;\n    zoom: 1;\n    background-color: #F3F3F3;\n    line-height: 33px;\n    padding: 0 10px 0 11px;\n}\n\n#gigya-screen-dialog-page-overlay {\n        width : 100vw;\n        height : 100vh;\n        background : black;\n        position : fixed;\n        top : 0;\n        left : 0;\n        z-index : -1;\n        filter : alpha(opacity=20);\n        opacity : 0.2;\n    }",
                                modern_modal: "/*modern modal*/\n.gigya-style-modern #gigya-screen-dialog-page-overlay {\n    width: 100vw;\n    height: 100vh;\n    background: black;\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: -1;\n    filter: alpha(opacity=20);\n    opacity: 0.2;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-main {\n    border: 0.5px;\n    border-radius: 3px;\n    background-color: transparent;\n    -webkit-box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.5);\n    -moz-box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.5);\n    box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.5);\n    max-height: 99vh;\n    max-width: 99vw;\n    overflow: auto;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-top {\n    overflow: hidden;\n    zoom: 1;\n    background-color: #1371B9;\n    line-height: 38px;\n    padding: 0 10px 0 11px;\n    border-radius: 3px 3px 0px 0px;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-close {\n    background-image: initial;\n    background-position: initial;\n    background-repeat: initial;\n    float: right;\n    cursor: pointer;\n}\n.gigya-style-modern div.gigya-screen-dialog-close > a{\n    padding: 4px;\n}\n.gigya-style-modern div.gigya-screen-dialog-close > a > img {\n    margin-top: 11px;\n    vertical-align: initial;\n    border: 0px;\n    width: auto;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-caption {\n    float: left;\n    font-size: 19px;\n    font-family: arial;\n    color: #FFFFFF;\n    padding-right: 20px;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-inner {\n    padding: 0px;\n    overflow: hidden;\n    min-width: 32px;\n    min-height: 64px;\n    background-color: white;\n}\n\n.gigya-style-modern div.gigya-screen-dimmer {\n    position: absolute;\n    opacity: 0.2;\n    filter: alpha(opacity=20);\n    background-color: #FFFFFF;\n}\n\n.gigya-style-modern div.gigya-screen-loader {\n    position: absolute;\n    background: transparent url(\"${imgBase}/accounts/bigLoader.gif\") no-repeat center center;\n    min-height: 32px;\n    min-width: 32px;\n}\n\n.gigya-style-modern.gigya-screen-dialog {\n    position: fixed;\n    border: none;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile {\n    position: absolute;\n    display: inline-block;\n    top: 0;\n    left: 0;\n    background-color: white;\n    width: 100%;\n    height: 100%;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-main {\n    max-height: 100vh;\n    max-width: 100vw;\n    box-shadow: initial;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-top {\n    position: fixed;\n    top: 0px;\n    border-radius: 0px;\n    line-height: 27px;\n    box-sizing: border-box;\n    width: 100%;\n    z-index: 1;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-caption {\n    font-size: 14px;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-close > a > img {\n    margin-top: 5px;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-inner {\n    border: 0px;\n    margin-top: 27px;\n    box-sizing: border-box;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-inner > div {\n    margin: 0 auto;\n}\n\n.gigya-style-modern.gigya-ios.gigya-screen-dialog, .gigya-style-modern.gigya-ios.gigya-screen-dialog.gigya-ios-v7.gigya-screen-dialog-mobile div.gigya-screen-dialog-top {\n    position: absolute;\n}\n\n.gigya-style-modern.gigya-android.gigya-screen-dialog-mobile {\n    overflow: auto;\n}\n\n.gigya-style-modern.gigya-ie8 #gigya-screen-dialog-page-overlay {\n    width: 100%;\n    height: 100%;\n}\n\nhtml.gigya-mobile-modal-mode {\n    overflow: hidden;\n}\nhtml.gigya-mobile-modal-mode body {\n    height: 0px;\n    overflow: hidden;\n}\n",
                                defaultCSS: ".gigya-consent-title {\n  font-weight: bold;\n  display: block;\n  font-weight: 700;\n  font-size: 15px;\n  font-family: arial;\n}\n.gigya-consent-subtitle {\n  font-weight: bold;\n  display: block;\n  font-weight: 700;\n  font-size: 13px;\n  font-family: arial;\n}\n\n.consent .gigya-version-content {\n  margin-top: 0.5rem;\n}\n\n.gigya-screen .gigya-disabled-color {\n  color: #b2b2b2;\n}\n.gigya-consent-text {\n  display: inline-block;\n}\n.gigya-composite-control-captcha-widget iframe {\n  width: 100%;\n}\n#FunCaptcha {\n  text-align: center;\n}\n.gigya-reset *,\ndiv.gigya-reset,\n.gigya-reset span,\n.gigya-reset a:hover,\n.gigya-reset a:visited,\n.gigya-reset a:link,\n.gigya-reset a:active {\n  border: none;\n  padding: 0px;\n  margin: 0px;\n  color: inherit;\n  text-decoration: none;\n  width: auto;\n  float: none;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  font-family: arial;\n  font-size: 12px;\n  color: #333333;\n  text-align: left;\n}\n\n.gigya-screen .gigya-error-msg {\n  color: #ce4635;\n  font-size: 11px;\n  display: block;\n  visibility: hidden;\n}\n\n.gigya-screen .gigya-error-msg.gigya-error-msg-active {\n  color: #ce4635;\n  font-size: 11px;\n  display: block;\n  visibility: visible;\n}\n.gigya-screen .gigya-error-msg.gigya-warn {\n  color: #b45a0b !important;\n}\n\n.gigya-screen .gigya-terms-error,\n.gigya-screen input.gigya-error,\n.gigya-screen input[type=\"text\"].gigya-error,\n.gigya-screen input[type=\"password\"].gigya-error,\n.gigya-screen input[type=\"email\"].gigya-error,\n.gigya-screen select.gigya-error {\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid #ce4635;\n  -webkit-box-shadow: none !important;\n  -moz-box-shadow: none !important;\n  box-shadow: none !important;\n}\n\n.gigya-screen input.gigya-warn,\n.gigya-screen input[type=\"text\"].gigya-warn,\n.gigya-screen select.gigya-warn {\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid #b45a0b !important;\n  -webkit-box-shadow: none !important;\n  -moz-box-shadow: none !important;\n  box-shadow: none !important;\n}\n\n.gigya-screen input.gigya-error[type=\"checkbox\"],\n.gigya-screen input.gigya-error[type=\"radio\"] {\n  padding: 0;\n}\n\n.gigya-screen input[disabled],\n.gigya-screen input:disabled {\n  background-color: #e1e1e1;\n  color: #4a4a4a;\n  border-color: #cccccc;\n}\n\ndiv.gigya-attach-file-upload-form {\n  position: absolute;\n  overflow: hidden;\n  font-size: 50px;\n  cursor: pointer;\n  filter: alpha(opacity=0);\n  opacity: 0;\n}\n\ndiv.gigya-photo-upload-form > input {\n  font-size: 500px;\n  direction: rtl;\n  height: 100%;\n  cursor: pointer;\n}\n\n.gigya-password-strength-bubble .gig-balloon-nub {\n  background-image: url(\"${imgBase}/screenSet/triangle_left.png\");\n  height: 16px;\n  width: 10px;\n  left: +2px;\n}\n.gigya-password-strength-bubble .gig-balloon-nub-up {\n  background-image: url(\"${imgBase}/screenSet/triangle_up.png\");\n  height: 10px;\n  width: 16px;\n  top: +2px;\n}\n.gigya-password-strength-bubble .gig-balloon-nub-right {\n  background-image: url(\"${imgBase}/screenSet/triangle_right.png\");\n  height: 16px;\n  width: 10px;\n  left: -2px;\n}\n.gigya-password-strength-bubble .gig-balloon-nub-down {\n  background-image: url(\"${imgBase}/screenSet/triangle_down.png\");\n  height: 10px;\n  width: 16px;\n  top: -2px;\n}\n.gigya-password-strength-bubble .gig-balloon-frame {\n  background-color: #f3f5f6;\n  -webkit-border-radius: 2px;\n  -moz-border-radius: 2px;\n  border-radius: 2px;\n  border: 1px solid #bfcfda;\n  -webkit-box-shadow: inset 0 0 1px 1px RGBA(0, 0, 0, 0.05);\n  -moz-box-shadow: inset 0 0 1px 1px RGBA(0, 0, 0, 0.05);\n  box-shadow: inset 0 0 1px 1px RGBA(0, 0, 0, 0.05);\n}\n\n.gigya-password-strength-bubble .gig-balloon {\n  position: relative;\n}\n.gigya-password-strength-bubble.gig-balloon-left .gig-balloon {\n  left: +10px;\n  top: +3px;\n}\n.gigya-password-strength-bubble.gig-balloon-right .gig-balloon {\n  left: -10px;\n  top: +3px;\n}\n.gigya-password-strength-bubble.gig-balloon-up .gig-balloon {\n  left: -5px;\n  top: +17px;\n}\n.gigya-password-strength-bubble.gig-balloon-down .gig-balloon {\n  left: -5px;\n  top: -12px;\n}\n\n.gigya-passwordStrength-text {\n  text-align: center;\n}\n\nspan.gigya-passwordStrength-text {\n  font-weight: bold;\n  display: inline-block;\n}\n\ndiv.gigya-passwordStrength-text-requirements {\n  text-align: center;\n  width: 100%;\n  margin-top: 8px;\n}\n\nspan.gigya-passwordStrength-scoreText {\n  margin-left: 3px;\n}\n\n.gigya-passwordStrength-too_weak .gigya-passwordStrength-scoreText {\n  color: #e76468;\n}\n.gigya-passwordStrength-weak .gigya-passwordStrength-scoreText {\n  color: #e76468;\n}\n.gigya-passwordStrength-fair .gigya-passwordStrength-scoreText {\n  color: #d99b4b;\n}\n.gigya-passwordStrength-strong .gigya-passwordStrength-scoreText {\n  color: #4ababc;\n}\n.gigya-passwordStrength-very_strong .gigya-passwordStrength-scoreText {\n  color: #4ababc;\n}\n\ndiv.gigya-passwordStrength-bar {\n  width: 100%;\n  height: 1px;\n  background-color: #b6b6b6;\n  margin-top: 8px;\n}\n\ndiv.gigya-passwordStrength-bar-too_weak {\n  width: 20%;\n  height: 100%;\n  background-color: #e76468;\n}\n\ndiv.gigya-passwordStrength-bar-weak {\n  width: 40%;\n  height: 100%;\n  background-color: #e76468;\n}\n\ndiv.gigya-passwordStrength-bar-fair {\n  width: 60%;\n  height: 100%;\n  background-color: #d99b4b;\n}\n\ndiv.gigya-passwordStrength-bar-strong {\n  width: 80%;\n  height: 100%;\n  background-color: #4ababc;\n}\n\ndiv.gigya-passwordStrength-bar-very_strong {\n  width: 100%;\n  height: 100%;\n  background-color: #4ababc;\n}\n\n.gigya-calculate-size {\n  position: absolute !important;\n  -ms-zoom: 1 !important;\n  zoom: 1 !important;\n  left: 10px !important;\n  top: -1000px !important;\n}\n\n.gigya-calculate-size div.gigya-captcha {\n  min-width: 318px;\n  min-height: 80px;\n  _width: 318px;\n  _height: 80px;\n}\n.gigya-calculate-size div.gigya-captcha.v2 {\n  min-height: 80px;\n  _height: 80px;\n}\n\n.gigya-calculate-size div.gigya-social-login {\n  min-width: 110px;\n  min-height: 120px;\n  _width: 110px;\n  _height: 120px;\n}\n\n.gigya-calculate-size div.gigya-tfa {\n  min-width: 325px;\n  min-height: 200px;\n  _width: 325px;\n  _height: 200px;\n}\n\ndiv.gigya-container {\n  display: none;\n}\n\ndiv.gigya-container.gigya-container-enabled {\n  display: block;\n}\n\ndiv.gigya-loginID-availability {\n  line-height: 18px;\n  background-repeat: no-repeat;\n  background-position: left center;\n}\n\ndiv.gigya-loginID-availability-available {\n  padding-left: 17px;\n  background-image: url(\"${imgBase}/accounts/ok.png\");\n  color: #4fa373;\n}\n\ndiv.gigya-loginID-availability-not-available {\n  padding-left: 16px;\n  background-image: url(\"${imgBase}/accounts/error.png\");\n  color: #ce4635;\n}\n\ndiv.gigya-loginID-availability-progress {\n  padding-left: 20px;\n  background-image: url(\"${imgBase}/accounts/smallLoader.gif\");\n  color: #666666;\n}\n\ndiv.gigya-profile-photo {\n  border-radius: 3px;\n}\n\n.gigya-calculate-size div.gigya-profile-photo {\n  min-width: 64px;\n  min-height: 64px;\n}\n\ndiv.gigya-screen-dimmer {\n  position: absolute;\n  opacity: 0.5;\n  filter: \"alpha(opacity=50)\";\n  background-color: #ffffff;\n}\n\ndiv.gigya-screen-loader {\n  position: absolute;\n  background: transparent url(\"${imgBase}/accounts/bigLoader.gif\") no-repeat center center;\n  min-height: 32px;\n  min-width: 32px;\n}\n\ndiv.gigya-screen-dialog-content {\n  overflow: auto;\n  padding: 25px;\n}\n\ndiv.gigya-screen-dialog-mobile div.gigya-composite-control-captcha-widget {\n  padding: 0;\n}\n\ndiv.gigya-screen-dialog-mobile .gigya-screen {\n  width: 100%;\n}\n\ndiv.gigya-secret-question {\n  display: none;\n}\n\ndiv.gigya-photo-upload {\n  height: 63px;\n  width: 300px;\n  zoom: 1;\n}\n\ndiv.gigya-photo-upload-button {\n  display: inline-block;\n  zoom: 1;\n  margin: 0 8px 8px 0;\n  font-weight: normal;\n  border: 1px solid #cecece;\n  cursor: pointer;\n  padding: 0 12px;\n  color: #333333;\n  font-weight: bold;\n  border-radius: 4px;\n  line-height: 28px;\n  background: #f2f2f2;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#FFFFFF\", endColorstr=\"#F2F2F2\");\n  background: -webkit-gradient(linear, left top, left bottom, from(#ffffff), to(#f2f2f2));\n  background: -moz-linear-gradient(top, #ffffff, #f2f2f2);\n}\n\ndiv.gigya-photo-upload-button:hover {\n  background: #ffffff;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#F2F2F2\", endColorstr=\"#FFFFFF\");\n  background: -webkit-gradient(linear, left top, left bottom, from(#f2f2f2), to(#ffffff));\n  background: -moz-linear-gradient(top, #f2f2f2, #ffffff);\n}\n\ndiv.gigya-photo-upload-text {\n  font-size: 11px;\n  color: #666666;\n}\n\ndiv.gigya-photo-upload-image {\n  border-radius: 6px;\n  background-position: center center;\n  background-repeat: no-repeat;\n  width: 64px;\n  height: 64px;\n  background-color: #f2f2f2;\n  float: left;\n  margin-right: 8px;\n}\n\ndiv.gigya-photo-upload-path {\n  white-space: nowrap;\n  width: 107px;\n  vertical-align: middle;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  padding-right: 10px;\n  background-position: right;\n  background-repeat: no-repeat;\n  display: inline-block;\n  *display: inline;\n  zoom: 1;\n  padding-right: 20px;\n}\n\nh1.gigya-screen-caption {\n  border-bottom: 1px solid #dbdbdb;\n  font-size: 16px;\n  font-weight: bold;\n  color: #333;\n  padding-bottom: 5px;\n  padding-top: 5px;\n  margin: 0 auto;\n}\n\n.gigya-error-display {\n  display: none;\n}\n\n.gigya-error-display.gigya-error-display-active {\n  display: block;\n}\n\n.gigya-hidden {\n  display: none !important;\n}\n\n.gigya-screen .gigya-tfa input[type=\"text\"] {\n  margin: 5px 0px;\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid #cccccc;\n}\n\n.gigya-screen .gigya-tfa input[type=\"text\"]:focus,\n.gigya-screen .gigya-tfa input[type=\"text\"]:focus {\n  border-color: #87b9ea;\n}\n\n.gigya-show-checkmark.gigya-valid {\n  background-image: url(\"${imgBase}/screenSet/checkmarkValid.png\");\n  background-position-x: 100%;\n  background-position-y: 50%;\n  background-position: right 5px center;\n  background-repeat: no-repeat;\n  padding-right: 25px;\n}\n\n.gigya-show-checkmark.gigya-valid.gigya-empty {\n  background-image: none;\n  padding-right: 5px;\n}\n\n.gigya-show-validity-border.gigya-valid:not(.gigya-empty) {\n  border: 1px solid #30914C;\n}\n\n.gigya-show-checkmark.gigya-pending {\n  background-image: url(\"${imgBase}/screenSet/checkmarkPending.gif\");\n  background-position-x: 100%;\n  background-position-y: 50%;\n  background-position: right 5px center;\n  background-repeat: no-repeat;\n  padding-right: 25px;\n}\n\n/* If changed, update UI Builder too. */\n.gigya-screen .gigya-composite-control-image {\n  overflow: hidden;\n}\n.gigya-image {\n  background-repeat: no-repeat;\n  box-sizing: content-box;\n  background-position: center;\n  min-height: 10px;\n}\n.gigya-image[data-background-size=\"fit\"] {\n  background-size: contain;\n}\n.gigya-image[data-background-size=\"fit-horizontally\"] {\n  background-size: 100% auto;\n}\n.gigya-image[data-background-size=\"fit-vertically\"] {\n  background-size: auto 100%;\n}\n.gigya-image[data-background-size=\"stretch\"] {\n  background-size: 100% 100%;\n}\n\n/*IE8*/\n.gigya-ie8 .gigya-layout-cell {\n  overflow: hidden;\n  margin-left: -1px !important;\n}\n\n.gigya-ie8 .gigya-attach-file-upload-form .gigya-attach-file-upload-file-input {\n  width: 1000px;\n}\n\n.gigya-ie8 .gigya-calculate-size div.gigya-profile-photo {\n  _width: 64px;\n  _height: 64px;\n}\n\n.gigya-ie8 div.gigya-photo-upload {\n  *display: inline;\n}\n\n.gigya-ie8 div.gigya-photo-upload-button {\n  *display: inline;\n}\n.gigya-ie8 .gigya-screen .gigya-placeholder {\n  color: #a9a9bb;\n  padding-left: 5px;\n  text-indent: 0;\n}\n.gigya-ie8 .gigya-placeholder:focus {\n  padding-left: 5px;\n}\n.gigya-ie8 .gigya-screen .gigya-input-text:focus {\n  padding-left: 5px;\n  text-indent: 0;\n}\n.gigya-ie8 .gigya-screen.gigya-input-text,\n.gigya-ie8 .gigya-screen .gigya-input-text.gigya-error {\n  padding-top: 12px;\n}\n\n/*IE9*/\n.gigya-ie9 .gigya-screen input.gigya-input-text,\n.gigya-ie9 .gigya-screen input.gigya-input-password {\n  padding-top: 1px;\n  text-indent: 0;\n  padding-bottom: 5px;\n}\n\n.gigya-ie9 .gigya-screen .gigya-input-text:focus,\n.gigya-ie9 .gigya-screen .gigya-input-password:focus {\n  box-shadow: 0px 0px 5px 0px #1d87ff;\n  border: 1px solid #87b9ea;\n  /*padding-left: 5px;*/\n  text-indent: 0;\n}\n\n.gigya-ie9 .gigya-screen input.gigya-input-text.gigya-placeholder,\n.gigya-ie9 .gigya-screen input.gigya-input-password.gigya-placeholder {\n  color: #a9a9bb;\n  padding-top: 5px;\n  text-indent: 0;\n  /*padding-left: 4px;*/\n}\n\n/*IE10*/\n.gigya-ie10 .gigya-screen input.gigya-input-text,\n.gigya-ie10 .gigya-screen input.gigya-input-password {\n  padding-top: 1px;\n}\n\n/*remove bottom padding for outline when focused (not needed anyway)*/\n.gigya-screen .forgot-password-cell a,\n.gigya-screen .gigya-composite-control.gigya-forgotPassword,\n.gigya-screen .gigya-composite-control.gigya-change-password-link,\n.gigya-screen .gigya-composite-control.gigya-composite-control-link {\n  padding-bottom: 0px;\n}\n.gigya-screen .gigya-array-manager.disable-delete > .gigya-array-template > .buttons-wrapper button.gigya-array-remove-btn {\n  display: none;\n}\n.gigya-screen .gigya-composite-control-array-widget {\n  margin: 10px 0;\n}\n.gigya-screen .gigya-composite-control-array-widget .gigya-composite-control-array-widget {\n  margin: 10px;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template {\n  padding: 10px 0 10px 0;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template:not(:last-of-type) {\n  border-bottom: 1px #c1c1c1 solid;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template .buttons-wrapper {\n  text-align: right;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template button {\n  background: none;\n  outline: none !important;\n  color: #1371b9;\n  padding: 10px;\n  cursor: pointer;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template button.hidden {\n  display: none;\n}\n.gigya-screen a.gigya-disabled {\n  color: #757575;\n  cursor: default;\n  pointer-events: none;\n  text-decoration: none;\n}\n\n.gigya-screen input[type=\"button\"].gigya-disabled {\n  background: #757575 !important;\n  cursor: default;\n}\n\n.gigya-screen .gigya-otp-update-form .gigya-input-submit[type=\"submit\"].gigya-disabled {\n  background: #757575 !important;\n  cursor: default;\n  pointer-events: none;\n}\n\n.gigya-screen .gigya-disabled:hover {\n  text-decoration: none;\n  cursor: default;\n}\n\n.gigya-screen .gigya-disabled:active {\n  color: #757575;\n  cursor: default;\n}\n\n.d-flex {\n  display: flex;\n}\n\n.justify-content-space {\n  justify-content: space-between;\n}\n\n.gigya-myPhoto-form-wrapper {\n  width: 100% !important;\n}\n.gigya-myPhoto-uploadForm {\n  opacity: 1 !important;\n}\n\n.gigya-myPhoto-profile-box-wrapper input.gigya-myPhoto-upload {\n  width: 100% !important;\n}\n\n.gigya-myPhoto-status-icon {\n  opacity: 0 !important;\n}\n\n.gigya-myPhoto-uploadForm > input {\n  border: 0 !important;\n  background-color: transparent !important;\n}\n.gigya-myPhoto-upload {\n  opacity: 0 !important;\n}\n.gigya-dummyPhoto-upload {\n  width: 100% !important;\n  height: 100% !important;\n}\n.gigya-composite-control-link:focus,\n.gigya-composite-control select:focus,\n.gigya-composite-control input[type=\"checkbox\"]:focus,\n.gigya-myPhoto-delete-button:focus,\n.gigya-myPhoto-uploadForm input:focus,\n.gigya-dummyPhoto-upload:focus {\n  border: 1px solid #2378cd !important;\n  outline: none !important;\n  box-shadow: 0 0 5px 0 #0070f0 !important;\n}\n\n.gigya-screen .gigya-composite-control.gigya-composite-control-phone-number-widget .gigya-phone-verified-status-image {\n  width: 16px;\n  height: 16px;\n  background-image: url(\"${imgBase}/screenSet/checkmarkValid.png\");\n  background-position-x: 100%;\n  background-position-y: 50%;\n  background-repeat: no-repeat;\n}\n"
                            },
                            isMobileUI: false,
                            isRtl: false,
                            addedCss: true,
                            _ID: "Default-RegistrationLogin",
                            templateElement: null
                        }
                    },
                    resources: {
                        html: {
                            base: {
                                legacyModal: "<div id=\"gigya-screen-dialog-page-overlay\" style=\"display:${overlayDisplay}\"></div>\n<div class=\"gigya-screen-dialog-inner\">\n    <div class=\"gigya-screen-dialog-top\">\n        <div class=\"gigya-screen-dialog-caption\" id=\"gigya-screen-dialog-caption-${modalID}\">$title</div>\n        <div class=\"gigya-screen-dialog-close\"></div>\n    </div>\n</div>",
                                modal: "<div id=\"gigya-screen-dialog-page-overlay\" style=\"display:${overlayDisplay}\"></div>\r\n<div class=\"gigya-screen-dialog-main\">\r\n    <div class=\"gigya-screen-dialog-top\">\r\n        <div class=\"gigya-screen-dialog-caption\" tabindex=\"0\" id=\"gigya-screen-dialog-caption-${modalID}\">$title</div>\r\n        <div class=\"gigya-screen-dialog-close\">\r\n            <a aria-label=\"close window\" role=\"button\" tabindex=\"0\" >${closeImage}</a>\r\n        </div>\r\n    </div>\r\n    <div class=\"gigya-screen-dialog-inner\">\r\n    </div>\r\n</div>\r\n",
                                modalCloseButton: "<img src=\"${imgUrl}\" alt=\"close\" height=\"${imgHeight}\" width=\"${imgWidth}\" />\n"
                            },
                            screenSet: {
                                passwordStrength: "<div class=\"${scoreClass}\" aria-atomic=\"true\" aria-live=\"polite\">${content}</div>\n",
                                passwordStrength_strengthMeter: "<div class=\"gigya-passwordStrength-text\">\n    <span class=\"gigya-passwordStrength-text\">$TEXT('password_strength_colon')</span>\n    <span class=\"gigya-passwordStrength-text gigya-passwordStrength-scoreText\">${scoreText}</span>\n</div>\n<div class=\"gigya-passwordStrength-bar\">\n    <div class=\"${barIndicatorClass}\"></div>\n</div>\n",
                                passwordStrength_minimumRequirements: "<div class=\"gigya-passwordStrength-text-requirements\">$requirements</div>\n",
                                screenSet_dialog: "<div id=\"${innerContainerID}\" class=\"gigya-screen-content\"></div>",
                                screenSet: "<h1 class=\"gigya-screen-caption\" id=\"${innerContainerID}_caption\"></h1>\r\n<div id=\"${childContainerID}\" class=\"gigya-hidden\"></div>\r\n<div id=\"${innerContainerID}\" class=\"gigya-screen-content\"></div>\r\n",
                                photoUpload_ui: "<div class=\"gigya-photo-upload-image\" id=\"${photoElementID}\"></div>\n<div>\n    <div class=\"gigya-photo-upload-button\">$choose_file</div>\n    <div class=\"gigya-photo-upload-path\" id=\"${pathContainerID}\">$no_file_chosen</div>\n    <div class=\"gigya-photo-upload-text\">$tip</div>\n</div>\n",
                                photoUpload_form: "<form enctype=\"multipart/form-data\" method=\"post\" class=\"gigya-photo-upload-form\" target=\"${formTarget}\" action=\"\">\n    <input type=\"file\" accept=\"image/*\" name=\"_profilePhoto\" />\n</form>\n",
                                inlinedPasswordStrength: "<div class=\"gigya-password-strength\" data-on-focus-bubble=\"true\" data-bubble-orientation=\"${orientation}\"></div>\n",
                                consent: "<div class=\"consent\" data-id=\"v1\">\n\n  <div class=\"gigya-consent-title\">${label}</div>\n  <div class=\"gigya-consent-subtitle\" >${docId}</div>\n  <span class=\"gigya-consent-text\">${approvedOnLabel}</span> <span class=\"gigya-consent-text\">${approved}</span>\n\n</div>\n\n<div class=\"consent\" data-id=\"v2\">\n\n  <div class=\"gigya-consent-title\">${label}</div>\n\n  <div class=\"gigya-version-content\">\n    <span class=\"gigya-consent-text version-label\">${versionLabel}</span> <span class=\"gigya-consent-text version\">${docId}</span>\n  </div>\n\n  <div class=\"gigya-locale-content\">\n    <span class=\"gigya-consent-text locale-label\">${localeLabel}</span> <span class=\"gigya-consent-text locale\">${locale}</span>\n  </div>\n\n  <div class=\"gigya-approved-on-content\">\n    <span class=\"gigya-consent-text gigya-disabled-color approved-on-label\">${approvedOnLabel}</span> <span class=\"gigya-consent-text gigya-disabled-color approved-on\">${approved}</span>\n  </div>\n\n</div>",
                                communicationCheckbox: "<div class=\"subs-widget-container\" aria-invalid=\"false\">\n    <input class=\"gigya-input-checkbox subscription-checkbox\"\n           id=\"subs-checkbox-${topic}-${channel}\" name=\"${gigyaName}\" type=\"checkbox\"\n           ${checked}\n           data-communication-status=\"${status}\"\n           data-communication-topic=\"${topic}\"\n           data-communication-channel=\"${channel}\"\n    >\n    <label class=\"subscription-name-label\" for=\"subs-checkbox-${topic}-${channel}\"\n           style=\"display: inline-block; vertical-align: middle; padding-left: 5px;\">\n        ${label}\n    </label>\n</div>\n"
                            }
                        },
                        css: {
                            base: {
                                legacy_modal: "/* legacy modal */\n\ndiv.gigya-screen-dialog {\n    position: absolute;\n    display: inline-block;\n    top: 25px;\n    left: 25px;\n    border: 8px solid #CCCCCC;\n    border-radius: 8px;\n    background-color: #FFFFFF;\n    outline: none;\n}\n\ndiv.gigya-screen-dialog-inner {\n    border: 1px solid #AAAAAA;\n}\n\ndiv.gigya-screen-dialog-close {\n    line-height: 33px;\n    height: 33px;\n    width: 20px;\n    float: right;\n    cursor: pointer;\n    background-image: url('${imgBase}/accounts/close_dialog.png');\n    background-position: right;\n    background-repeat: no-repeat;\n}\n\ndiv.gigya-screen-dialog-caption {\n    float: left;\n    font-weight: bold;\n    font-size: 16px;\n    font-family: arial;\n}\n\ndiv.gigya-screen-dialog-mobile {\n    position: absolute;\n    display: inline-block;\n    top: 0;\n    left: 0;\n    background-color: #FFFFFF;\n    width: 100%;\n}\n\ndiv.gigya-screen-dialog-top {\n    overflow: hidden;\n    zoom: 1;\n    background-color: #F3F3F3;\n    line-height: 33px;\n    padding: 0 10px 0 11px;\n}\n\n#gigya-screen-dialog-page-overlay {\n        width : 100vw;\n        height : 100vh;\n        background : black;\n        position : fixed;\n        top : 0;\n        left : 0;\n        z-index : -1;\n        filter : alpha(opacity=20);\n        opacity : 0.2;\n    }",
                                modern_modal: "/*modern modal*/\n.gigya-style-modern #gigya-screen-dialog-page-overlay {\n    width: 100vw;\n    height: 100vh;\n    background: black;\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: -1;\n    filter: alpha(opacity=20);\n    opacity: 0.2;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-main {\n    border: 0.5px;\n    border-radius: 3px;\n    background-color: transparent;\n    -webkit-box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.5);\n    -moz-box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.5);\n    box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.5);\n    max-height: 99vh;\n    max-width: 99vw;\n    overflow: auto;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-top {\n    overflow: hidden;\n    zoom: 1;\n    background-color: #1371B9;\n    line-height: 38px;\n    padding: 0 10px 0 11px;\n    border-radius: 3px 3px 0px 0px;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-close {\n    background-image: initial;\n    background-position: initial;\n    background-repeat: initial;\n    float: right;\n    cursor: pointer;\n}\n.gigya-style-modern div.gigya-screen-dialog-close > a{\n    padding: 4px;\n}\n.gigya-style-modern div.gigya-screen-dialog-close > a > img {\n    margin-top: 11px;\n    vertical-align: initial;\n    border: 0px;\n    width: auto;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-caption {\n    float: left;\n    font-size: 19px;\n    font-family: arial;\n    color: #FFFFFF;\n    padding-right: 20px;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-inner {\n    padding: 0px;\n    overflow: hidden;\n    min-width: 32px;\n    min-height: 64px;\n    background-color: white;\n}\n\n.gigya-style-modern div.gigya-screen-dimmer {\n    position: absolute;\n    opacity: 0.2;\n    filter: alpha(opacity=20);\n    background-color: #FFFFFF;\n}\n\n.gigya-style-modern div.gigya-screen-loader {\n    position: absolute;\n    background: transparent url(\"${imgBase}/accounts/bigLoader.gif\") no-repeat center center;\n    min-height: 32px;\n    min-width: 32px;\n}\n\n.gigya-style-modern.gigya-screen-dialog {\n    position: fixed;\n    border: none;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile {\n    position: absolute;\n    display: inline-block;\n    top: 0;\n    left: 0;\n    background-color: white;\n    width: 100%;\n    height: 100%;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-main {\n    max-height: 100vh;\n    max-width: 100vw;\n    box-shadow: initial;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-top {\n    position: fixed;\n    top: 0px;\n    border-radius: 0px;\n    line-height: 27px;\n    box-sizing: border-box;\n    width: 100%;\n    z-index: 1;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-caption {\n    font-size: 14px;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-close > a > img {\n    margin-top: 5px;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-inner {\n    border: 0px;\n    margin-top: 27px;\n    box-sizing: border-box;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-inner > div {\n    margin: 0 auto;\n}\n\n.gigya-style-modern.gigya-ios.gigya-screen-dialog, .gigya-style-modern.gigya-ios.gigya-screen-dialog.gigya-ios-v7.gigya-screen-dialog-mobile div.gigya-screen-dialog-top {\n    position: absolute;\n}\n\n.gigya-style-modern.gigya-android.gigya-screen-dialog-mobile {\n    overflow: auto;\n}\n\n.gigya-style-modern.gigya-ie8 #gigya-screen-dialog-page-overlay {\n    width: 100%;\n    height: 100%;\n}\n\nhtml.gigya-mobile-modal-mode {\n    overflow: hidden;\n}\nhtml.gigya-mobile-modal-mode body {\n    height: 0px;\n    overflow: hidden;\n}\n",
                                defaultCSS: ".gigya-consent-title {\n  font-weight: bold;\n  display: block;\n  font-weight: 700;\n  font-size: 15px;\n  font-family: arial;\n}\n.gigya-consent-subtitle {\n  font-weight: bold;\n  display: block;\n  font-weight: 700;\n  font-size: 13px;\n  font-family: arial;\n}\n\n.consent .gigya-version-content {\n  margin-top: 0.5rem;\n}\n\n.gigya-screen .gigya-disabled-color {\n  color: #b2b2b2;\n}\n.gigya-consent-text {\n  display: inline-block;\n}\n.gigya-composite-control-captcha-widget iframe {\n  width: 100%;\n}\n#FunCaptcha {\n  text-align: center;\n}\n.gigya-reset *,\ndiv.gigya-reset,\n.gigya-reset span,\n.gigya-reset a:hover,\n.gigya-reset a:visited,\n.gigya-reset a:link,\n.gigya-reset a:active {\n  border: none;\n  padding: 0px;\n  margin: 0px;\n  color: inherit;\n  text-decoration: none;\n  width: auto;\n  float: none;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  font-family: arial;\n  font-size: 12px;\n  color: #333333;\n  text-align: left;\n}\n\n.gigya-screen .gigya-error-msg {\n  color: #ce4635;\n  font-size: 11px;\n  display: block;\n  visibility: hidden;\n}\n\n.gigya-screen .gigya-error-msg.gigya-error-msg-active {\n  color: #ce4635;\n  font-size: 11px;\n  display: block;\n  visibility: visible;\n}\n.gigya-screen .gigya-error-msg.gigya-warn {\n  color: #b45a0b !important;\n}\n\n.gigya-screen .gigya-terms-error,\n.gigya-screen input.gigya-error,\n.gigya-screen input[type=\"text\"].gigya-error,\n.gigya-screen input[type=\"password\"].gigya-error,\n.gigya-screen input[type=\"email\"].gigya-error,\n.gigya-screen select.gigya-error {\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid #ce4635;\n  -webkit-box-shadow: none !important;\n  -moz-box-shadow: none !important;\n  box-shadow: none !important;\n}\n\n.gigya-screen input.gigya-warn,\n.gigya-screen input[type=\"text\"].gigya-warn,\n.gigya-screen select.gigya-warn {\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid #b45a0b !important;\n  -webkit-box-shadow: none !important;\n  -moz-box-shadow: none !important;\n  box-shadow: none !important;\n}\n\n.gigya-screen input.gigya-error[type=\"checkbox\"],\n.gigya-screen input.gigya-error[type=\"radio\"] {\n  padding: 0;\n}\n\n.gigya-screen input[disabled],\n.gigya-screen input:disabled {\n  background-color: #e1e1e1;\n  color: #4a4a4a;\n  border-color: #cccccc;\n}\n\ndiv.gigya-attach-file-upload-form {\n  position: absolute;\n  overflow: hidden;\n  font-size: 50px;\n  cursor: pointer;\n  filter: alpha(opacity=0);\n  opacity: 0;\n}\n\ndiv.gigya-photo-upload-form > input {\n  font-size: 500px;\n  direction: rtl;\n  height: 100%;\n  cursor: pointer;\n}\n\n.gigya-password-strength-bubble .gig-balloon-nub {\n  background-image: url(\"${imgBase}/screenSet/triangle_left.png\");\n  height: 16px;\n  width: 10px;\n  left: +2px;\n}\n.gigya-password-strength-bubble .gig-balloon-nub-up {\n  background-image: url(\"${imgBase}/screenSet/triangle_up.png\");\n  height: 10px;\n  width: 16px;\n  top: +2px;\n}\n.gigya-password-strength-bubble .gig-balloon-nub-right {\n  background-image: url(\"${imgBase}/screenSet/triangle_right.png\");\n  height: 16px;\n  width: 10px;\n  left: -2px;\n}\n.gigya-password-strength-bubble .gig-balloon-nub-down {\n  background-image: url(\"${imgBase}/screenSet/triangle_down.png\");\n  height: 10px;\n  width: 16px;\n  top: -2px;\n}\n.gigya-password-strength-bubble .gig-balloon-frame {\n  background-color: #f3f5f6;\n  -webkit-border-radius: 2px;\n  -moz-border-radius: 2px;\n  border-radius: 2px;\n  border: 1px solid #bfcfda;\n  -webkit-box-shadow: inset 0 0 1px 1px RGBA(0, 0, 0, 0.05);\n  -moz-box-shadow: inset 0 0 1px 1px RGBA(0, 0, 0, 0.05);\n  box-shadow: inset 0 0 1px 1px RGBA(0, 0, 0, 0.05);\n}\n\n.gigya-password-strength-bubble .gig-balloon {\n  position: relative;\n}\n.gigya-password-strength-bubble.gig-balloon-left .gig-balloon {\n  left: +10px;\n  top: +3px;\n}\n.gigya-password-strength-bubble.gig-balloon-right .gig-balloon {\n  left: -10px;\n  top: +3px;\n}\n.gigya-password-strength-bubble.gig-balloon-up .gig-balloon {\n  left: -5px;\n  top: +17px;\n}\n.gigya-password-strength-bubble.gig-balloon-down .gig-balloon {\n  left: -5px;\n  top: -12px;\n}\n\n.gigya-passwordStrength-text {\n  text-align: center;\n}\n\nspan.gigya-passwordStrength-text {\n  font-weight: bold;\n  display: inline-block;\n}\n\ndiv.gigya-passwordStrength-text-requirements {\n  text-align: center;\n  width: 100%;\n  margin-top: 8px;\n}\n\nspan.gigya-passwordStrength-scoreText {\n  margin-left: 3px;\n}\n\n.gigya-passwordStrength-too_weak .gigya-passwordStrength-scoreText {\n  color: #e76468;\n}\n.gigya-passwordStrength-weak .gigya-passwordStrength-scoreText {\n  color: #e76468;\n}\n.gigya-passwordStrength-fair .gigya-passwordStrength-scoreText {\n  color: #d99b4b;\n}\n.gigya-passwordStrength-strong .gigya-passwordStrength-scoreText {\n  color: #4ababc;\n}\n.gigya-passwordStrength-very_strong .gigya-passwordStrength-scoreText {\n  color: #4ababc;\n}\n\ndiv.gigya-passwordStrength-bar {\n  width: 100%;\n  height: 1px;\n  background-color: #b6b6b6;\n  margin-top: 8px;\n}\n\ndiv.gigya-passwordStrength-bar-too_weak {\n  width: 20%;\n  height: 100%;\n  background-color: #e76468;\n}\n\ndiv.gigya-passwordStrength-bar-weak {\n  width: 40%;\n  height: 100%;\n  background-color: #e76468;\n}\n\ndiv.gigya-passwordStrength-bar-fair {\n  width: 60%;\n  height: 100%;\n  background-color: #d99b4b;\n}\n\ndiv.gigya-passwordStrength-bar-strong {\n  width: 80%;\n  height: 100%;\n  background-color: #4ababc;\n}\n\ndiv.gigya-passwordStrength-bar-very_strong {\n  width: 100%;\n  height: 100%;\n  background-color: #4ababc;\n}\n\n.gigya-calculate-size {\n  position: absolute !important;\n  -ms-zoom: 1 !important;\n  zoom: 1 !important;\n  left: 10px !important;\n  top: -1000px !important;\n}\n\n.gigya-calculate-size div.gigya-captcha {\n  min-width: 318px;\n  min-height: 80px;\n  _width: 318px;\n  _height: 80px;\n}\n.gigya-calculate-size div.gigya-captcha.v2 {\n  min-height: 80px;\n  _height: 80px;\n}\n\n.gigya-calculate-size div.gigya-social-login {\n  min-width: 110px;\n  min-height: 120px;\n  _width: 110px;\n  _height: 120px;\n}\n\n.gigya-calculate-size div.gigya-tfa {\n  min-width: 325px;\n  min-height: 200px;\n  _width: 325px;\n  _height: 200px;\n}\n\ndiv.gigya-container {\n  display: none;\n}\n\ndiv.gigya-container.gigya-container-enabled {\n  display: block;\n}\n\ndiv.gigya-loginID-availability {\n  line-height: 18px;\n  background-repeat: no-repeat;\n  background-position: left center;\n}\n\ndiv.gigya-loginID-availability-available {\n  padding-left: 17px;\n  background-image: url(\"${imgBase}/accounts/ok.png\");\n  color: #4fa373;\n}\n\ndiv.gigya-loginID-availability-not-available {\n  padding-left: 16px;\n  background-image: url(\"${imgBase}/accounts/error.png\");\n  color: #ce4635;\n}\n\ndiv.gigya-loginID-availability-progress {\n  padding-left: 20px;\n  background-image: url(\"${imgBase}/accounts/smallLoader.gif\");\n  color: #666666;\n}\n\ndiv.gigya-profile-photo {\n  border-radius: 3px;\n}\n\n.gigya-calculate-size div.gigya-profile-photo {\n  min-width: 64px;\n  min-height: 64px;\n}\n\ndiv.gigya-screen-dimmer {\n  position: absolute;\n  opacity: 0.5;\n  filter: \"alpha(opacity=50)\";\n  background-color: #ffffff;\n}\n\ndiv.gigya-screen-loader {\n  position: absolute;\n  background: transparent url(\"${imgBase}/accounts/bigLoader.gif\") no-repeat center center;\n  min-height: 32px;\n  min-width: 32px;\n}\n\ndiv.gigya-screen-dialog-content {\n  overflow: auto;\n  padding: 25px;\n}\n\ndiv.gigya-screen-dialog-mobile div.gigya-composite-control-captcha-widget {\n  padding: 0;\n}\n\ndiv.gigya-screen-dialog-mobile .gigya-screen {\n  width: 100%;\n}\n\ndiv.gigya-secret-question {\n  display: none;\n}\n\ndiv.gigya-photo-upload {\n  height: 63px;\n  width: 300px;\n  zoom: 1;\n}\n\ndiv.gigya-photo-upload-button {\n  display: inline-block;\n  zoom: 1;\n  margin: 0 8px 8px 0;\n  font-weight: normal;\n  border: 1px solid #cecece;\n  cursor: pointer;\n  padding: 0 12px;\n  color: #333333;\n  font-weight: bold;\n  border-radius: 4px;\n  line-height: 28px;\n  background: #f2f2f2;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#FFFFFF\", endColorstr=\"#F2F2F2\");\n  background: -webkit-gradient(linear, left top, left bottom, from(#ffffff), to(#f2f2f2));\n  background: -moz-linear-gradient(top, #ffffff, #f2f2f2);\n}\n\ndiv.gigya-photo-upload-button:hover {\n  background: #ffffff;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#F2F2F2\", endColorstr=\"#FFFFFF\");\n  background: -webkit-gradient(linear, left top, left bottom, from(#f2f2f2), to(#ffffff));\n  background: -moz-linear-gradient(top, #f2f2f2, #ffffff);\n}\n\ndiv.gigya-photo-upload-text {\n  font-size: 11px;\n  color: #666666;\n}\n\ndiv.gigya-photo-upload-image {\n  border-radius: 6px;\n  background-position: center center;\n  background-repeat: no-repeat;\n  width: 64px;\n  height: 64px;\n  background-color: #f2f2f2;\n  float: left;\n  margin-right: 8px;\n}\n\ndiv.gigya-photo-upload-path {\n  white-space: nowrap;\n  width: 107px;\n  vertical-align: middle;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  padding-right: 10px;\n  background-position: right;\n  background-repeat: no-repeat;\n  display: inline-block;\n  *display: inline;\n  zoom: 1;\n  padding-right: 20px;\n}\n\nh1.gigya-screen-caption {\n  border-bottom: 1px solid #dbdbdb;\n  font-size: 16px;\n  font-weight: bold;\n  color: #333;\n  padding-bottom: 5px;\n  padding-top: 5px;\n  margin: 0 auto;\n}\n\n.gigya-error-display {\n  display: none;\n}\n\n.gigya-error-display.gigya-error-display-active {\n  display: block;\n}\n\n.gigya-hidden {\n  display: none !important;\n}\n\n.gigya-screen .gigya-tfa input[type=\"text\"] {\n  margin: 5px 0px;\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid #cccccc;\n}\n\n.gigya-screen .gigya-tfa input[type=\"text\"]:focus,\n.gigya-screen .gigya-tfa input[type=\"text\"]:focus {\n  border-color: #87b9ea;\n}\n\n.gigya-show-checkmark.gigya-valid {\n  background-image: url(\"${imgBase}/screenSet/checkmarkValid.png\");\n  background-position-x: 100%;\n  background-position-y: 50%;\n  background-position: right 5px center;\n  background-repeat: no-repeat;\n  padding-right: 25px;\n}\n\n.gigya-show-checkmark.gigya-valid.gigya-empty {\n  background-image: none;\n  padding-right: 5px;\n}\n\n.gigya-show-validity-border.gigya-valid:not(.gigya-empty) {\n  border: 1px solid #30914C;\n}\n\n.gigya-show-checkmark.gigya-pending {\n  background-image: url(\"${imgBase}/screenSet/checkmarkPending.gif\");\n  background-position-x: 100%;\n  background-position-y: 50%;\n  background-position: right 5px center;\n  background-repeat: no-repeat;\n  padding-right: 25px;\n}\n\n/* If changed, update UI Builder too. */\n.gigya-screen .gigya-composite-control-image {\n  overflow: hidden;\n}\n.gigya-image {\n  background-repeat: no-repeat;\n  box-sizing: content-box;\n  background-position: center;\n  min-height: 10px;\n}\n.gigya-image[data-background-size=\"fit\"] {\n  background-size: contain;\n}\n.gigya-image[data-background-size=\"fit-horizontally\"] {\n  background-size: 100% auto;\n}\n.gigya-image[data-background-size=\"fit-vertically\"] {\n  background-size: auto 100%;\n}\n.gigya-image[data-background-size=\"stretch\"] {\n  background-size: 100% 100%;\n}\n\n/*IE8*/\n.gigya-ie8 .gigya-layout-cell {\n  overflow: hidden;\n  margin-left: -1px !important;\n}\n\n.gigya-ie8 .gigya-attach-file-upload-form .gigya-attach-file-upload-file-input {\n  width: 1000px;\n}\n\n.gigya-ie8 .gigya-calculate-size div.gigya-profile-photo {\n  _width: 64px;\n  _height: 64px;\n}\n\n.gigya-ie8 div.gigya-photo-upload {\n  *display: inline;\n}\n\n.gigya-ie8 div.gigya-photo-upload-button {\n  *display: inline;\n}\n.gigya-ie8 .gigya-screen .gigya-placeholder {\n  color: #a9a9bb;\n  padding-left: 5px;\n  text-indent: 0;\n}\n.gigya-ie8 .gigya-placeholder:focus {\n  padding-left: 5px;\n}\n.gigya-ie8 .gigya-screen .gigya-input-text:focus {\n  padding-left: 5px;\n  text-indent: 0;\n}\n.gigya-ie8 .gigya-screen.gigya-input-text,\n.gigya-ie8 .gigya-screen .gigya-input-text.gigya-error {\n  padding-top: 12px;\n}\n\n/*IE9*/\n.gigya-ie9 .gigya-screen input.gigya-input-text,\n.gigya-ie9 .gigya-screen input.gigya-input-password {\n  padding-top: 1px;\n  text-indent: 0;\n  padding-bottom: 5px;\n}\n\n.gigya-ie9 .gigya-screen .gigya-input-text:focus,\n.gigya-ie9 .gigya-screen .gigya-input-password:focus {\n  box-shadow: 0px 0px 5px 0px #1d87ff;\n  border: 1px solid #87b9ea;\n  /*padding-left: 5px;*/\n  text-indent: 0;\n}\n\n.gigya-ie9 .gigya-screen input.gigya-input-text.gigya-placeholder,\n.gigya-ie9 .gigya-screen input.gigya-input-password.gigya-placeholder {\n  color: #a9a9bb;\n  padding-top: 5px;\n  text-indent: 0;\n  /*padding-left: 4px;*/\n}\n\n/*IE10*/\n.gigya-ie10 .gigya-screen input.gigya-input-text,\n.gigya-ie10 .gigya-screen input.gigya-input-password {\n  padding-top: 1px;\n}\n\n/*remove bottom padding for outline when focused (not needed anyway)*/\n.gigya-screen .forgot-password-cell a,\n.gigya-screen .gigya-composite-control.gigya-forgotPassword,\n.gigya-screen .gigya-composite-control.gigya-change-password-link,\n.gigya-screen .gigya-composite-control.gigya-composite-control-link {\n  padding-bottom: 0px;\n}\n.gigya-screen .gigya-array-manager.disable-delete > .gigya-array-template > .buttons-wrapper button.gigya-array-remove-btn {\n  display: none;\n}\n.gigya-screen .gigya-composite-control-array-widget {\n  margin: 10px 0;\n}\n.gigya-screen .gigya-composite-control-array-widget .gigya-composite-control-array-widget {\n  margin: 10px;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template {\n  padding: 10px 0 10px 0;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template:not(:last-of-type) {\n  border-bottom: 1px #c1c1c1 solid;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template .buttons-wrapper {\n  text-align: right;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template button {\n  background: none;\n  outline: none !important;\n  color: #1371b9;\n  padding: 10px;\n  cursor: pointer;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template button.hidden {\n  display: none;\n}\n.gigya-screen a.gigya-disabled {\n  color: #757575;\n  cursor: default;\n  pointer-events: none;\n  text-decoration: none;\n}\n\n.gigya-screen input[type=\"button\"].gigya-disabled {\n  background: #757575 !important;\n  cursor: default;\n}\n\n.gigya-screen .gigya-otp-update-form .gigya-input-submit[type=\"submit\"].gigya-disabled {\n  background: #757575 !important;\n  cursor: default;\n  pointer-events: none;\n}\n\n.gigya-screen .gigya-disabled:hover {\n  text-decoration: none;\n  cursor: default;\n}\n\n.gigya-screen .gigya-disabled:active {\n  color: #757575;\n  cursor: default;\n}\n\n.d-flex {\n  display: flex;\n}\n\n.justify-content-space {\n  justify-content: space-between;\n}\n\n.gigya-myPhoto-form-wrapper {\n  width: 100% !important;\n}\n.gigya-myPhoto-uploadForm {\n  opacity: 1 !important;\n}\n\n.gigya-myPhoto-profile-box-wrapper input.gigya-myPhoto-upload {\n  width: 100% !important;\n}\n\n.gigya-myPhoto-status-icon {\n  opacity: 0 !important;\n}\n\n.gigya-myPhoto-uploadForm > input {\n  border: 0 !important;\n  background-color: transparent !important;\n}\n.gigya-myPhoto-upload {\n  opacity: 0 !important;\n}\n.gigya-dummyPhoto-upload {\n  width: 100% !important;\n  height: 100% !important;\n}\n.gigya-composite-control-link:focus,\n.gigya-composite-control select:focus,\n.gigya-composite-control input[type=\"checkbox\"]:focus,\n.gigya-myPhoto-delete-button:focus,\n.gigya-myPhoto-uploadForm input:focus,\n.gigya-dummyPhoto-upload:focus {\n  border: 1px solid #2378cd !important;\n  outline: none !important;\n  box-shadow: 0 0 5px 0 #0070f0 !important;\n}\n\n.gigya-screen .gigya-composite-control.gigya-composite-control-phone-number-widget .gigya-phone-verified-status-image {\n  width: 16px;\n  height: 16px;\n  background-image: url(\"${imgBase}/screenSet/checkmarkValid.png\");\n  background-position-x: 100%;\n  background-position-y: 50%;\n  background-repeat: no-repeat;\n}\n"
                            }
                        }
                    },
                    utUtils: {},
                    utils: {
                        Collections: {},
                        css: {},
                        URL: {},
                        DOM: {}
                    },
                    modal: {
                        dialogClasses: {
                            document_mobile: "gigya-mobile-modal-mode",
                            all_web: "gigya-screen-dialog",
                            all_mobile: "gigya-screen-dialog-mobile",
                            main: "gigya-screen-dialog-main",
                            caption: "gigya-screen-dialog-caption",
                            closeButton: "gigya-screen-dialog-close",
                            content: "gigya-screen-dialog-inner"
                        },
                        legacyDialogClasses: {
                            document_mobile: "gigya-mobile-modal-mode",
                            all_web: "gigya-screen-dialog",
                            all_mobile: "gigya-screen-dialog-mobile",
                            main: "gigya-screen-dialog-inner",
                            caption: "gigya-screen-dialog-caption",
                            closeButton: "gigya-screen-dialog-close",
                            content: "gigya-screen-dialog-inner"
                        }
                    },
                    pollerActions: {},
                    cssFlags: {
                        "gigya.services.accounts.plugins.screenSet": {}
                    },
                    CloseReasons: {
                        0: "pendingError",
                        1: "missing",
                        2: "finished",
                        3: "canceled",
                        4: "backButton",
                        5: "canceledByParent",
                        6: "skip",
                        7: "error",
                        8: "cancel",
                        pendingError: 0,
                        missing: 1,
                        finished: 2,
                        canceled: 3,
                        backButton: 4,
                        canceledByParent: 5,
                        skip: 6,
                        error: 7,
                        cancel: 8
                    },
                    PluginStyle: {
                        0: "_undefined",
                        1: "none",
                        2: "legacy",
                        3: "modern",
                        _undefined: 0,
                        none: 1,
                        legacy: 2,
                        modern: 3
                    },
                    ScreenSet: {
                        consent: {
                            consentFieldName: "isConsentGranted",
                            namespace: "preferences"
                        },
                        SwitchScreen_CONSTS: {
                            selector: "[data-switch-screen]",
                            switchScreen: "data-switch-screen",
                            successScreen: "data-on-success-screen",
                            screenSetSkippedScreen: "data-on-screenset-skipped-screen"
                        },
                        Form_CONSTS: {
                            originalSuccessScreen: "data-original-success-screen",
                            successScreen: "data-on-success-screen",
                            autoSkipScreen: "data-on-auto-skip-screen",
                            autoSkipFlag: "data-auto-skip",
                            screenSetSkippedScreen: "data-on-screenset-skipped-screen",
                            formErrorClass: "gigya-form-error",
                            defaultCheckedAttribute: "data-checked"
                        },
                        CUSTOM_VALIDATION_TIMEOUT_WARNING: 10000,
                        ServerStates: {
                            0: "NotStarted",
                            1: "InProgress",
                            2: "Done",
                            3: "Error",
                            NotStarted: 0,
                            InProgress: 1,
                            Done: 2,
                            Error: 3
                        },
                        BaseUploadWidget_CONSTS: {
                            setDimentionsDelay: 500,
                            uploadCheckInterval: 500,
                            uploading: "data-upload-status",
                            uploadForm: "screenSetUploadForm"
                        },
                        ErrorScopes: {
                            0: "bound-object-error",
                            1: "first-error",
                            2: "any-error",
                            3: "all-errors",
                            boundObjectError: 0,
                            firstError: 1,
                            anyError: 2,
                            allErrors: 3,
                            "bound-object-error": 0,
                            "first-error": 1,
                            "any-error": 2,
                            "all-errors": 3
                        },
                        ErrorDisplayElement_CONSTS: {
                            gigyaClasses: [
                                "gigya-error-display",
                                "gigya-error-msg"
                            ],
                            boundedTo: "data-bound-to",
                            errorCodes: "data-error-codes",
                            scope: "data-scope",
                            flags: "data-error-flags",
                            errorClassPrefix: "gigya-error-code-",
                            errorType: "gigya-error-type-"
                        },
                        ErrorType: {
                            0: "client",
                            1: "custom",
                            2: "server",
                            client: 0,
                            custom: 1,
                            server: 2
                        },
                        PendingErrorAttributes: {
                            200009: {
                                name: "data-on-accounts-linked-screen",
                                requiresFinalize: true
                            },
                            200010: {
                                name: "data-on-existing-login-identifier-screen",
                                requiresFinalize: true
                            },
                            206001: {
                                name: "data-on-pending-registration-screen",
                                requiresFinalize: true
                            },
                            206002: {
                                name: "data-on-pending-verification-screen",
                                resetFinalizeNeededState: true
                            },
                            206003: {
                                name: "data-on-missing-loginid-screen"
                            },
                            206006: {
                                name: "data-on-pending-email-verification-code",
                                requiresFinalize: true
                            },
                            403100: {
                                name: "data-on-pending-password-change-screen",
                                requiresFinalize: true
                            },
                            403101: {
                                name: "data-on-pending-tfa-verification-screen",
                                requiresFinalize: true
                            },
                            403102: {
                                name: "data-on-pending-tfa-registration-screen",
                                requiresFinalize: true
                            },
                            403110: {
                                name: "data-on-pending-recent-login-screen"
                            },
                            409003: {
                                name: "data-on-existing-login-identifier-screen",
                                requiresFinalize: true
                            }
                        },
                        ConflictHandling: {
                            0: "fail",
                            1: "saveProfileAndFail",
                            fail: 0,
                            saveProfileAndFail: 1
                        },
                        LoginModes: {
                            connect: {
                                name: "connect"
                            },
                            standard: {
                                name: "standard"
                            },
                            reAuth: {
                                name: "reAuth"
                            },
                            link: {
                                name: "link"
                            }
                        },
                        Screen_CONSTS: {
                            gigyaClass: "gigya-screen",
                            conditionalAttributePrefix: "gigya-conditional",
                            expressionAttributePrefix: "gigya-expression",
                            cssClass: "data-css-class",
                            dataVariantPercentage: "data-variant-percentage",
                            dataVariantGroup: "data-variant-group",
                            dataVariantOriginalScreen: "data-variant-original-screen",
                            dataVariantTestId: "data-variant-test-id"
                        },
                        ScreenOptions_CONSTS: {
                            accountsLinkedScreen: "data-on-accounts-linked-screen",
                            pendingTfaRegistrationScreen: "data-on-pending-tfa-registration-screen",
                            pendingTfaVerificationScreen: "data-on-pending-tfa-verification-screen",
                            pendingRegistrationScreen: "data-on-pending-registration-screen",
                            existingLoginIdentifierScreen: "data-on-existing-login-identifier-screen",
                            pendingVerificationScreen: "data-on-pending-verification-screen",
                            pendingCodeVerificationScreen: "data-on-pending-email-verification-code",
                            missingLoginIdScreen: "data-on-missing-loginid-screen",
                            pendingPasswordChangeScreen: "data-on-pending-password-change-screen",
                            pendingReAuthenticationScreen: "data-on-pending-recent-login-screen",
                            width: "data-width",
                            height: "data-height",
                            caption: "data-caption"
                        },
                        EndFlowScreens: {
                            _skip: 6,
                            _finish: 2,
                            _cancel: 8
                        },
                        ScreenSet_CONSTS: {
                            gigyaClass: "gigya-screen-set",
                            mobileDialogClass: "gigya-screen-dialog-mobile",
                            webDialogClass: "gigya-screen-dialog",
                            contentClass: "gigya-screen-dialog-content",
                            topElementClass: "gigya-screen-dialog-top",
                            calculateSizeClass: "gigya-calculate-size",
                            gigyaHidden: "gigya-hidden",
                            startScreen: "data-start-screen",
                            isResponsive: "data-responsive",
                            dialogStyle: "data-dialog-style",
                            dataActiveGroups: "data-active-groups"
                        },
                        ElementRoles: {
                            0: "_undefined",
                            1: "template",
                            2: "instance",
                            _undefined: 0,
                            template: 1,
                            instance: 2
                        },
                        TemplateElement_CONSTS: {
                            elementId: "data-screenset-element-id",
                            elementFor: "data-screenset-element-for",
                            publishElementId: "data-screenset-element-id-publish",
                            templateForArray: "screenSetTemplateFor",
                            instanceOfArray: "screenSetInstanceOf",
                            screenSetRoles: "data-screenset-roles"
                        },
                        UnitMeasurementType: {
                            pixel: "px",
                            percentage: "%",
                            auto: ""
                        },
                        LinkAccountsForm_CONSTS: {
                            gigyaClass: "gigya-link-accounts-form"
                        },
                        LoginForm_CONSTS: {
                            gigyaClass: "gigya-login-form"
                        },
                        PasswordlessLoginForm_CONSTS: {
                            gigyaClass: "gigya-passwordless-login-form"
                        },
                        PasswordlessRegisterForm_CONSTS: {
                            gigyaClass: "gigya-passwordless-register-form"
                        },
                        AuthMethodsForm_CONSTS: {
                            gigyaClass: "gigya-auth-methods-form",
                            authMethodSelector: "[data-auth-method]",
                            authMethod: "data-auth-method"
                        },
                        PasswordAuthMethodForm_CONSTS: {
                            gigyaClass: "gigya-password-auth-method-form",
                            authMethod: "password"
                        },
                        PushAuthMethodForm_CONSTS: {
                            gigyaClass: "gigya-push-auth-method-form",
                            authMethod: "push"
                        },
                        MagicLinkMethodForm_CONSTS: {
                            gigyaClass: "gigya-magic-link-auth-method-form",
                            authMethod: "magicLink"
                        },
                        EmaiLCodeAuthMethodForm_CONSTS: {
                            gigyaClass: "gigya-email-code-auth-method-form",
                            authMethod: "emailOtp"
                        },
                        CONSTS: {
                            selector: ".gigya-composite-control.gigya-login-user-enabled-tfa-widget",
                            toggleSelector: ".gigya-switch-control .gigya-switch-toggle",
                            widgetStateAttr: "data-widget-state-active",
                            rbaRuleAttr: "data-rba-rule",
                            errorDisplaySelector: ".gigya-error-display",
                            errorMessageSelector: ".gigya-error-msg",
                            errorActiveClass: "gigya-error-display-active",
                            errorMessageActiveClass: "gigya-error-msg-active",
                            bindingNameErrorAttrValue: "userEnabled2fa",
                            successMessageKey: "user_enable_2fa_success",
                            errorMessageKey: "user_enable_2fa_error",
                            switcherWrapperSelector: ".gigya-switch-control",
                            labelActiveState: ".gigya-user-enabled-tfa-label-enabled-state",
                            labelDisableState: ".gigya-user-enabled-tfa-label-disabled-state",
                            alertRole: "alert",
                            roleAttribute: "role"
                        },
                        NewsletterSignup_CONSTS: {
                            gigyaClass: "gigya-subscribe-with-email-form"
                        },
                        ProfileForm_CONSTS: {
                            gigyaClass: "gigya-profile-form",
                            specialFields: {
                                username: true,
                                oldPassword: true,
                                password: true,
                                newPassword: true,
                                passwordRetype: true,
                                secretQuestion: true,
                                secretAnswer: true,
                                addLoginEmails: true,
                                removeLoginEmails: true,
                                phoneNumber: true
                            }
                        },
                        ReauthenticationForm_CONSTS: {
                            gigyaClass: "gigya-reauthentication-form"
                        },
                        RegisterForm_CONSTS: {
                            gigyaClass: "gigya-register-form"
                        },
                        ProgressionForm_CONSTS: {
                            gigyaClass: "gigya-lite-account-progression-form"
                        },
                        ResendVerificationCodeForm_CONSTS: {
                            gigyaClass: "gigya-resend-verification-code-form"
                        },
                        ResetPasswordForm_CONSTS: {
                            gigyaClass: "gigya-reset-password-form"
                        },
                        OrgRegisterForm_CONSTS: {
                            gigyaClass: "gigya-org-register-form"
                        },
                        CheckboxInput_CONSTS: {
                            errorClass: "gigya-terms-error",
                            validClass: "gigya-terms-valid",
                            dataValueInArray: "data-value-in-array"
                        },
                        ValidityStates: {
                            0: "_undefined",
                            1: "valid",
                            2: "error",
                            3: "pending",
                            _undefined: 0,
                            valid: 1,
                            error: 2,
                            pending: 3
                        },
                        fieldsNameData: {
                            loginID: {
                                autoFillName: "username",
                                paramName: "loginID"
                            },
                            passwordRetype: {
                                autoFillName: "",
                                paramName: ""
                            }
                        },
                        WriteAccessModes: {
                            0: "clientModify",
                            1: "clientCreate",
                            clientModify: 0,
                            clientCreate: 1
                        },
                        FormInput_CONSTS: {
                            fieldName: "data-gigya-name",
                            displayName: "data-display-name",
                            captcha: "gigya-captcha",
                            allowEmpty: "data-allow-empty",
                            required: "data-required",
                            originalValue: "data-original-value",
                            serverValidation: "data-invalid-error-code",
                            showValidCheckmark: "show-valid-checkmark",
                            showCheckmarkClass: "gigya-show-checkmark",
                            validityBorderClass: "gigya-show-validity-border",
                            showValidityBorderAttr: "show-validity-border",
                            errorClass: "gigya-error",
                            warnClass: "gigya-warn",
                            validClass: "gigya-valid",
                            pendingClass: "gigya-pending",
                            emptyClass: "gigya-empty",
                            placeholderAttribute: "data-gigya-placeholder",
                            arrayRootAttribute: "data-array-root",
                            arrayKeyFieldAttribute: "data-array-key-field",
                            arrayKeyValueAttribute: "data-array-key-value",
                            identifierType: "data-identifier-type"
                        },
                        FormInputPriorities: {
                            0: "_start",
                            1: "Important",
                            2: "Normal",
                            3: "Fallback",
                            4: "_end",
                            _start: 0,
                            Important: 1,
                            Normal: 2,
                            Fallback: 3,
                            _end: 4
                        },
                        FieldType: {
                            hidden: "hidden"
                        },
                        BasePasswordInput_CONSTS: {
                            showPasswordStrength: "show-password-strength"
                        },
                        gigyaPhoneNumberInput: "gigya-phone-number-input",
                        PhoneInput_Attributes: {
                            countryCodesSelection: "data-country-codes-selection",
                            countryCodes: "data-country-codes"
                        },
                        RadioInput_CONSTS: {
                            wrapperSelector: ".gigya-composite-control-multi-choice",
                            displayNameExpressionAttr: "gigya-expression:data-display-name"
                        },
                        ArrayManager_CONST: {
                            selector: ".gigya-composite-control-array-widget",
                            containerSelector: ".gigya-array-manager",
                            formElSelector: "input,select, fieldset, .gigya-array-manager",
                            addButtonSelector: "button.gigya-array-add-btn",
                            removeButtonSelector: "button.gigya-array-remove-btn",
                            itemWrapperClass: "gigya-array-template",
                            inputsWrapperClass: "inputs-wrapper",
                            buttonsWrapperClass: "buttons-wrapper",
                            templateItemAttr: "data-array-template-id",
                            arrayManagerRootAttr: "data-array-manager-root",
                            deleteDisabledClass: "disable-delete",
                            indexMatcher: {}
                        },
                        Binding_CONSTS: {
                            selector: "*[data-binding]",
                            dataBindingAttribute: "data-binding"
                        },
                        CaptchaWidget_CONSTS: {
                            selector: "div.gigya-captcha"
                        },
                        Consent_CONSTS: {
                            selector: "div.gigya-consent",
                            titleAttr: "data-label",
                            approvedOnLabelAttr: "data-approved-on-label",
                            versionAttr: "data-version",
                            versionLabelAttr: "data-version-title-label",
                            localeLabelAttr: "data-locale-label"
                        },
                        ContainerWidget_CONSTS: {
                            selector: "div.gigya-container",
                            activeClass: "gigya-container-enabled",
                            emptyFields: "data-empty-fields",
                            loginIdentities: "data-login-idenities",
                            conditionAttr: "data-condition",
                            onRenderAttr: "data-on-render"
                        },
                        Image_CONSTS: {
                            selector: "div.gigya-image",
                            srcAttribute: "data-src",
                            widthAttribute: "data-width",
                            heightAttribute: "data-height",
                            backgroundSizeAttribute: "data-background-size"
                        },
                        LoginAvailabilityWidget_CONSTS: {
                            selector: "div.gigya-loginID-availability",
                            boundTo: "data-bound-to"
                        },
                        MyPhotoWidget_CONSTS: {
                            selector: "div.gigya-myPhoto"
                        },
                        DisplayModes: {
                            policy: {
                                hasMinimumRequirements: true,
                                hasStrengthMeter: false
                            },
                            meter: {
                                hasMinimumRequirements: false,
                                hasStrengthMeter: true
                            },
                            combined: {
                                hasMinimumRequirements: true,
                                hasStrengthMeter: true
                            }
                        },
                        BubbleOrientations: {
                            0: "right",
                            1: "left",
                            2: "up",
                            3: "down",
                            4: "none",
                            right: 0,
                            left: 1,
                            up: 2,
                            down: 3,
                            none: 4
                        },
                        PasswordStrengthWidget_CONSTS: {
                            selector: "div.gigya-password-strength",
                            bubbleClass: "gigya-password-strength-bubble",
                            mobileClass: "mobile-bubble",
                            desktopClass: "desktop-bubble",
                            displayMode: "data-display-mode",
                            bubble: "data-on-focus-bubble",
                            bubbleOrientation: "data-bubble-orientation"
                        },
                        PhotoUploadWidget_CONSTS: {
                            selector: "div.gigya-photo-upload"
                        },
                        ProfilePhotoWidget_CONSTS: {
                            selector: "div.gigya-profile-photo"
                        },
                        RequiredDisplayWidget_CONSTS: {
                            selector: ".gigya-required-display",
                            boundTo: "data-bound-to",
                            alwaysVisible: "gigya-required-display-always-visible"
                        },
                        SecretQuestionWidget_CONSTS: {
                            selector: "div.gigya-secret-question",
                            allowEmpty: "data-allow-empty"
                        },
                        SocialLoginWidget_CONSTS: {
                            selector: "div.gigya-social-login"
                        },
                        SubscriptionWidget_CONSTS: {
                            selector: "div.gigya-subscription",
                            subscriptionName: "name"
                        },
                        PhoneNumberWidget_CONSTS: {
                            selector: ".gigya-phone-number-widget",
                            verifyButtonClass: "gigya-phone-verify-button",
                            resendButtonCLass: "gigya-phone-resend-button",
                            phonePreviewClass: "gigya-phone-number-preview",
                            useAsIdentifierAttr: "data-use-as-identifier",
                            codeInputClass: "gigya-phone-number-verification-code",
                            phoneInputNumberClass: "gigya-subscriber-phone-number-input",
                            countryCodeInputClass: "gigya-country-code-select",
                            verifiedStatusClass: "gigya-phone-verified-status",
                            resendBlockedLabelClass: "gigya-phone-resend-blocked",
                            linkDisabledClass: "gigya-disabled",
                            errorMessageClass: "gigya-error-msg",
                            placeholderTextAttribute: "data-gigya-placeholder",
                            gigyaHiddenClass: "gigya-hidden",
                            placeholderAttribute: "placeholder",
                            widgetStateAttribute: "data-widget-state",
                            requiredAttribute: "data-widget-required",
                            codeStateAttributes: "data-widget-code-state",
                            displayNameAttribute: "data-display-name",
                            translationKeyAttribute: "data-translation-key",
                            resendBlockDefaultLabelAttr: "data-resend-blocked-default-label",
                            phoneNumberFieldName: "phoneNumber",
                            resendCountTemplate: "%sec",
                            disableVerifyInSeconds: 10,
                            otpCodeLength: 6,
                            deps: [
                                function n1(t1, n1) {
                                    return e.call(this, t1, n1, !1) || this;
                                }
                            ]
                        },
                        Channel_Status: {
                            noticed: "noticed",
                            OptIn: "OptIn",
                            optIn: "optIn",
                            OptOut: "OptOut",
                            optOut: "optOut"
                        },
                        CommunicationWidget_CONSTS: {
                            selector: "div.gigya-communication",
                            channel: "data-communication-channel",
                            topic: "data-communication-topic",
                            status: "data-communication-status",
                            subscriptionName: "name",
                            communicationsPrefix: "communications.",
                            subscriptionType: "data-subscription-type",
                            subscriptionTopic: "data-subscription-topic",
                            communicationChannel: "data-subscription-channel"
                        },
                        TfaWidget_CONSTS: {
                            selector: "div.gigya-tfa"
                        },
                        Translated_CONSTS: {
                            selector: "*[data-translation-key]",
                            translationKeyAttribute: "data-translation-key"
                        },
                        CaptchaHandlers: {},
                        CaptchaMode: {
                            visible: "visible",
                            invisible: "invisible"
                        },
                        RegisterDeviceRequestParam: {
                            UserCode: "user_code"
                        },
                        RegisterDeviceFormParam: {
                            UserCode: "userCode"
                        },
                        DeviceCodeForm_CONSTS: {
                            gigyaClass: "gigya-device-code-form"
                        },
                        PasskeyLogin_CONSTS: {
                            selector: ".gigya-composite-control-passkey-login-widget"
                        },
                        PasskeyRegister_CONSTS: {
                            selector: ".gigya-composite-control-passkey-register-widget",
                            behaviorAttr: "data-passkey-behavior"
                        },
                        PasskeyRegisterMode: {
                            Connect: "connect",
                            Submit: "submit"
                        },
                        PasskeyManager_CONSTS: {
                            selector: ".gigya-composite-control-passkey-manager-widget"
                        },
                        TFAVerification_CONSTS: {
                            selector: ".gigya-composite-control-tfa-verification-widget"
                        },
                        TFAPhoneList_CONSTS: {
                            selector: ".gigya-tfa-verification-method.tfa-phone-method"
                        },
                        TFAPhoneItem_CONSTS: {
                            sendButtonSelector: ".gigya-tfa-verification-action-btn",
                            submitButtonSelector: ".gigya-input-submit",
                            expandedAttribute: "data-device-expanded",
                            errorMessageSelector: ".gigya-error-msg[data-bound-to=\"tfaVerificationWidget\"]",
                            errorActiveMessageClass: "gigya-error-msg-active",
                            rememberDeviceSelector: ".gigya-remember-device-checkbox input",
                            codeInputSelector: ".gigya-code-input",
                            nameAttr: "name",
                            boundToAttr: "data-bound-to",
                            inputErrorSelector: ".gigya-input-error",
                            ariaLabelAttr: "aria-label",
                            deviceLabelSelector: ".gigya-tfa-verification-device-label",
                            titleAttr: "title",
                            symbolsPlaceholder: "%lastSymbols",
                            resendButtonSelector: ".gigya-tfa-resend-code",
                            selector: ".gigya-tfa-verification-method[data-tfa-method=\"phone\"] .gigya-card",
                            sendSMSButtonSelector: ".gigya-tfa-verification-action-btn[data-method=\"sms\"]",
                            sendVoiceButtonSelector: ".gigya-tfa-verification-action-btn[data-method=\"voice\"]",
                            resendButtonSelectorSms: ".gigya-tfa-resend-code[data-method=\"sms\"]",
                            resendButtonSelectorVoice: ".gigya-tfa-resend-code[data-method=\"voice\"]",
                            countDownSelector: ".gigya-api-countdown",
                            gigyaHiddenClass: "gigya-hidden"
                        },
                        TFATotpItem_CONSTS: {
                            sendButtonSelector: ".gigya-tfa-verification-action-btn",
                            submitButtonSelector: ".gigya-input-submit",
                            expandedAttribute: "data-device-expanded",
                            errorMessageSelector: ".gigya-error-msg[data-bound-to=\"tfaVerificationWidget\"]",
                            errorActiveMessageClass: "gigya-error-msg-active",
                            rememberDeviceSelector: ".gigya-remember-device-checkbox input",
                            codeInputSelector: ".gigya-code-input",
                            nameAttr: "name",
                            boundToAttr: "data-bound-to",
                            inputErrorSelector: ".gigya-input-error",
                            ariaLabelAttr: "aria-label",
                            deviceLabelSelector: ".gigya-tfa-verification-device-label",
                            titleAttr: "title",
                            selector: ".gigya-tfa-verification-method[data-tfa-method=\"totp\"] .gigya-card",
                            namePlaceholder: "%name"
                        },
                        TFATotpList_CONSTS: {
                            selector: ".gigya-tfa-verification-method[data-tfa-method=\"totp\"]",
                            deps: [
                                function n1(t1, n1) {
                                    return e.call(this, t1, n1, !1) || this;
                                }
                            ]
                        },
                        TFAVerificationBackupCodesWidget_CONSTS: {
                            selector: ".gigya-tfa-verification-method[data-tfa-method=\"backup-codes\"]",
                            expandButtonSelector: ".gigya-tfa-verification-action-btn",
                            submitButtonSelector: ".gigya-input-submit",
                            codeInputSelector: ".gigya-code-input",
                            cardItemSelector: ".gigya-tfa-verification-device",
                            cardBodySelector: ".gigya-card-body"
                        },
                        PasskeyCard_CONSTS: {
                            selector: "li.gigya-passkey-card",
                            deleteButtonSelector: ".gigya-remove-passkey-icon",
                            newCardClass: "gigya-card-new",
                            deps: [
                                function n1(t1, n1) {
                                    return e.call(this, t1, n1, !1) || this;
                                }
                            ]
                        },
                        TfaPhoneManagement_CONSTS: {
                            selector: " .gigya-tfa-management-method[data-tfa-method=\"phone\"]"
                        },
                        TfaEmailManagement_CONSTS: {
                            selector: ".gigya-tfa-management-method[data-tfa-method=\"email\"]"
                        },
                        TFABackupCodes_CONSTS: {
                            selector: ".gigya-composite-control-tfa-backup-codes-widget",
                            backupCodesListEl: ".gigya-tfa-backup-codes-content",
                            backupCodesListContainerEl: ".gigya-backup-codes-list-container",
                            printButtonEl: ".gigya-tfa-print-button",
                            downloadButtonEl: ".gigya-tfa-download-button",
                            generateBackupCodesButtonEl: ".gigya-generate-code-button",
                            downloadHeader: "Backup Codes",
                            downloadFileTitle: "backup-codes.txt",
                            downloadTextContent: "Download Backup Codes",
                            backupCodeListItemClass: "gigya-backup-code-item"
                        },
                        CustomForm_CONSTS: {
                            gigyaClass: "gigya-custom-form"
                        },
                        TfaForm_CONSTS: {
                            gigyaClass: "gigya-tfa-form"
                        },
                        OrganizationContextConsts: {
                            selector: ".gigya-organization-context-widget",
                            dropdownSelector: ".gigya-organization-context-dropdown",
                            buttonSelector: ".gigya-organization-context-control-link-button",
                            errorDisplayClass: ".gigya-error-display",
                            errorMessageClass: ".gigya-error-msg",
                            errorActiveClass: "gigya-error-display-active",
                            disabledClass: "gigya-disabled",
                            noDataAvailableMessage: "no_data_available"
                        }
                    }
                },
                UI: {},
                api: {},
                saml: {},
                CDN_HOSTS: {
                    http: [
                        "cdn.gigya.com",
                        "cdn1.gigya.com",
                        "cdn2.gigya.com",
                        "cdn3.gigya.com"
                    ],
                    https: [
                        "cdns.gigya.com",
                        "cdns1.gigya.com",
                        "cdns2.gigya.com",
                        "cdns3.gigya.com"
                    ]
                },
                MessagingMethod: {
                    0: "LocalStorageListener",
                    1: "PostMessage",
                    2: "Flash",
                    LocalStorageListener: 0,
                    PostMessage: 1,
                    Flash: 2
                },
                __pluginsCoreLoaded: false,
                DeviceTypes: {
                    0: "_undefined",
                    1: "desktop",
                    2: "mobile",
                    3: "auto",
                    _undefined: 0,
                    desktop: 1,
                    mobile: 2,
                    auto: 3
                },
                bookmarkSize: {
                    facebook: {
                        w: 640,
                        h: 370
                    },
                    twitter: {
                        w: 880,
                        h: 585
                    },
                    messenger: {
                        w: 710,
                        h: 905
                    },
                    linkedin: {
                        w: 560,
                        h: 500
                    },
                    yahoobookmarks: {
                        w: 840,
                        h: 975
                    },
                    digg: {
                        w: 1010,
                        h: 1045
                    },
                    googlebookmarks: {
                        w: 710,
                        h: 905
                    },
                    mixi: {
                        w: 640,
                        h: 470
                    },
                    googleplus: {
                        w: 496,
                        h: 420
                    }
                },
                passkeyService: {
                    eventHandlers: {}
                },
                bootstrap: {
                    parseScriptRetries: 0
                },
                sso: {},
                logoutBehaviour: {
                    logoutBeforeServerResponse: true,
                    alwaysSendLogoutToServer: false
                },
                arApiList: [
                    {
                        methodName: "socialize.login",
                        settings: {
                            oauth: true
                        },
                        schema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.addConnection",
                        settings: {
                            oauth: true
                        },
                        schema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.requestPermissions",
                        settings: {
                            oauth: true,
                            defaultParams: {
                                forcePermissions: true
                            }
                        },
                        schema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.socialLogin",
                        settings: {
                            oauth: true
                        },
                        schema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "showDebugUI",
                        settings: {
                            allowPopup: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "socialize.plugins.debug"
                    },
                    {
                        methodName: "showMyPhotoUI",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "accounts.plugins.profilePhoto",
                        namespace: "accounts",
                        className: "profilePhoto.MyPhotoPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "runJsUnitTests",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "_.plugins.jsUtRunner",
                        namespace: "_",
                        className: "JsUtRunner.Jasmine.JasmineUtRunnerPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "loadBasePlugin",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "_.plugins.mock",
                        namespace: "_",
                        className: "Mock.MockPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "showLoginUI_v1",
                        settings: {
                            allowPopup: true,
                            defaultParams: {
                                width: 120,
                                height: 110
                            },
                            defaultPopupParams: {
                                width: 280,
                                height: 220
                            },
                            requiredParams: ""
                        },
                        jsName: "socialize.plugins.login"
                    },
                    {
                        methodName: "showLoginUI_v2",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "socialize.plugins.login_v2",
                        namespace: "socialize",
                        className: "login_v2.LoginPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "showLoginUI",
                        _versions: [
                            {
                                versionName: "1"
                            },
                            {
                                versionName: "2"
                            }
                        ],
                        _defaultVersionIndex: 0
                    },
                    {
                        methodName: "showAddConnectionsUI_v1",
                        settings: {
                            allowPopup: true,
                            defaultParams: {
                                width: 110,
                                height: 65
                            },
                            defaultPopupParams: {
                                width: 250,
                                height: 200
                            },
                            requiredParams: ""
                        },
                        jsName: "socialize.plugins.login"
                    },
                    {
                        methodName: "showAddConnectionsUI_v2",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "socialize.plugins.login_v2",
                        namespace: "socialize",
                        className: "login_v2.LoginPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "showAddConnectionsUI",
                        _versions: [
                            {
                                versionName: "1"
                            },
                            {
                                versionName: "2"
                            }
                        ],
                        _defaultVersionIndex: 0
                    },
                    {
                        methodName: "showEditConnectionsUI",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "socialize.plugins.edit",
                        namespace: "socialize",
                        className: "editConnections.EditConnectionPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "showSimpleShareUI",
                        settings: {
                            allowPopup: true,
                            dontLoadPluginsCore: true,
                            waitForAPIQueue: true,
                            defaultParams: {
                                width: 280,
                                height: 175
                            },
                            defaultPopupParams: {},
                            requiredParams: "userAction"
                        },
                        jsName: "socialize.plugins.simpleShare"
                    },
                    {
                        methodName: "showShareMobileUI",
                        settings: {
                            allowPopup: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: "userAction"
                        },
                        jsName: "socialize.plugins.shareMobile"
                    },
                    {
                        methodName: "showTfaUI",
                        settings: {
                            defaultParams: {
                                width: 325
                            },
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "accounts.plugins.tfa"
                    },
                    {
                        methodName: "initHostedPage",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "accounts.plugins.pages",
                        namespace: "accounts",
                        className: "Pages.PagesPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "showScreenSet",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "accounts.plugins.screenSet",
                        namespace: "accounts",
                        className: "ScreenSet.ScreenSetPlugin",
                        instanceMethods: [
                            "hideScreenSet",
                            "switchScreen"
                        ]
                    },
                    {
                        methodName: "socialize.getAvailableProviders",
                        settings: {},
                        schema: "enabledProviders|disabledProviders|requiredCapabilities",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.notifyLogin",
                        settings: {},
                        schema: "siteUID|UIDTimestamp|UIDSig|UIDNonce|provider|authToken|tokenSecret|regSource|tokenExpiration|sessionHandle|sessionHandleExpiration|userInfo|providerSessions|sessionExpiration|authCode|includeAllIdentitiesincludeiRank|group|settings|extraFields|signIDs|newUser|actionAttributes|profileAttributes|bp_channel_url|lang|signKeys",
                        requiresSession: false,
                        adapterSettings: {
                            clearSession: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.convertAction",
                        settings: {},
                        schema: "userAction|[providerCapability=actions]UserAction|provider",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.deleteAccount",
                        settings: {},
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.delUserSettings",
                        settings: {},
                        schema: "group|settings",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.getContacts",
                        settings: {},
                        schema: "enabledProviders|disabledProviders",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.getRawData",
                        settings: {},
                        schema: "provider|UID|fields|dataFormat|path",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.getSessionInfo",
                        settings: {},
                        schema: "provider|paddingMode|encrypt|signIDs|encryptAll",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.getUserInfo",
                        settings: {},
                        schema: "enabledProviders|disabledProviders|signIDs|includeiRank|includeAllIdentities|extraFields|group|settings|includeOpenidUID|include",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.checkin",
                        settings: {},
                        schema: "enabledProviders|disabledProviders|placeID|comment|latitude|longitude|actionAttributes|profileAttributes",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.logout",
                        settings: {
                            disableCache: true
                        },
                        schema: "signIDs|samlContext|sustainLogoutURLs",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.notifyRegistration",
                        settings: {},
                        schema: "siteUID|UIDTimestamp|UIDSig",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.removeConnection",
                        settings: {},
                        schema: "provider|lastIdentityHandling|removeLoginID",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.setUID",
                        settings: {},
                        schema: "siteUID|UIDTimestamp|UIDSig",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.unlinkAccounts",
                        settings: {},
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.facebookGraphOperation",
                        settings: {},
                        schema: "graphPath|graphParams|authRequired|method|authType",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.notifySSOLogin",
                        settings: {},
                        schema: "bp_channel_url",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "gcs.getUserData",
                        settings: {},
                        schema: "type|fields",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "gcs.setUserData",
                        settings: {},
                        schema: "data|type|updateBehavior",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "gcs.search",
                        settings: {},
                        schema: "expTime|querySig|query",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "gcs.getSchema",
                        settings: {},
                        schema: "schemaType",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.b2b.registerOrganization",
                        settings: {},
                        schema: "organization|requester",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.b2b.getOrganizationSchema",
                        settings: {},
                        schema: "",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.login",
                        settings: {
                            riskAssessment: true
                        },
                        schema: "loginID|password|sessionExpiration|targetEnv|regToken|include|actionAttributes|profileAttributes|includeUserInfo|includeDynamicSchema|bp_channel_url|captchaToken|blackBoxToken|captchaType|captchaText|loginMode|signKeys|lang|riskContext|aToken",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.linkAccounts",
                        settings: {},
                        schema: "loginID|password|sessionExpiration|targetEnv|include|regToken|includeUserInfo|bp_channel_url|signKeys",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.notifySocialLogin",
                        settings: {},
                        schema: "loginMode|providerSessions|sessionExpiration",
                        requiresSession: true,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        },
                        altSessionParams: "providerSessions"
                    },
                    {
                        methodName: "accounts.initRegistration",
                        settings: {},
                        schema: "sdk|isLite|dataCenter",
                        requiresSession: false,
                        adapterSettings: {
                            clearSession: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.initProgression",
                        settings: {},
                        schema: "sdk|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            clearSession: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.register",
                        settings: {
                            riskAssessment: true
                        },
                        schema: "username|email|password|UID|regToken|siteUID|secretQuestion|secretAnswer|regSource|profile|preferences|displayedPreferences|data|captchaText|captchaType|captchaToken|blackBoxToken|lang|hashedPassword|pwHashAlgorithm|skipVerification|finalizeRegistration|targetEnv|sessionExpiration|include|actionAttributes|profileAttributes|includeUserInfo|bp_channel_url|signKeys|subscriptions|communications|addresses",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.finalizeRegistration",
                        settings: {},
                        schema: "regToken|targetEnv|include|includeUserInfo|bp_channel_url|allowAccountsLinking|signKeys|subscriptions",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.captchaImage",
                        settings: {},
                        schema: "regToken",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.importProfilePhoto",
                        settings: {},
                        schema: "regToken|URL|publish",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.setProfilePhoto",
                        settings: {},
                        schema: "regToken|publish|photoBytes",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.resetPassword",
                        settings: {
                            riskAssessment: true
                        },
                        schema: "lang|loginID|passwordResetToken|secretAnswer|securityFields|newPassword|email|captchaType|captchaToken|blackBoxToken",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.removeProfilePhoto",
                        settings: {},
                        schema: "regToken",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.isAvailableLoginID",
                        settings: {},
                        schema: "loginID",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.address.suggestions.get",
                        settings: {},
                        schema: "address|country|apiKey|suggestionreply|longitude|latitude",
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.resendVerificationCode",
                        settings: {},
                        schema: "regToken|email",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.getCaptcha",
                        settings: {},
                        schema: "",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.getPolicies",
                        settings: {},
                        schema: "sections",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.getSchema",
                        settings: {},
                        schema: "sections|schemaType",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.getSiteConsentDetails",
                        settings: {},
                        schema: "",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.getLegalStatements",
                        settings: {},
                        schema: "consentId|lang",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.verifyLogin",
                        settings: {},
                        schema: "include|extraProfileFields|targetEnv",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.getAccountInfo",
                        settings: {},
                        schema: "include|extraProfileFields|regToken|lang|includeCommunications",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.setAccountInfo",
                        settings: {
                            riskAssessment: true
                        },
                        schema: "profile|preferences|displayedPreferences|data|regToken|verifyToken|oldPassword|password|newPassword|addLoginEmails|removeLoginEmails|username|secretQuestion|secretAnswer|requirePasswordChange|conflictHandling|tfaStatus|rba|subscriptions|communications|preferences|lang|captchaToken|blackBoxToken|captchaType|customIdentifiers|addresses",
                        requiresSession: true,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.logout",
                        settings: {
                            disableCache: true
                        },
                        schema: "signIDs|samlContext|sustainLogoutURLs",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.search",
                        settings: {},
                        schema: "expTime|querySig|query",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.getScreenSets",
                        settings: {},
                        schema: "screenSetIDs|include|lang|screenSetVersion",
                        requiresSession: false,
                        adapterSettings: {
                            useHttpStatusCodes: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.sso.login",
                        settings: {
                            oauth: true
                        },
                        schema: "redirectURL|state|authFlow|context|useChildContext",
                        requiresSession: false,
                        adapterSettings: {
                            oauthMode: 1,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.getConflictingAccount",
                        settings: {},
                        schema: "regToken|loginID",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.resetSitePreferences",
                        settings: {},
                        schema: "",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.getJWT",
                        settings: {},
                        schema: "fields|expiration|audience",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.getProviders",
                        settings: {},
                        schema: "regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.tfa.initTFA",
                        settings: {},
                        schema: "provider|mode|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.finalizeTFA",
                        settings: {},
                        schema: "gigyaAssertion|providerAssertion|tempDevice|regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.tfa.deactivateProvider",
                        settings: {},
                        schema: "provider",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.unregisterDevice",
                        settings: {},
                        schema: "allDevices",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.backupcodes.get",
                        settings: {},
                        schema: "gigyaAssertion",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.backupcodes.create",
                        settings: {},
                        schema: "gigyaAssertion",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.backupcodes.verify",
                        settings: {},
                        schema: "gigyaAssertion|code|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.phone.getRegisteredPhoneNumbers",
                        settings: {},
                        schema: "gigyaAssertion",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.phone.removePhone",
                        settings: {},
                        schema: "gigyaAssertion|phoneId",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.phone.sendVerificationCode",
                        settings: {},
                        schema: "gigyaAssertion|lang|phoneID|phone|method|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.phone.completeVerification",
                        settings: {},
                        schema: "gigyaAssertion|phvToken|code|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.email.getEmails",
                        settings: {},
                        schema: "gigyaAssertion",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.email.sendVerificationCode",
                        settings: {},
                        schema: "emailID|gigyaAssertion|lang|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.email.completeVerification",
                        settings: {},
                        schema: "gigyaAssertion|phvToken|code|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.totp.register",
                        settings: {},
                        schema: "gigyaAssertion|includeSecret",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.totp.verify",
                        settings: {},
                        schema: "gigyaAssertion|sctToken|code|name|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.totp.getRegistered",
                        settings: {},
                        schema: "gigyaAssertion",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.totp.remove",
                        settings: {},
                        schema: "gigyaAssertion|id",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.push.isVerified",
                        settings: {},
                        schema: "gigyaAssertion|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.tfa.push.sendVerification",
                        settings: {},
                        schema: "gigyaAssertion|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.b2b.delegatedAdminLogin",
                        settings: {},
                        schema: "orgId|lang",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.b2b.getOrganizationInfo",
                        settings: {},
                        schema: "orgId|bpid",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.b2b.setOrganizationContext",
                        settings: {},
                        schema: "bpid",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.b2b.getOrganizationContext",
                        settings: {},
                        schema: "",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.b2b.auth.getAssets",
                        settings: {},
                        schema: "appId|bpid|orgId|includePolicies|environments",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.getSchema",
                        settings: {},
                        schema: "model",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.registerGroup",
                        settings: {},
                        schema: "model|groupId|groupData",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.setGroupInfo",
                        settings: {},
                        schema: "model|groupId|groupData",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.getGroupInfo",
                        settings: {},
                        schema: "model|groupId",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.deleteGroup",
                        settings: {},
                        schema: "model|groupId",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.setGroupMemberInfo",
                        settings: {},
                        schema: "model|groupId|uid|relationshipData|permissions",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.getGroupMemberInfo",
                        settings: {},
                        schema: "model|groupId|uid|include",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.removeMember",
                        settings: {},
                        schema: "model|groupId|uid",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.getAllMemberGroups",
                        settings: {},
                        schema: "uid|flatNestedFields",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.searchGroupMembers",
                        settings: {},
                        schema: "model|groupId|limit|start",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.createInvitation",
                        settings: {},
                        schema: "model|groupId|isOneTime",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.invitationConfirm",
                        settings: {},
                        schema: "invitationId",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.groups.finalizeInvitation",
                        settings: {},
                        schema: "token",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.otp.sendCode",
                        settings: {
                            riskAssessment: true
                        },
                        schema: "regToken|phoneNumber|email|lang|captchaToken|captchaType|blackBoxToken|dataCenter|phvToken",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.otp.login",
                        settings: {},
                        schema: "vToken|code|targetEnv|includeUserInfo|include|regSource|sessionExpiration",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.otp.update",
                        settings: {},
                        schema: "vToken|code|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.guest",
                        settings: {},
                        schema: "identifier|identifierType",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.otp.verify",
                        settings: {},
                        schema: "vToken|code",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.otp.authenticate",
                        settings: {},
                        schema: "vToken|code",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.getMethods",
                        settings: {},
                        schema: "identifier|aToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.push.sendVerification",
                        settings: {},
                        schema: "identifier",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.push.isVerified",
                        settings: {},
                        schema: "vToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.magiclink.email.send",
                        settings: {},
                        schema: "email|context|lang",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.magiclink.email.login",
                        settings: {},
                        schema: "vToken|code|targetEnv|includeUserInfo|include|regSource|sessionExpiration",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.otp.email.sendCode",
                        settings: {},
                        schema: "email|lang",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.otp.email.login",
                        settings: {},
                        schema: "code|vToken|targetEnv|includeUserInfo|include|regSource|sessionExpiration",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.identifier.createToken",
                        settings: {},
                        schema: "identifier|identifierType",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.identity.authorize",
                        settings: {},
                        schema: "authorization_details|grant_type",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.fido.initRegisterCredentials",
                        settings: {},
                        schema: "regToken|aToken",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        },
                        altSessionParams: "regToken|aToken"
                    },
                    {
                        methodName: "accounts.auth.fido.registerCredentials",
                        settings: {},
                        schema: "token|attestation|deviceName|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.fido.getAssertionOptions",
                        settings: {},
                        schema: "",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.fido.verifyAssertion",
                        settings: {},
                        schema: "token|authenticatorAssertion",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.auth.fido.getCredentials",
                        settings: {},
                        schema: "regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.auth.fido.removeCredential",
                        settings: {},
                        schema: "credentialId|regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.session.verify",
                        settings: {},
                        schema: "",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "oauth.register",
                        settings: {},
                        schema: "lang|regSource|cid|context|sessionExpiration|userInfo|verifyToken|authMode",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            useBearerToken: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "oauth.connect",
                        settings: {},
                        schema: "regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forcePost: true,
                            useBearerToken: true,
                            forceHttps: true
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "oauth.disconnect",
                        settings: {},
                        schema: "regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forcePost: true,
                            useBearerToken: true,
                            forceHttps: true
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "oauth.authorize",
                        settings: {},
                        schema: "response_type|authMode",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            useBearerToken: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "oauth.token",
                        settings: {},
                        schema: "grant_type|code|targetEnv|sessionExpiration",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "auth.token.authenticationContext",
                        settings: {},
                        schema: "regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.auth.login",
                        settings: {},
                        schema: "accessToken|sessionExpiration|targetEnv|include|includeUserInfo|loginMode|lang",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "ds.store",
                        settings: {},
                        schema: "type|data|oid|updateBehavior",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "ds.get",
                        settings: {},
                        schema: "type|data|oid|fields",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "ds.search",
                        settings: {},
                        schema: "expTime|querySig|query",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "ds.getSchema",
                        settings: {},
                        schema: "",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "ds.delete",
                        settings: {},
                        schema: "type|oid|fields",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "ids.getAccountInfo",
                        settings: {},
                        schema: "include|extraProfileFields",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "ids.setAccountInfo",
                        settings: {},
                        schema: "profile|preferences|data|oldPassword|password|newPassword|addLoginEmails|removeLoginEmails|username|secretQuestion|secretAnswer|requirePasswordChange|lang",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "ids.search",
                        settings: {},
                        schema: "expTime|querySig|query",
                        adapterSettings: {
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "fidm.oidc.op.deviceContinue",
                        settings: {
                            restUrl: "oidc/op/v1.0/{APIKey}/device_continue"
                        },
                        schema: "user_code",
                        requiresSession: true,
                        adapterSettings: {
                            namespace: "fidm",
                            forcePost: true,
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "fidm.oidc.op.getContextData",
                        settings: {
                            restUrl: "oidc/op/v1.0/{APIKey}/contextData"
                        },
                        schema: "oidc_context",
                        requiresSession: false,
                        adapterSettings: {
                            namespace: "fidm",
                            forcePost: false,
                            forceHttps: true
                        }
                    }
                ],
                defaultApiSchema: "ctag|APIKey|cid|oauth_token|source|sourceData|usePost|refUID|fb_UID|fb_at|fb_exp|environment|noAuth|httpStatusCodes",
                defaultOauthSchema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication",
                postBookmarkSchema: "provider|URL|url|title|description|target|cid|APIKey|shortURLs|source|sourceData|providerKey|thumbnailURL|tags|userAction|[providerCapability=actions]UserAction|actionAttributes|facebookDialogType",
                loginMethods: {
                    "socialize.login": 1,
                    "socialize.addConnection": 1,
                    "socialize.notifyLogin": 1,
                    "socialize.linkAccounts": 1,
                    "accounts.login": 1,
                    "accounts.otp.login": 1,
                    "accounts.auth.magiclink.email.login": 1,
                    "accounts.auth.otp.email.login": 1,
                    "accounts.auth.login": 1,
                    "accounts.socialLogin": 1,
                    "accounts.linkAccounts": 1,
                    "accounts.register": 1,
                    "accounts.finalizeRegistration": 1,
                    "accounts.notifySocialLogin": 1
                },
                logoutMethods: {
                    "socialize.logout": 1,
                    "accounts.logout": 1,
                    "socialize.deleteAccount": 1,
                    "socialize.unlinkAccounts": 1
                }
            },
            sso: {},
            services: {
                proxy: {
                    utils: {}
                },
                TokenKeys: {
                    GMID: "gig_gmid",
                    UCID: "gig_ucid",
                    GMID_TICKET: "gmidTicket",
                    GMID_TICKET_EXPIRATION_TIME: "gmidTicketExpiration"
                },
                RequestType: {
                    GET: "GET",
                    POST: "POST"
                },
                accountService: {},
                siteData: {},
                socialize: {},
                gcs: {},
                accounts: {
                    b2b: {
                        auth: {}
                    },
                    auth: {
                        fido: {},
                        otp: {
                            email: {}
                        },
                        push: {},
                        magiclink: {
                            email: {}
                        }
                    },
                    address: {
                        suggestions: {}
                    },
                    sso: {},
                    tfa: {
                        backupcodes: {},
                        phone: {},
                        email: {},
                        totp: {},
                        push: {}
                    },
                    groups: {},
                    otp: {},
                    identifier: {},
                    identity: {},
                    session: {}
                }
            },
            gm: {},
            comments: {},
            gscounters: {},
            utils: {
                toggles: {},
                array: {},
                browser: {},
                cookie: {
                    _cookieStore: {}
                },
                date: {},
                delegate: {},
                DOM: {
                    _popupContainers: [],
                    _pseudoContainers: []
                },
                functions: {},
                gltexp: {},
                HTTP: {},
                JSON: {},
                keyboard: {
                    Keys: {
                        8: "backspace",
                        13: "enter",
                        27: "escape",
                        escape: 27,
                        backspace: 8,
                        enter: 13
                    },
                    keyCodes: {
                        8: "Backspace",
                        13: "Enter",
                        27: "Escape"
                    }
                },
                keyValue: {},
                localStorage: {
                    adapters: [
                        function LocalStorageAdapter1() {
                            var _this1 = _super.call(this) || this;
                            _this1.storage = window.localStorage;
                            return _this1;
                        },
                        function SessionStorageAdapter1() {
                            var _this1 = _super.call(this) || this;
                            _this1.storage = window.sessionStorage;
                            return _this1;
                        },
                        function FirefoxStorageAdapter1() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        },
                        function CookieStorageAdapter1() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        },
                        function MemoryStorageAdapter1() {
                            var _this1 = _super.call(this) || this;
                            _this1.memory = {};
                            return _this1;
                        }
                    ],
                    instances: {
                        LocalStorageAdapter: {}
                    }
                },
                mouse: {},
                object: {},
                queue: {},
                sanitize: {},
                script: {
                    ResourceTypes: {
                        0: "script",
                        1: "image",
                        2: "iframe",
                        script: 0,
                        image: 1,
                        iframe: 2
                    }
                },
                sessionCache: {},
                localCache: {},
                stringUtils: {},
                templates: {},
                URL: {},
                validation: {},
                viewport: {},
                win: {
                    _openedWindows: {},
                    _uniqueWindowCounter: 0
                },
                xd: {
                    _flashListenerID: "flid1702382143789"
                },
                recaptcha: {},
                tabbable: {
                    bindings: []
                }
            },
            log: {
                CONSOLE_LOG_LEVELS: [
                    "debug",
                    "info",
                    "log",
                    "warn",
                    "error"
                ],
                selectedConsoleLogLevels: [],
                _log: []
            },
            legacyReports: {},
            fidm: {
                saml: {},
                oidc: {
                    op: {}
                }
            },
            globalAccount: {},
            isReady: false,
            GSErrors: {
                0: "OK",
                100001: "DATA_PENDING",
                200001: "OPERATION_CANCELED",
                200002: "PERMISSION_GRANTED",
                200003: "PERMISSION_NOT_GRANTED",
                200004: "REDIRECT",
                200005: "NEW_USER",
                200006: "OPERATION_DONE",
                200007: "UPDATE_USER",
                200008: "OK_WITH_ERRORS",
                200009: "ACCOUNTS_LINKED",
                200010: "OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS",
                206001: "ACCOUNT_PENDING_REGISTRATION",
                206002: "ACCOUNT_PENDING_VERIFICATION",
                206003: "ACCOUNT_MISSING_LOGINID",
                206004: "IDENTITY_ALREADY_ASSIGNED",
                206005: "AFTER_EMAIL_VERIFICATION",
                206006: "PENDING_CODE_VERIFICATION",
                300001: "CLIENT_LOG",
                301001: "INVALID_DATA_CENTER",
                400001: "INVALID_REQUEST_FORMAT",
                400002: "MISSING_REQUIRED_PARAMETER",
                400003: "UNIQUE_IDENTIFIER_EXISTS",
                400004: "INVALID_PARAMETER_FORMAT",
                400006: "INVALID_PARAMETER_VALUE",
                400007: "DUPLICATE_VALUE",
                400008: "INVALID_AUTHENTICATION_HEADER",
                400009: "VALIDATION_ERROR",
                400011: "INVALID_REDIRECT_URI",
                400012: "INVALID_RESPONSE_TYPE",
                400013: "UNSUPPORTED_GRANT_TYPE",
                400014: "INVALID_GRANT",
                400015: "CODE_EXPIRED",
                400020: "SCHEMA_VALIDATION_FAILED",
                400021: "CAPTCHA_VERIFICATION_FAILED",
                400022: "UNIQUE_INDEX_VALIDATION_ERROR",
                400023: "INVALID_TYPE_VALIDATION_ERROR",
                400024: "DYNAMIC_FIELDS_VALIDATION_ERROR",
                400025: "WRITE_ACCESS_VALIDATION_ERROR",
                400026: "INVALID_FORMAT_VALIDATION_ERROR",
                400027: "REQUIRED_VALUE_VALIDATION_ERROR",
                400028: "EMAIL_NOT_VERIFIED",
                400029: "SCHEMA_CONFLICT_ERROR",
                400030: "OPERATION_NOT_ALLOWED",
                400050: "SECURITY_VERIFICATION_FAILED",
                400093: "INVALID_APIKEY_PARAMETER",
                400096: "NOT_SUPPORTED",
                400097: "UNSUPPORTED_USER_AGENT",
                400100: "NO_PROVIDERS",
                400101: "POPUP_BLOCKED",
                400102: "INVALID_EVENT_HANDLER",
                400103: "INVALID_CONTAINERID",
                400106: "NOT_CONNECTED",
                400120: "INVALID_SITE_DOMAIN",
                400122: "PROVIDER_CONFIGURATION_ERROR",
                400124: "LIMIT_REACHED",
                400125: "FREQUENCY_LIMIT_REACHED",
                400126: "INVALID_ACTION",
                400127: "INSUFFICIENT_POINTS_TO_REDEEM",
                400128: "SIGNATURE_TIMESTAMP_EXPIRED",
                400130: "PASSKEY_AUTHENTICATOR_REGISTERED",
                400131: "PASSKEY_ABORTED",
                400302: "Error_During_Extensions_Operation",
                400303: "Extension_Point_Custom_Error",
                401000: "INVALID_POLICY_CONFIGURATION",
                401001: "MEDIA_ITEMS_NOT_SUPPORTED",
                401010: "SUSPECTED_SPAM",
                401020: "LOGIN_FAILED_CAPTCHA_REQUIRED",
                401021: "LOGIN_FAILED_WRONG_CAPTCHA",
                401023: "REQUEST_FAILED_CAPTCHA_REQUIRED",
                401030: "OLD_PASSWORD_USED",
                403000: "FORBIDDEN",
                403001: "INVALID_SESSION_TOKEN",
                403002: "REQUEST_HAS_EXPIRED",
                403003: "INVALID_REQUEST_SIGNATURE",
                403004: "DUPLICATE_NONCE",
                403005: "UNAUTHORIZED_USER",
                403006: "SENSITIVE_DATA_SENT_OVER_HTTP",
                403007: "PERMISSION_DENIED",
                403008: "INVALID_OPENID_URL",
                403009: "PROVIDER_SESSION_EXPIRED",
                403010: "INVALID_SECRET",
                403011: "SESSION_HAS_EXPIRED",
                403012: "NO_VALID_SESSION",
                403013: "UNVERIFIED_USER",
                403015: "MISSING_REQUEST_REFERRER",
                403017: "UNEXPECTED_PROVIDER_USER",
                403022: "PERMISSION_NOT_REQUESTED",
                403023: "NO_USER_PERMISSION",
                403024: "PROVIDER_LIMIT_REACHED",
                403025: "INVALID_TOKEN",
                403026: "UNAUTHORIZED_ACCESS_ERROR",
                403027: "DIFFERENT_USER_FOR_REAUTH",
                403030: "SESSION_EXPIRED_RETRY",
                403031: "APPROVED_BY_MODERATOR",
                403032: "TOKEN_HAS_RENEWED",
                403035: "NO_USER_COOKIE",
                403036: "UNAUTHORIZED_PARTNER",
                403037: "POST_DENIED",
                403040: "NO_LOGIN_TICKET",
                403041: "ACCOUNT_DISABLED",
                403042: "INVALID_LOGINID",
                403043: "LOGIN_IDENTIFIER_EXISTS",
                403044: "UNDERAGE_USER",
                403045: "INVALID_SITE_CONFIGURATION_ERROR",
                403047: "LOGINID_DOES_NOT_EXIST",
                403048: "API_RATE_LIMIT_EXCEEDED",
                403100: "PENDING_PASSWORD_CHANGE",
                403101: "ACCOUNT_PENDING_TFA_VERIFICATION",
                403102: "ACCOUNT_PENDING_TFA_REGISTRATION",
                403110: "ACCOUNT_PENDING_RECENT_LOGIN",
                403120: "ACCOUNT_TEMPORARILY_LOCKED_OUT",
                403200: "REDUNDANT_OPERATION",
                403201: "INVALID_APPLICATION_ID",
                403300: "THIS_AUTHENTICATION_METHOD_IS_CURRENTLY_DISABLED",
                404000: "NOT_FOUND",
                404001: "FRIEND_NOT_FOUND",
                404002: "CATEGORY_NOT_FOUND",
                404003: "UID_NOT_FOUND",
                404004: "INVALID_URL",
                405001: "INVALID_API_METHOD",
                409001: "IDENTITY_EXISTS",
                409003: "FORCE_LINK_LOGIN_IDENTIFIER_EXISTS",
                409010: "MISSING_USER_PHOTO",
                409011: "COUNTER_NOT_REGISTERED",
                409012: "INVALID_GMID_TICKET",
                409013: "SAML_MAPPED_ATTRIBUTE_NOT_FOUND",
                409014: "SAML_CERTIFICATE_NOT_FOUND",
                409015: "SAML_MESSAGE_NOT_FOUND",
                410000: "GONE",
                413001: "REQUEST_ENTITY_TOO_LARGE",
                413002: "COMMENT_TEXT_TOO_LARGE",
                413003: "OBJECT_TOO_LARGE",
                413004: "PROFILE_PHOTO_TOO_LARGE",
                414000: "REQUEST_URI_TOO_LONG",
                500001: "GENERAL_SERVER_ERROR",
                500002: "SERVER_LOGIN_ERROR",
                500003: "DEFAULT_APPLICATION_CONFIGURATION_ERROR",
                500014: "SESSION_MIGRATION_ERROR",
                500023: "PROVIDER_ERROR",
                500026: "NETWORK_ERROR",
                500028: "DATABASE_ERROR",
                500029: "USERNAME_REQUIRED",
                500031: "NO_PROVIDER_APPLICATION",
                500032: "LOAD_FAILED",
                500033: "INVALID_ENVIRONMENT_CONFIG",
                500034: "ERROR_DURING_BACKEND_OPERATION",
                500131: "PASSKEY_ERROR",
                504001: "TIMEOUT",
                504002: "CLIENTTIMEOUT",
                599999: "MISSING_ERROR_CODE",
                OK: 0,
                Data_Pending: 100001,
                NETWORK_ERROR: 500026,
                DATA_PENDING: 100001,
                OPERATION_CANCELED: 200001,
                PERMISSION_GRANTED: 200002,
                PERMISSION_NOT_GRANTED: 200003,
                REDIRECT: 200004,
                NEW_USER: 200005,
                OPERATION_DONE: 200006,
                UPDATE_USER: 200007,
                OK_WITH_ERRORS: 200008,
                ACCOUNTS_LINKED: 200009,
                OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS: 200010,
                ACCOUNT_PENDING_REGISTRATION: 206001,
                ACCOUNT_PENDING_VERIFICATION: 206002,
                ACCOUNT_MISSING_LOGINID: 206003,
                IDENTITY_ALREADY_ASSIGNED: 206004,
                AFTER_EMAIL_VERIFICATION: 206005,
                PENDING_CODE_VERIFICATION: 206006,
                CLIENT_LOG: 300001,
                INVALID_DATA_CENTER: 301001,
                INVALID_REQUEST_FORMAT: 400001,
                MISSING_REQUIRED_PARAMETER: 400002,
                UNIQUE_IDENTIFIER_EXISTS: 400003,
                INVALID_PARAMETER_FORMAT: 400004,
                INVALID_PARAMETER_VALUE: 400006,
                DUPLICATE_VALUE: 400007,
                INVALID_AUTHENTICATION_HEADER: 400008,
                VALIDATION_ERROR: 400009,
                INVALID_REDIRECT_URI: 400011,
                INVALID_RESPONSE_TYPE: 400012,
                UNSUPPORTED_GRANT_TYPE: 400013,
                INVALID_GRANT: 400014,
                CODE_EXPIRED: 400015,
                SCHEMA_VALIDATION_FAILED: 400020,
                CAPTCHA_VERIFICATION_FAILED: 400021,
                UNIQUE_INDEX_VALIDATION_ERROR: 400022,
                INVALID_TYPE_VALIDATION_ERROR: 400023,
                DYNAMIC_FIELDS_VALIDATION_ERROR: 400024,
                WRITE_ACCESS_VALIDATION_ERROR: 400025,
                INVALID_FORMAT_VALIDATION_ERROR: 400026,
                REQUIRED_VALUE_VALIDATION_ERROR: 400027,
                EMAIL_NOT_VERIFIED: 400028,
                SCHEMA_CONFLICT_ERROR: 400029,
                OPERATION_NOT_ALLOWED: 400030,
                SECURITY_VERIFICATION_FAILED: 400050,
                INVALID_APIKEY_PARAMETER: 400093,
                NOT_SUPPORTED: 400096,
                UNSUPPORTED_USER_AGENT: 400097,
                NO_PROVIDERS: 400100,
                POPUP_BLOCKED: 400101,
                INVALID_EVENT_HANDLER: 400102,
                INVALID_CONTAINERID: 400103,
                NOT_CONNECTED: 400106,
                INVALID_SITE_DOMAIN: 400120,
                PROVIDER_CONFIGURATION_ERROR: 400122,
                LIMIT_REACHED: 400124,
                FREQUENCY_LIMIT_REACHED: 400125,
                INVALID_ACTION: 400126,
                INSUFFICIENT_POINTS_TO_REDEEM: 400127,
                SIGNATURE_TIMESTAMP_EXPIRED: 400128,
                Error_During_Extensions_Operation: 400302,
                Extension_Point_Custom_Error: 400303,
                INVALID_POLICY_CONFIGURATION: 401000,
                SUSPECTED_SPAM: 401010,
                LOGIN_FAILED_CAPTCHA_REQUIRED: 401020,
                REQUEST_FAILED_CAPTCHA_REQUIRED: 401023,
                LOGIN_FAILED_WRONG_CAPTCHA: 401021,
                OLD_PASSWORD_USED: 401030,
                FORBIDDEN: 403000,
                INVALID_SESSION_TOKEN: 403001,
                REQUEST_HAS_EXPIRED: 403002,
                INVALID_REQUEST_SIGNATURE: 403003,
                DUPLICATE_NONCE: 403004,
                UNAUTHORIZED_USER: 403005,
                SENSITIVE_DATA_SENT_OVER_HTTP: 403006,
                PERMISSION_DENIED: 403007,
                INVALID_OPENID_URL: 403008,
                PROVIDER_SESSION_EXPIRED: 403009,
                INVALID_SECRET: 403010,
                SESSION_HAS_EXPIRED: 403011,
                NO_VALID_SESSION: 403012,
                UNVERIFIED_USER: 403013,
                MISSING_REQUEST_REFERRER: 403015,
                UNEXPECTED_PROVIDER_USER: 403017,
                PERMISSION_NOT_REQUESTED: 403022,
                NO_USER_PERMISSION: 403023,
                PROVIDER_LIMIT_REACHED: 403024,
                INVALID_TOKEN: 403025,
                UNAUTHORIZED_ACCESS_ERROR: 403026,
                DIFFERENT_USER_FOR_REAUTH: 403027,
                SESSION_EXPIRED_RETRY: 403030,
                APPROVED_BY_MODERATOR: 403031,
                TOKEN_HAS_RENEWED: 403032,
                NO_USER_COOKIE: 403035,
                UNAUTHORIZED_PARTNER: 403036,
                POST_DENIED: 403037,
                NO_LOGIN_TICKET: 403040,
                ACCOUNT_DISABLED: 403041,
                INVALID_LOGINID: 403042,
                LOGIN_IDENTIFIER_EXISTS: 403043,
                UNDERAGE_USER: 403044,
                INVALID_SITE_CONFIGURATION_ERROR: 403045,
                LOGINID_DOES_NOT_EXIST: 403047,
                API_RATE_LIMIT_EXCEEDED: 403048,
                PENDING_PASSWORD_CHANGE: 403100,
                ACCOUNT_PENDING_TFA_VERIFICATION: 403101,
                ACCOUNT_PENDING_TFA_REGISTRATION: 403102,
                ACCOUNT_PENDING_RECENT_LOGIN: 403110,
                ACCOUNT_TEMPORARILY_LOCKED_OUT: 403120,
                REDUNDANT_OPERATION: 403200,
                INVALID_APPLICATION_ID: 403201,
                NOT_FOUND: 404000,
                FRIEND_NOT_FOUND: 404001,
                CATEGORY_NOT_FOUND: 404002,
                UID_NOT_FOUND: 404003,
                RESOURCE_NOT_FOUND: 404004,
                INVALID_API_METHOD: 405001,
                IDENTITY_EXISTS: 409001,
                GONE: 410000,
                REQUEST_ENTITY_TOO_LARGE: 413001,
                COMMENT_TEXT_TOO_LARGE: 413002,
                OBJECT_TOO_LARGE: 413003,
                PROFILE_PHOTO_TOO_LARGE: 413004,
                REQUEST_URI_TOO_LONG: 414000,
                MISSING_USER_PHOTO: 409010,
                COUNTER_NOT_REGISTERED: 409011,
                INVALID_GMID_TICKET: 409012,
                SAML_MAPPED_ATTRIBUTE_NOT_FOUND: 409013,
                SAML_CERTIFICATE_NOT_FOUND: 409014,
                SAML_MESSAGE_NOT_FOUND: 409015,
                GENERAL_SERVER_ERROR: 500001,
                SERVER_LOGIN_ERROR: 500002,
                DEFAULT_APPLICATION_CONFIGURATION_ERROR: 500003,
                SESSION_MIGRATION_ERROR: 500014,
                PROVIDER_ERROR: 500023,
                DATABASE_ERROR: 500028,
                USERNAME_REQUIRED: 500029,
                NO_PROVIDER_APPLICATION: 500031,
                LOAD_FAILED: 500032,
                INVALID_ENVIRONMENT_CONFIG: 500033,
                ERROR_DURING_BACKEND_OPERATION: 500034,
                TIMEOUT: 504001,
                CLIENTTIMEOUT: 504002,
                INVALID_URL: 404004,
                MEDIA_ITEMS_NOT_SUPPORTED: 401001,
                MISSING_ERROR_CODE: 599999,
                THIS_AUTHENTICATION_METHOD_IS_CURRENTLY_DISABLED: 403300,
                FORCE_LINK_LOGIN_IDENTIFIER_EXISTS: 409003,
                PASSKEY_AUTHENTICATOR_REGISTERED: 400130,
                PASSKEY_ABORTED: 400131,
                PASSKEY_ERROR: 500131
            },
            GSErrorDetails: {
                0: "None",
                100001: "Same_password",
                100002: "Invalid_password",
                100003: "Invalid_counters_query_with_cursor",
                None: 0,
                Same_password: 100001,
                Invalid_password: 100002,
                Invalid_counters_query_with_cursor: 100003
            },
            localInfo: {
                baseDomain: "local.pyzlo.in",
                isBrowserSupportsFilesAPI: true,
                initTime: "2023-12-12T11:55:43.787Z",
                version: 0,
                pageDomain: "local.pyzlo.in",
                protocol: "https",
                userAgent: "mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/119.0.0.0 safari/537.36",
                isWin: false,
                isIE: false,
                isIE6: false,
                isIE7: false,
                isIE8: false,
                isIE9: false,
                isIE10: false,
                isIE11: false,
                isEdgeLegacy: false,
                isEdge: false,
                isIOS: false,
                isSafari534: false,
                isWeChat: false,
                iosVersion: 0,
                isAndroid: false,
                isAndroidBrowser: false,
                currentBrowser: "mac chrome",
                androidVersion: 0,
                isChrome: true,
                isGoogleBot: false,
                isFF: false,
                isOpera: false,
                isSafari: false,
                isIOSWebView: false,
                isIOSChrome: false,
                isMAC: true,
                isWindowsPhone: false,
                isFacebookBrowser: false,
                supportsPostMessage: true,
                supportsLocalStorage: true,
                supportsSessionStorage: true,
                supportsFlash: false,
                quirksMode: false,
                backCompat: false,
                isMobile: false,
                isMobileApp: true,
                isNativeMobileApp: false,
                isTouch: false,
                messagingMethod: 1
            },
            defaultEventMaps: [
                {
                    id: "screen-set-report-events-map",
                    eventMap: [
                        {
                            events: "afterScreenLoad,submit",
                            args: [
                                function (e1) {
                                    return e1;
                                }
                            ]
                        }
                    ]
                }
            ],
            oauth: {},
            auth: {
                token: {}
            },
            ds: {},
            ids: {},
            external: {
                facebook: {
                    isLoggedIn: false,
                    isConnected: false
                },
                googlePlus: {},
                opengraph: {}
            },
            thisScript: {
                scriptElement: {},
                protocol: "https",
                baseDomain: "cdns.gigya.com",
                APIKey: "4_aeFS_UyzRnmP5k_MI59ejg",
                lang: {
                    full: "en-US",
                    langCode: "en",
                    countryCode: "US",
                    originalLang: "en"
                },
                globalConf: {
                    connectWithoutLoginBehavior: "alwaysLogin",
                    defaultRegScreenSet: "Default-RegistrationLogin",
                    defaultMobileRegScreenSet: "Default-RegistrationLogin",
                    sessionExpiration: 0,
                    rememberSessionExpiration: 0,
                    apiDomain: "eu1.gigya.com",
                    lang: "en",
                    APIKey: "4_aeFS_UyzRnmP5k_MI59ejg"
                },
                URLParams: {
                    apikey: "4_aeFS_UyzRnmP5k_MI59ejg",
                    pretty: "true",
                    debug: "true",
                    dbg: "1"
                }
            },
            global: {
                date: {},
                XMLUtils: {}
            },
            pluginUtils: {
                css: {},
                lang: {},
                animation: {},
                DOM: {},
                layout: {},
                text: {},
                validation: {},
                domain: {}
            },
            i18n: {
                "gigya.services.accounts.plugins.screenSet.js": {
                    en: {
                        login_identifier_exists: "Login identifier exists",
                        unique_identifier_exists: "Unique identifier exists",
                        account_temporarily_locked_out: "Account temporarily locked out",
                        wrong_password: "Wrong password",
                        old_password_cannot_be_the_same_as_new_password: "You've already used that password. Please create a new one.",
                        old_password_used: "It seems like you're trying to log in with a password that was changed. If you don't remember the new one, reset your password.",
                        choose_file: "Choose File",
                        no_file_chosen: "No file chosen",
                        "maximum_size_of_3mb.": "Maximum size of 3MB.",
                        there_are_errors_in_your_form_please_try_again: "There are errors in your form, please try again",
                        sorry_we_are_not_able_to_process_your_registration: "Sorry, we are not able to process your registration",
                        invalid_login_or_password: "Invalid login or password",
                        account_is_disabled: "Account is disabled",
                        email_already_exists: "Email already exists",
                        there_is_no_user_with_that_username_or_email: "There is no user with that username or email",
                        password_must_contain_at_least: "Password must contain at least",
                        and: "and",
                        num_of_the_following_groups: "%num of the following: An uppercase letter, a lowercase letter, a number, a special symbol",
                        num_characters_total: "%num characters",
                        too_weak: "Too weak",
                        checking: "Checking",
                        email_address_is_invalid: "E-mail address is invalid.",
                        password_does_not_meet_complexity_requirements: "Password does not meet complexity requirements",
                        username_already_exists: "Username already exists",
                        passwords_do_not_match: "Passwords do not match",
                        please_enter_fieldname: "Please enter %fieldname",
                        this_field_is_required: "This field is required",
                        invalid_fieldname: "Invalid %fieldname",
                        very_strong: "Very strong",
                        strong: "Strong",
                        fair: "Fair",
                        weak: "Weak",
                        password_strength_colon: "Password strength:",
                        not_available: "Not available",
                        available: "Available",
                        network_error: "Network error, please try again later.",
                        profilePhoto_fileSizeError: "Photo format: JPG/GIF/PNG. Size: up to 3MB.",
                        subscription_pending_confirmation: "Pending Confirmation",
                        login_captcha_error: "To login, confirm you are not a robot",
                        register_captcha_error: "To register, confirm you are not a robot",
                        phone_number_exists: "This phone number already exists",
                        please_enter_a_valid_code: "Please enter a valid code",
                        invalid_password_reset_token: "Uh-oh, your link is not valid. Restart the reset password flow to get a new link. ",
                        otp_code_expired: "Code has expired. Resend a new code.",
                        invalid_login_identifier: "Invalid login identifier",
                        code_frequency_limit_reached: "Send limit reached. Please try again in a few minutes",
                        forbidden_error: "Too many requests: please wait before you try again",
                        request_captcha_error: "To continue, confirm you are not a robot",
                        unauthorized_user: "Unauthorized user",
                        permission_denied: "Permission denied",
                        account_pending_registration: "Account Pending Registration",
                        phone_not_verified: "Number must be verified",
                        phone_not_verified_enter_code: "Verification has not been completed. Please enter a valid code.",
                        sms_subscription_error: "To subscribe, please provide a verified phone number",
                        device_code_incorrect: "Device code incorrect, Please re-enter your device code",
                        not_supported: "Operation not supported",
                        passkey_authenticator_already_registered: "Passkey already exists on the device",
                        operation_canceled: "The request was canceled by the user or timed out",
                        invalid_site_configuration: "Invalid site configuration",
                        passkey_authenticator_error: "Something went wrong",
                        passkey_register_success: "Passkey register successfully",
                        general_error: "Something went wrong, please try again later",
                        no_data_available: "No Data Available",
                        missing_dqm_credentials: "Missing user credentials. Please ensure that you have configured your site's SAP DQM correctly.",
                        dqm_general_error: "There was an unknown error at the Provider. Please try again later.",
                        dqm_selection_error: "You must choose an address from the list of available options.",
                        organization_context_saved: "Organization context was successfully updated",
                        subscription_missing_dependson_fields: "To subscribe, please provide the missing required field(s)",
                        device_limit_reached: "You cannot add any more authenticators to your account.",
                        tfa_registration_expired: "Rescan the QR code or enter the secret again.",
                        please_try_again_later: "Please try again later.",
                        user_enable_2fa_error: "Enabling 2-Factor Authentication failed. Please try again.",
                        user_enable_2fa_success: "You enabled 2-Factor Authentication successfully",
                        custom_identifier_already_exists: "Custom identifier already exists: %fieldname"
                    }
                }
            },
            __screenSetPluginCache: {}
        },
        resolver: {}
    },
    _currColorIdx: 0,
    configKey: "gig_loggerConfig"
};
export const events = {
    global: {
        _activeNamespaces: {
            socialize: 1
        }
    }
};
export const log = {
    CONSOLE_LOG_LEVELS: [
        "debug",
        "info",
        "log",
        "warn",
        "error"
    ],
    selectedConsoleLogLevels: [],
    _log: []
};
export const legacyReports = {};
interface fidm  {
      oidc: {
        op: {
            deviceContinue: APIMap["accounts.auth.getMethods"],
            getContextData: APIMap["fidm.oidc.op.getContextData"]
        }
    }
}
const fid:fidm;
fid.oidc.op.deviceContinue({ identifier:"ss", aa:"ss" })
export const globalAccount = {};
export const GSErrors = {
    0: "OK",
    100001: "DATA_PENDING",
    200001: "OPERATION_CANCELED",
    200002: "PERMISSION_GRANTED",
    200003: "PERMISSION_NOT_GRANTED",
    200004: "REDIRECT",
    200005: "NEW_USER",
    200006: "OPERATION_DONE",
    200007: "UPDATE_USER",
    200008: "OK_WITH_ERRORS",
    200009: "ACCOUNTS_LINKED",
    200010: "OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS",
    206001: "ACCOUNT_PENDING_REGISTRATION",
    206002: "ACCOUNT_PENDING_VERIFICATION",
    206003: "ACCOUNT_MISSING_LOGINID",
    206004: "IDENTITY_ALREADY_ASSIGNED",
    206005: "AFTER_EMAIL_VERIFICATION",
    206006: "PENDING_CODE_VERIFICATION",
    300001: "CLIENT_LOG",
    301001: "INVALID_DATA_CENTER",
    400001: "INVALID_REQUEST_FORMAT",
    400002: "MISSING_REQUIRED_PARAMETER",
    400003: "UNIQUE_IDENTIFIER_EXISTS",
    400004: "INVALID_PARAMETER_FORMAT",
    400006: "INVALID_PARAMETER_VALUE",
    400007: "DUPLICATE_VALUE",
    400008: "INVALID_AUTHENTICATION_HEADER",
    400009: "VALIDATION_ERROR",
    400011: "INVALID_REDIRECT_URI",
    400012: "INVALID_RESPONSE_TYPE",
    400013: "UNSUPPORTED_GRANT_TYPE",
    400014: "INVALID_GRANT",
    400015: "CODE_EXPIRED",
    400020: "SCHEMA_VALIDATION_FAILED",
    400021: "CAPTCHA_VERIFICATION_FAILED",
    400022: "UNIQUE_INDEX_VALIDATION_ERROR",
    400023: "INVALID_TYPE_VALIDATION_ERROR",
    400024: "DYNAMIC_FIELDS_VALIDATION_ERROR",
    400025: "WRITE_ACCESS_VALIDATION_ERROR",
    400026: "INVALID_FORMAT_VALIDATION_ERROR",
    400027: "REQUIRED_VALUE_VALIDATION_ERROR",
    400028: "EMAIL_NOT_VERIFIED",
    400029: "SCHEMA_CONFLICT_ERROR",
    400030: "OPERATION_NOT_ALLOWED",
    400050: "SECURITY_VERIFICATION_FAILED",
    400093: "INVALID_APIKEY_PARAMETER",
    400096: "NOT_SUPPORTED",
    400097: "UNSUPPORTED_USER_AGENT",
    400100: "NO_PROVIDERS",
    400101: "POPUP_BLOCKED",
    400102: "INVALID_EVENT_HANDLER",
    400103: "INVALID_CONTAINERID",
    400106: "NOT_CONNECTED",
    400120: "INVALID_SITE_DOMAIN",
    400122: "PROVIDER_CONFIGURATION_ERROR",
    400124: "LIMIT_REACHED",
    400125: "FREQUENCY_LIMIT_REACHED",
    400126: "INVALID_ACTION",
    400127: "INSUFFICIENT_POINTS_TO_REDEEM",
    400128: "SIGNATURE_TIMESTAMP_EXPIRED",
    400130: "PASSKEY_AUTHENTICATOR_REGISTERED",
    400131: "PASSKEY_ABORTED",
    400302: "Error_During_Extensions_Operation",
    400303: "Extension_Point_Custom_Error",
    401000: "INVALID_POLICY_CONFIGURATION",
    401001: "MEDIA_ITEMS_NOT_SUPPORTED",
    401010: "SUSPECTED_SPAM",
    401020: "LOGIN_FAILED_CAPTCHA_REQUIRED",
    401021: "LOGIN_FAILED_WRONG_CAPTCHA",
    401023: "REQUEST_FAILED_CAPTCHA_REQUIRED",
    401030: "OLD_PASSWORD_USED",
    403000: "FORBIDDEN",
    403001: "INVALID_SESSION_TOKEN",
    403002: "REQUEST_HAS_EXPIRED",
    403003: "INVALID_REQUEST_SIGNATURE",
    403004: "DUPLICATE_NONCE",
    403005: "UNAUTHORIZED_USER",
    403006: "SENSITIVE_DATA_SENT_OVER_HTTP",
    403007: "PERMISSION_DENIED",
    403008: "INVALID_OPENID_URL",
    403009: "PROVIDER_SESSION_EXPIRED",
    403010: "INVALID_SECRET",
    403011: "SESSION_HAS_EXPIRED",
    403012: "NO_VALID_SESSION",
    403013: "UNVERIFIED_USER",
    403015: "MISSING_REQUEST_REFERRER",
    403017: "UNEXPECTED_PROVIDER_USER",
    403022: "PERMISSION_NOT_REQUESTED",
    403023: "NO_USER_PERMISSION",
    403024: "PROVIDER_LIMIT_REACHED",
    403025: "INVALID_TOKEN",
    403026: "UNAUTHORIZED_ACCESS_ERROR",
    403027: "DIFFERENT_USER_FOR_REAUTH",
    403030: "SESSION_EXPIRED_RETRY",
    403031: "APPROVED_BY_MODERATOR",
    403032: "TOKEN_HAS_RENEWED",
    403035: "NO_USER_COOKIE",
    403036: "UNAUTHORIZED_PARTNER",
    403037: "POST_DENIED",
    403040: "NO_LOGIN_TICKET",
    403041: "ACCOUNT_DISABLED",
    403042: "INVALID_LOGINID",
    403043: "LOGIN_IDENTIFIER_EXISTS",
    403044: "UNDERAGE_USER",
    403045: "INVALID_SITE_CONFIGURATION_ERROR",
    403047: "LOGINID_DOES_NOT_EXIST",
    403048: "API_RATE_LIMIT_EXCEEDED",
    403100: "PENDING_PASSWORD_CHANGE",
    403101: "ACCOUNT_PENDING_TFA_VERIFICATION",
    403102: "ACCOUNT_PENDING_TFA_REGISTRATION",
    403110: "ACCOUNT_PENDING_RECENT_LOGIN",
    403120: "ACCOUNT_TEMPORARILY_LOCKED_OUT",
    403200: "REDUNDANT_OPERATION",
    403201: "INVALID_APPLICATION_ID",
    403300: "THIS_AUTHENTICATION_METHOD_IS_CURRENTLY_DISABLED",
    404000: "NOT_FOUND",
    404001: "FRIEND_NOT_FOUND",
    404002: "CATEGORY_NOT_FOUND",
    404003: "UID_NOT_FOUND",
    404004: "INVALID_URL",
    405001: "INVALID_API_METHOD",
    409001: "IDENTITY_EXISTS",
    409003: "FORCE_LINK_LOGIN_IDENTIFIER_EXISTS",
    409010: "MISSING_USER_PHOTO",
    409011: "COUNTER_NOT_REGISTERED",
    409012: "INVALID_GMID_TICKET",
    409013: "SAML_MAPPED_ATTRIBUTE_NOT_FOUND",
    409014: "SAML_CERTIFICATE_NOT_FOUND",
    409015: "SAML_MESSAGE_NOT_FOUND",
    410000: "GONE",
    413001: "REQUEST_ENTITY_TOO_LARGE",
    413002: "COMMENT_TEXT_TOO_LARGE",
    413003: "OBJECT_TOO_LARGE",
    413004: "PROFILE_PHOTO_TOO_LARGE",
    414000: "REQUEST_URI_TOO_LONG",
    500001: "GENERAL_SERVER_ERROR",
    500002: "SERVER_LOGIN_ERROR",
    500003: "DEFAULT_APPLICATION_CONFIGURATION_ERROR",
    500014: "SESSION_MIGRATION_ERROR",
    500023: "PROVIDER_ERROR",
    500026: "NETWORK_ERROR",
    500028: "DATABASE_ERROR",
    500029: "USERNAME_REQUIRED",
    500031: "NO_PROVIDER_APPLICATION",
    500032: "LOAD_FAILED",
    500033: "INVALID_ENVIRONMENT_CONFIG",
    500034: "ERROR_DURING_BACKEND_OPERATION",
    500131: "PASSKEY_ERROR",
    504001: "TIMEOUT",
    504002: "CLIENTTIMEOUT",
    599999: "MISSING_ERROR_CODE",
    OK: 0,
    Data_Pending: 100001,
    NETWORK_ERROR: 500026,
    DATA_PENDING: 100001,
    OPERATION_CANCELED: 200001,
    PERMISSION_GRANTED: 200002,
    PERMISSION_NOT_GRANTED: 200003,
    REDIRECT: 200004,
    NEW_USER: 200005,
    OPERATION_DONE: 200006,
    UPDATE_USER: 200007,
    OK_WITH_ERRORS: 200008,
    ACCOUNTS_LINKED: 200009,
    OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS: 200010,
    ACCOUNT_PENDING_REGISTRATION: 206001,
    ACCOUNT_PENDING_VERIFICATION: 206002,
    ACCOUNT_MISSING_LOGINID: 206003,
    IDENTITY_ALREADY_ASSIGNED: 206004,
    AFTER_EMAIL_VERIFICATION: 206005,
    PENDING_CODE_VERIFICATION: 206006,
    CLIENT_LOG: 300001,
    INVALID_DATA_CENTER: 301001,
    INVALID_REQUEST_FORMAT: 400001,
    MISSING_REQUIRED_PARAMETER: 400002,
    UNIQUE_IDENTIFIER_EXISTS: 400003,
    INVALID_PARAMETER_FORMAT: 400004,
    INVALID_PARAMETER_VALUE: 400006,
    DUPLICATE_VALUE: 400007,
    INVALID_AUTHENTICATION_HEADER: 400008,
    VALIDATION_ERROR: 400009,
    INVALID_REDIRECT_URI: 400011,
    INVALID_RESPONSE_TYPE: 400012,
    UNSUPPORTED_GRANT_TYPE: 400013,
    INVALID_GRANT: 400014,
    CODE_EXPIRED: 400015,
    SCHEMA_VALIDATION_FAILED: 400020,
    CAPTCHA_VERIFICATION_FAILED: 400021,
    UNIQUE_INDEX_VALIDATION_ERROR: 400022,
    INVALID_TYPE_VALIDATION_ERROR: 400023,
    DYNAMIC_FIELDS_VALIDATION_ERROR: 400024,
    WRITE_ACCESS_VALIDATION_ERROR: 400025,
    INVALID_FORMAT_VALIDATION_ERROR: 400026,
    REQUIRED_VALUE_VALIDATION_ERROR: 400027,
    EMAIL_NOT_VERIFIED: 400028,
    SCHEMA_CONFLICT_ERROR: 400029,
    OPERATION_NOT_ALLOWED: 400030,
    SECURITY_VERIFICATION_FAILED: 400050,
    INVALID_APIKEY_PARAMETER: 400093,
    NOT_SUPPORTED: 400096,
    UNSUPPORTED_USER_AGENT: 400097,
    NO_PROVIDERS: 400100,
    POPUP_BLOCKED: 400101,
    INVALID_EVENT_HANDLER: 400102,
    INVALID_CONTAINERID: 400103,
    NOT_CONNECTED: 400106,
    INVALID_SITE_DOMAIN: 400120,
    PROVIDER_CONFIGURATION_ERROR: 400122,
    LIMIT_REACHED: 400124,
    FREQUENCY_LIMIT_REACHED: 400125,
    INVALID_ACTION: 400126,
    INSUFFICIENT_POINTS_TO_REDEEM: 400127,
    SIGNATURE_TIMESTAMP_EXPIRED: 400128,
    Error_During_Extensions_Operation: 400302,
    Extension_Point_Custom_Error: 400303,
    INVALID_POLICY_CONFIGURATION: 401000,
    SUSPECTED_SPAM: 401010,
    LOGIN_FAILED_CAPTCHA_REQUIRED: 401020,
    REQUEST_FAILED_CAPTCHA_REQUIRED: 401023,
    LOGIN_FAILED_WRONG_CAPTCHA: 401021,
    OLD_PASSWORD_USED: 401030,
    FORBIDDEN: 403000,
    INVALID_SESSION_TOKEN: 403001,
    REQUEST_HAS_EXPIRED: 403002,
    INVALID_REQUEST_SIGNATURE: 403003,
    DUPLICATE_NONCE: 403004,
    UNAUTHORIZED_USER: 403005,
    SENSITIVE_DATA_SENT_OVER_HTTP: 403006,
    PERMISSION_DENIED: 403007,
    INVALID_OPENID_URL: 403008,
    PROVIDER_SESSION_EXPIRED: 403009,
    INVALID_SECRET: 403010,
    SESSION_HAS_EXPIRED: 403011,
    NO_VALID_SESSION: 403012,
    UNVERIFIED_USER: 403013,
    MISSING_REQUEST_REFERRER: 403015,
    UNEXPECTED_PROVIDER_USER: 403017,
    PERMISSION_NOT_REQUESTED: 403022,
    NO_USER_PERMISSION: 403023,
    PROVIDER_LIMIT_REACHED: 403024,
    INVALID_TOKEN: 403025,
    UNAUTHORIZED_ACCESS_ERROR: 403026,
    DIFFERENT_USER_FOR_REAUTH: 403027,
    SESSION_EXPIRED_RETRY: 403030,
    APPROVED_BY_MODERATOR: 403031,
    TOKEN_HAS_RENEWED: 403032,
    NO_USER_COOKIE: 403035,
    UNAUTHORIZED_PARTNER: 403036,
    POST_DENIED: 403037,
    NO_LOGIN_TICKET: 403040,
    ACCOUNT_DISABLED: 403041,
    INVALID_LOGINID: 403042,
    LOGIN_IDENTIFIER_EXISTS: 403043,
    UNDERAGE_USER: 403044,
    INVALID_SITE_CONFIGURATION_ERROR: 403045,
    LOGINID_DOES_NOT_EXIST: 403047,
    API_RATE_LIMIT_EXCEEDED: 403048,
    PENDING_PASSWORD_CHANGE: 403100,
    ACCOUNT_PENDING_TFA_VERIFICATION: 403101,
    ACCOUNT_PENDING_TFA_REGISTRATION: 403102,
    ACCOUNT_PENDING_RECENT_LOGIN: 403110,
    ACCOUNT_TEMPORARILY_LOCKED_OUT: 403120,
    REDUNDANT_OPERATION: 403200,
    INVALID_APPLICATION_ID: 403201,
    NOT_FOUND: 404000,
    FRIEND_NOT_FOUND: 404001,
    CATEGORY_NOT_FOUND: 404002,
    UID_NOT_FOUND: 404003,
    RESOURCE_NOT_FOUND: 404004,
    INVALID_API_METHOD: 405001,
    IDENTITY_EXISTS: 409001,
    GONE: 410000,
    REQUEST_ENTITY_TOO_LARGE: 413001,
    COMMENT_TEXT_TOO_LARGE: 413002,
    OBJECT_TOO_LARGE: 413003,
    PROFILE_PHOTO_TOO_LARGE: 413004,
    REQUEST_URI_TOO_LONG: 414000,
    MISSING_USER_PHOTO: 409010,
    COUNTER_NOT_REGISTERED: 409011,
    INVALID_GMID_TICKET: 409012,
    SAML_MAPPED_ATTRIBUTE_NOT_FOUND: 409013,
    SAML_CERTIFICATE_NOT_FOUND: 409014,
    SAML_MESSAGE_NOT_FOUND: 409015,
    GENERAL_SERVER_ERROR: 500001,
    SERVER_LOGIN_ERROR: 500002,
    DEFAULT_APPLICATION_CONFIGURATION_ERROR: 500003,
    SESSION_MIGRATION_ERROR: 500014,
    PROVIDER_ERROR: 500023,
    DATABASE_ERROR: 500028,
    USERNAME_REQUIRED: 500029,
    NO_PROVIDER_APPLICATION: 500031,
    LOAD_FAILED: 500032,
    INVALID_ENVIRONMENT_CONFIG: 500033,
    ERROR_DURING_BACKEND_OPERATION: 500034,
    TIMEOUT: 504001,
    CLIENTTIMEOUT: 504002,
    INVALID_URL: 404004,
    MEDIA_ITEMS_NOT_SUPPORTED: 401001,
    MISSING_ERROR_CODE: 599999,
    THIS_AUTHENTICATION_METHOD_IS_CURRENTLY_DISABLED: 403300,
    FORCE_LINK_LOGIN_IDENTIFIER_EXISTS: 409003,
    PASSKEY_AUTHENTICATOR_REGISTERED: 400130,
    PASSKEY_ABORTED: 400131,
    PASSKEY_ERROR: 500131
};
export const GSErrorDetails = {
    0: "None",
    100001: "Same_password",
    100002: "Invalid_password",
    100003: "Invalid_counters_query_with_cursor",
    None: 0,
    Same_password: 100001,
    Invalid_password: 100002,
    Invalid_counters_query_with_cursor: 100003
};
export const localInfo = {
    baseDomain: "local.pyzlo.in",
    isBrowserSupportsFilesAPI: true,
    initTime: "2023-12-12T11:55:43.787Z",
    version: 0,
    pageDomain: "local.pyzlo.in",
    protocol: "https",
    userAgent: "mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/119.0.0.0 safari/537.36",
    isWin: false,
    isIE: false,
    isIE6: false,
    isIE7: false,
    isIE8: false,
    isIE9: false,
    isIE10: false,
    isIE11: false,
    isEdgeLegacy: false,
    isEdge: false,
    isIOS: false,
    isSafari534: false,
    isWeChat: false,
    iosVersion: 0,
    isAndroid: false,
    isAndroidBrowser: false,
    currentBrowser: "mac chrome",
    androidVersion: 0,
    isChrome: true,
    isGoogleBot: false,
    isFF: false,
    isOpera: false,
    isSafari: false,
    isIOSWebView: false,
    isIOSChrome: false,
    isMAC: true,
    isWindowsPhone: false,
    isFacebookBrowser: false,
    supportsPostMessage: true,
    supportsLocalStorage: true,
    supportsSessionStorage: true,
    supportsFlash: false,
    quirksMode: false,
    backCompat: false,
    isMobile: false,
    isMobileApp: true,
    isNativeMobileApp: false,
    isTouch: false,
    messagingMethod: 1
};
export const defaultEventMaps = {
    0: {
        id: "screen-set-report-events-map",
        eventMap: [
            {
                events: "afterScreenLoad,submit",
                args: [
                    function (e1) {
                        return e1;
                    }
                ]
            }
        ]
    }
};
export const oauth = {
    register: ApiMap["oauth.register"],
    ApiMap["oauth.connect"],
    ApiMap["oauth.disconnect"],
    ApiMap["oauth.authorize"],
    ApiMap["oauth.token"]
};
oauth.register({
    h
})
export const auth = {
    token: {
        ApiMap["auth.token.authenticationContext"]
    }
};
export const ds = {
    ApiMap["ds.store"],
    ApiMap["ds.get"],
    ApiMap["ds.search"],
    ApiMap["ds.getSchema"],
    ApiMap["ds.delete"]
};
export const ids = {
    ApiMap["ids.getAccountInfo"],
    ApiMap["ids.setAccountInfo"],
    ApiMap["ids.search"]
};
export const external = {
    facebook: {
        isLoggedIn: false,
        isConnected: false
    },
    googlePlus: {},
    opengraph: {}
};
export const thisScript = {
    scriptElement: {},
    protocol: "https",
    baseDomain: "cdns.gigya.com",
    APIKey: "4_aeFS_UyzRnmP5k_MI59ejg",
    lang: {
        full: "en-US",
        langCode: "en",
        countryCode: "US",
        originalLang: "en"
    },
    globalConf: {
        connectWithoutLoginBehavior: "alwaysLogin",
        defaultRegScreenSet: "Default-RegistrationLogin",
        defaultMobileRegScreenSet: "Default-RegistrationLogin",
        sessionExpiration: 0,
        rememberSessionExpiration: 0,
        apiDomain: "eu1.gigya.com",
        workflow: {
            path: "workflow/resources/js/entryPoint.js"
        },
        lang: "en",
        APIKey: "4_aeFS_UyzRnmP5k_MI59ejg"
    },
    URLParams: {
        apikey: "4_aeFS_UyzRnmP5k_MI59ejg",
        pretty: "true",
        debug: "true",
        dbg: "1"
    }
};
export const global = {
    date: {},
    XMLUtils: {}
};
export const pluginUtils = {
    css: {},
    lang: {},
    animation: {},
    DOM: {},
    layout: {},
    text: {},
    validation: {},
    domain: {}
};
export const i18n = {
    "gigya.services.accounts.plugins.screenSet.js": {
        en: {
            login_identifier_exists: "Login identifier exists",
            unique_identifier_exists: "Unique identifier exists",
            account_temporarily_locked_out: "Account temporarily locked out",
            wrong_password: "Wrong password",
            old_password_cannot_be_the_same_as_new_password: "You've already used that password. Please create a new one.",
            old_password_used: "It seems like you're trying to log in with a password that was changed. If you don't remember the new one, reset your password.",
            choose_file: "Choose File",
            no_file_chosen: "No file chosen",
            "maximum_size_of_3mb.": "Maximum size of 3MB.",
            there_are_errors_in_your_form_please_try_again: "There are errors in your form, please try again",
            sorry_we_are_not_able_to_process_your_registration: "Sorry, we are not able to process your registration",
            invalid_login_or_password: "Invalid login or password",
            account_is_disabled: "Account is disabled",
            email_already_exists: "Email already exists",
            there_is_no_user_with_that_username_or_email: "There is no user with that username or email",
            password_must_contain_at_least: "Password must contain at least",
            and: "and",
            num_of_the_following_groups: "%num of the following: An uppercase letter, a lowercase letter, a number, a special symbol",
            num_characters_total: "%num characters",
            too_weak: "Too weak",
            checking: "Checking",
            email_address_is_invalid: "E-mail address is invalid.",
            password_does_not_meet_complexity_requirements: "Password does not meet complexity requirements",
            username_already_exists: "Username already exists",
            passwords_do_not_match: "Passwords do not match",
            please_enter_fieldname: "Please enter %fieldname",
            this_field_is_required: "This field is required",
            invalid_fieldname: "Invalid %fieldname",
            very_strong: "Very strong",
            strong: "Strong",
            fair: "Fair",
            weak: "Weak",
            password_strength_colon: "Password strength:",
            not_available: "Not available",
            available: "Available",
            network_error: "Network error, please try again later.",
            profilePhoto_fileSizeError: "Photo format: JPG/GIF/PNG. Size: up to 3MB.",
            subscription_pending_confirmation: "Pending Confirmation",
            login_captcha_error: "To login, confirm you are not a robot",
            register_captcha_error: "To register, confirm you are not a robot",
            phone_number_exists: "This phone number already exists",
            please_enter_a_valid_code: "Please enter a valid code",
            invalid_password_reset_token: "Uh-oh, your link is not valid. Restart the reset password flow to get a new link. ",
            otp_code_expired: "Code has expired. Resend a new code.",
            invalid_login_identifier: "Invalid login identifier",
            code_frequency_limit_reached: "Send limit reached. Please try again in a few minutes",
            forbidden_error: "Too many requests: please wait before you try again",
            request_captcha_error: "To continue, confirm you are not a robot",
            unauthorized_user: "Unauthorized user",
            permission_denied: "Permission denied",
            account_pending_registration: "Account Pending Registration",
            phone_not_verified: "Number must be verified",
            phone_not_verified_enter_code: "Verification has not been completed. Please enter a valid code.",
            sms_subscription_error: "To subscribe, please provide a verified phone number",
            device_code_incorrect: "Device code incorrect, Please re-enter your device code",
            not_supported: "Operation not supported",
            passkey_authenticator_already_registered: "Passkey already exists on the device",
            operation_canceled: "The request was canceled by the user or timed out",
            invalid_site_configuration: "Invalid site configuration",
            passkey_authenticator_error: "Something went wrong",
            passkey_register_success: "Passkey register successfully",
            general_error: "Something went wrong, please try again later",
            no_data_available: "No Data Available",
            missing_dqm_credentials: "Missing user credentials. Please ensure that you have configured your site's SAP DQM correctly.",
            dqm_general_error: "There was an unknown error at the Provider. Please try again later.",
            dqm_selection_error: "You must choose an address from the list of available options.",
            organization_context_saved: "Organization context was successfully updated",
            subscription_missing_dependson_fields: "To subscribe, please provide the missing required field(s)",
            device_limit_reached: "You cannot add any more authenticators to your account.",
            tfa_registration_expired: "Rescan the QR code or enter the secret again.",
            please_try_again_later: "Please try again later.",
            user_enable_2fa_error: "Enabling 2-Factor Authentication failed. Please try again.",
            user_enable_2fa_success: "You enabled 2-Factor Authentication successfully",
            custom_identifier_already_exists: "Custom identifier already exists: %fieldname"
        }
    }
};
export const isGigya = true;
export const apiKey = "4_aeFS_UyzRnmP5k_MI59ejg";
export const defaultApiDomain = "gigya.com";
export const dataCenter = "eu1";
export const gmidVersion = "ver4";
export const bypassCaptchaV1 = true;
export const __initialized = true;
export const isReady = false;
function setAccountResidency() { }
function setGroupContext() { }
function setSSOToken() { }
function syncGroupGltExp() { }
function hasSession() { }
function Request() { }
function XhrRequest() { }
function Promise() { }
function debug() { }
function getLoginToken() { }
function updateConfiguration() { }
function getUrlParam() { }
function ClientFeature() { }
function flow() { }
function showDebugUI() { }
