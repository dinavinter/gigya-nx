export const build = {
    number: 15617,
    version: "latest"
};
export const partnerSettings = {
    authMode: "cookie",
    captchaProvider: "Google",
    plugins: {
        connectWithoutLoginBehavior: "alwaysLogin",
        defaultRegScreenSet: "Default-RegistrationLogin",
        defaultMobileRegScreenSet: "Default-RegistrationLogin",
        sessionExpiration: 0,
        rememberSessionExpiration: 0,
        apiDomain: "gigya.local.pyzlo.in",
        workflow: {
            path: "workflow/resources/js/entryPoint.js"
        }
    },
    baseDomains: "local.pyzlo.in",
    customAPIDomainPrefix: "gigya"
};
export const providersConfig = {};
export const samlConfig = {
    errorPageURL: null,
    proxyPageURL: null
};
export const canary = {
    isActive: false,
    config: {
        version: "15622-3-28364565",
        isEnabled: true,
        probability: 3,
        cookiesNames: {
            isCanary: "gig_canary",
            version: "gig_canary_ver"
        }
    },
    Canary: function Canary1(f, p, h, v, w, m) {
        if (h === void 0) {
            h = new CookieProvider_1.CookieProvider();
        }
        if (v === void 0) {
            v = f.cookiesNames;
        }
        if (w === void 0) {
            w = function() {
                return new XMLHttpRequest();
            };
        }
        if (m === void 0) {
            m = function() {
                return Math.random() * 100;
            };
        }
        this._config = f;
        this._scriptUrl = p;
        this._cookieProvider = h;
        this._cookiesNames = v;
        this._xhrFactory = w;
        this._random = m;
    }
};
export const errorReport = {
    enabled: true,
    probability: 1
};
export const sso = {
    getContext: function getSsoContext1(f) {
        var p;
        f === null || f === void 0 ? void 0 : f.callback(((p = _.sso) === null || p === void 0 ? void 0 : p.context) || {});
    },
    login: function ssoLogin1(f) {
        if (f === void 0) {
            f = {};
        }
        if (!verifySiteConfiguration()) {
            return;
        }
        if (!utils.toggles.isOn("keepSessionOnSSOLogin")) {
            TokenStore_1.remove();
        }
        accounts.sso.login(f);
    },
    continue: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        utils.queue.queueForExecution("API", centralizedSSO_1.continueSso, f);
    }
};
export const services = {
    proxy: {
        utils: {
            getParentUrl: function(f, p) {
                if (f === void 0) {
                    f = window;
                }
                if (p === void 0) {
                    p = document;
                }
                return f.location != f.parent.location ? p.referrer : p.location.href;
            },
            getBodyElement: function(f) {
                if (f === void 0) {
                    f = document;
                }
                return new gigya.Promise(function(p) {
                    if (f.body) p(f.body);
                    else f.addEventListener("DOMContentLoaded", function() {
                        return p(f.body);
                    });
                });
            },
            validateOrigin: function(f, p) {
                var h;
                return ((h = f === null || f === void 0 ? void 0 : f.toLowerCase()) === null || h === void 0 ? void 0 : h.indexOf(p === null || p === void 0 ? void 0 : p.toLowerCase())) === 0;
            },
            createIframe: function(f, p) {
                if (f === void 0) {
                    f = "Gigya Frame";
                }
                if (p === void 0) {
                    p = document;
                }
                var h = p.createElement("iframe");
                h.style.position = "absolute";
                h.style.height = "0px";
                h.style.width = "0px";
                h.style.display = "none";
                h.title = f;
                h.setAttribute("aria-hidden", "true");
                return h;
            },
            generateId: function() {
                return String(_counter++);
            },
            getAllClassMethodsNames: function(f) {
                var p = [];
                var h = isClass(f) ? f.prototype : f;
                do {
                    try {
                        var v = Object.getOwnPropertyNames(h).map(function(f) {
                            return f.toString();
                        }).sort().filter(function(f, v, w) {
                            return typeof h[f] === "function" && f !== "constructor" && (v == 0 || f !== w[v - 1]) && p.indexOf(f) === -1;
                        });
                        p = p.concat(v);
                    } catch (f) {
                        var w = Object.getOwnPropertyNames(h).map(function(f) {
                            return f.toString();
                        }).sort();
                        var v = [];
                        for(var m = 0; m < w.length; m++){
                            var b = w[m];
                            if (typeof h[b] === "function" && b !== "constructor" && (m == 0 || b !== w[m - 1]) && p.indexOf(b) === -1) {
                                v.push(b);
                            }
                        }
                        p = p.concat(v);
                    }
                }while ((h = Object.getPrototypeOf(h)) && Object.getPrototypeOf(h));
                return p;
            }
        },
        isSignalRequest: function isSignalRequest1(f) {
            return Boolean(f.signal);
        },
        ProxyListener: function ProxyListener1(f, p, h, v, w) {
            var m = this;
            if (p === void 0) {
                p = utils.getParentUrl();
            }
            if (h === void 0) {
                h = utils.getAllClassMethodsNames(f);
            }
            if (v === void 0) {
                v = window.parent;
            }
            if (w === void 0) {
                w = window;
            }
            this._service = f;
            this.origin = p;
            this._allowedMethods = h;
            this._target = v;
            this._win = w;
            this.stopCancellers = [];
            this._listening = false;
            this.onRequest = function(f) {
                return tslib_1.__awaiter(m, void 0, gigya.Promise, function() {
                    var p, h;
                    return tslib_1.__generator(this, function(v) {
                        switch(v.label){
                            case 0:
                                if (!utils.validateOrigin(this.origin, f.origin)) return [
                                    3,
                                    7
                                ];
                                p = JSON.parse(f.data);
                                v.label = 1;
                            case 1:
                                v.trys.push([
                                    1,
                                    6,
                                    ,
                                    7
                                ]);
                                if (!interfaces_1.isSignalRequest(p)) return [
                                    3,
                                    3
                                ];
                                return [
                                    4,
                                    this.handleSignalRequest(p)
                                ];
                            case 2:
                                v.sent();
                                return [
                                    3,
                                    5
                                ];
                            case 3:
                                return [
                                    4,
                                    this.handleProxyRequest(p)
                                ];
                            case 4:
                                v.sent();
                                v.label = 5;
                            case 5:
                                return [
                                    3,
                                    7
                                ];
                            case 6:
                                h = v.sent();
                                this.postError({
                                    res: h.message || h,
                                    id: p.id
                                });
                                return [
                                    3,
                                    7
                                ];
                            case 7:
                                return [
                                    2
                                ];
                        }
                    });
                });
            };
        },
        ServiceProxy: function ServiceProxy1(f, p, h, v, w, m) {
            var b = this;
            if (p === void 0) {
                p = 60000;
            }
            if (h === void 0) {
                h = utils.generateId;
            }
            if (v === void 0) {
                v = utils.createIframe;
            }
            if (w === void 0) {
                w = function() {
                    return new gigya.Promise(function(f) {
                        if (document.body) f(document.body);
                        else document.addEventListener("DOMContentLoaded", function() {
                            return f(document.body);
                        });
                    });
                };
            }
            if (m === void 0) {
                m = window;
            }
            this.url = f;
            this.timeout = p;
            this._idCreator = h;
            this._iframeCreator = v;
            this.getIframeHost = w;
            this._win = m;
            this._pendingReqs = [];
            this._mutationObservers = [];
            this.onResponse = function(f) {
                var p = utils.JSON.parse(f.data);
                if (p && b._pendingReqs[p.id] && b.validateOrigin(f.origin)) {
                    b._pendingReqs[p.id](p);
                    delete b._pendingReqs[p.id];
                }
            };
        }
    },
    TokenKeys: {
        GMID: "gig_gmid",
        UCID: "gig_ucid",
        GMID_TICKET: "gmidTicket",
        GMID_TICKET_EXPIRATION_TIME: "gmidTicketExpiration"
    },
    ApiService: function ApiService1(f, p, h, v, w, m) {
        if (v === void 0) {
            v = new GroupApiDomainService_1.GroupApiDomainService();
        }
        if (w === void 0) {
            w = new RequestProvider_1.RequestProvider();
        }
        this._apiKey = f;
        this._hasGmid = p;
        this._domainResolver = h;
        this._groupApiDomainService = v;
        this._requestProvider = w;
        this.didFallback = false;
        if (m) {
            this._storage = m;
        }
    },
    GroupApiDomainService: function GroupApiDomainService1(f, p, h) {
        if (f === void 0) {
            f = partnerSettings.ssoKey;
        }
        if (p === void 0) {
            p = utils.localStorage.initializeAdapter(utils.localStorage.CookieStorageAdapter);
        }
        if (h === void 0) {
            h = LocalInfo_1.localInfo.pageDomain;
        }
        this._ssoKey = f;
        this._storage = p;
        this._pageDomain = h;
        this._cookieName = GroupApiDomainKey + "_" + this._ssoKey;
    },
    RequestType: {
        GET: "GET",
        POST: "POST"
    },
    AccountService: function AccountService1() {},
    accountService: {},
    SiteDataService: function SiteDataService1() {},
    siteData: {},
    socialize: {
        getAllProviders: function getAllProviders1() {
            return exports.arProviders.concat();
        },
        replaceProviderAliases: function replaceProviderAliases1(f) {
            if (f == null) {
                return;
            }
            var p = f.split(",");
            for(var h = 0; h < p.length; h++){
                var v = p[h].replace(/^\s+|\s+$/g, "");
                if (exports._aliases[v]) {
                    p[h] = exports._aliases[v];
                }
            }
            return p.join(",");
        },
        getProvidersByName: function getProvidersByName1(f, p) {
            if (p === void 0) {
                p = exports.arProviders;
            }
            f = ("" + f).split(" ").join("").split(".").join("").toLowerCase();
            f = replaceProviderAliases(f);
            var h = ("" + f).split(",");
            h = replaceWildcard(h, p);
            var v = [];
            for(var w = 0; w < h.length; w++){
                var m = getProviderByName(h[w], p);
                if (m != null && arrayUtils.indexOf(v, m) == -1) {
                    v.push(m);
                }
            }
            return v;
        },
        _getProviderByName: function getProviderByName1(f, p) {
            if (p === void 0) {
                p = exports.arProviders;
            }
            for(var h = 0; h < p.length; h++){
                if (p[h].name.toLowerCase() === f.toLowerCase()) {
                    return p[h];
                }
            }
        },
        hideProvidersByName: function hideProvidersByName1(f, p, h) {
            if (p === void 0) {
                p = "";
            }
            if (h === void 0) {
                h = exports.arProviders;
            }
            p = p.toLowerCase();
            var v = p.split(" ").join("").split(".").join("").toLowerCase().split(",");
            v = replaceWildcard(v, h);
            for(var w = 0; w < v.length; w++){
                for(var m = 0; m < f.length; m++){
                    var b = f[m];
                    var y = b.name || b.toString();
                    if (y) {
                        y = y.toLowerCase();
                    }
                    if (y === v[w]) {
                        f.splice(m, 1);
                    }
                }
            }
            return f;
        },
        _getProviderByID: function getProviderById1(f, p) {
            if (p === void 0) {
                p = exports.arProviders;
            }
            for(var h = 0; h < p.length; h++){
                if (p[h].ID === f) {
                    return p[h];
                }
            }
        },
        getProvidersForRequiredCapabilities: function getProvidersForRequiredCapabilities1(f, p) {
            if (p == null) {
                p = [];
            }
            var h = [];
            for(var v = 0; v < f.length; v++){
                var w = f[v];
                var m = true;
                for(var b = 0; b < p.length; b++){
                    var y = false;
                    for(var S = 0; S < w.arDefaultCapabilities.length; S++){
                        if (w.arDefaultCapabilities[S].toLowerCase() == p[b].toLowerCase()) {
                            y = true;
                            break;
                        }
                    }
                    if (!y) {
                        m = false;
                        break;
                    }
                }
                if (m) {
                    h.push(w);
                }
            }
            return h;
        },
        updateRefUID: function updateRefUID1(f, p, h) {
            if (!f) f = thisScript.globalConf["APIKey"];
            if (!p) {
                p = {};
                if (document.location.href.indexOf("#") != -1) {
                    p = keyValueUtils.deserialize(document.location.href.split("#")[1]);
                }
            }
            if (!h) {
                h = {};
                if (document.location.href.indexOf("?") != -1) {
                    h = keyValueUtils.deserialize(document.location.href.split("?")[1].split("#")[0]);
                }
            }
            if (p["guid"] && p["guid"] != "_") {
                setGigRefUidCookie(f, p["guid"]);
            }
            var v = p["_giguuid"] || h["_giguuid"];
            if (v) {
                setGigRefUidCookie(f, v);
            }
        },
        hideUI: function() {
            var f = utils.object.merge([
                thisScript.globalConf,
                arguments
            ]);
            for(var p in o(!1), _.plugins.instances){
                var h = _.plugins.instances[p];
                h.isModal && h.dispose();
            }
            for(var v in utils.DOM._popupContainers){
                var w = utils.DOM._popupContainers[v];
                null != w && (w.innerHTML = "", w.parentNode && (w.style.display = "none"));
                var m = document.getElementById("gigya_ifr_" + v);
                null != m && (m.style.display = "none");
            }
            if (events.global.dispatch({
                eventName: "HideUIRequested"
            }), "function" == typeof f.callback) {
                var b = {
                    status: "OK",
                    statusMessage: "",
                    operation: "hideUI",
                    context: f.context,
                    errorMessage: "",
                    errorCode: 0
                };
                f.callback(b);
            }
        },
        getProviderShareCounts: function getProviderShareCounts1() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                thisScript.globalConf,
                f
            ]);
            scriptUtils.load(cdn_1.getCdnResource("/js/gigya.services.socialize.plugins.shareCounts.min.js"), null, function() {
                socialize.plugins.shareCounts.getProviderShareCounts(h);
            }, true);
        },
        addEventHandlers: function socializeAddEventHandlers1() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                thisScript.globalConf,
                f
            ]);
            var v = h["namespace"] ? h["namespace"] : "socialize";
            for(var w in h){
                if (w.indexOf("on") == 0) globalEvents.add(w, h[w], h["listenerType"], h["context"], v, h);
            }
            if (typeof h["callback"] == "function") {
                h["callback"]({
                    status: "OK",
                    statusMessage: "",
                    errorCode: 0,
                    errorMessage: "",
                    operation: "addEventHandlers",
                    context: h["context"]
                });
            }
        },
        isLoggedIn: function isLoggedIn1() {
            var f = objectUtils.merge([
                thisScript.globalConf,
                arguments
            ]);
            socialize.getUserInfo(f, {
                callback: function(p) {
                    var h = p["user"];
                    var v = {
                        loggedIn: h ? validationUtils.isExplicitTrue(h["isLoggedIn"]) : false
                    };
                    objectUtils.extractProperties(p, v, "status|statusMessage|callId|errorCode|errorMessage|errorDetails|context");
                    if (f["callback"]) f["callback"](v);
                }
            });
        },
        waitForService: function waitForService1() {
            var f = objectUtils.merge([
                thisScript.globalConf,
                arguments
            ]);
            var p = f["service"];
            if (!p) return;
            p = p.toLowerCase();
            var h = f["callback"];
            if (p == "fbconnect" || p == "facebook") {
                if (!facebookExternal.isLoaded()) {
                    socialize.addEventHandlers({
                        listenerType: "component"
                    }, {
                        onFacebookLoaded: h,
                        context: f["context"]
                    });
                } else {
                    h({
                        context: f["context"]
                    });
                }
            }
            if (p == "googleplus") {
                if (!googlePlusExternal.isLoaded()) {
                    socialize.addEventHandlers({
                        listenerType: "component"
                    }, {
                        onGooglePlusLoaded: h,
                        context: f["context"]
                    });
                } else {
                    h({
                        context: f["context"]
                    });
                }
            }
        },
        postBookmark: function postBookmark1() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            return tslib_1.__awaiter(this, void 0, void 0, function() {
                var p, h, v, w, m, b, y, S, E, C, I, R, A, I, R, U;
                return tslib_1.__generator(this, function(x) {
                    switch(x.label){
                        case 0:
                            p = objectUtils.merge([
                                thisScript.globalConf,
                                f
                            ]);
                            if (!p["APIKey"]) {
                                p["APIKey"] = thisScript.APIKey;
                            }
                            h = {};
                            objectUtils.extractProperties([
                                p
                            ], h, consts_1.postBookmarkSchema);
                            if (!h["url"] && h["URL"]) {
                                h["url"] = h["URL"];
                                delete h["URL"];
                            }
                            h["sdk"] = "js_" + build.version;
                            if (!h["url"] && h["userAction"] && !h["userAction"]["linkBack"]) {
                                v = document.getElementsByTagName("meta");
                                for(w = 0; w < v.length; w++){
                                    if (v[w].getAttribute("property") === "og:url" && v[w].getAttribute("content")) {
                                        h["url"] = v[w].getAttribute("content");
                                        break;
                                    }
                                }
                            }
                            if (!h["url"] && h["userAction"] && !h["userAction"]["linkBack"]) {
                                h["url"] = document.location.href;
                            }
                            h["provider"] = h["provider"] ? (h["provider"] + "").toLowerCase() : "";
                            if (h["provider"] === "facebook") {
                                h["providerKey"] = Opengraph.getMetaTag("fb:app_id");
                            }
                            return [
                                4,
                                _.apiAdapter.getGmidTicket()
                            ];
                        case 1:
                            m = x.sent();
                            if (m) {
                                h["gmidTicket"] = m;
                            }
                            b = _.bookmarkSize[h["provider"]] || {};
                            y = {
                                width: p["popupWidth"] || b.w,
                                height: p["popupHeight"] || b.h,
                                top: p["popupPositionY"],
                                left: p["popupPositionX"],
                                menubar: 0,
                                resizable: 1,
                                scrollbars: 1
                            };
                            if (p["enablePopupLocation"]) {
                                y.location = 1;
                                y.toolbar = 1;
                            } else {
                                y.toolbar = 0;
                            }
                            S = _.apiAdapters["web"] ? _.apiAdapters["web"].tokenStore : undefined;
                            if (S) {
                                h["login_token"] = _.apiAdapters.web.tokenStore.get();
                            }
                            if (h["provider"] === "twitter" && LocalInfo_1.localInfo.isIOS) {
                                C = h["userAction"] || {};
                                I = {
                                    url: C["linkBack"] || h["url"],
                                    text: C["title"] || h["title"]
                                };
                                R = "https://twitter.com/intent/tweet?{0}";
                                E = stringUtilsUtils.format(R, keyValueUtils.serialize(I));
                                A = p["sourceData"] ? objectUtils.clone(p["sourceData"]) : {};
                                A.provider = h["provider"];
                                A.url = I.url;
                                legacyReports.report("share", p["APIKey"], p["cid"], p["source"], A, {
                                    tags: p["tags"]
                                });
                            } else {
                                I = keyValueUtils.serialize(h);
                                R = "https://" + _.getApiDomain("socialize") + "/gs/bookmark.aspx?{0}";
                                E = stringUtilsUtils.format(R, I);
                            }
                            LegacyLogger_1.logCall("postBookmark", h);
                            globalEvents.dispatch({
                                eventName: "beforeRequest",
                                methodName: "socialize.postBookmark",
                                rawParams: p,
                                params: h
                            });
                            U = h["provider"] === "whatsapp" ? "_self" : "gs_bookmark_" + h["provider"];
                            winUtils.open(E, U, y);
                            return [
                                2
                            ];
                    }
                });
            });
        },
        refreshUI: function refreshUI1() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                thisScript.globalConf,
                f
            ]);
            var v = h["callback"];
            socialize.getUserInfo(h, {
                callback: function(f) {
                    var p = {
                        eventName: "login",
                        isInternal: true
                    };
                    if (h["provider"]) p["provider"] = h["provider"];
                    InternalFlows_1.addUserInfoToEvent(f, p, true);
                    if (h["context"]) p["context"] = h["context"];
                    globalEvents.dispatch(p);
                    if (typeof v == "function") v(f);
                }
            });
        },
        trackReferrals: function trackReferrals1() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = {
                "digg.com": "digg",
                "stumbleupon.com": "stumbleupon",
                "technorati.com": "technorati",
                "t.co": "twitter",
                "plus.url.google.com": "googlePlus",
                "facebook.com": "facebook",
                "linkedin.com": "linkedIn",
                "pinterest.com": "pinterest",
                "mixi.jp": "mixi",
                "b.hatena.ne.jp": "hatena",
                "line.me": "line"
            };
            var v;
            var w = objectUtils.merge([
                thisScript.globalConf,
                f
            ]);
            var m = {
                eventName: "linkback",
                CID: w["cid"]
            };
            var b = {};
            var y = {};
            if (document.location.href.indexOf("#") != -1) {
                y = keyValueUtils.deserialize(document.location.href.split("#")[1]);
            }
            if (document.location.href.indexOf("?") != -1) {
                b = keyValueUtils.deserialize(document.location.href.split("?")[1].split("#")[0]);
            }
            socialize.updateRefUID(w["APIKey"], y, b);
            var S = y["_gus"] != null || b["_gus"] != null;
            if (S) {
                m.CID = y["_gucid"] || b["_gucid"];
                m.shortCode = y["_gsc"] || b["_gsc"];
                m.provider = y["_gup"] || b["_gup"];
            }
            if (!v) {
                var E;
                var C = {
                    url: document.location.href,
                    ref: document.referrer
                };
                if (b["fb_ref"]) {
                    var I = keyValueUtils.deserialize(b["fb_ref"], ":");
                    C["uuid"] = I["uu"];
                    C["sn"] = I["p"];
                    E = I["s"];
                } else if (document.referrer && document.referrer.indexOf("://") != -1) {
                    var R = document.referrer.split("://")[1].split("/")[0];
                    if (R.indexOf("www.") == 0) {
                        R = R.split("www.")[1];
                    }
                    if (h[R]) {
                        m.provider = C["sn"] = h[R];
                    }
                }
                if (!C["sn"] && (!document.referrer || document.referrer.indexOf("http://soc.li") == -1 && document.referrer.indexOf("https://shr.gs") == -1)) {
                    var A = document.location.href.split("#guid=");
                    if (A.length > 1) {
                        var U = A[1].split("#")[0].split("&")[0];
                        if (U != _.apiAdapter.getTokenParam(w["APIKey"], "UUID")) {
                            C["sn"] = "AddressBarShares";
                            C["uuid"] = U;
                            if (U == "_") delete C["uuid"];
                            document.location.replace("#");
                            legacyReports.trackAddressBarShares();
                            C.url = document.location.href.split("#")[0];
                        }
                    }
                }
                if (C["uuid"]) {
                    setGigRefUidCookie(w["APIKey"], C["uuid"]);
                }
                if (C["sn"] && !S) legacyReports.report("linkback", w["APIKey"], w["cid"], E, null, C);
                if (C["sn"] || S) globalEvents.dispatch(objectUtils.removeUndefined(m));
                v = true;
            }
            if (typeof w["callback"] == "function") w["callback"]({
                status: "OK",
                statusMessage: "",
                operation: "trackReferrals",
                context: w["context"],
                errorMessage: "",
                errorCode: 0
            });
        },
        User: function(f) {
            var p = defaultObjects[name];
            for(var h in p){
                this[h] = objectUtils.clone(p[h]);
            }
            if (typeof f == "object") {
                for(var h in f){
                    if (typeof f[h] != "function") {
                        this[h] = objectUtils.clone(f[h]);
                    }
                }
            }
        },
        Friend: function(f) {
            var p = defaultObjects[name];
            for(var h in p){
                this[h] = objectUtils.clone(p[h]);
            }
            if (typeof f == "object") {
                for(var h in f){
                    if (typeof f[h] != "function") {
                        this[h] = objectUtils.clone(f[h]);
                    }
                }
            }
        },
        Identity: function(f) {
            var p = defaultObjects[name];
            for(var h in p){
                this[h] = objectUtils.clone(p[h]);
            }
            if (typeof f == "object") {
                for(var h in f){
                    if (typeof f[h] != "function") {
                        this[h] = objectUtils.clone(f[h]);
                    }
                }
            }
        },
        Contact: function(f) {
            var p = defaultObjects[name];
            for(var h in p){
                this[h] = objectUtils.clone(p[h]);
            }
            if (typeof f == "object") {
                for(var h in f){
                    if (typeof f[h] != "function") {
                        this[h] = objectUtils.clone(f[h]);
                    }
                }
            }
        },
        person: function(f) {
            var p = defaultObjects[name];
            for(var h in p){
                this[h] = objectUtils.clone(p[h]);
            }
            if (typeof f == "object") {
                for(var h in f){
                    if (typeof f[h] != "function") {
                        this[h] = objectUtils.clone(f[h]);
                    }
                }
            }
        },
        personwithuid: function(f) {
            var p = defaultObjects[name];
            for(var h in p){
                this[h] = objectUtils.clone(p[h]);
            }
            if (typeof f == "object") {
                for(var h in f){
                    if (typeof f[h] != "function") {
                        this[h] = objectUtils.clone(f[h]);
                    }
                }
            }
        },
        UserAction: function(f) {
            var p = defaultObjects[name];
            for(var h in p){
                this[h] = objectUtils.clone(p[h]);
            }
            if (typeof f == "object") {
                for(var h in f){
                    if (typeof f[h] != "function") {
                        this[h] = objectUtils.clone(f[h]);
                    }
                }
            }
        },
        Collection: function(f, p) {
            this.arr = f;
            this._key = p ? p : "";
        },
        login: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        addConnection: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        requestPermissions: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        showDebugUI: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        showLoginUI_v1: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        showLoginUI_v2: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        showLoginUI: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = f[0];
            var v = f[1];
            if (!v) {
                v = h;
                h = null;
            }
            if (!v) {
                v = {};
                f.push(v);
            }
            var w = objectUtils.merge([
                {},
                h,
                v
            ]);
            selector.callVersion("" + w[versionField], v, f);
        },
        showAddConnectionsUI_v1: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        showAddConnectionsUI_v2: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        showAddConnectionsUI: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = f[0];
            var v = f[1];
            if (!v) {
                v = h;
                h = null;
            }
            if (!v) {
                v = {};
                f.push(v);
            }
            var w = objectUtils.merge([
                {},
                h,
                v
            ]);
            selector.callVersion("" + w[versionField], v, f);
        },
        showEditConnectionsUI: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        showSimpleShareUI: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        showShareMobileUI: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getAvailableProviders: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        notifyLogin: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        convertAction: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        deleteAccount: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        delUserSettings: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getContacts: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getRawData: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getSessionInfo: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getUserInfo: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        checkin: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        logout: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        notifyRegistration: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        removeConnection: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        setUID: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        unlinkAccounts: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        facebookGraphOperation: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        notifySSOLogin: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        connect: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        disconnect: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        linkAccounts: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        showConnectUI: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = f[0];
            var v = f[1];
            if (!v) {
                v = h;
                h = null;
            }
            if (!v) {
                v = {};
                f.push(v);
            }
            var w = objectUtils.merge([
                {},
                h,
                v
            ]);
            selector.callVersion("" + w[versionField], v, f);
        },
        GrayOut: function o1(f, p) {
            var h = p || {}, v = h.zindex || 50, w = h.opacity || 70, m = w / 100, b = h.bgcolor || "#000000", y = document.getElementById("darkenScreenObject"), S = document.body;
            if (!y) {
                var E = localInfo.isMobile || localInfo.isIE6 || "BackCompat" == document.compatMode, C = document.documentElement.scrollTop;
                0 == C && (C = document.body.scrollTop);
                var I = document.createElement("div");
                E ? (I.style.position = "absolute", I.style.top = C + "px") : (I.style.position = "fixed", I.style.top = "0px"), I.style.overflow = "hidden", I.style.left = "0px", I.style.display = "none", I.id = "darkenScreenObject", I.innerHTML = "&#160;", S.appendChild(I), y = document.getElementById("darkenScreenObject"), attachedFixGray || (attachedFixGray = !0, window.addEventListener && window.addEventListener("resize", i._fixGraySize, !1), window.attachEvent && window.attachEvent("onresize", i._fixGraySize), E && (window.addEventListener && window.addEventListener("scroll", i._fixGrayPosition, !1), window.attachEvent && window.attachEvent("onscroll", i._fixGrayPosition)));
            }
            if (f) {
                var R, A;
                if (window.innerHeight && (R = window.innerHeight, A = window.innerWidth), void 0 === R) {
                    var U = document.documentElement;
                    R = U.clientHeight, A = U.clientWidth;
                }
                0 == A && (A = S.clientWidth), 0 == R && (R = S.clientHeight), y.style.opacity = m.toString(), y.style.MozOpacity = m, y.style.width = A + "px", y.style.height = R + "px", y.style.filter = "alpha(opacity=" + w + ")", y.style.zIndex = v, y.style.backgroundColor = b, y.style.display = "block";
            } else S.removeChild(y);
        },
        getStyleString: function(f, p) {
            var h = "";
            return h += "line-height: normal;", p && (h += "cursor:pointer;"), f.underline && (h += "text-decoration:underline;"), f.font && (h += "font-family:" + f.font + ";"), f.size && (h += "font-size:" + f.size + "px;"), f.color && (h += "color:" + f.color + ";"), f.bold && (h += "font-weight:bold;"), f["frame-thickness"] && (h += "border-style:solid; border-width:" + f["frame-thickness"] + "px;"), f["frame-color"] && (h += "border-color:" + f["frame-color"] + ";"), f["background-color"] && (h += "background-color:" + f["background-color"] + ";"), h;
        },
        _fixGrayPosition: function() {
            var f = document.getElementById("darkenScreenObject");
            if (f) {
                var p = document.documentElement, h = document.body, v = p.scrollTop;
                0 == v && (v = h.scrollTop);
                var w = p.scrollLeft;
                0 == w && (w = h.scrollLeft);
                var m = p.clientHeight;
                0 == m && (m = h.clientHeight);
                var b = p.clientWidth;
                0 == b && (b = h.clientWidth), localInfo.isIE6 && (b -= 1), f.style.top = v.toString(), f.style.left = w.toString();
            }
        },
        _fixGraySize: function() {
            var f = document.getElementById("darkenScreenObject");
            if (f) {
                var p = document.documentElement, h = document.body, v = p.clientHeight;
                0 == v && (v = h.clientHeight);
                var w = p.clientWidth;
                0 == w && (w = h.clientWidth), localInfo.isIE6 && (w -= 1), f.style.width = w + "px", f.style.height = v + "px";
            }
        },
        _createJSPopup: function(f, p, h, v) {
            var w = a(f).req, m = w.p, b = w.c;
            utils.validation.isExplicitFalse(m.showCaption) && (v = !0);
            var y = document.getElementById(m.containerID);
            w.container = y;
            var S = p.Resolve("+/config/body/background"), E = p.Resolve("+/config/body/captions"), C = '<table role="presentation" style="' + i.getStyleString(S) + ';empty-cells:show;" cellpadding="0" cellspacing="0" >';
            v ? C += "<tr><td>" : (C += '<tr style="' + i.getStyleString(E) + '"><td><table role="presentation" style="width:100%" width="100%" cellpadding="0" cellspacing="0"><tr id="' + m.containerID + '_caption"><td style="vertical-align:middle"><div style="' + i.getStyleString(E) + ';padding:7px">' + h + '</div></td><td style="vertical-align:middle">', C += '<div align="right" style="padding-right: 7px; cursor: pointer;' + i.getStyleString(E) + '"><img tabindex="0" onclick="gigya.services.socialize._closeComponent(\'' + f + '\', true);"  src="' + _.getCdnResource("/gs/i/HTMLLogin/closeIcon.gif") + '" alt="" /></div></td></tr></table></td></tr><tr><td colspan="2">'), C += '<div id="' + m.containerID + '_container"></div></td></tr></table>', y.innerHTML = C;
            var I = {}, R = {};
            for(var A in m)I[A] = m[A];
            for(A in b)R[A] = b[A];
            var U = document.getElementById(I.containerID + "_caption");
            return I.height = I.height - 2 * S["frame-thickness"], v || (I.height -= U.offsetHeight), I.width = I.width - 2 * S["frame-thickness"], utils.DOM._popupContainers[I.containerID] = y, I.containerID = I.containerID + "_container", {
                c: R,
                p: I
            };
        },
        _createJSPopup2: function(f, p, h, v, w, m) {
            var b = a(f).req, y = b.p, S = b.c, E = document.getElementById(y.containerID);
            b.container = E;
            var C = p.Resolve("+/config/body/captions");
            h || (h = 10), v || (v = _.getCdnResource("/gs/i/Dialog/DialogBg_"));
            var I, R = "width:" + h + "px;height:" + h + "px";
            m && (I = "1px solid #555555");
            var A = '<table role="presentation" style="font-size:1px;padding:0px;margin:0px;vertical-align:middle;font-size:1px;line-height:1px;empty-cells:show;" cellpadding="0" cellspacing="0" >';
            A += '<tr><td height="' + h + '" style="font-size:1px"><div style="height:' + h + 'px"><img src="' + v + 'TopLeft.png" style="' + R + '" alt="" /></div></td><td height="' + h + '" style="background-image:url(\'' + v + 'filler.png\');bakground-repeat:repeat"></td><td height="' + h + '" style="font-size:1px;"><div style="height:' + h + 'px"><img style="' + R + '" src="' + v + 'TopRight.png" alt="" /></div></td></tr>', w && (A += "<tr><td style=\"background-image:url('" + v + 'filler.png\');background-repeat:repeat"></td><td><table width="100%" cellspacing="0" cellpadding="0" style="border-top:' + I + ";border-left:" + I + ";border-right:" + I + ';width:100%;background-color:#FFFFFF"><tr><td style="padding-top:10px;padding-left:10px;' + i.getStyleString(C) + '">' + w + '</td><td align="right" valign="top" style="' + i.getStyleString(C) + '"><div style="padding-right:5px;padding-top:5px;text-align:right;"><img tabindex="0" style="cursor:pointer" onclick="gigya.services.socialize._closeComponent(\'' + f + '\', true);" src="' + v + 'close.png" alt="" /></div></td></tr></table></td><td style="background-image:url(\'' + v + "filler.png');background-repeat:repeat\"></td></tr>"), A += "<tr><td style=\"background-image:url('" + v + 'filler.png\');background-repeat:repeat"></td><td><div style="border-bottom:' + I + ";border-left:" + I + ";border-right:" + I + ';background-color:#FFFFFF" id="' + y.containerID + '_container"></div></td><td style="background-image:url(\'' + v + "filler.png');background-repeat:repeat\"></td></tr>", A += '<tr><td height="' + h + '" style="font-size:1px;"><div style="height:' + h + 'px"><img style="' + R + '" src="' + v + 'BottomLeft.png" alt="" /></div></td><td height="' + h + '" style="background-image:url(\'' + v + 'filler.png\');bakground-repeat:repeat"></td><td height="' + h + '" style="font-size:1px;"><div style="height:' + h + 'px"><img style="' + R + '" src="' + v + 'BottomRight.png" alt="" /></div></td></tr></table>', E.innerHTML = A;
            var U = {}, x = {};
            for(var N in y)U[N] = y[N];
            for(N in S)x[N] = S[N];
            return utils.DOM._popupContainers[U.containerID] = E, U.containerID = U.containerID + "_container", U.height = U.height - 2 * h, w && ("" == w.replace(/ /g, "") ? U.height -= 10 : U.height -= o.measureText(w, C).h + 10), U.width = U.width - 2 * h, {
                c: x,
                p: U
            };
        },
        _parseRID: function a1(f) {
            var p, h = f.split("@"), v = document.getElementById(h[2] + "_" + h[1]), w = h[2];
            null == (p = utils.DOM._pseudoContainers[w]) && (p = document.getElementById(h[2]));
            var m = null;
            null != p && (m = p.Reqs);
            var b = null;
            return null != m && (b = m[parseInt(h[0])]), {
                rid: f,
                container: p,
                Reqs: m,
                req: b,
                swf: v
            };
        },
        _closeComponent: function(f, p) {
            var h = socialize._parseRID(f).req;
            socialize.GrayOut && socialize.GrayOut(!1);
            var v = document.getElementById("gigya_ifr_" + h.container.id);
            null != v && (v.style.display = "none"), p && events.dispatchForWidget({
                eventName: "close"
            }, h.p), h.container.style.display = "none";
        },
        plugins: {
            login: {
                instances: [],
                showLoginUI_v2: function(f) {
                    var p = "gigya." + namespace + ".plugins." + pluginName + ".instances[" + ns.instances.length + "]";
                    var h = new pluginClass(f, p);
                    ns.instances.push(h);
                },
                showAddConnectionsUI_v2: function(f) {
                    var p = "gigya." + namespace + ".plugins." + pluginName + ".instances[" + ns.instances.length + "]";
                    var h = new pluginClass(f, p);
                    ns.instances.push(h);
                }
            }
        }
    },
    gcs: {
        submitUserForm: function submitUserForm1() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = {};
            var v = objectUtils.merge([
                thisScript.globalConf,
                f
            ]);
            var w = document.getElementById(v["form"]);
            if (!w) {
                var m = document.getElementsByName(v["form"]);
                if (m && m.length > 0) v["form"] = m[0];
            }
            for(var b = 0; b < w["elements"].length; b++){
                var y = w["elements"][b];
                if (y.name) {
                    var S = y.name.split(".");
                    var E = h;
                    for(var C = 0; C < S.length - 1; C++){
                        var I = S[C];
                        if (!E[I]) E[I] = {};
                        E = E[I];
                    }
                    E[S[S.length - 1]] = y.value;
                }
            }
            v["data"] = h;
            gcs.setUserData(v);
        },
        getUserData: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        setUserData: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        search: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getSchema: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        }
    },
    accounts: {
        addEventHandlers: function accountsAddEventHandlers1() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            socializeAddEventHandlers(objectUtils.merge([
                f,
                {
                    namespace: "accounts"
                }
            ]));
        },
        b2b: {
            openDelegatedAdminLogin: function openDelegateAdminHandler1(f) {
                if (!f) {
                    f = {};
                }
                var p = window.open("", "_blank");
                f["callback"] = function(h) {
                    if (h.errorCode !== GSErrors_1.GSErrors.OK) {
                        p.close();
                        if (typeof f.onError === "function") {
                            f.onError(h);
                        }
                    } else if (!h.targetUrl || !h.id_token) {
                        p.close();
                        logger.error("accounts.b2b.delegatedAdminLogin - missing required params", {
                            targetURL: h.targetUrl,
                            id_token: h.id_token
                        });
                    } else {
                        HTTPUtils.redirect(h.targetUrl, [
                            {
                                id_token: h.id_token
                            }
                        ], h["method"] ? h["method"] : "POST", undefined, p.document);
                    }
                };
                accounts.b2b.delegatedAdminLogin(f);
            },
            registerOrganization: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            getOrganizationSchema: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            delegatedAdminLogin: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            getOrganizationInfo: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            setOrganizationContext: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            getOrganizationContext: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            auth: {
                getAssets: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            }
        },
        setSSOToken: function setSSOToken1() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            return tslib_1.__awaiter(this, void 0, gigya.Promise, function() {
                var p, h;
                return tslib_1.__generator(this, function(v) {
                    p = utils.object.merge([
                        thisScript.globalConf,
                        f
                    ]);
                    h = p["redirectURL"] || document.location.href;
                    utils.HTTP.redirect(h, [
                        {}
                    ], "GET", "_top");
                    return [
                        2
                    ];
                });
            });
        },
        auth: {
            fido: {
                register: function registerPasskey1(f) {
                    if (f === void 0) {
                        f = {};
                    }
                    return PasskeyService_1.default.registerPasskey(f, true).then(function(p) {
                        return invokeCallback(f, p);
                    }).catch(function(p) {
                        throw invokeCallback(f, p);
                    });
                },
                login: function passkeyLogin1(f) {
                    if (f === void 0) {
                        f = {};
                    }
                    return PasskeyService_1.default.authenticate(f).then(function(p) {
                        return invokeCallback(f, p);
                    }).catch(function(p) {
                        throw invokeCallback(f, p);
                    });
                },
                initRegisterCredentials: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                registerCredentials: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                getAssertionOptions: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                verifyAssertion: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                getCredentials: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                removeCredential: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            },
            getPreferredLoginMethod: function getPreferredLoginMethod1(f) {
                return SiteData_1.siteData.getPreferredLoginMethod(f);
            },
            setPreferredLoginMethod: function setPreferredLoginMethod1(f, p) {
                SiteData_1.siteData.setPreferredLoginMethod(f, p);
            },
            guest: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            otp: {
                verify: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                authenticate: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                email: {
                    sendCode: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    login: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    }
                }
            },
            getMethods: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            push: {
                sendVerification: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                isVerified: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            },
            magiclink: {
                email: {
                    send: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    login: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    }
                }
            },
            login: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        },
        socialLogin: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        showMyPhotoUI: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        showTfaUI: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        initHostedPage: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        showScreenSet: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        hideScreenSet: function(f) {
            if (!_this.injectionInfo) {
                LegacyLogger_1.addLog("invalid injection info", _this, false);
                return;
            }
            var p = _this.getPublicMethod(methodName);
            var h = UiApiHelpers_1.getPluginInstance(f, _this.injectionInfo);
            if (!h) {
                LegacyLogger_1.addLog("couldn't find instance", _this, false);
            } else {
                var v = [];
                arrayUtils.forEach(p.argNames, function(p) {
                    if (p && f[p] !== undefined) v.push(f[p]);
                });
                h[p.instanceMethod].apply(h, v);
            }
        },
        switchScreen: function(f) {
            if (!_this.injectionInfo) {
                LegacyLogger_1.addLog("invalid injection info", _this, false);
                return;
            }
            var p = _this.getPublicMethod(methodName);
            var h = UiApiHelpers_1.getPluginInstance(f, _this.injectionInfo);
            if (!h) {
                LegacyLogger_1.addLog("couldn't find instance", _this, false);
            } else {
                var v = [];
                arrayUtils.forEach(p.argNames, function(p) {
                    if (p && f[p] !== undefined) v.push(f[p]);
                });
                h[p.instanceMethod].apply(h, v);
            }
        },
        login: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        linkAccounts: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        notifySocialLogin: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        initRegistration: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        initProgression: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        register: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        finalizeRegistration: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        captchaImage: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        importProfilePhoto: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        setProfilePhoto: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        resetPassword: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        removeProfilePhoto: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        isAvailableLoginID: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        address: {
            suggestions: {
                get: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            }
        },
        resendVerificationCode: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getCaptcha: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getPolicies: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getSchema: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getSiteConsentDetails: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getLegalStatements: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        verifyLogin: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getAccountInfo: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        setAccountInfo: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        logout: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        search: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getScreenSets: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        sso: {
            login: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        },
        getConflictingAccount: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        resetSitePreferences: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getJWT: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        tfa: {
            getProviders: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            initTFA: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            finalizeTFA: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            deactivateProvider: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            unregisterDevice: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            backupcodes: {
                get: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                create: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                verify: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            },
            phone: {
                getRegisteredPhoneNumbers: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                removePhone: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                sendVerificationCode: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                completeVerification: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            },
            email: {
                getEmails: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                sendVerificationCode: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                completeVerification: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            },
            totp: {
                register: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                verify: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                getRegistered: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                remove: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            },
            push: {
                isVerified: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                sendVerification: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            }
        },
        groups: {
            getSchema: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            registerGroup: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            setGroupInfo: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            getGroupInfo: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            deleteGroup: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            setGroupMemberInfo: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            getGroupMemberInfo: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            removeMember: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            getAllMemberGroups: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            searchGroupMembers: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            createInvitation: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            invitationConfirm: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            finalizeInvitation: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        },
        otp: {
            sendCode: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            login: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            update: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        },
        identifier: {
            createToken: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        },
        identity: {
            authorize: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        },
        session: {
            verify: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        }
    }
};
export const socialize = {
    getAllProviders: function getAllProviders1() {
        return exports.arProviders.concat();
    },
    replaceProviderAliases: function replaceProviderAliases1(f) {
        if (f == null) {
            return;
        }
        var p = f.split(",");
        for(var h = 0; h < p.length; h++){
            var v = p[h].replace(/^\s+|\s+$/g, "");
            if (exports._aliases[v]) {
                p[h] = exports._aliases[v];
            }
        }
        return p.join(",");
    },
    getProvidersByName: function getProvidersByName1(f, p) {
        if (p === void 0) {
            p = exports.arProviders;
        }
        f = ("" + f).split(" ").join("").split(".").join("").toLowerCase();
        f = replaceProviderAliases(f);
        var h = ("" + f).split(",");
        h = replaceWildcard(h, p);
        var v = [];
        for(var w = 0; w < h.length; w++){
            var m = getProviderByName(h[w], p);
            if (m != null && arrayUtils.indexOf(v, m) == -1) {
                v.push(m);
            }
        }
        return v;
    },
    _getProviderByName: function getProviderByName1(f, p) {
        if (p === void 0) {
            p = exports.arProviders;
        }
        for(var h = 0; h < p.length; h++){
            if (p[h].name.toLowerCase() === f.toLowerCase()) {
                return p[h];
            }
        }
    },
    hideProvidersByName: function hideProvidersByName1(f, p, h) {
        if (p === void 0) {
            p = "";
        }
        if (h === void 0) {
            h = exports.arProviders;
        }
        p = p.toLowerCase();
        var v = p.split(" ").join("").split(".").join("").toLowerCase().split(",");
        v = replaceWildcard(v, h);
        for(var w = 0; w < v.length; w++){
            for(var m = 0; m < f.length; m++){
                var b = f[m];
                var y = b.name || b.toString();
                if (y) {
                    y = y.toLowerCase();
                }
                if (y === v[w]) {
                    f.splice(m, 1);
                }
            }
        }
        return f;
    },
    _getProviderByID: function getProviderById1(f, p) {
        if (p === void 0) {
            p = exports.arProviders;
        }
        for(var h = 0; h < p.length; h++){
            if (p[h].ID === f) {
                return p[h];
            }
        }
    },
    getProvidersForRequiredCapabilities: function getProvidersForRequiredCapabilities1(f, p) {
        if (p == null) {
            p = [];
        }
        var h = [];
        for(var v = 0; v < f.length; v++){
            var w = f[v];
            var m = true;
            for(var b = 0; b < p.length; b++){
                var y = false;
                for(var S = 0; S < w.arDefaultCapabilities.length; S++){
                    if (w.arDefaultCapabilities[S].toLowerCase() == p[b].toLowerCase()) {
                        y = true;
                        break;
                    }
                }
                if (!y) {
                    m = false;
                    break;
                }
            }
            if (m) {
                h.push(w);
            }
        }
        return h;
    },
    updateRefUID: function updateRefUID1(f, p, h) {
        if (!f) f = thisScript.globalConf["APIKey"];
        if (!p) {
            p = {};
            if (document.location.href.indexOf("#") != -1) {
                p = keyValueUtils.deserialize(document.location.href.split("#")[1]);
            }
        }
        if (!h) {
            h = {};
            if (document.location.href.indexOf("?") != -1) {
                h = keyValueUtils.deserialize(document.location.href.split("?")[1].split("#")[0]);
            }
        }
        if (p["guid"] && p["guid"] != "_") {
            setGigRefUidCookie(f, p["guid"]);
        }
        var v = p["_giguuid"] || h["_giguuid"];
        if (v) {
            setGigRefUidCookie(f, v);
        }
    },
    hideUI: function() {
        var f = utils.object.merge([
            thisScript.globalConf,
            arguments
        ]);
        for(var p in o(!1), _.plugins.instances){
            var h = _.plugins.instances[p];
            h.isModal && h.dispose();
        }
        for(var v in utils.DOM._popupContainers){
            var w = utils.DOM._popupContainers[v];
            null != w && (w.innerHTML = "", w.parentNode && (w.style.display = "none"));
            var m = document.getElementById("gigya_ifr_" + v);
            null != m && (m.style.display = "none");
        }
        if (events.global.dispatch({
            eventName: "HideUIRequested"
        }), "function" == typeof f.callback) {
            var b = {
                status: "OK",
                statusMessage: "",
                operation: "hideUI",
                context: f.context,
                errorMessage: "",
                errorCode: 0
            };
            f.callback(b);
        }
    },
    getProviderShareCounts: function getProviderShareCounts1() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            thisScript.globalConf,
            f
        ]);
        scriptUtils.load(cdn_1.getCdnResource("/js/gigya.services.socialize.plugins.shareCounts.min.js"), null, function() {
            socialize.plugins.shareCounts.getProviderShareCounts(h);
        }, true);
    },
    addEventHandlers: function socializeAddEventHandlers1() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            thisScript.globalConf,
            f
        ]);
        var v = h["namespace"] ? h["namespace"] : "socialize";
        for(var w in h){
            if (w.indexOf("on") == 0) globalEvents.add(w, h[w], h["listenerType"], h["context"], v, h);
        }
        if (typeof h["callback"] == "function") {
            h["callback"]({
                status: "OK",
                statusMessage: "",
                errorCode: 0,
                errorMessage: "",
                operation: "addEventHandlers",
                context: h["context"]
            });
        }
    },
    isLoggedIn: function isLoggedIn1() {
        var f = objectUtils.merge([
            thisScript.globalConf,
            arguments
        ]);
        socialize.getUserInfo(f, {
            callback: function(p) {
                var h = p["user"];
                var v = {
                    loggedIn: h ? validationUtils.isExplicitTrue(h["isLoggedIn"]) : false
                };
                objectUtils.extractProperties(p, v, "status|statusMessage|callId|errorCode|errorMessage|errorDetails|context");
                if (f["callback"]) f["callback"](v);
            }
        });
    },
    waitForService: function waitForService1() {
        var f = objectUtils.merge([
            thisScript.globalConf,
            arguments
        ]);
        var p = f["service"];
        if (!p) return;
        p = p.toLowerCase();
        var h = f["callback"];
        if (p == "fbconnect" || p == "facebook") {
            if (!facebookExternal.isLoaded()) {
                socialize.addEventHandlers({
                    listenerType: "component"
                }, {
                    onFacebookLoaded: h,
                    context: f["context"]
                });
            } else {
                h({
                    context: f["context"]
                });
            }
        }
        if (p == "googleplus") {
            if (!googlePlusExternal.isLoaded()) {
                socialize.addEventHandlers({
                    listenerType: "component"
                }, {
                    onGooglePlusLoaded: h,
                    context: f["context"]
                });
            } else {
                h({
                    context: f["context"]
                });
            }
        }
    },
    postBookmark: function postBookmark1() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var p, h, v, w, m, b, y, S, E, C, I, R, A, I, R, U;
            return tslib_1.__generator(this, function(x) {
                switch(x.label){
                    case 0:
                        p = objectUtils.merge([
                            thisScript.globalConf,
                            f
                        ]);
                        if (!p["APIKey"]) {
                            p["APIKey"] = thisScript.APIKey;
                        }
                        h = {};
                        objectUtils.extractProperties([
                            p
                        ], h, consts_1.postBookmarkSchema);
                        if (!h["url"] && h["URL"]) {
                            h["url"] = h["URL"];
                            delete h["URL"];
                        }
                        h["sdk"] = "js_" + build.version;
                        if (!h["url"] && h["userAction"] && !h["userAction"]["linkBack"]) {
                            v = document.getElementsByTagName("meta");
                            for(w = 0; w < v.length; w++){
                                if (v[w].getAttribute("property") === "og:url" && v[w].getAttribute("content")) {
                                    h["url"] = v[w].getAttribute("content");
                                    break;
                                }
                            }
                        }
                        if (!h["url"] && h["userAction"] && !h["userAction"]["linkBack"]) {
                            h["url"] = document.location.href;
                        }
                        h["provider"] = h["provider"] ? (h["provider"] + "").toLowerCase() : "";
                        if (h["provider"] === "facebook") {
                            h["providerKey"] = Opengraph.getMetaTag("fb:app_id");
                        }
                        return [
                            4,
                            _.apiAdapter.getGmidTicket()
                        ];
                    case 1:
                        m = x.sent();
                        if (m) {
                            h["gmidTicket"] = m;
                        }
                        b = _.bookmarkSize[h["provider"]] || {};
                        y = {
                            width: p["popupWidth"] || b.w,
                            height: p["popupHeight"] || b.h,
                            top: p["popupPositionY"],
                            left: p["popupPositionX"],
                            menubar: 0,
                            resizable: 1,
                            scrollbars: 1
                        };
                        if (p["enablePopupLocation"]) {
                            y.location = 1;
                            y.toolbar = 1;
                        } else {
                            y.toolbar = 0;
                        }
                        S = _.apiAdapters["web"] ? _.apiAdapters["web"].tokenStore : undefined;
                        if (S) {
                            h["login_token"] = _.apiAdapters.web.tokenStore.get();
                        }
                        if (h["provider"] === "twitter" && LocalInfo_1.localInfo.isIOS) {
                            C = h["userAction"] || {};
                            I = {
                                url: C["linkBack"] || h["url"],
                                text: C["title"] || h["title"]
                            };
                            R = "https://twitter.com/intent/tweet?{0}";
                            E = stringUtilsUtils.format(R, keyValueUtils.serialize(I));
                            A = p["sourceData"] ? objectUtils.clone(p["sourceData"]) : {};
                            A.provider = h["provider"];
                            A.url = I.url;
                            legacyReports.report("share", p["APIKey"], p["cid"], p["source"], A, {
                                tags: p["tags"]
                            });
                        } else {
                            I = keyValueUtils.serialize(h);
                            R = "https://" + _.getApiDomain("socialize") + "/gs/bookmark.aspx?{0}";
                            E = stringUtilsUtils.format(R, I);
                        }
                        LegacyLogger_1.logCall("postBookmark", h);
                        globalEvents.dispatch({
                            eventName: "beforeRequest",
                            methodName: "socialize.postBookmark",
                            rawParams: p,
                            params: h
                        });
                        U = h["provider"] === "whatsapp" ? "_self" : "gs_bookmark_" + h["provider"];
                        winUtils.open(E, U, y);
                        return [
                            2
                        ];
                }
            });
        });
    },
    refreshUI: function refreshUI1() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            thisScript.globalConf,
            f
        ]);
        var v = h["callback"];
        socialize.getUserInfo(h, {
            callback: function(f) {
                var p = {
                    eventName: "login",
                    isInternal: true
                };
                if (h["provider"]) p["provider"] = h["provider"];
                InternalFlows_1.addUserInfoToEvent(f, p, true);
                if (h["context"]) p["context"] = h["context"];
                globalEvents.dispatch(p);
                if (typeof v == "function") v(f);
            }
        });
    },
    trackReferrals: function trackReferrals1() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = {
            "digg.com": "digg",
            "stumbleupon.com": "stumbleupon",
            "technorati.com": "technorati",
            "t.co": "twitter",
            "plus.url.google.com": "googlePlus",
            "facebook.com": "facebook",
            "linkedin.com": "linkedIn",
            "pinterest.com": "pinterest",
            "mixi.jp": "mixi",
            "b.hatena.ne.jp": "hatena",
            "line.me": "line"
        };
        var v;
        var w = objectUtils.merge([
            thisScript.globalConf,
            f
        ]);
        var m = {
            eventName: "linkback",
            CID: w["cid"]
        };
        var b = {};
        var y = {};
        if (document.location.href.indexOf("#") != -1) {
            y = keyValueUtils.deserialize(document.location.href.split("#")[1]);
        }
        if (document.location.href.indexOf("?") != -1) {
            b = keyValueUtils.deserialize(document.location.href.split("?")[1].split("#")[0]);
        }
        socialize.updateRefUID(w["APIKey"], y, b);
        var S = y["_gus"] != null || b["_gus"] != null;
        if (S) {
            m.CID = y["_gucid"] || b["_gucid"];
            m.shortCode = y["_gsc"] || b["_gsc"];
            m.provider = y["_gup"] || b["_gup"];
        }
        if (!v) {
            var E;
            var C = {
                url: document.location.href,
                ref: document.referrer
            };
            if (b["fb_ref"]) {
                var I = keyValueUtils.deserialize(b["fb_ref"], ":");
                C["uuid"] = I["uu"];
                C["sn"] = I["p"];
                E = I["s"];
            } else if (document.referrer && document.referrer.indexOf("://") != -1) {
                var R = document.referrer.split("://")[1].split("/")[0];
                if (R.indexOf("www.") == 0) {
                    R = R.split("www.")[1];
                }
                if (h[R]) {
                    m.provider = C["sn"] = h[R];
                }
            }
            if (!C["sn"] && (!document.referrer || document.referrer.indexOf("http://soc.li") == -1 && document.referrer.indexOf("https://shr.gs") == -1)) {
                var A = document.location.href.split("#guid=");
                if (A.length > 1) {
                    var U = A[1].split("#")[0].split("&")[0];
                    if (U != _.apiAdapter.getTokenParam(w["APIKey"], "UUID")) {
                        C["sn"] = "AddressBarShares";
                        C["uuid"] = U;
                        if (U == "_") delete C["uuid"];
                        document.location.replace("#");
                        legacyReports.trackAddressBarShares();
                        C.url = document.location.href.split("#")[0];
                    }
                }
            }
            if (C["uuid"]) {
                setGigRefUidCookie(w["APIKey"], C["uuid"]);
            }
            if (C["sn"] && !S) legacyReports.report("linkback", w["APIKey"], w["cid"], E, null, C);
            if (C["sn"] || S) globalEvents.dispatch(objectUtils.removeUndefined(m));
            v = true;
        }
        if (typeof w["callback"] == "function") w["callback"]({
            status: "OK",
            statusMessage: "",
            operation: "trackReferrals",
            context: w["context"],
            errorMessage: "",
            errorCode: 0
        });
    },
    User: function(f) {
        var p = defaultObjects[name];
        for(var h in p){
            this[h] = objectUtils.clone(p[h]);
        }
        if (typeof f == "object") {
            for(var h in f){
                if (typeof f[h] != "function") {
                    this[h] = objectUtils.clone(f[h]);
                }
            }
        }
    },
    Friend: function(f) {
        var p = defaultObjects[name];
        for(var h in p){
            this[h] = objectUtils.clone(p[h]);
        }
        if (typeof f == "object") {
            for(var h in f){
                if (typeof f[h] != "function") {
                    this[h] = objectUtils.clone(f[h]);
                }
            }
        }
    },
    Identity: function(f) {
        var p = defaultObjects[name];
        for(var h in p){
            this[h] = objectUtils.clone(p[h]);
        }
        if (typeof f == "object") {
            for(var h in f){
                if (typeof f[h] != "function") {
                    this[h] = objectUtils.clone(f[h]);
                }
            }
        }
    },
    Contact: function(f) {
        var p = defaultObjects[name];
        for(var h in p){
            this[h] = objectUtils.clone(p[h]);
        }
        if (typeof f == "object") {
            for(var h in f){
                if (typeof f[h] != "function") {
                    this[h] = objectUtils.clone(f[h]);
                }
            }
        }
    },
    person: function(f) {
        var p = defaultObjects[name];
        for(var h in p){
            this[h] = objectUtils.clone(p[h]);
        }
        if (typeof f == "object") {
            for(var h in f){
                if (typeof f[h] != "function") {
                    this[h] = objectUtils.clone(f[h]);
                }
            }
        }
    },
    personwithuid: function(f) {
        var p = defaultObjects[name];
        for(var h in p){
            this[h] = objectUtils.clone(p[h]);
        }
        if (typeof f == "object") {
            for(var h in f){
                if (typeof f[h] != "function") {
                    this[h] = objectUtils.clone(f[h]);
                }
            }
        }
    },
    UserAction: function(f) {
        var p = defaultObjects[name];
        for(var h in p){
            this[h] = objectUtils.clone(p[h]);
        }
        if (typeof f == "object") {
            for(var h in f){
                if (typeof f[h] != "function") {
                    this[h] = objectUtils.clone(f[h]);
                }
            }
        }
    },
    Collection: function(f, p) {
        this.arr = f;
        this._key = p ? p : "";
    },
    login: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    addConnection: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    requestPermissions: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    showDebugUI: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    showLoginUI_v1: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    showLoginUI_v2: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    showLoginUI: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = f[0];
        var v = f[1];
        if (!v) {
            v = h;
            h = null;
        }
        if (!v) {
            v = {};
            f.push(v);
        }
        var w = objectUtils.merge([
            {},
            h,
            v
        ]);
        selector.callVersion("" + w[versionField], v, f);
    },
    showAddConnectionsUI_v1: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    showAddConnectionsUI_v2: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    showAddConnectionsUI: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = f[0];
        var v = f[1];
        if (!v) {
            v = h;
            h = null;
        }
        if (!v) {
            v = {};
            f.push(v);
        }
        var w = objectUtils.merge([
            {},
            h,
            v
        ]);
        selector.callVersion("" + w[versionField], v, f);
    },
    showEditConnectionsUI: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    showSimpleShareUI: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    showShareMobileUI: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getAvailableProviders: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    notifyLogin: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    convertAction: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    deleteAccount: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    delUserSettings: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getContacts: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getRawData: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getSessionInfo: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getUserInfo: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    checkin: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    logout: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    notifyRegistration: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    removeConnection: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    setUID: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    unlinkAccounts: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    facebookGraphOperation: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    notifySSOLogin: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    connect: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    disconnect: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    linkAccounts: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    showConnectUI: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = f[0];
        var v = f[1];
        if (!v) {
            v = h;
            h = null;
        }
        if (!v) {
            v = {};
            f.push(v);
        }
        var w = objectUtils.merge([
            {},
            h,
            v
        ]);
        selector.callVersion("" + w[versionField], v, f);
    },
    GrayOut: function o1(f, p) {
        var h = p || {}, v = h.zindex || 50, w = h.opacity || 70, m = w / 100, b = h.bgcolor || "#000000", y = document.getElementById("darkenScreenObject"), S = document.body;
        if (!y) {
            var E = localInfo.isMobile || localInfo.isIE6 || "BackCompat" == document.compatMode, C = document.documentElement.scrollTop;
            0 == C && (C = document.body.scrollTop);
            var I = document.createElement("div");
            E ? (I.style.position = "absolute", I.style.top = C + "px") : (I.style.position = "fixed", I.style.top = "0px"), I.style.overflow = "hidden", I.style.left = "0px", I.style.display = "none", I.id = "darkenScreenObject", I.innerHTML = "&#160;", S.appendChild(I), y = document.getElementById("darkenScreenObject"), attachedFixGray || (attachedFixGray = !0, window.addEventListener && window.addEventListener("resize", i._fixGraySize, !1), window.attachEvent && window.attachEvent("onresize", i._fixGraySize), E && (window.addEventListener && window.addEventListener("scroll", i._fixGrayPosition, !1), window.attachEvent && window.attachEvent("onscroll", i._fixGrayPosition)));
        }
        if (f) {
            var R, A;
            if (window.innerHeight && (R = window.innerHeight, A = window.innerWidth), void 0 === R) {
                var U = document.documentElement;
                R = U.clientHeight, A = U.clientWidth;
            }
            0 == A && (A = S.clientWidth), 0 == R && (R = S.clientHeight), y.style.opacity = m.toString(), y.style.MozOpacity = m, y.style.width = A + "px", y.style.height = R + "px", y.style.filter = "alpha(opacity=" + w + ")", y.style.zIndex = v, y.style.backgroundColor = b, y.style.display = "block";
        } else S.removeChild(y);
    },
    getStyleString: function(f, p) {
        var h = "";
        return h += "line-height: normal;", p && (h += "cursor:pointer;"), f.underline && (h += "text-decoration:underline;"), f.font && (h += "font-family:" + f.font + ";"), f.size && (h += "font-size:" + f.size + "px;"), f.color && (h += "color:" + f.color + ";"), f.bold && (h += "font-weight:bold;"), f["frame-thickness"] && (h += "border-style:solid; border-width:" + f["frame-thickness"] + "px;"), f["frame-color"] && (h += "border-color:" + f["frame-color"] + ";"), f["background-color"] && (h += "background-color:" + f["background-color"] + ";"), h;
    },
    _fixGrayPosition: function() {
        var f = document.getElementById("darkenScreenObject");
        if (f) {
            var p = document.documentElement, h = document.body, v = p.scrollTop;
            0 == v && (v = h.scrollTop);
            var w = p.scrollLeft;
            0 == w && (w = h.scrollLeft);
            var m = p.clientHeight;
            0 == m && (m = h.clientHeight);
            var b = p.clientWidth;
            0 == b && (b = h.clientWidth), localInfo.isIE6 && (b -= 1), f.style.top = v.toString(), f.style.left = w.toString();
        }
    },
    _fixGraySize: function() {
        var f = document.getElementById("darkenScreenObject");
        if (f) {
            var p = document.documentElement, h = document.body, v = p.clientHeight;
            0 == v && (v = h.clientHeight);
            var w = p.clientWidth;
            0 == w && (w = h.clientWidth), localInfo.isIE6 && (w -= 1), f.style.width = w + "px", f.style.height = v + "px";
        }
    },
    _createJSPopup: function(f, p, h, v) {
        var w = a(f).req, m = w.p, b = w.c;
        utils.validation.isExplicitFalse(m.showCaption) && (v = !0);
        var y = document.getElementById(m.containerID);
        w.container = y;
        var S = p.Resolve("+/config/body/background"), E = p.Resolve("+/config/body/captions"), C = '<table role="presentation" style="' + i.getStyleString(S) + ';empty-cells:show;" cellpadding="0" cellspacing="0" >';
        v ? C += "<tr><td>" : (C += '<tr style="' + i.getStyleString(E) + '"><td><table role="presentation" style="width:100%" width="100%" cellpadding="0" cellspacing="0"><tr id="' + m.containerID + '_caption"><td style="vertical-align:middle"><div style="' + i.getStyleString(E) + ';padding:7px">' + h + '</div></td><td style="vertical-align:middle">', C += '<div align="right" style="padding-right: 7px; cursor: pointer;' + i.getStyleString(E) + '"><img tabindex="0" onclick="gigya.services.socialize._closeComponent(\'' + f + '\', true);"  src="' + _.getCdnResource("/gs/i/HTMLLogin/closeIcon.gif") + '" alt="" /></div></td></tr></table></td></tr><tr><td colspan="2">'), C += '<div id="' + m.containerID + '_container"></div></td></tr></table>', y.innerHTML = C;
        var I = {}, R = {};
        for(var A in m)I[A] = m[A];
        for(A in b)R[A] = b[A];
        var U = document.getElementById(I.containerID + "_caption");
        return I.height = I.height - 2 * S["frame-thickness"], v || (I.height -= U.offsetHeight), I.width = I.width - 2 * S["frame-thickness"], utils.DOM._popupContainers[I.containerID] = y, I.containerID = I.containerID + "_container", {
            c: R,
            p: I
        };
    },
    _createJSPopup2: function(f, p, h, v, w, m) {
        var b = a(f).req, y = b.p, S = b.c, E = document.getElementById(y.containerID);
        b.container = E;
        var C = p.Resolve("+/config/body/captions");
        h || (h = 10), v || (v = _.getCdnResource("/gs/i/Dialog/DialogBg_"));
        var I, R = "width:" + h + "px;height:" + h + "px";
        m && (I = "1px solid #555555");
        var A = '<table role="presentation" style="font-size:1px;padding:0px;margin:0px;vertical-align:middle;font-size:1px;line-height:1px;empty-cells:show;" cellpadding="0" cellspacing="0" >';
        A += '<tr><td height="' + h + '" style="font-size:1px"><div style="height:' + h + 'px"><img src="' + v + 'TopLeft.png" style="' + R + '" alt="" /></div></td><td height="' + h + '" style="background-image:url(\'' + v + 'filler.png\');bakground-repeat:repeat"></td><td height="' + h + '" style="font-size:1px;"><div style="height:' + h + 'px"><img style="' + R + '" src="' + v + 'TopRight.png" alt="" /></div></td></tr>', w && (A += "<tr><td style=\"background-image:url('" + v + 'filler.png\');background-repeat:repeat"></td><td><table width="100%" cellspacing="0" cellpadding="0" style="border-top:' + I + ";border-left:" + I + ";border-right:" + I + ';width:100%;background-color:#FFFFFF"><tr><td style="padding-top:10px;padding-left:10px;' + i.getStyleString(C) + '">' + w + '</td><td align="right" valign="top" style="' + i.getStyleString(C) + '"><div style="padding-right:5px;padding-top:5px;text-align:right;"><img tabindex="0" style="cursor:pointer" onclick="gigya.services.socialize._closeComponent(\'' + f + '\', true);" src="' + v + 'close.png" alt="" /></div></td></tr></table></td><td style="background-image:url(\'' + v + "filler.png');background-repeat:repeat\"></td></tr>"), A += "<tr><td style=\"background-image:url('" + v + 'filler.png\');background-repeat:repeat"></td><td><div style="border-bottom:' + I + ";border-left:" + I + ";border-right:" + I + ';background-color:#FFFFFF" id="' + y.containerID + '_container"></div></td><td style="background-image:url(\'' + v + "filler.png');background-repeat:repeat\"></td></tr>", A += '<tr><td height="' + h + '" style="font-size:1px;"><div style="height:' + h + 'px"><img style="' + R + '" src="' + v + 'BottomLeft.png" alt="" /></div></td><td height="' + h + '" style="background-image:url(\'' + v + 'filler.png\');bakground-repeat:repeat"></td><td height="' + h + '" style="font-size:1px;"><div style="height:' + h + 'px"><img style="' + R + '" src="' + v + 'BottomRight.png" alt="" /></div></td></tr></table>', E.innerHTML = A;
        var U = {}, x = {};
        for(var N in y)U[N] = y[N];
        for(N in S)x[N] = S[N];
        return utils.DOM._popupContainers[U.containerID] = E, U.containerID = U.containerID + "_container", U.height = U.height - 2 * h, w && ("" == w.replace(/ /g, "") ? U.height -= 10 : U.height -= o.measureText(w, C).h + 10), U.width = U.width - 2 * h, {
            c: x,
            p: U
        };
    },
    _parseRID: function a1(f) {
        var p, h = f.split("@"), v = document.getElementById(h[2] + "_" + h[1]), w = h[2];
        null == (p = utils.DOM._pseudoContainers[w]) && (p = document.getElementById(h[2]));
        var m = null;
        null != p && (m = p.Reqs);
        var b = null;
        return null != m && (b = m[parseInt(h[0])]), {
            rid: f,
            container: p,
            Reqs: m,
            req: b,
            swf: v
        };
    },
    _closeComponent: function(f, p) {
        var h = socialize._parseRID(f).req;
        socialize.GrayOut && socialize.GrayOut(!1);
        var v = document.getElementById("gigya_ifr_" + h.container.id);
        null != v && (v.style.display = "none"), p && events.dispatchForWidget({
            eventName: "close"
        }, h.p), h.container.style.display = "none";
    },
    plugins: {
        login: {
            instances: [],
            showLoginUI_v2: function(f) {
                var p = "gigya." + namespace + ".plugins." + pluginName + ".instances[" + ns.instances.length + "]";
                var h = new pluginClass(f, p);
                ns.instances.push(h);
            },
            showAddConnectionsUI_v2: function(f) {
                var p = "gigya." + namespace + ".plugins." + pluginName + ".instances[" + ns.instances.length + "]";
                var h = new pluginClass(f, p);
                ns.instances.push(h);
            }
        }
    }
};
export const gcs = {
    submitUserForm: function submitUserForm1() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = {};
        var v = objectUtils.merge([
            thisScript.globalConf,
            f
        ]);
        var w = document.getElementById(v["form"]);
        if (!w) {
            var m = document.getElementsByName(v["form"]);
            if (m && m.length > 0) v["form"] = m[0];
        }
        for(var b = 0; b < w["elements"].length; b++){
            var y = w["elements"][b];
            if (y.name) {
                var S = y.name.split(".");
                var E = h;
                for(var C = 0; C < S.length - 1; C++){
                    var I = S[C];
                    if (!E[I]) E[I] = {};
                    E = E[I];
                }
                E[S[S.length - 1]] = y.value;
            }
        }
        v["data"] = h;
        gcs.setUserData(v);
    },
    getUserData: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    setUserData: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    search: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getSchema: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    }
};
export const gm = {};
export const comments = {};
export const accounts = {
    addEventHandlers: function accountsAddEventHandlers1() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        socializeAddEventHandlers(objectUtils.merge([
            f,
            {
                namespace: "accounts"
            }
        ]));
    },
    b2b: {
        openDelegatedAdminLogin: function openDelegateAdminHandler1(f) {
            if (!f) {
                f = {};
            }
            var p = window.open("", "_blank");
            f["callback"] = function(h) {
                if (h.errorCode !== GSErrors_1.GSErrors.OK) {
                    p.close();
                    if (typeof f.onError === "function") {
                        f.onError(h);
                    }
                } else if (!h.targetUrl || !h.id_token) {
                    p.close();
                    logger.error("accounts.b2b.delegatedAdminLogin - missing required params", {
                        targetURL: h.targetUrl,
                        id_token: h.id_token
                    });
                } else {
                    HTTPUtils.redirect(h.targetUrl, [
                        {
                            id_token: h.id_token
                        }
                    ], h["method"] ? h["method"] : "POST", undefined, p.document);
                }
            };
            accounts.b2b.delegatedAdminLogin(f);
        },
        registerOrganization: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getOrganizationSchema: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        delegatedAdminLogin: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getOrganizationInfo: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        setOrganizationContext: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getOrganizationContext: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        auth: {
            getAssets: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        }
    },
    setSSOToken: function setSSOToken1() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        return tslib_1.__awaiter(this, void 0, gigya.Promise, function() {
            var p, h;
            return tslib_1.__generator(this, function(v) {
                p = utils.object.merge([
                    thisScript.globalConf,
                    f
                ]);
                h = p["redirectURL"] || document.location.href;
                utils.HTTP.redirect(h, [
                    {}
                ], "GET", "_top");
                return [
                    2
                ];
            });
        });
    },
    auth: {
        fido: {
            register: function registerPasskey1(f) {
                if (f === void 0) {
                    f = {};
                }
                return PasskeyService_1.default.registerPasskey(f, true).then(function(p) {
                    return invokeCallback(f, p);
                }).catch(function(p) {
                    throw invokeCallback(f, p);
                });
            },
            login: function passkeyLogin1(f) {
                if (f === void 0) {
                    f = {};
                }
                return PasskeyService_1.default.authenticate(f).then(function(p) {
                    return invokeCallback(f, p);
                }).catch(function(p) {
                    throw invokeCallback(f, p);
                });
            },
            initRegisterCredentials: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            registerCredentials: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            getAssertionOptions: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            verifyAssertion: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            getCredentials: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            removeCredential: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        },
        getPreferredLoginMethod: function getPreferredLoginMethod1(f) {
            return SiteData_1.siteData.getPreferredLoginMethod(f);
        },
        setPreferredLoginMethod: function setPreferredLoginMethod1(f, p) {
            SiteData_1.siteData.setPreferredLoginMethod(f, p);
        },
        guest: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        otp: {
            verify: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            authenticate: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            email: {
                sendCode: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                login: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            }
        },
        getMethods: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        push: {
            sendVerification: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            isVerified: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        },
        magiclink: {
            email: {
                send: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                login: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            }
        },
        login: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        }
    },
    socialLogin: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    showMyPhotoUI: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    showTfaUI: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    initHostedPage: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    showScreenSet: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    hideScreenSet: function(f) {
        if (!_this.injectionInfo) {
            LegacyLogger_1.addLog("invalid injection info", _this, false);
            return;
        }
        var p = _this.getPublicMethod(methodName);
        var h = UiApiHelpers_1.getPluginInstance(f, _this.injectionInfo);
        if (!h) {
            LegacyLogger_1.addLog("couldn't find instance", _this, false);
        } else {
            var v = [];
            arrayUtils.forEach(p.argNames, function(p) {
                if (p && f[p] !== undefined) v.push(f[p]);
            });
            h[p.instanceMethod].apply(h, v);
        }
    },
    switchScreen: function(f) {
        if (!_this.injectionInfo) {
            LegacyLogger_1.addLog("invalid injection info", _this, false);
            return;
        }
        var p = _this.getPublicMethod(methodName);
        var h = UiApiHelpers_1.getPluginInstance(f, _this.injectionInfo);
        if (!h) {
            LegacyLogger_1.addLog("couldn't find instance", _this, false);
        } else {
            var v = [];
            arrayUtils.forEach(p.argNames, function(p) {
                if (p && f[p] !== undefined) v.push(f[p]);
            });
            h[p.instanceMethod].apply(h, v);
        }
    },
    login: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    linkAccounts: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    notifySocialLogin: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    initRegistration: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    initProgression: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    register: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    finalizeRegistration: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    captchaImage: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    importProfilePhoto: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    setProfilePhoto: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    resetPassword: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    removeProfilePhoto: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    isAvailableLoginID: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    address: {
        suggestions: {
            get: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        }
    },
    resendVerificationCode: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getCaptcha: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getPolicies: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getSchema: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getSiteConsentDetails: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getLegalStatements: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    verifyLogin: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getAccountInfo: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    setAccountInfo: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    logout: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    search: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getScreenSets: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    sso: {
        login: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        }
    },
    getConflictingAccount: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    resetSitePreferences: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getJWT: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    tfa: {
        getProviders: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        initTFA: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        finalizeTFA: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        deactivateProvider: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        unregisterDevice: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        backupcodes: {
            get: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            create: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            verify: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        },
        phone: {
            getRegisteredPhoneNumbers: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            removePhone: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            sendVerificationCode: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            completeVerification: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        },
        email: {
            getEmails: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            sendVerificationCode: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            completeVerification: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        },
        totp: {
            register: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            verify: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            getRegistered: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            remove: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        },
        push: {
            isVerified: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            sendVerification: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        }
    },
    groups: {
        getSchema: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        registerGroup: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        setGroupInfo: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getGroupInfo: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        deleteGroup: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        setGroupMemberInfo: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getGroupMemberInfo: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        removeMember: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        getAllMemberGroups: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        searchGroupMembers: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        createInvitation: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        invitationConfirm: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        finalizeInvitation: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        }
    },
    otp: {
        sendCode: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        login: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        },
        update: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        }
    },
    identifier: {
        createToken: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        }
    },
    identity: {
        authorize: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        }
    },
    session: {
        verify: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        }
    }
};
export const gscounters = {};
export const utils = {
    toggles: {},
    array: {
        indexOf: function indexOf1(f, p) {
            for(var h = 0; h < f.length; h++){
                if (f[h] == p) return h;
            }
            return -1;
        },
        clone: function clone1(f) {
            var p = [];
            for(var h = 0; h < f.length; h++){
                p[h] = f[h];
            }
            return p;
        },
        removeByValue: function removeByValue1(f, p) {
            if (!f) return;
            for(var h = f.length - 1; h >= 0; h--){
                if (f[h] == p) {
                    f.splice(h, 1);
                }
            }
        },
        removeByProperty: function removeByProperty1(f, p, h) {
            if (!f) return;
            for(var v = f.length - 1; v >= 0; v--){
                if (f[v][p] == h) {
                    f.splice(v, 1);
                }
            }
        },
        getArrayFromString: function getArrayFromString1(f, p, h) {
            if (!f || typeof f != "string") return [];
            if (h) f = f.toLowerCase();
            f = f.replace(/[ ]/g, "").replace(/,,/g, ",");
            if (!f) return [];
            return f.split(p);
        },
        intersect: function intersect1(f) {
            var p = [];
            for(var h = 1; h < arguments.length; h++){
                p[h - 1] = arguments[h];
            }
            if (f == null) return [];
            var v = [];
            var w = arguments.length;
            for(var m = 0, b = f.length; m < b; m++){
                var y = f[m];
                if (this.indexOf(v, y) != -1) continue;
                for(var S = 1; S < w; S++){
                    var E = arguments[S];
                    if (E == null || this.indexOf(E, y) == -1) break;
                }
                if (S === w) v.push(y);
            }
            return v;
        },
        lastIndexOf: function lastIndexOf1(f, p, h) {
            if (h === void 0) {
                h = 0;
            }
            for(var v = f.length; --v >= h;){
                if (f[v] === p) return v;
            }
            return -1;
        },
        forEach: function forEach1(f, p) {
            for(var h = 0; h < f.length; ++h)p(f[h], h, f);
        },
        forEachProp: function forEachProp1(f, p) {
            for(var h in f){
                if (f.hasOwnProperty(h)) p(f[h], h, f);
            }
        },
        some: function some1(f, p) {
            for(var h = 0; h < f.length; ++h){
                if (p(f[h], h, f)) return true;
            }
            return false;
        },
        every: function every1(f, p) {
            for(var h = 0; h < f.length; ++h){
                if (!p(f[h], h, f)) return false;
            }
            return true;
        },
        everyProp: function everyProp1(f, p) {
            for(var h in f){
                if (f.hasOwnProperty(h) && !p(f[h], h, f)) return false;
            }
            return true;
        },
        map: function map1(f, p) {
            var h = new Array();
            forEach(f, function(f, v, w) {
                return h.push(p(f, v, w));
            });
            return h;
        },
        firstIndex: function firstIndex1(f, p) {
            var h = -1;
            some(f, function(f, v, w) {
                if (p(f, v, w)) {
                    h = v;
                    return true;
                }
                return false;
            });
            return h;
        },
        first: function first1(f, p) {
            return f[firstIndex(f, p)];
        },
        getAllEnumValues: function getAllEnumValues1(f) {
            var p = [];
            for(var h in f)if (typeof f[h] == "number") p.push(f[h]);
            return p;
        },
        getUniqueValues: function getUniqueValues1(f) {
            for(var p = 0; p < f.length; ++p){
                for(var h = p + 1; h < f.length; h++)if (f[p] === f[h]) {
                    f.splice(h, 1);
                }
            }
            return f;
        },
        includes: function includes1(f, p) {
            if (f === void 0) {
                f = [];
            }
            return (f === null || f === void 0 ? void 0 : f.indexOf(p)) >= 0;
        },
        containsOnly: function containsOnly1(f, p) {
            if (!f || !p) return false;
            if (f.length !== p.length) return false;
            if (f.length === 0 && p.length === 0) return true;
            return !f.some(function(f) {
                return !includes(p, f);
            });
        }
    },
    browser: {
        isModern: function isModern1() {
            return LocalInfo_1.localInfo.isChrome || LocalInfo_1.localInfo.isFF || LocalInfo_1.localInfo.isEdge || LocalInfo_1.localInfo.isOpera || LocalInfo_1.localInfo.isIOSWebView || LocalInfo_1.localInfo.isIE && getVersion() >= 9 || LocalInfo_1.localInfo.isEdgeLegacy || LocalInfo_1.localInfo.isSafari && getVersion() >= 4 || LocalInfo_1.localInfo.isGoogleBot;
        },
        getVersion: function getVersion1() {
            if (_cache.version) return _cache.version;
            try {
                var f = userAgent.match(/(opera|chrome|safari|firefox|msie|trident.*rv:)\/?\s*(\.?\d+(\.\d+)*)/i);
                if (f[2]) {
                    var p = f[2].split(".")[0];
                    if (!isNaN(parseInt(p))) {
                        return _cache.version = parseInt(p);
                    }
                }
            } catch (h) {}
            return 0;
        }
    },
    cookie: {
        _cookieStore: {}
    },
    date: {
        now: function now1() {
            return Date.now();
        }
    },
    delegate: {
        create: function create1(f, p) {
            return function() {
                var h = [];
                for(var v = 0; v < arguments.length; v++){
                    h[v] = arguments[v];
                }
                return p.apply(f, h);
            };
        }
    },
    DOM: {
        _popupContainers: [],
        _pseudoContainers: [],
        getNextZIndex: function getNextZIndex1() {
            _nextZIndex++;
            return _nextZIndex;
        },
        getGigyaScriptElement: function getGigyaScriptElement1(f) {
            var p = document.getElementsByTagName("script");
            var h;
            var v = /\/\/cdn(s)?\.(ru1\.)?gigya.com/;
            for(var w = p.length - 1; w >= 0; w--){
                var m = p[w];
                var b = m.src.toLowerCase();
                if (b !== "") {
                    if (v.test(b) || b.indexOf("?apikey=") > -1) {
                        var y = f.length === 0 || f.some(function(f) {
                            return b.indexOf(f) > -1;
                        });
                        if (y) {
                            h = m;
                            break;
                        }
                    }
                }
            }
            return h;
        },
        dispatch: function dispatch1(f, p) {
            var h;
            try {
                h = new Event(p);
            } catch (v) {
                h = document.createEvent("CustomEvent");
                h.initCustomEvent(p, true, true, {});
            }
            f.dispatchEvent(h);
        },
        addButtonSubmitListener: function addButtonSubmitListener1(f, p, h, v) {
            if (h === void 0) {
                h = "click";
            }
            if (!f) {
                return;
            }
            f.setAttribute("role", "button");
            if (f.getAttribute("tabindex") != "-1") {
                f.setAttribute("tabindex", "0");
            }
            addEventListener(f, h, function(f) {
                return p(f);
            });
            addEventListener(f, "keydown", function(f) {
                if ((f.which || f.keyCode) == 13) {
                    f.preventDefault();
                    p(f);
                }
            });
        },
        addEventListener: function addEventListener1(f, p, h) {
            if (!f || !h) return;
            if (f.addEventListener) {
                f.addEventListener(p, h, true);
            } else {
                f.attachEvent("on" + p, h);
            }
        },
        addActivationHandler: function addActivationHandler1(f, p) {
            if (!f || !p) return;
            this.addEventListener(f, "keydown", function(f) {
                if (f.code === "Space" || f.code === "Enter") {
                    p();
                }
            });
            this.addEventListener(f, "click", p);
        },
        removeEventListener: function removeEventListener1(f, p, h) {
            if (!f || !h) return;
            if (f.removeEventListener) {
                f.removeEventListener(p, h, true);
            } else {
                f.detachEvent("on" + p, h);
            }
        },
        disableDefaultEventHandling: function disableDefaultEventHandling1(f) {
            if (f.preventDefault) {
                f.preventDefault();
            } else if (window.event) {
                window.event.returnValue = false;
            }
        },
        addDialogBackListener: function addDialogBackListener1(f) {
            _removeDialogBackListener();
            backListener = function(p) {
                if (p && p.newURL && p.newURL.indexOf("|gigyaMobileDialog") == -1) {
                    f(p);
                    _removeDialogBackListener();
                }
            };
            window.setTimeout(function() {
                if (window.location.hash.indexOf("|gigyaMobileDialog") == -1) {
                    window.location.hash = window.location.hash + "|gigyaMobileDialog";
                }
                addEventListener(window, "hashchange", backListener);
            }, 50);
        },
        _removeDialogBackListener: function _removeDialogBackListener1() {
            if (!backListener) return;
            removeEventListener(window, "hashchange", backListener);
            backListener = null;
            window.location.hash = window.location.hash.replace("|gigyaMobileDialog", "");
        },
        prependToBody: function prependToBody1(f, p) {
            if (p === void 0) {
                p = window.document;
            }
            if (!p.body) return;
            if (p.body.insertBefore && p.body.firstChild) {
                p.body.insertBefore(f, p.body.firstChild);
            } else {
                p.body.appendChild(f);
            }
        },
        appendToBody: function appendToBody1(f, p) {
            if (p === void 0) {
                p = window.document;
            }
            if (!p.body) return;
            p.body.appendChild(f);
        },
        removeElement: function removeElement1(f) {
            if (f && f.parentElement) {
                f.parentElement.removeChild(f);
            }
        },
        isChildOf: function isChildOf1(f, p) {
            var h = f.parentNode;
            while(h){
                if (p == h) {
                    return true;
                }
                h = h.parentNode;
            }
            return false;
        },
        isVisible: function isVisible1(f) {
            while(f){
                var p = getComputedStyle(f);
                if (p.display === "none" || p.visibility === "hidden") {
                    return false;
                } else {
                    f = f.parentElement;
                }
            }
            return true;
        },
        getCenteredDivID: function getCenteredDivID1(f) {
            return "gig_" + LocalInfo_1.localInfo.initTime.getTime().toString() + "_" + f;
        },
        createElementWithAttributes: function createElementWithAttributes1(f, p) {
            var h = document.createElement(f);
            if (p) {
                for(var v in p){
                    h[v] = p[v];
                }
            }
            return h;
        },
        createTopLevelDiv: function createTopLevelDiv1(f) {
            var p = document.createElement("div");
            if (p.style.zIndex != null) {
                p.style.zIndex = "" + getNextZIndex();
            }
            p.innerHTML = "";
            if (f) {
                p.id = f;
            }
            if (document.body) {
                if (document.body.insertBefore && document.body.firstChild) {
                    document.body.insertBefore(p, document.body.firstChild);
                } else if (document.body.appendChild) {
                    document.body.appendChild(p);
                }
            }
            return p;
        },
        hideByID: function hideByID1(f) {
            var p = document.getElementById(f);
            if (p) {
                p.style.display = "none";
            }
        },
        showByID: function showByID1(f) {
            var p = document.getElementById(f);
            if (p) {
                p.style.display = LocalInfo_1.localInfo.isIE6 ? p.tagName == "TD" ? "table-cell" : p.tagName == "TR" ? "" : p.tagName == "TABLE" ? "" : "block" : "";
            }
        },
        clearByID: function clearByID1(f) {
            try {
                var p = document.getElementById(f);
                if (p != null) {
                    p.innerHTML = "";
                }
            } catch (h) {}
        },
        getHTMLSize: function getHTMLSize1(f, p) {
            var h = document.createElement("div");
            h.style.position = "absolute";
            h.style.left = "-1000px";
            h.innerHTML = f;
            p.appendChild(h);
            var v = h.offsetWidth;
            var w = h.offsetHeight;
            h.parentNode.removeChild(h);
            return {
                w: v,
                h: w
            };
        },
        getElementsByClass: function getElementsByClass1(f, p, h) {
            if (!f) {
                return [];
            }
            var v = [];
            if (h && isElementClass(f, p)) {
                v.push(f);
            }
            var w = f.getElementsByTagName("*");
            for(var m = 0; m < w.length; m++){
                if (isElementClass(w[m], p)) {
                    v.push(w[m]);
                }
            }
            return v || [];
        },
        getElementsByAttribute: function getElementsByAttribute1(f, p, h, v) {
            var w = [];
            var m = f.getElementsByTagName(p);
            for(var b = 0; b < m.length; b++){
                if (m[b].getAttribute(h) == v) {
                    w.push(m[b]);
                }
            }
            return w;
        },
        getElementPosition: function getElementPosition1(f) {
            if (!f) {
                return {
                    left: 0,
                    top: 0,
                    bottom: 0,
                    right: 0
                };
            }
            var p = f.getBoundingClientRect();
            var h = viewportUtils.getScroll();
            var v = p.left + h.left;
            var w = p.top + h.top;
            return {
                left: v,
                top: w,
                right: v + p.width,
                bottom: w + p.height
            };
        },
        addClassToElement: function addClassToElement1(f, p) {
            if (!f) {
                return;
            }
            var h = f.className ? getClassNames(f) : [];
            var v = h.length;
            var w = p.split(" ");
            for(var m in w){
                var b = false;
                if (!w[m]) {
                    break;
                }
                for(var y in h){
                    if (h[y] === w[m]) {
                        b = true;
                        break;
                    }
                }
                if (!b) {
                    h.push(w[m]);
                }
            }
            if (h.length !== v) {
                f.className = h.join(" ");
            }
        },
        removeClassFromElement: function removeClassFromElement1(f, p, h) {
            if (h === void 0) {
                h = false;
            }
            if (!f) {
                return;
            }
            var v = getClassNames(f);
            for(var w = v.length - 1; w >= 0; w--){
                if (v[w] === p || h && v[w].indexOf(p) !== -1) {
                    v.splice(w, 1);
                }
            }
            f.className = v.join(" ");
        },
        getClassNames: function getClassNames1(f) {
            var p = [];
            if (typeof f.className === "string") {
                p = f.className.split(" ");
            }
            return p;
        },
        isElementClass: function isElementClass1(f, p) {
            if (!f) return false;
            else if (!p) return true;
            else if (!f.className) return false;
            var h = false;
            var v = getClassNames(f);
            for(var w = 0; w < v.length; w++){
                if (v[w] === p) {
                    h = true;
                    break;
                }
            }
            return h;
        },
        cancelEvent: function cancelEvent1(f) {
            if (!f) return;
            if ("cancelable" in f) f.preventDefault();
            else f.returnValue = false;
        },
        createElement: function createElement1(f, p) {
            var h = document.createElement("div");
            p = p || "";
            h.innerHTML = "<" + f + ' name="' + p + '" id="' + p + '"></' + f + ">";
            return h.firstChild;
        },
        setSize: function setSize1(f, p, h, v) {
            if (f == null || f.style == null) {
                return;
            }
            if (p) {
                p = "" + p;
                var w = p.indexOf("%") > 0;
                if (!isNaN(p) || w) {
                    var m = "" + (w ? p : p + "px");
                    if (f.style.width != m) {
                        f.style.width = m;
                    }
                }
            }
            if (h) {
                h = "" + h;
                var b = h.indexOf("%") > 0;
                if (!isNaN(p) || b) {
                    var y = "" + (b ? h : h + "px");
                    if (f.style.height !== y) {
                        f.style.height = y;
                    }
                }
            }
            if (v && p && h) {
                if (f.style.zIndex == null || v) {
                    f.style.zIndex = "" + getNextZIndex();
                }
                var S = viewportUtils.getInnerSize();
                var E = viewportUtils.getScroll();
                var C = E.top;
                var I = E.left;
                f.style.top = "" + Math.max(0, C + Math.floor((S.h - h) / 2)) + "px";
                f.style.left = "" + Math.max(0, I + Math.floor((S.w - p) / 2)) + "px";
                f.style.visibility = "";
            }
        },
        createHiddenIframe: function createHiddenIframe1(f) {
            var p = document.createElement("iframe");
            p.src = f;
            p.style.width = "30px";
            p.style.height = "10px";
            p.style.position = "absolute";
            p.style.top = "-1000px";
            p.style.left = "-1000px";
            if (document.body) {
                appendToBody(p);
            } else {
                functionsUtils.invokeOnPageLoad(function() {
                    appendToBody(p);
                });
            }
            return p;
        },
        attributeEncode: function attributeEncode1(f) {
            return f.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\"/g, "&quot;").replace(/\'/g, "&#39;");
        },
        manipulateAttributes: function manipulateAttributes1(f, p, h, v) {
            if (v === void 0) {
                v = function() {
                    return true;
                };
            }
            f.forEach(function(f) {
                if (!f.attributes) return;
                Array.prototype.slice.call(f.attributes).forEach(function(f) {
                    if (v(f)) {
                        f.value = f.value.replace(p, h);
                    }
                });
            });
        },
        textNodesUnder: function textNodesUnder1(f) {
            var p;
            var h = [];
            var v = document.createTreeWalker(f, NodeFilter.SHOW_TEXT, null, false);
            while(p = v.nextNode()){
                h.push(p);
            }
            return h;
        },
        isHTMLBooleanAttribute: function isHTMLBooleanAttribute1(f) {
            return [
                "autocomplete",
                "autofocus",
                "checked",
                "disabled",
                "hidden",
                "readonly",
                "required",
                "selected"
            ].indexOf(f) > -1;
        },
        isBelongToGigyaFieldset: function isBelongToGigyaFieldset1(f) {
            if (!f || f instanceof HTMLFormElement) {
                return false;
            }
            if (isElementClass(f.parentElement, "gigya-fieldset")) {
                return true;
            }
            return isBelongToGigyaFieldset1(f.parentElement);
        },
        getClosestElement: function getClosestElement1(f, p, h) {
            if (h === void 0) {
                h = document;
            }
            setMatchesPolyfill();
            for(; f && f !== h; f = f.parentNode){
                if (f === null || f === void 0 ? void 0 : f.matches(p)) return f;
            }
            return null;
        },
        createElementFromTemplate: function createElementFromTemplate1(f) {
            if (f === void 0) {
                f = "";
            }
            var p;
            var h = document.createElement("div");
            h.innerHTML = f === null || f === void 0 ? void 0 : f.trim();
            return (p = h.firstChild) !== null && p !== void 0 ? p : h;
        },
        isParentHasClass: function isParentHasClass1(f, p) {
            var h;
            if ((h = f === null || f === void 0 ? void 0 : f.classList) === null || h === void 0 ? void 0 : h.contains(p)) {
                return true;
            }
            if (!(f === null || f === void 0 ? void 0 : f.parentElement)) {
                return false;
            }
            return isParentHasClass1(f === null || f === void 0 ? void 0 : f.parentElement, p);
        },
        enableSafeCopy: function(f) {
            f.addedSafeCopy || (utils.DOM.addEventListener(f, "copy", function(f) {
                var p = (f = f || window.event).target || f.srcElement, h = p && p.nodeName ? p.nodeName.toLowerCase() : "";
                if ("textarea" != h && "input" != h) {
                    var v = document.createElement("div");
                    v.style.color = window.getComputedStyle ? window.getComputedStyle(document.body).backgroundColor : "#FFFFFF", v.style.fontSize = "0px", utils.DOM.prependToBody(v);
                    var w, m, b = new RegExp("(&shy;|" + String.fromCharCode(173) + ")", "g");
                    if (window.getSelection) {
                        f.stopPropagation();
                        var y = (w = window.getSelection()).getRangeAt(0);
                        v.appendChild(y.cloneContents()), v.innerHTML = v.innerHTML.replace(b, ""), w.selectAllChildren(v);
                        var s1 = function() {
                            v.parentNode.removeChild(v), w.removeAllRanges(), w.addRange(y);
                        };
                    } else f.cancelBubble = !0, w = window.document.selection, y = w.createRange(), v.innerHTML = y.htmlText, v.innerHTML = v.innerHTML.replace(b, ""), (m = document.body.createTextRange()).moveToElementText(v), m.select(), s1 = function() {
                        v.parentNode.removeChild(v), "" !== y.text && y.select();
                    };
                    window.setTimeout(s1, 0);
                }
            }), f.addedSafeCopy = !0);
        }
    },
    functions: {
        callAsync: function callAsync1(f, p) {
            if (p === void 0) {
                p = {};
            }
            return tslib_1.__awaiter(this, void 0, gigya.Promise, function() {
                return tslib_1.__generator(this, function(h) {
                    return [
                        2,
                        new gigya.Promise(function(h) {
                            callFunction("gigya." + f, [
                                tslib_1.__assign(tslib_1.__assign({}, p), {
                                    callback: h
                                })
                            ]);
                        })
                    ];
                });
            });
        },
        callFunction: function callFunction(name, arParams) {
            var fn = eval(name);
            var arParts = name.split(".");
            arParts.splice(arParts.length - 1, 1);
            var scope = eval(arParts.join("."));
            fn.apply(scope, arParams);
        },
        invokeOnPageLoad: function invokeOnPageLoad1(f, p) {
            if (!document.readyState && document.body || document.readyState === "complete" || !p && document.readyState === "interactive" && document.body) {
                f();
            } else {
                var h = false;
                var fnOnLoad1 = function() {
                    if (!h) {
                        h = true;
                        f();
                    }
                };
                window.setTimeout(fnOnLoad1, 20000);
                DOMUtils.addEventListener(window, "load", fnOnLoad1);
                DOMUtils.addEventListener(document, "DOMContentLoaded", fnOnLoad1);
            }
        },
        createAlias: function createAlias1(f, p) {
            var h = f.split(".");
            var v = window;
            for(var w = 0; w < h.length - 1; w++){
                var m = h[w];
                if (!v[m]) {
                    v[m] = {};
                }
                v = v[m];
            }
            v[h[h.length - 1]] = p;
        },
        debounce: function debounce1(f, p) {
            var h = undefined;
            return function() {
                if (h !== undefined) {
                    clearTimeout(h);
                }
                h = setTimeout(function() {
                    h = undefined;
                    f();
                }, p);
            };
        },
        addSrcToIFrameIfNeeded: function addSrcToIFrameIfNeeded1(f, p) {
            if (p === void 0) {
                p = cdn_1.getCdnResource("/");
            }
            if (LocalInfo_1.localInfo.isIOSWebView || LocalInfo_1.localInfo.isIOS && LocalInfo_1.localInfo.isWeChat) {
                f.setAttribute("src", p);
            }
        }
    },
    gltexp: {
        isValid: function isValid1(f) {
            return getMillis(f) > Date.now();
        },
        getMax: function getMax1() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            if (!f || !f.length) return undefined;
            return f.sort(function(f, p) {
                return getMillis(p) - getMillis(f);
            })[0];
        },
        getMillis: function getMillis1(f) {
            return !f ? 0 : Number(f.substr(0, f.indexOf("_"))) * 1000;
        }
    },
    HTTP: {
        redirect: function redirect1(f, p, h, v, w) {
            if (w === void 0) {
                w = window.document;
            }
            if (h && h.toLowerCase() == "post") {
                var m = w.createElement("form");
                var b = [];
                m.setAttribute("accept-charset", "UTF-8");
                m.setAttribute("method", "POST");
                m.setAttribute("action", f);
                if (v) m.setAttribute("target", v);
                var y = objectUtils.merge(p);
                for(var S in y){
                    if ((typeof y[S] == "number" || typeof y[S] == "boolean" || typeof y[S] == "string") && S != "eventName") {
                        b.push('<textarea name="' + encodeURIComponent(S) + '">' + y[S].toString().replace(/\&/g, "&amp;") + "</textarea>");
                    }
                }
                m.innerHTML = b.join("");
                m.style.display = "none";
                DOMUtils.appendToBody(m, w);
                m.submit();
            } else {
                var E = new Uri_1.Uri(f);
                var C = {};
                for(var I = 0; I < p.length; I++){
                    var R = p[I];
                    for(var A in R){
                        if (R.hasOwnProperty(A)) {
                            var U = R[A];
                            C[A] = U;
                        }
                    }
                }
                E.addToSearch(C);
                w.location.href = E.toString();
            }
        }
    },
    JSON: {
        serialize: function serialize1(f, p, h, v, w) {
            if (p === void 0) {
                p = false;
            }
            if (h === void 0) {
                h = false;
            }
            if (v === void 0) {
                v = 0;
            }
            if (w === void 0) {
                w = 20;
            }
            if (!localInfo.isIE8) {
                return window["JSON"].stringify(f);
            } else {
                if (!v) v = 0;
                if (v > w) return "[Too deep]";
                var m = "";
                var b = "";
                var y = "";
                if (h) {
                    y = "	";
                    b = "\n";
                    for(var S = 0; S < v + 1; S++){
                        m += y;
                    }
                }
                var E = typeof f;
                if (E == "function") {
                    return E.toString();
                }
                if (E != "object" || f === null) {
                    if (E == "string") f = '"' + f.replace(/(\"|\\)/g, "\\$1").replace(/\r\n|\r|\n/g, "\\n") + '"';
                    return String(f);
                } else {
                    var C, I, R = [], A = f && f.constructor == Array;
                    if (A) {
                        for(var S = 0; S < f.length; S++){
                            I = f[S];
                            E = typeof I;
                            if (I == null || E == "undefined") I = "";
                            else if (E == "string") I = '"' + I.replace(/(\"|\\)/g, "\\$1").replace(/\r\n|\r|\n/g, "\\n") + '"';
                            else if (E == "function") {
                                if (p) I = "Function";
                                else I = "";
                            } else if (I.parentNode && I.innerHTML) I = "HTMLElement";
                            else if (I.constructor == Date) I = "";
                            else if (E == "object" && I !== null) I = serialize1(I, p, h, v + 1);
                            if (String(I) != "") R.push(m + y + String(I));
                        }
                    } else {
                        for(C in f){
                            I = f[C];
                            E = typeof I;
                            if (I == null || E == "undefined") I = String(I);
                            else if (E == "string") I = '"' + I.replace(/(\"|\\)/g, "\\$1").replace(/\r\n|\r|\n/g, "\\n") + '"';
                            else if (E == "function") {
                                if (p) {
                                    I = "Function";
                                } else {
                                    I = "";
                                }
                            } else if (I.parentNode && I.innerHTML) I = "HTMLElement";
                            else if (I.constructor == Date) I = "";
                            else if (E == "object" && I !== null) I = b + serialize1(I, p, h, v + 1);
                            if (String(I) != "") R.push(m + y + '"' + C.replace(/(\"|\\)/g, "\\$1").replace(/\r\n|\r|\n/g, "\\n") + '":' + String(I));
                        }
                    }
                    return b + m + (A ? "[" : "{") + b + R.join("," + b) + b + m + (A ? "]" : "}");
                }
            }
        },
        deserialize: function deserialize(json, defaultValue, scope) {
            if (!json || !json.replace(/^\s+|\s+$/g, "")) {
                return defaultValue || {};
            }
            try {
                var keys = [];
                var values = [];
                if (scope) {
                    for(var key in scope){
                        keys.push(key);
                        values.push(scope[key]);
                    }
                }
                var fn = eval("(function(" + keys.join(",") + ") { return " + json.trim() + "; })");
                return fn.apply(undefined, values);
            } catch (e) {
                console.warn("Error deserializing JavaScript", e);
                return defaultValue || {};
            }
        },
        parse: function parse1(f, p) {
            if (localInfo.isIE8) {
                return deserialize(f, p);
            } else {
                try {
                    return window["JSON"].parse(f);
                } catch (h) {
                    return p || {};
                }
            }
        }
    },
    keyboard: {
        Keys: {
            8: "backspace",
            13: "enter",
            27: "escape",
            escape: 27,
            backspace: 8,
            enter: 13
        },
        keyCodes: {
            8: "Backspace",
            13: "Enter",
            27: "Escape"
        },
        onHotKeyClicked: function onHotKeyClicked1(f, p) {
            return new HotKeyEvent(f, p);
        }
    },
    keyValue: {
        serialize: function serialize1(f, p) {
            var h = [];
            if (!p) {
                p = "&";
            }
            for(var v in f){
                switch(typeof f[v]){
                    case "function":
                        break;
                    case "object":
                        if (f[v] != null) {
                            h.push(v + "=" + URLUtils.URLEncode(JSONUtils.serialize(f[v])));
                        }
                        break;
                    case "undefined":
                        break;
                    default:
                        h.push(v + "=" + URLUtils.URLEncode(f[v]));
                }
            }
            var w = h.join(p);
            return w;
        },
        deserialize: function deserialize1(f, p, h, v) {
            var w = {};
            if (!f) {
                return w;
            }
            if (!p) {
                p = "&";
            }
            var m = f.split(p);
            for(var b = 0; b < m.length; b++){
                var y = m[b];
                var S = y.indexOf("=");
                if (S === -1) {
                    var E = h ? y.toLowerCase() : y;
                    w[E] = "1";
                } else {
                    var E = y.substr(0, S);
                    if (h) {
                        E = E.toLowerCase();
                    }
                    var C = y.substr(S + 1).replace(/\+/g, " ");
                    try {
                        if (v) {
                            w[E] = FlagService_1.FlagService.useDecodeURIComponent ? compareResultsAndReturnURLDecode(C) : unescape(C);
                        } else {
                            w[E] = URLUtils.URLDecode(C);
                        }
                    } catch (f) {
                        w[E] = FlagService_1.FlagService.useDecodeURIComponent ? URLUtils.URLDecode(C) : unescape(C);
                    }
                }
            }
            return w;
        }
    },
    localStorage: {
        AbstractLocalStorageAdapter: function AbstractLocalStorageAdapter1() {},
        AbstractAsyncLocalStorageAdapter: function AbstractAsyncLocalStorageAdapter1() {
            var f = _super.call(this) || this;
            f.isLoaded = false;
            return f;
        },
        CookieStorageAdapter: function CookieStorageAdapter1() {
            return _super !== null && _super.apply(this, arguments) || this;
        },
        MemoryStorageAdapter: function MemoryStorageAdapter1() {
            var f = _super.call(this) || this;
            f.memory = {};
            return f;
        },
        adapters: [
            function LocalStorageAdapter1() {
                var f = _super.call(this) || this;
                f.storage = window.localStorage;
                return f;
            },
            function SessionStorageAdapter1() {
                var f = _super.call(this) || this;
                f.storage = window.sessionStorage;
                return f;
            },
            function FirefoxStorageAdapter1() {
                return _super !== null && _super.apply(this, arguments) || this;
            },
            function CookieStorageAdapter1() {
                return _super !== null && _super.apply(this, arguments) || this;
            },
            function MemoryStorageAdapter1() {
                var f = _super.call(this) || this;
                f.memory = {};
                return f;
            }
        ],
        instances: {
            LocalStorageAdapter: {
                storage: {}
            },
            CookieStorageAdapter: {}
        },
        initializeAdapter: function initializeAdapter1(f) {
            var p = f.getName() || f.name;
            if (!exports.instances[p]) {
                exports.instances[p] = new f();
            }
            return exports.instances[p];
        },
        waitForService: function waitForService1(f) {
            var p;
            for(var h = 0, v = exports.adapters; h < v.length; h++){
                var w = v[h];
                if (w.isAvailable()) {
                    if (w.prototype instanceof AbstractAsyncLocalStorageAdapter && !f) {
                        continue;
                    }
                    p = initializeAdapter(w);
                    break;
                }
            }
            if (!p) {
                p = initializeAdapter(MemoryStorageAdapter);
            }
            if (f) {
                if (p instanceof AbstractAsyncLocalStorageAdapter) {
                    p.waitForService(function() {
                        f(p);
                    });
                } else {
                    f(p);
                }
            }
            return p;
        },
        getItem: function getItem1(f) {
            return adapter.getItem(f);
        },
        setItem: function setItem1(f, p, h) {
            return adapter.setItem(f, p, h);
        },
        removeItem: function removeItem1(f) {
            return adapter.removeItem(f);
        },
        setObject: function setObject1(f, p) {
            return adapter.setObject(f, p);
        },
        getObject: function getObject1(f, p) {
            return adapter.getObject(f, p);
        }
    },
    mouse: {
        getPosition: function getPosition1() {
            var f = 0;
            var p = 0;
            if (document.body) {
                var h = mouseEventObject;
                if (!h) h = {
                    clientX: 0,
                    clientY: 0
                };
                if (h.pageX || h.pageY) {
                    f = h.pageX;
                    p = h.pageY;
                } else if (h.clientX || h.clientY) {
                    f = h.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                    p = h.clientY + document.body.scrollTop + document.documentElement.scrollTop;
                }
                return {
                    x: f,
                    y: p
                };
            }
        }
    },
    object: {
        removeUndefined: function removeUndefined1(f) {
            var p = {};
            for(var h in f){
                if (f[h] != null && f[h] != undefined) {
                    p[h] = f[h];
                }
            }
            return p;
        },
        expressionHelper: function expressionHelper1(f) {
            f = f || {};
            return {
                getField: function(p) {
                    if (!p) return undefined;
                    var h = p.split("."), v = f, w;
                    for(w = 0; w < h.length; ++w){
                        if (v[h[w]] == undefined) {
                            return undefined;
                        } else {
                            v = v[h[w]];
                        }
                    }
                    return v;
                }
            };
        },
        getPropertyBySerializedName: function getPropertyBySerializedName1(f, p, h) {
            if (!p) return f;
            var v = f;
            var w = p.split(".");
            for(var m = 0; m < w.length; m++){
                var b = w[m];
                var y = null;
                if (b.match(/\[[0-9]+]/)) {
                    y = Number(b.match(/\[[0-9]+]/)[0].replace(/[\[\]]/g, ""));
                }
                b = b.split(/\[[0-9]+]/).join("");
                var S = (y || y === 0) && v[b] ? v[b][y] : v[b];
                if (h && !v[b]) {
                    v[b] = {};
                } else if (h && !S && S !== false) {
                    v[b] = [];
                }
                if (S || S === false) {
                    v = S;
                } else {
                    return null;
                }
            }
            return v;
        },
        setPropertyBySerializedName: function setPropertyBySerializedName1(f, p, h) {
            var v = p.split(".");
            var w = v.pop();
            getPropertyBySerializedName(f, v.join("."), true)[w] = h;
        },
        add: function add1(f, p, h) {
            for(var v in p){
                if (!h || typeof f[v] === "undefined") {
                    f[v] = p[v];
                }
            }
        },
        getHash: function getHash1(f) {
            var p = [];
            for(var h in f){
                var v;
                if (typeof f[h] == "object") v = JSONUtils.serialize(f[h], false);
                else if (f[h]) v = f[h].toString();
                p.push(h + "=" + v);
            }
            return p.sort().join("&");
        },
        getMurmurHash: function getMurmurHash1(f, p) {
            if (!p) p = 0;
            var h, v, w, m, b, y, S, E, C, I;
            h = f.length & 3;
            v = f.length - h;
            w = p;
            b = 0xcc9e2d51;
            S = 0x1b873593;
            I = 0;
            while(I < v){
                C = f.charCodeAt(I) & 0xff | (f.charCodeAt(++I) & 0xff) << 8 | (f.charCodeAt(++I) & 0xff) << 16 | (f.charCodeAt(++I) & 0xff) << 24;
                ++I;
                C = (C & 0xffff) * b + (((C >>> 16) * b & 0xffff) << 16) & 0xffffffff;
                C = C << 15 | C >>> 17;
                C = (C & 0xffff) * S + (((C >>> 16) * S & 0xffff) << 16) & 0xffffffff;
                w ^= C;
                w = w << 13 | w >>> 19;
                m = (w & 0xffff) * 5 + (((w >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;
                w = (m & 0xffff) + 0x6b64 + (((m >>> 16) + 0xe654 & 0xffff) << 16);
            }
            C = 0;
            switch(h){
                case 3:
                    C ^= (f.charCodeAt(I + 2) & 0xff) << 16;
                case 2:
                    C ^= (f.charCodeAt(I + 1) & 0xff) << 8;
                case 1:
                    C ^= f.charCodeAt(I) & 0xff;
                    C = (C & 0xffff) * b + (((C >>> 16) * b & 0xffff) << 16) & 0xffffffff;
                    C = C << 15 | C >>> 17;
                    C = (C & 0xffff) * S + (((C >>> 16) * S & 0xffff) << 16) & 0xffffffff;
                    w ^= C;
            }
            w ^= f.length;
            w ^= w >>> 16;
            w = (w & 0xffff) * 0x85ebca6b + (((w >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;
            w ^= w >>> 13;
            w = (w & 0xffff) * 0xc2b2ae35 + (((w >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;
            w ^= w >>> 16;
            return w >>> 0;
        },
        clone: function clone1(f, p, h, v, w, m) {
            if (v === void 0) {
                v = 20;
            }
            if (w === void 0) {
                w = 0;
            }
            if (f === window) return window;
            if (w > v) return null;
            if (typeof f == "undefined" || f == null) {
                return toggles_1.default.isOn("removeUndefinedProperties") ? f : null;
            } else if (typeof f == "function" && h) {
                return null;
            } else if (f.constructor == Array) {
                var b = [];
                for(var y = 0; y < f.length; y++){
                    if (!h || typeof f[y] != "function") {
                        if (p) {
                            b[y] = clone1(f[y], p, h, v, w + 1, m);
                        } else {
                            b[y] = f[y];
                        }
                    }
                }
                return b;
            } else if (typeof f == "object") {
                var S = {};
                for(var E in f){
                    if (m && E == "context") continue;
                    if (!h || typeof f[E] != "function") {
                        if (p) {
                            S[E] = clone1(f[E], p, h, v, w + 1, m);
                        } else {
                            S[E] = f[E];
                        }
                    }
                }
                return S;
            } else {
                return f;
            }
        },
        merge: function merge1(f, p) {
            var h = {};
            for(var v = 0; v < f.length; v++){
                if (f[v] && f[v].length) {
                    for(var w = 0; w < f[v].length; w++){
                        for(var m in f[v][w]){
                            h[m] = f[v][w][m];
                        }
                    }
                } else {
                    if (!p) {
                        for(var m in f[v]){
                            h[m] = f[v][m];
                        }
                    } else {
                        for(var m in f[v]){
                            if (typeof h[m] !== "object" || h[m] instanceof Array) {
                                h[m] = f[v][m];
                            } else {
                                h[m] = merge1([
                                    h[m],
                                    f[v][m]
                                ], true);
                            }
                        }
                    }
                }
            }
            return h;
        },
        unflatten: function unflatten1(f) {
            if (Object(f) !== f || Array.isArray(f)) {
                return f;
            }
            var p = {};
            for(var h in f){
                var v = p;
                var w = "";
                var m = h.replace(/\[([0-9])]/, ".$1").split(".");
                for(var b = 0; b < m.length; b++){
                    var y = !isNaN(Number(m[b]));
                    v = v[w] || (v[w] = y ? [] : {});
                    w = m[b];
                }
                v[w] = f[h];
            }
            return p[""] || {};
        },
        flatten: function flatten1(f, p) {
            if (p === void 0) {
                p = false;
            }
            var h = {};
            function recurse1(f, v) {
                if (Object(f) !== f) {
                    h[v] = f;
                } else if (Array.isArray(f)) {
                    var w = f.length;
                    for(var m = 0; m < w; m++){
                        var b = p ? v + "[" + m + "]" : v + "." + m;
                        recurse1(f[m], v ? b : String(m));
                    }
                    if (w === 0) {
                        h[v] = [];
                    }
                } else {
                    var y = true;
                    for(var S in f){
                        y = false;
                        recurse1(f[S], v ? v + "." + S : S);
                    }
                    if (y && v !== "") {
                        h[v] = {};
                    }
                }
            }
            recurse1(f, "");
            return h;
        },
        extractProperties: function extractProperties1(f, p, h) {
            if (f == null) return;
            if (p == null) p = {};
            if (f.constructor == Array) {
                for(var v = 0; v < f.length; v++){
                    extractProperties1(f[v], p, h);
                }
            } else if (h) {
                var w = h.split("|");
                var m = {};
                for(var b in f){
                    m[b.toLowerCase()] = 1;
                }
                for(var y = 0; y < w.length; y++){
                    var S = w[y];
                    if (m[S.toLowerCase()]) p[S] = f[S];
                }
            } else {
                p = clone(f, false);
            }
            return p;
        },
        extractProperty: function extractProperty1(f, p) {
            var h;
            return extractProperties(f, h, p)[p];
        },
        parseToObject: function parseToObject1(f) {
            try {
                var p = window["JSON"].parse(f);
                if (typeof p == "object") {
                    return p;
                }
            } catch (h) {}
            return undefined;
        },
        removePropertiesPrefix: function removePropertiesPrefix1(f, p) {
            if (f === void 0) {
                f = {};
            }
            if (p === void 0) {
                p = "";
            }
            return Object.keys(f).reduce(function(h, v) {
                var w;
                return __webpack_provided_Object_dot_assign(h, (w = {}, w[v.replace(p, "")] = f[v], w));
            }, {});
        },
        addPrefixToProperties: function addPrefixToProperties1(f, p) {
            if (f === void 0) {
                f = {};
            }
            if (p === void 0) {
                p = "";
            }
            return Object.keys(f).reduce(function(h, v) {
                if (v.indexOf(p) !== 0) {
                    h["" + p + v] = f[v];
                } else {
                    h[v] = f[v];
                }
                return h;
            }, {});
        },
        normalizeObjectKeysToLowerCase: function normalizeObjectKeysToLowerCase1(f) {
            for(var p in f){
                f[p.toLowerCase()] = f[p];
            }
            return f;
        },
        decodeObjectKeys: function decodeObjectKeys1(f) {
            var p = {};
            for(var h in f){
                var v = h;
                while(v.indexOf("%") !== -1){
                    v = decodeURIComponent(v);
                }
                p[v] = f[h];
            }
            return p;
        },
        cloneParamsForPlugin: function(f) {
            var p = utils.object.clone(f);
            return delete p.instanceID, delete p.getInstance, p;
        }
    },
    queue: {
        _servicesStatus: function _servicesStatus1() {
            var f = {};
            for(var p in _q){
                var h = isActive(p);
                if (h) {
                    f[p] = {
                        active: true,
                        waitingFor: _q[p].ids,
                        queuedCount: _q[p].q.length
                    };
                } else {
                    f[p] = {
                        active: false
                    };
                }
            }
            return f;
        },
        isActive: function isActive1(f) {
            if (!_q[f]) return false;
            for(var p in _q[f].ids)return true;
            return false;
        },
        release: function release1(f, p) {
            logger.debug("releasing " + p + " queue by " + f);
            if (!_q[p]) return;
            delete _q[p].ids[f];
            if (!isActive(p)) {
                var h = _q[p].q;
                _q[p].q = [];
                while(h.length > 0){
                    var v = h.splice(0, 1)[0];
                    try {
                        v.func.apply(this, v.args);
                    } catch (w) {
                        if (typeof console == "object" && console.log) {
                            console.log("Gigya: Exception while invoking queued method (" + p + ": " + f + ")");
                        }
                    }
                    if (isActive(p)) {
                        _q[p].q = h;
                        break;
                    }
                }
            }
        },
        hold: function hold1(f, p) {
            logger.debug("locking queue " + p + " by " + f);
            if (!_q[p]) _q[p] = {
                q: [],
                ids: {}
            };
            _q[p].ids[f] = true;
        },
        waitFor: function waitFor1(f, p, h) {
            if (!_q[f]) _q[f] = {
                q: [],
                ids: {}
            };
            _q[f].q.push({
                func: p,
                args: h
            });
        },
        queueForExecution: function queueForExecution1(f, p, h) {
            h = h || [];
            if (isActive(f)) {
                waitFor(f, p, h);
            } else {
                p.apply(this, h);
            }
        }
    },
    sanitize: {
        sanitizeHTML: function sanitizeHTML1(f) {
            if (f == null || typeof f == "undefined") return f;
            return f.replace(/&/g, "&#38;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace(/\"/g, "&#34;").replace(/'/g, "&#39;").replace(/&#38;#173;/g, "&#173;");
        },
        sanitizeAttribute: function sanitizeAttribute1(f) {
            if (f == null || typeof f == "undefined") return f;
            return f.replace(/&/g, "&#38;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace(/\"/g, "&#34;").replace(/\=/g, "&#61;");
        }
    },
    script: {
        isLoaded: function isLoaded1(f) {
            var p = formatSrcUrl(f);
            return Boolean(pending[p] && pending[p].loaded);
        },
        load: function load1(f, p, h, v, w, m) {
            if (w === void 0) {
                w = 5000;
            }
            var b;
            if (f.indexOf("//") === 0) {
                f = LocalInfo_1.localInfo.protocol + ":" + f;
            }
            if (v) {
                var y = formatSrcUrl(f);
                if (pending[y]) {
                    if (pending[y].loaded) {
                        logger.debug("script was already loaded:", {
                            src: f
                        });
                        if (h) {
                            h();
                        }
                    } else {
                        pending[y].onLoad.push(h);
                        pending[y].onError.push(p);
                    }
                    return;
                }
                b = pending[y] = {
                    loaded: false,
                    onLoad: [
                        h
                    ],
                    onError: [
                        p
                    ]
                };
                if (m && m.length > 0) {
                    arrayUtils.forEach(m, function(f) {
                        pending[f] = b;
                    });
                }
            } else {
                b = {
                    loaded: false,
                    onLoad: [
                        h
                    ],
                    onError: [
                        p
                    ]
                };
            }
            var scriptLoader1 = function() {
                var p = document.createElement("script");
                p.async = true;
                p.type = "text/javascript";
                p.charset = "UTF-8";
                var h = false;
                var fnOnScriptLoad1 = function() {
                    if (!h) {
                        if (b.onLoad && b.onLoad.length) {
                            for(var f = 0; f < b.onLoad.length; f++){
                                if (typeof b.onLoad[f] === "function") {
                                    b.onLoad[f]();
                                }
                            }
                        }
                        b.loaded = true;
                        b.onError = b.onLoad = null;
                        h = true;
                        if (w === true) {
                            w = 0;
                        }
                        if (w !== false) {
                            setTimeout(function() {
                                if (p.parentNode) {
                                    p.parentNode.removeChild(p);
                                }
                            }, w);
                        }
                    }
                };
                p.onload = fnOnScriptLoad1;
                p["onreadystatechange"] = function() {
                    if (this.readyState === "loaded") {
                        fnOnScriptLoad1();
                    }
                };
                p.onerror = function() {
                    for(var p = 0; p < b.onError.length; p++){
                        if (typeof b.onError[p] === "function") {
                            b.onError[p]();
                        }
                    }
                    delete pending[f];
                };
                var v = document.getElementsByTagName("head");
                if (v && v.length > 0) {
                    v[0].appendChild(p);
                }
                var fnSetScriptSrc1 = function() {
                    var h = new RegExp("^https?://cdns?.*" + defaultApiDomain + "/.*gigya.js");
                    var v = h.test(f) ? addSdkVersion(f) : f;
                    p.src = v;
                };
                if (LocalInfo_1.localInfo.iosVersion >= 6) {
                    fnSetScriptSrc1();
                } else {
                    setTimeout(fnSetScriptSrc1, 1);
                }
            };
            if (LocalInfo_1.localInfo.isIE) {
                functionsUtils.invokeOnPageLoad(scriptLoader1);
            } else {
                scriptLoader1();
            }
        },
        ResourceTypes: {
            0: "script",
            1: "image",
            2: "iframe",
            script: 0,
            image: 1,
            iframe: 2
        },
        triggerResource: function triggerResource1(f, p, h, v) {
            if (h === void 0) {
                h = ResourceTypes.image;
            }
            if (v === void 0) {
                v = 5000;
            }
            switch(h){
                case ResourceTypes.script:
                    load(f, p, p, false, v);
                    break;
                case ResourceTypes.image:
                    loadImage(f, p);
                    break;
                case ResourceTypes.iframe:
                    loadIframe(f, p, v);
                    break;
                default:
                    throw new Error("Unsupported resource type");
            }
        },
        loadService: function loadService1(f, p, h) {
            var v = cdn_1.getCdnResource() + "/js/gigya.services." + f + ".js";
            load(v, function() {
                if (typeof console === "object" && console.error) {
                    console.error("error loading gigya service " + f + " from url: " + v);
                    if (p) {
                        p();
                    }
                }
            }, h, true);
        }
    },
    sessionCache: {
        set: function set1(f, p) {
            if (!sessionStorageEnabled) return;
            var h;
            try {
                h = JSONUtils.deserialize(window.sessionStorage.getItem("gigyaCache"));
                if (p == null && h[f]) {
                    delete h[f];
                } else {
                    var v = new Date().getTime();
                    h[f] = {
                        response: p,
                        time: v
                    };
                    if (f.indexOf("gig_oidcContext_") >= 0) {
                        logger.report("oidc storage logs - set", {
                            key: f,
                            value: h[f]
                        }, false, FlagService_1.FlagService.forceErrorReport);
                    }
                }
                window.sessionStorage.setItem("gigyaCache", JSONUtils.serialize(h));
            } catch (w) {}
            queueUtils.release("cache", "cache_" + f);
        },
        get: function get1(f, p) {
            if (p === void 0) {
                p = -1;
            }
            if (!sessionStorageEnabled) {
                return null;
            }
            try {
                if (!queueUtils.isActive("cache_" + f)) {
                    var h = window.sessionStorage.getItem("gigyaCache");
                    var v = JSONUtils.deserialize(h);
                    var w = v[f];
                    if (w) {
                        var m = new Date().getTime();
                        if (p < 0 || p + w.time > m) {
                            return w.response;
                        } else {
                            if (f.indexOf("gig_oidcContext_") >= 0) {
                                logger.report("oidc storage logs - get", {
                                    key: f,
                                    value: v[f],
                                    cacheTime: w.time,
                                    currentTime: m
                                }, false, FlagService_1.FlagService.forceErrorReport);
                            }
                            remove(f);
                            return null;
                        }
                    }
                    if (!w) {
                        queueUtils.hold("cache", "cache_" + f);
                        return null;
                    }
                } else {
                    queueUtils.waitFor("cache_" + f, get1, arguments);
                    return null;
                }
            } catch (b) {}
            return null;
        },
        remove: function remove1(f) {
            set(f, null);
        }
    },
    localCache: {
        set: function set1(f, p) {
            if (!localStorageEnabled) return;
            var h;
            try {
                h = JSONUtils.deserialize(window.localStorage.getItem("gigyaCache"));
                if (p == null && h[f]) {
                    delete h[f];
                } else {
                    var v = new Date().getTime();
                    h[f] = {
                        response: p,
                        time: v
                    };
                    if (f.indexOf("gig_oidcContext_") >= 0) {
                        logger.report("oidc storage logs - set", {
                            key: f,
                            value: h[f]
                        }, false, FlagService_1.FlagService.forceErrorReport);
                    }
                }
                window.localStorage.setItem("gigyaCache", JSONUtils.serialize(h));
            } catch (w) {}
            queueUtils.release("cache", "cache_" + f);
        },
        get: function get1(f, p) {
            if (p === void 0) {
                p = -1;
            }
            if (!localStorageEnabled) {
                return null;
            }
            try {
                if (!queueUtils.isActive("cache_" + f)) {
                    var h = window.localStorage.getItem("gigyaCache");
                    var v = JSONUtils.deserialize(h);
                    var w = v[f];
                    if (w) {
                        var m = new Date().getTime();
                        if (p < 0 || p + w.time > m) {
                            return w.response;
                        } else {
                            if (f.indexOf("gig_oidcContext_") >= 0) {
                                logger.report("oidc storage logs - get", {
                                    key: f,
                                    value: v[f],
                                    cacheTime: w.time,
                                    currentTime: m
                                }, false, FlagService_1.FlagService.forceErrorReport);
                            }
                            remove(f);
                            return null;
                        }
                    }
                    if (!w) {
                        queueUtils.hold("cache", "cache_" + f);
                        return null;
                    }
                } else {
                    queueUtils.waitFor("cache_" + f, get1, arguments);
                    return null;
                }
            } catch (b) {}
            return null;
        },
        remove: function remove1(f) {
            set(f, null);
        }
    },
    stringUtils: {
        trim: function trim1(f) {
            return f.replace(/^\s*(\S*(.*\S)?)\s*$/, "$1");
        },
        format: function format1(f) {
            var p = [];
            for(var h = 1; h < arguments.length; h++){
                p[h - 1] = arguments[h];
            }
            for(var v = 0; v < arguments.length - 1; v++){
                if (arguments[v + 1] != null) {
                    f = f.split("{" + v + "}").join(arguments[v + 1]);
                }
            }
            return f;
        },
        capitalize: function capitalize1(f) {
            return f.substring(0, 1).toUpperCase() + f.substring(1);
        },
        endsWith: function endsWith1(f, p) {
            return f.indexOf(p, f.length - p.length) !== -1;
        },
        escapeRegExp: function escapeRegExp1(f) {
            return f.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
        },
        replaceAll: function replaceAll1(f, p, h) {
            if (!p) return f;
            return f.replace(new RegExp(escapeRegExp(p), "g"), h);
        },
        mergeCommaSeparatedValues: function mergeCommaSeparatedValues1(f, p) {
            if (f === void 0) {
                f = "";
            }
            if (p === void 0) {
                p = "";
            }
            var h = f.concat(",", p).split(",");
            return utils.array.getUniqueValues(h).filter(function(f) {
                return f;
            }).join(",");
        }
    },
    templates: {
        fill: function fill1(f, p) {
            if (typeof f == "function") {
                f = f(p);
            }
            if (f instanceof Array) {
                f = f.join("");
            }
            var h = /(\$)(!?)([a-z_][a-z_.\d]*)([(][^()]*[)])?|(\$)(!?)\{([a-z_][a-z_.\d]*)([(][^()]*[)])?\}/gi;
            h.lastIndex = 0;
            var v = f;
            var w = h.exec(v);
            var m;
            while(w != null){
                if (w[1] == "$") {
                    m = 0;
                } else {
                    m = 4;
                }
                var b = w[2 + m] == "!";
                var y = w[3 + m];
                var S = w[4 + m];
                if (S == null) S = "";
                var E = 0;
                if (y.substring(0, 1) == ".") {
                    y = y.substring(1);
                }
                if (y.substring(0, 3) == "DBG") {
                    y = y.substring(3);
                    E = 1;
                }
                var C = "";
                var I = y + S;
                while(I != C){
                    C = I;
                    var R = h.lastIndex;
                    I = fill1(C, p);
                    h.lastIndex = R;
                }
                var A = "";
                var U = 0;
                if (p[y.split(".")[0]] != null) {
                    try {
                        A = new Function("o", "p", 'return eval("o." + p)')(p, I);
                    } catch (f) {}
                } else {
                    A = "$" + (b ? "!" : "") + I;
                    U = 1;
                }
                if (b) {
                    v = v.replace(w[0], "");
                } else {
                    v = v.substr(0, w.index) + A + v.substr(w.index + w[0].length);
                }
                h.lastIndex = w.index + U;
                w = h.exec(v);
            }
            return v;
        }
    },
    URL: {
        URLEncode: function URLEncode1(f) {
            return encodeURIComponent(f);
        },
        URLDecode: function URLDecode1(f) {
            return decodeURIComponent(f.replace(/\+/g, " "));
        },
        URLDecodeRecursive: function URLDecodeRecursive1(f) {
            var p = "";
            var h = f;
            while(h != p){
                p = h;
                h = URLDecode(p);
            }
            return h;
        },
        getParamsFromURL: function getParamsFromURL1(f, p) {
            if (!f || f.indexOf("?") === -1) {
                return {};
            }
            return keyValueUtils.deserialize(f.split("#")[0].split("?")[1], "&", p);
        },
        getGigParamsFromURL: function getGigParamsFromURL1(f) {
            var p = f || {}, h = p.url, v = p.paramPrefix, w = p.keysToLower, m = p.removePrefix;
            var b = v || constants_1.GIGYA_PARAM_PREFIX;
            var y = getParamsFromURL(h, w);
            return Object.keys(y).filter(function(f) {
                return f.indexOf(b) === 0 && f !== b;
            }).reduce(function(f, p) {
                var h = m ? p.slice(4) : p;
                f[h] = y[p];
                return f;
            }, {});
        },
        getParamValueFromURL: function getParamValueFromURL1(f, p, h) {
            if (null == p || "" == p) {
                return h;
            }
            var v = p.indexOf("?");
            if (v === -1) {
                return h;
            }
            var w = "&" + p.substr(v + 1);
            var m = w.toLowerCase().indexOf("&" + f.toLowerCase() + "=");
            if (m === -1) {
                return h;
            }
            var b = w.substr(m + (1 + f.length + 1)) + "&";
            m = b.indexOf("&");
            return b.substr(0, m);
        },
        addParamsToURL: function addParamsToURL1(f, p) {
            var h = getParamsFromURL(f);
            objectUtils.add(h, p);
            var v = f.split("#");
            var w = v[0].split("?")[0] + "?" + keyValueUtils.serialize(h, "&");
            if (v.length > 1) {
                w += "#" + v[1];
            }
            return w;
        },
        getContextParamsFromUrl: function getContextParamsFromUrl1(f) {
            var p = f || {}, h = p.url, v = p.paramPrefix, w = p.unacceptableParams;
            if (!h) {
                return {};
            }
            var m = utils.URL.getGigParamsFromURL({
                url: h,
                paramPrefix: v
            });
            return removeUnacceptableParams(m, w);
        }
    },
    validation: {
        isExplicitTrue: function isExplicitTrue1(f) {
            var p = ("" + f).toLowerCase();
            return p == "true" || p == "1";
        },
        isExplicitFalse: function isExplicitFalse1(f) {
            var p = ("" + f).toLowerCase();
            return p == "false" || p == "0";
        },
        isLaterThanNow: function isLaterThanNow1(f) {
            return f > new Date().getTime();
        },
        allDefinedOrAllUndefined: function allDefinedOrAllUndefined1() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = f.some(function(f) {
                return typeof f === "undefined";
            });
            var v = f.some(function(f) {
                return typeof f !== "undefined";
            });
            return v && !h || !v && h;
        }
    },
    viewport: {
        getScroll: function getScroll1() {
            var f = 0, p = 0;
            if (typeof window.pageYOffset == "number") {
                p = window.pageYOffset;
                f = window.pageXOffset;
            } else if (document.body && (document.body.scrollLeft || document.body.scrollTop)) {
                p = document.body.scrollTop;
                f = document.body.scrollLeft;
            } else if (document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {
                p = document.documentElement.scrollTop;
                f = document.documentElement.scrollLeft;
            }
            return {
                left: f,
                top: p
            };
        },
        getFullSize: function getFullSize1() {
            var f = document.documentElement;
            var p = document.body;
            var h = f.clientHeight;
            if (h == 0) h = p.clientHeight;
            var v = f.clientWidth;
            if (v == 0) v = p.clientWidth;
            return {
                w: v,
                h: h
            };
        },
        getOrientation: function getOrientation1() {
            var f = parseInt(window["orientation"] || "0");
            if (f < 0) f += 360;
            return f;
        },
        getOuterSize: function getOuterSize1() {
            var f;
            var p;
            var h = document.documentElement;
            var v = document.body;
            if (window.outerHeight) {
                f = window.outerHeight;
                p = window.outerWidth;
            } else {
                f = h.clientHeight;
                if (f == 0) f = v.clientHeight;
                p = h.clientWidth;
                if (p == 0) p = v.clientWidth;
            }
            return {
                w: p,
                h: f
            };
        },
        getInnerSize: function getInnerSize1() {
            var f;
            var p;
            var h = document.documentElement;
            var v = document.body;
            if (window.innerHeight) {
                f = window.innerHeight;
                p = window.innerWidth;
            } else {
                f = h.clientHeight;
                if (f == 0) f = v.clientHeight;
                p = h.clientWidth;
                if (p == 0) p = v.clientWidth;
            }
            return {
                w: p,
                h: f
            };
        },
        getMiddleCenter: function getMiddleCenter1() {
            var f = getScroll();
            var p = getInnerSize();
            return {
                top: f.top + Math.floor(p.h / 2),
                left: f.left + Math.floor(p.w / 2)
            };
        },
        isRectHorizontallyVisible: function isRectHorizontallyVisible1(f) {
            var p = getScroll();
            var h = getInnerSize();
            return f.left >= p.left && f.right <= p.left + h.w;
        },
        isRectFullyVisible: function isRectFullyVisible1(f) {
            var p = getScroll();
            var h = getInnerSize();
            return f.top >= p.top && f.bottom <= p.top + h.h && f.left >= p.left && f.right <= p.left + h.w;
        },
        scrollIntoView: function scrollIntoView1(f) {
            if (f && f.scrollIntoView) {
                f.scrollIntoView();
            }
        }
    },
    win: {
        _openedWindows: {},
        _uniqueWindowCounter: 0,
        _calcPixels: function _calcPixels1(f, p, h, v) {
            var w;
            if (typeof f === "string") {
                w = parseInt(f);
                if (f.indexOf("%") !== -1) {
                    w = parseInt(f) * 0.01 * p;
                    if (v) {
                        w -= v / 2;
                    }
                }
            } else {
                w = f;
            }
            w = Math.round(w);
            if (isNaN(w) && h !== undefined) {
                w = _calcPixels1(h, p, undefined, v);
            }
            return w;
        },
        open: function open1(f, p, h) {
            if (!h) {
                h = {
                    menubar: 0,
                    toolbar: 0,
                    resizable: 1,
                    scrollbars: 1
                };
            }
            h.width = _calcPixels(h.width, screen.width, 960);
            h.height = _calcPixels(h.height, screen.height, 680);
            h.left = _calcPixels(h.left, screen.width, "50%", h.width);
            h.top = _calcPixels(h.top, screen.height, "50%", h.height);
            var v = "";
            for(var w in h){
                v += "," + w + "=" + h[w];
            }
            v = v.substr(1);
            var m = LocalInfo_1.localInfo.isIE && f.length > 2048 || f.length > 4096;
            var b = f;
            if (m) {
                b = "";
                if (LocalInfo_1.localInfo.isIE) {
                    b = "about:blank";
                }
            }
            if (!p) {
                p = "_gigWindow_" + new Date().getTime() + "_" + ++exports._uniqueWindowCounter;
            }
            var y = window.open(b, p, v);
            if (y && y.focus) {
                y.focus();
            }
            exports._openedWindows[p] = y;
            var S = URLUtils.getParamsFromURL(f);
            if (m) {
                HTTPUtils.redirect(f.split("?")[0], [
                    S
                ], "POST", p);
            }
            globalEvents.dispatch({
                eventName: "windowOpened",
                url: f,
                params: S
            });
            return exports._openedWindows[p] != null;
        },
        close: function close1(f) {
            if (exports._openedWindows[f] != null) {
                var fnClose1 = function() {
                    try {
                        if (exports._openedWindows[f] != null) exports._openedWindows[f].close();
                        delete exports._openedWindows[f];
                    } catch (p) {}
                };
                if (LocalInfo_1.localInfo.iosVersion >= 6) {
                    fnClose1();
                } else {
                    window.setTimeout(fnClose1, 10);
                }
            }
        }
    },
    xd: {
        _flashListenerID: "flid1701874189669",
        addMessageListener: function addMessageListener1(f, p, h, v, w) {
            _listeners[f] = {
                callback: v,
                context: p,
                t: new Date().getTime()
            };
            if (!w) {
                w = localInfo.messagingMethod;
                if (localInfo.isIE11 && h && window.indexedDB) w = InternalFlows_1.MessagingMethod.LocalStorageListener;
                if (localInfo.isAndroid && p && p["provider"] && p["provider"].toLowerCase() == "line") {
                    w = InternalFlows_1.MessagingMethod.LocalStorageListener;
                }
            }
            if (w == InternalFlows_1.MessagingMethod.LocalStorageListener || w == InternalFlows_1.MessagingMethod.PostMessage) {
                if (w == InternalFlows_1.MessagingMethod.LocalStorageListener && h) {
                    _createLocalStorageListenerIFrame(f);
                }
                if (!_added) {
                    var fnOnMessage1 = function(f) {
                        if (f && f.data && typeof f.data === "string") {
                            var p = f.data.split("=")[0];
                            if (_listeners[p]) {
                                _onMessage(f);
                            }
                        }
                    };
                    if (window.addEventListener) {
                        window.addEventListener("message", fnOnMessage1, false);
                    } else if (window["attachEvent"]) {
                        window["attachEvent"]("onmessage", fnOnMessage1);
                    }
                    _added = true;
                }
            }
        },
        removeMessageListener: function removeMessageListener1(f) {
            delete _listeners[f];
        }
    },
    recaptcha: {},
    getGigyaScriptElement: function getGigyaScriptElement1() {
        var f;
        var p = document.getElementsByTagName("script");
        var _loop_11 = function(h) {
            var v = p[h];
            var w = v.src.toLowerCase();
            if (w !== "") {
                if (gigyaCdnRegex.test(w) || w.indexOf("?apikey=") > -1) {
                    var m = fileNames.length === 0 || fileNames.some(function(f) {
                        return w.indexOf(f) > -1;
                    });
                    if (m) {
                        f = v;
                        return "break";
                    }
                }
            }
        };
        for(var h = p.length - 1; h >= 0; h--){
            var v = _loop_11(h);
            if (v === "break") break;
        }
        return f;
    },
    updateConfiguration: function updateConfiguration1(f) {
        if (f === void 0) {
            f = {};
        }
        logger.info("globalConf is updated", {
            updateObject: f
        });
        __webpack_provided_Object_dot_assign(thisScript.globalConf || {}, f);
    },
    getParamValue: function getParamValue1(f, p, h) {
        if (h === void 0) {
            h = "&";
        }
        var v = f.match(new RegExp(p + "=([^" + h + "]*)"));
        return v ? v[1] : null;
    },
    getReqParamValue: function getReqParamValue1(f, p) {
        var h = getParamValue(f, p);
        return h ? decodeURIComponent(h) : null;
    },
    Tabbable: function Tabbable1() {
        this.bindings = [];
    },
    tabbable: {
        bindings: [
            {
                container: {},
                listener: function(f) {
                    var p = document.activeElement;
                    if (f.keyCode === 9 && container.contains(p)) {
                        var h = !f.shiftKey ? _this.getNextTabbableElement(container, p, filterSelector) : _this.getPreviousTabbableElement(container, p, filterSelector);
                        if (h) {
                            h.focus();
                            DOMUtils.cancelEvent(f);
                        }
                    }
                }
            }
        ]
    }
};
export const logger = {
    _global: {
        document: {
            location: {
                ancestorOrigins: {},
                href: "https://local.pyzlo.in/",
                origin: "https://local.pyzlo.in",
                protocol: "https:",
                host: "local.pyzlo.in",
                hostname: "local.pyzlo.in",
                port: "",
                pathname: "/",
                search: "",
                hash: "",
                assign: function() {},
                reload: function() {},
                replace: function() {},
                toString: function() {}
            }
        },
        name: "",
        customElements: {},
        history: {},
        navigation: {},
        locationbar: {},
        menubar: {},
        personalbar: {},
        scrollbars: {},
        statusbar: {},
        toolbar: {},
        status: "",
        closed: false,
        length: 0,
        opener: null,
        frameElement: null,
        navigator: {},
        origin: "https://local.pyzlo.in",
        external: {},
        screen: {},
        innerWidth: 840,
        innerHeight: 929,
        scrollX: 0,
        pageXOffset: 0,
        scrollY: 0,
        pageYOffset: 0,
        visualViewport: {},
        screenX: 218,
        screenY: 38,
        outerWidth: 1510,
        outerHeight: 1014,
        devicePixelRatio: 2,
        screenLeft: 218,
        screenTop: 38,
        styleMedia: {},
        onsearch: null,
        isSecureContext: true,
        trustedTypes: {},
        performance: {
            timeOrigin: 1701874189401.5,
            timing: {
                connectStart: 1701874189416,
                navigationStart: 1701874189401,
                secureConnectionStart: 1701874189424,
                fetchStart: 1701874189407,
                domContentLoadedEventStart: 1701874189610,
                responseStart: 1701874189449,
                domInteractive: 1701874189482,
                domainLookupEnd: 1701874189416,
                responseEnd: 1701874189450,
                redirectStart: 0,
                requestStart: 1701874189426,
                unloadEventEnd: 1701874189467,
                unloadEventStart: 1701874189467,
                domLoading: 1701874189473,
                domComplete: 1701874189686,
                domainLookupStart: 1701874189416,
                loadEventStart: 1701874189686,
                domContentLoadedEventEnd: 1701874189610,
                loadEventEnd: 1701874189686,
                redirectEnd: 0,
                connectEnd: 1701874189425
            },
            navigation: {
                type: 1,
                redirectCount: 0
            }
        },
        onappinstalled: null,
        onbeforeinstallprompt: null,
        crypto: {},
        indexedDB: {},
        sessionStorage: {},
        localStorage: {},
        onbeforexrselect: null,
        onabort: null,
        onbeforeinput: null,
        onbeforetoggle: null,
        onblur: null,
        oncancel: null,
        oncanplay: null,
        oncanplaythrough: null,
        onchange: null,
        onclick: null,
        onclose: null,
        oncontextlost: null,
        oncontextmenu: null,
        oncontextrestored: null,
        oncuechange: null,
        ondblclick: null,
        ondrag: null,
        ondragend: null,
        ondragenter: null,
        ondragleave: null,
        ondragover: null,
        ondragstart: null,
        ondrop: null,
        ondurationchange: null,
        onemptied: null,
        onended: null,
        onerror: null,
        onfocus: null,
        onformdata: null,
        oninput: null,
        oninvalid: null,
        onkeydown: null,
        onkeypress: null,
        onkeyup: null,
        onload: null,
        onloadeddata: null,
        onloadedmetadata: null,
        onloadstart: null,
        onmousedown: null,
        onmouseenter: null,
        onmouseleave: null,
        onmousemove: null,
        onmouseout: null,
        onmouseover: null,
        onmouseup: null,
        onmousewheel: null,
        onpause: null,
        onplay: null,
        onplaying: null,
        onprogress: null,
        onratechange: null,
        onreset: null,
        onresize: null,
        onscroll: null,
        onsecuritypolicyviolation: null,
        onseeked: null,
        onseeking: null,
        onselect: null,
        onslotchange: null,
        onstalled: null,
        onsubmit: null,
        onsuspend: null,
        ontimeupdate: null,
        ontoggle: null,
        onvolumechange: null,
        onwaiting: null,
        onwebkitanimationend: null,
        onwebkitanimationiteration: null,
        onwebkitanimationstart: null,
        onwebkittransitionend: null,
        onwheel: null,
        onauxclick: null,
        ongotpointercapture: null,
        onlostpointercapture: null,
        onpointerdown: null,
        onpointermove: null,
        onpointerrawupdate: null,
        onpointerup: null,
        onpointercancel: null,
        onpointerover: null,
        onpointerout: null,
        onpointerenter: null,
        onpointerleave: null,
        onselectstart: null,
        onselectionchange: null,
        onanimationend: null,
        onanimationiteration: null,
        onanimationstart: null,
        ontransitionrun: null,
        ontransitionstart: null,
        ontransitionend: null,
        ontransitioncancel: null,
        onafterprint: null,
        onbeforeprint: null,
        onbeforeunload: null,
        onhashchange: null,
        onlanguagechange: null,
        onmessage: null,
        onmessageerror: null,
        onoffline: null,
        ononline: null,
        onpagehide: null,
        onpageshow: null,
        onpopstate: null,
        onrejectionhandled: null,
        onstorage: null,
        onunhandledrejection: null,
        onunload: null,
        crossOriginIsolated: false,
        scheduler: {},
        alert: function() {},
        atob: function() {},
        blur: function() {},
        btoa: function() {},
        cancelAnimationFrame: function() {},
        cancelIdleCallback: function() {},
        captureEvents: function() {},
        clearInterval: function() {},
        clearTimeout: function() {},
        close: function() {},
        confirm: function() {},
        createImageBitmap: function() {},
        fetch: function() {},
        find: function() {},
        focus: function() {},
        getComputedStyle: function() {},
        getSelection: function() {},
        matchMedia: function() {},
        moveBy: function() {},
        moveTo: function() {},
        open: function() {},
        postMessage: function() {},
        print: function() {},
        prompt: function() {},
        queueMicrotask: function() {},
        releaseEvents: function() {},
        reportError: function() {},
        requestAnimationFrame: function() {},
        requestIdleCallback: function() {},
        resizeBy: function() {},
        resizeTo: function() {},
        scroll: function() {},
        scrollBy: function() {},
        scrollTo: function() {},
        setInterval: function() {},
        setTimeout: function() {},
        stop: function() {},
        structuredClone: function() {},
        webkitCancelAnimationFrame: function() {},
        webkitRequestAnimationFrame: function() {},
        chrome: {
            loadTimes: function() {},
            csi: function() {},
            app: {
                isInstalled: false,
                getDetails: function() {},
                getIsInstalled: function() {},
                installState: function() {},
                runningState: function() {},
                InstallState: {
                    DISABLED: "disabled",
                    INSTALLED: "installed",
                    NOT_INSTALLED: "not_installed"
                },
                RunningState: {
                    CANNOT_RUN: "cannot_run",
                    READY_TO_RUN: "ready_to_run",
                    RUNNING: "running"
                }
            }
        },
        fence: null,
        caches: {},
        cookieStore: {},
        ondevicemotion: null,
        ondeviceorientation: null,
        ondeviceorientationabsolute: null,
        launchQueue: {},
        sharedStorage: {},
        documentPictureInPicture: {},
        onbeforematch: null,
        getScreenDetails: function() {},
        queryLocalFonts: function() {},
        showDirectoryPicker: function() {},
        showOpenFilePicker: function() {},
        showSaveFilePicker: function() {},
        originAgentCluster: true,
        credentialless: false,
        speechSynthesis: {},
        oncontentvisibilityautostatechange: null,
        onscrollend: null,
        webkitRequestFileSystem: function() {},
        webkitResolveLocalFileSystemURL: function() {},
        litIssuedWarnings: {},
        litPropertyMetadata: {},
        reactiveElementVersions: [
            "2.0.2"
        ],
        litHtmlVersions: [
            "3.1.0"
        ],
        litElementVersions: [
            "4.0.2"
        ],
        gigya: {
            isGigya: true,
            apiKey: "4_aeFS_UyzRnmP5k_MI59ejg",
            defaultApiDomain: "gigya.com",
            dataCenter: "eu1",
            build: {
                number: 15617,
                version: "latest"
            },
            gmidVersion: "ver4",
            partnerSettings: {
                authMode: "cookie",
                captchaProvider: "Google",
                plugins: {
                    connectWithoutLoginBehavior: "alwaysLogin",
                    defaultRegScreenSet: "Default-RegistrationLogin",
                    defaultMobileRegScreenSet: "Default-RegistrationLogin",
                    sessionExpiration: 0,
                    rememberSessionExpiration: 0,
                    apiDomain: "gigya.local.pyzlo.in",
                    workflow: {
                        path: "workflow/resources/js/entryPoint.js"
                    }
                },
                baseDomains: "local.pyzlo.in",
                customAPIDomainPrefix: "gigya"
            },
            providersConfig: {},
            samlConfig: {
                errorPageURL: null,
                proxyPageURL: null
            },
            canary: {
                isActive: false,
                config: {
                    version: "15622-3-28364565",
                    isEnabled: true,
                    probability: 3,
                    cookiesNames: {
                        isCanary: "gig_canary",
                        version: "gig_canary_ver"
                    }
                },
                Canary: function Canary1(f, p, h, v, w, m) {
                    if (h === void 0) {
                        h = new CookieProvider_1.CookieProvider();
                    }
                    if (v === void 0) {
                        v = f.cookiesNames;
                    }
                    if (w === void 0) {
                        w = function() {
                            return new XMLHttpRequest();
                        };
                    }
                    if (m === void 0) {
                        m = function() {
                            return Math.random() * 100;
                        };
                    }
                    this._config = f;
                    this._scriptUrl = p;
                    this._cookieProvider = h;
                    this._cookiesNames = v;
                    this._xhrFactory = w;
                    this._random = m;
                }
            },
            errorReport: {
                enabled: true,
                probability: 1
            },
            bypassCaptchaV1: true,
            __initialized: true,
            _: {
                isTrustedDomain: true,
                apiAdapters: {
                    web: {
                        sso: {
                            _requestTimeout: 3000,
                            SsoService: function SsoService1() {},
                            _request: function _request1(f, p) {
                                if (!partnerSettings.ssoKey) {
                                    if (p && p.callback) {
                                        p.callback({});
                                    }
                                    return;
                                }
                                var h;
                                if (!p) {
                                    h = {};
                                } else {
                                    h = utils.object.clone(p);
                                }
                                var v;
                                var w;
                                var callback1 = function(f) {
                                    logger.debug("cleaning sso iframe");
                                    v.parentNode.removeChild(v);
                                    clearTimeout(w);
                                    if (f) {
                                        if (f.errorCode && typeof f.errorCode === "string") {
                                            f.errorCode = Number(f.errorCode);
                                        }
                                        if (f.expires_in && typeof f.expires_in === "string") {
                                            f.expires_in = Number(f.expires_in);
                                        }
                                    }
                                    if (p && p.callback) {
                                        p.callback(f);
                                    }
                                };
                                h.m = f;
                                h.d = localInfo.protocol + "://" + document.location.hostname;
                                if (document.location.port) {
                                    h.d += ":" + document.location.port;
                                }
                                h.callbackID = "gig_sso_cb" + new Date().getTime() + "_" + callbackCounter++;
                                h.sAPIKey = thisScript.APIKey;
                                h[logger.configKey] = JSON.stringify(logger.getConfig());
                                var m = utils.keyValue.serialize(h);
                                var iframeLoader1 = function(p) {
                                    if (p === void 0) {
                                        p = 0;
                                    }
                                    utils.xd.addMessageListener(h.callbackID, {}, false, callback1, _.MessagingMethod.PostMessage);
                                    v = _getIframe(h.callbackID);
                                    var fnOnLoad1 = function() {
                                        w = setTimeout(function() {
                                            if (p <= 0) {
                                                logger.error("SSO Communication Timeout", {
                                                    IE11PrivateMode: localInfo.isIE11 && !window.indexedDB,
                                                    mode: f
                                                });
                                                return;
                                            }
                                            utils.xd.removeMessageListener(h.callbackID);
                                            utils.DOM.removeElement(v);
                                            iframeLoader1(p - 1);
                                        }, exports._requestTimeout);
                                        var b = utils.keyValue.serialize({
                                            APIKey: partnerSettings.ssoKey,
                                            ssoSegment: partnerSettings.ssoSegment || "",
                                            version: build.version,
                                            build: build.number || -1
                                        });
                                        v.src = "https://" + domains_1.getStorageDomain() + "/gs/sso.htm?" + b + "#" + m;
                                        utils.DOM.removeEventListener(v, "load", fnOnLoad1);
                                    };
                                    utils.DOM.addEventListener(v, "load", fnOnLoad1);
                                    logger.debug("opening sso iframe", h);
                                    if (document.body) {
                                        utils.DOM.appendToBody(v);
                                    } else {
                                        utils.functions.invokeOnPageLoad(function() {
                                            return utils.DOM.appendToBody(v);
                                        });
                                    }
                                };
                                iframeLoader1(3);
                            },
                            getGroupToken: function getGroupToken1(f) {
                                logger.info("trying to get sso group login token");
                                _request("getToken", {
                                    callback: function(p) {
                                        exports._storedLoginTokenExp = p.gltexp;
                                        if (f && f.callback) {
                                            f.callback(p);
                                        }
                                    }
                                });
                            },
                            setGroupToken: function setGroupToken1(f) {
                                if (!f.gltexp) {
                                    f.gltexp = utils.cookie.get("gltexp_" + thisScript.APIKey);
                                }
                                _request("setToken", f);
                            },
                            logout: function logout1(f) {
                                _request("logout", f);
                            },
                            removeGroupToken: function removeGroupToken1(f) {
                                _request("removeToken", f);
                            },
                            setLoginTokenExp: function setLoginTokenExp1(f, p) {
                                if (p === void 0) {
                                    p = true;
                                }
                                if (p && exports._storedLoginTokenExp && f.loginTokenExp === exports._storedLoginTokenExp) {
                                    if (f.callback) {
                                        f.callback({
                                            gltexp: exports._storedLoginTokenExp
                                        });
                                    }
                                    return;
                                }
                                exports._storedLoginTokenExp = f.loginTokenExp;
                                _request("setLoginTokenExp", f);
                            },
                            getLoginTokenExp: function getLoginTokenExp1(f) {
                                _request("getLoginTokenExp", f);
                            },
                            checkTokenRenew: function checkTokenRenew1(f) {
                                logger.info("verifying login token with sso group");
                                _request("checkTokenRenew", f);
                            },
                            syncCanaryIndication: function syncCanaryIndication1(f) {
                                _request("syncCanaryIndication", f);
                            },
                            setGroupContextCookie: function setGroupContextCookie1(f) {
                                _request("setGroupContext", f);
                            },
                            setGroupApiDomain: function setGroupApiDomain1(f) {
                                _request("setGroupApiDomain", f);
                            },
                            getGroupApiDomain: function getGroupApiDomain1(f) {
                                _request("getGroupApiDomain", f);
                            }
                        },
                        tokenStore: {
                            activeNamespaces: {},
                            isValidGltExp: function isValidGltExp1(f) {
                                if (f === void 0) {
                                    f = getGltexpCookie();
                                }
                                return !f || utils.gltexp.isValid(f);
                            },
                            getGltexpCookie: function getGltexpCookie1(f) {
                                if (f === void 0) {
                                    f = thisScript.APIKey;
                                }
                                return utils.cookie.get(getGltCookieKey(f));
                            },
                            setGltexp: function setGltexp1(f, p) {
                                if (p === void 0) {
                                    p = thisScript.APIKey;
                                }
                                if (f && !isGigyaCookieDomain()) {
                                    utils.cookie.remove(getGltCookieKey(p));
                                    if (FlagService_1.FlagService.setCookieSameSiteLaxSession) {
                                        utils.cookie.set(getGltCookieKey(p), f, null, null, null, "Lax");
                                    } else {
                                        utils.cookie.set(getGltCookieKey(p), f);
                                    }
                                }
                            },
                            get: function get1(f) {
                                if (f === void 0) {
                                    f = thisScript.APIKey;
                                }
                                var p = utils.cookie.get(_getTokenCookieName(f));
                                if (p) {
                                    return p.split("|")[0];
                                } else {
                                    return null;
                                }
                            },
                            set: function set1(f, p, h, v) {
                                utils.localStorage.removeItem("gigyaSettings");
                                logger.info("setting a new login token");
                                if (!f) {
                                    f = thisScript.APIKey;
                                }
                                if (f) {
                                    if (FlagService_1.FlagService.setCookieSameSiteLaxSession) {
                                        utils.cookie.set("glt_" + f, p, h, null, null, "Lax");
                                    } else {
                                        utils.cookie.set("glt_" + f, p, h);
                                    }
                                    utils.cookie.remove("gac_" + f);
                                } else {
                                    if (FlagService_1.FlagService.setCookieSameSiteLaxSession) {
                                        utils.cookie.set("_gig_lt", p, h, null, null, "Lax");
                                    } else {
                                        utils.cookie.set("_gig_lt", p, h);
                                    }
                                }
                                _curSessionExpiration = v;
                            },
                            getCurrentSessionExpiration: function getCurrentSessionExpiration1() {
                                return _curSessionExpiration;
                            },
                            getGACCookie: function getGACCookie1() {
                                return thisScript.APIKey && utils.cookie.get("gac_" + thisScript.APIKey);
                            },
                            setFromAuthCode: function setFromAuthCode1(f) {
                                return tslib_1.__awaiter(this, void 0, void 0, function() {
                                    return tslib_1.__generator(this, function(p) {
                                        return [
                                            2,
                                            new gigya.Promise(function(p) {
                                                setFromGAC({}, p, f);
                                            })
                                        ];
                                    });
                                });
                            },
                            setFromGAC: function setFromGAC1(f, p, h) {
                                if (h === void 0) {
                                    h = getGACCookie();
                                }
                                if (thisScript.APIKey) {
                                    if (h && !f["neverTryGAC"]) {
                                        if (h.charAt(0) === '"' && h.charAt(h.length - 1) === '"') {
                                            h = h.substring(1, h.length - 1);
                                        }
                                        if (_triedGACs[h]) {
                                            p();
                                            return;
                                        }
                                        _triedGACs[h] = true;
                                        socialize.updateRefUID();
                                        socialize.notifyLogin({
                                            ignoreApiQueue: true,
                                            neverTryGAC: true,
                                            authCode: h,
                                            APIKey: thisScript.APIKey,
                                            client_id: thisScript.APIKey
                                        }, {
                                            callback: function() {
                                                utils.cookie.remove("gac_" + thisScript.APIKey);
                                                p();
                                                socialize.refreshUI({
                                                    neverTryGAC: true
                                                });
                                            }
                                        });
                                    } else {
                                        p();
                                    }
                                } else {
                                    p();
                                }
                            },
                            setFromSsoResponse: function setFromSsoResponse1(f, p) {
                                if (p === void 0) {
                                    p = thisScript.APIKey;
                                }
                                return tslib_1.__awaiter(this, void 0, void 0, function() {
                                    var h = this;
                                    return tslib_1.__generator(this, function(v) {
                                        return [
                                            2,
                                            new gigya.Promise(function(v) {
                                                return tslib_1.__awaiter(h, void 0, void 0, function() {
                                                    var h, w, m, b;
                                                    return tslib_1.__generator(this, function(y) {
                                                        switch(y.label){
                                                            case 0:
                                                                if (!f) return [
                                                                    2
                                                                ];
                                                                h = f.errorCode;
                                                                switch(h){
                                                                    case GSErrors_1.GSErrors.UNAUTHORIZED_USER:
                                                                        return [
                                                                            3,
                                                                            1
                                                                        ];
                                                                    case GSErrors_1.GSErrors.INVALID_TOKEN:
                                                                        return [
                                                                            3,
                                                                            2
                                                                        ];
                                                                    case GSErrors_1.GSErrors.TOKEN_HAS_RENEWED:
                                                                        return [
                                                                            3,
                                                                            3
                                                                        ];
                                                                    case GSErrors_1.GSErrors.OK:
                                                                        return [
                                                                            3,
                                                                            3
                                                                        ];
                                                                    case GSErrors_1.GSErrors.NETWORK_ERROR:
                                                                        return [
                                                                            3,
                                                                            5
                                                                        ];
                                                                }
                                                                return [
                                                                    3,
                                                                    6
                                                                ];
                                                            case 1:
                                                                logger.info("no group session found");
                                                                remove(p);
                                                                return [
                                                                    3,
                                                                    7
                                                                ];
                                                            case 2:
                                                                logger.info("existing group session was revoked");
                                                                remove(p);
                                                                events.global.dispatchWhenHandlerAdded({
                                                                    eventName: "accounts.logout"
                                                                });
                                                                events.global.dispatchWhenHandlerAdded({
                                                                    eventName: "logout"
                                                                });
                                                                return [
                                                                    3,
                                                                    7
                                                                ];
                                                            case 3:
                                                                if (!f.login_token) return [
                                                                    2
                                                                ];
                                                                logger.info("new session from group");
                                                                w = void 0;
                                                                m = void 0;
                                                                if (f.groupContext) {
                                                                    m = JSON.parse(f.groupContext);
                                                                }
                                                                if (!isGigyaCookieDomain()) {
                                                                    w = !f.gltexp ? f.expires_in : utils.cookie.getInfiniteExpirationTimeInSeconds();
                                                                    set(p, f.login_token, w);
                                                                    b = "gltexp_" + p;
                                                                    if (f.gltexp && !utils.cookie.get(b)) {
                                                                        utils.cookie.set(b, f.gltexp);
                                                                    }
                                                                }
                                                                return [
                                                                    4,
                                                                    dispatchLoginEvent({
                                                                        expires_in: w,
                                                                        groupContext: m
                                                                    })
                                                                ];
                                                            case 4:
                                                                y.sent();
                                                                return [
                                                                    3,
                                                                    7
                                                                ];
                                                            case 5:
                                                                logger.error("gigya: error loading sso frame", {
                                                                    res: f
                                                                });
                                                                events.global.dispatchWhenHandlersAdded([
                                                                    "accounts.error",
                                                                    "socialize.error"
                                                                ], f);
                                                                return [
                                                                    3,
                                                                    7
                                                                ];
                                                            case 6:
                                                                logger.error("sso: unsupported response");
                                                                throw "gigya: unsupported response from sso";
                                                            case 7:
                                                                v();
                                                                return [
                                                                    2
                                                                ];
                                                        }
                                                    });
                                                });
                                            })
                                        ];
                                    });
                                });
                            },
                            dispatchLoginEvent: function dispatchLoginEvent1(f) {
                                if (f === void 0) {
                                    f = {};
                                }
                                return tslib_1.__awaiter(this, void 0, void 0, function() {
                                    var p = this;
                                    return tslib_1.__generator(this, function(h) {
                                        return [
                                            2,
                                            new gigya.Promise(function(h) {
                                                utils.queue.hold("verifyLogin", "API");
                                                accounts.verifyLogin({
                                                    ignoreApiQueue: true,
                                                    suppressLoginEvent: true,
                                                    include: utils.stringUtils.mergeCommaSeparatedValues("profile,data", thisScript.globalConf["include"]),
                                                    extraProfileFields: "samlData",
                                                    callback: function(v) {
                                                        utils.queue.release("verifyLogin", "API");
                                                        SessionService_1.sessionData.setIsSessionVerified(get(), v.errorCode == GSErrors_1.GSErrors.OK);
                                                        var w = v.source;
                                                        events.global.dispatchWhenHandlerAdded({
                                                            eventName: "socialize.login"
                                                        }, null, function(p, h) {
                                                            if (!p) {
                                                                p = {};
                                                            }
                                                            p = utils.object.merge([
                                                                p,
                                                                f
                                                            ]);
                                                            if (v.errorCode == GSErrors_1.GSErrors.OK) {
                                                                socialize.getUserInfo({
                                                                    signIDs: true,
                                                                    extraFields: "samlData",
                                                                    callback: function(f) {
                                                                        if (f.errorCode == GSErrors_1.GSErrors.OK) {
                                                                            p = _.addUserInfoToEvent(f, {
                                                                                eventName: "login"
                                                                            }, true);
                                                                            p["source"] = w;
                                                                            p["newUser"] = false;
                                                                            p["provider"] = "site";
                                                                            p["loginMode"] = "standard";
                                                                            if (p["user"]) {
                                                                                p["user"].errorCode = f.errorCode;
                                                                                p["user"].callId = f.callId;
                                                                            }
                                                                            v.id_token && (p["id_token"] = v.id_token);
                                                                        } else {
                                                                            p["cancel"] = true;
                                                                        }
                                                                        h(p);
                                                                    }
                                                                });
                                                            } else {
                                                                p["cancel"] = true;
                                                                h(p);
                                                            }
                                                        });
                                                        events.global.dispatchWhenHandlerAdded({
                                                            eventName: "accounts.login"
                                                        }, null, function(h, w) {
                                                            return tslib_1.__awaiter(p, void 0, void 0, function() {
                                                                return tslib_1.__generator(this, function(p) {
                                                                    switch(p.label){
                                                                        case 0:
                                                                            if (!h) {
                                                                                h = {};
                                                                            }
                                                                            h = utils.object.merge([
                                                                                h,
                                                                                f
                                                                            ]);
                                                                            if (!(v.errorCode == GSErrors_1.GSErrors.OK)) return [
                                                                                3,
                                                                                3
                                                                            ];
                                                                            h["eventName"] = "accounts.login";
                                                                            if (!!v.UID) return [
                                                                                3,
                                                                                2
                                                                            ];
                                                                            return [
                                                                                4,
                                                                                new gigya.Promise(function(f) {
                                                                                    return accounts.getAccountInfo({
                                                                                        callback: f,
                                                                                        include: utils.stringUtils.mergeCommaSeparatedValues("profile,data", thisScript.globalConf["include"])
                                                                                    });
                                                                                })
                                                                            ];
                                                                        case 1:
                                                                            v = p.sent();
                                                                            p.label = 2;
                                                                        case 2:
                                                                            utils.object.extractProperties(v, h, "signature|UIDSig|timestamp|UIDSignature|signatureTimestamp|UID|profile|data|dataCenter|id_token|groups");
                                                                            return [
                                                                                3,
                                                                                4
                                                                            ];
                                                                        case 3:
                                                                            h["cancel"] = true;
                                                                            p.label = 4;
                                                                        case 4:
                                                                            w(h);
                                                                            return [
                                                                                2
                                                                            ];
                                                                    }
                                                                });
                                                            });
                                                        });
                                                        h();
                                                    }
                                                });
                                            })
                                        ];
                                    });
                                });
                            },
                            remove: function remove1(f) {
                                if (f === void 0) {
                                    f = thisScript.APIKey;
                                }
                                return tslib_1.__awaiter(this, void 0, void 0, function() {
                                    var p;
                                    return tslib_1.__generator(this, function(h) {
                                        switch(h.label){
                                            case 0:
                                                if (get(f)) {
                                                    logger.info("removing login token");
                                                }
                                                utils.cookie.remove("glt_" + f);
                                                utils.cookie.remove("_gig_lt");
                                                utils.cookie.remove("gltexp_" + f);
                                                if (!partnerSettings.ssoKey) return [
                                                    3,
                                                    2
                                                ];
                                                logger.info("removing group login token");
                                                return [
                                                    4,
                                                    SsoService_1.SsoService.getInstance()
                                                ];
                                            case 1:
                                                p = h.sent();
                                                return [
                                                    2,
                                                    p.removeToken()
                                                ];
                                            case 2:
                                                return [
                                                    2,
                                                    gigya.Promise.resolve()
                                                ];
                                        }
                                    });
                                });
                            },
                            getTokenParam: function getTokenParam1(f, p) {
                                var h = utils.cookie.get(_getTokenCookieName(f));
                                if (h) {
                                    var v = h.split("|");
                                    if (v.length > 1) {
                                        return utils.keyValue.deserialize(v[1])[p];
                                    } else {
                                        return null;
                                    }
                                }
                            },
                            setBearerToken: function setBearerToken1(f) {
                                logger.info("setting a new Bearer token");
                                _bearerToken = "Bearer " + f;
                            },
                            getBearerToken: function getBearerToken1() {
                                return _bearerToken;
                            },
                            removeBearerToken: function removeBearerToken1() {
                                logger.info("Bearer token removed");
                                _bearerToken = null;
                            }
                        },
                        ApiRequest: function ApiRequest1(f, p, h, v) {
                            if (v === void 0) {
                                v = {};
                            }
                            var w = _super.call(this, defaultApiDomain, f, p, v) || this;
                            w.methodName = f;
                            w.params = p;
                            w.callback = h;
                            w.settings = v;
                            return w;
                        },
                        BaseRequest: function BaseRequest1(f, p, h, v, w) {
                            if (v === void 0) {
                                v = {};
                            }
                            if (w === void 0) {
                                w = REQ_MAX_RETRIES;
                            }
                            this.baseUrl = f;
                            this.methodName = p;
                            this.params = h;
                            this.settings = v;
                            this._maxTries = w;
                            this._tries = 0;
                            this.params["sdk"] = "js_" + build.version;
                        },
                        OauthRequest: function OauthRequest1(f, p, h, v, w, m) {
                            if (m === void 0) {
                                m = {};
                            }
                            var b = _super.call(this, p, h, v, m) || this;
                            b.id = f;
                            b.baseUrl = p;
                            b.methodName = h;
                            b.params = v;
                            b.callback = w;
                            b.settings = m;
                            b.windowName = b.methodName.replace(/\./g, "_").replace(/\//g, "") + "_" + new Date().getTime();
                            b.requestID = b.windowName + new Date().getTime();
                            return b;
                        },
                        webAdapterName: "Web",
                        newApiAdapter: function newApiAdapter1(f) {
                            return new WebAdapter(f, new localStorage_1.CookieStorageAdapter());
                        },
                        WebAdapter: function WebAdapter1(f, p) {
                            this.adapterSettings = f;
                            this._storage = p;
                            this.name = exports.webAdapterName;
                            this._reBootstrapCount = 0;
                        },
                        apiService: {
                            _apiKey: "4_aeFS_UyzRnmP5k_MI59ejg",
                            _hasGmid: true,
                            _domainResolver: {
                                originDomain: "https://local.pyzlo.in/",
                                isGroupApiDomain: false,
                                getApiDomain: function(f) {
                                    if (f && shouldAddNamespace) {
                                        var p = f.split(".")[0];
                                        if (excludeNamespaces.indexOf(p) >= 0) {
                                            p = "accounts";
                                        } else if (gigyaDomainNamespaces.indexOf(p) == -1) {
                                            logger.error("trying to send request to an invalid domain");
                                            p = gigyaDomainNamespaces[0];
                                        }
                                        return p + "." + apiDomain;
                                    } else {
                                        return apiDomain;
                                    }
                                },
                                isApiDomainFirstParty: true,
                                hasGroupApiDomainChanged: false,
                                canSaveGmidAsCookie: true
                            },
                            _groupApiDomainService: {
                                _storage: {},
                                _pageDomain: "local.pyzlo.in",
                                _cookieName: "apiDomain_undefined"
                            },
                            _requestProvider: {
                                _xhrRequest: function XhrRequest1(f, p, h, v, w) {
                                    if (v === void 0) {
                                        v = {};
                                    }
                                    if (w === void 0) {
                                        w = {};
                                    }
                                    var m = _super.call(this, f, p, h, v) || this;
                                    m.headers = {};
                                    m.xhttp = new XMLHttpRequest();
                                    m.setRequestHeaders(w);
                                    return m;
                                },
                                timeout: 15000
                            },
                            didFallback: false,
                            _storage: {}
                        }
                    },
                    mobile: {
                        newApiAdapter: function newApiAdapter1(f) {
                            return new MobileAdapter(f);
                        },
                        mobileCallbacks: {},
                        MobileAdapter: function MobileAdapter1(f) {
                            this.nativeProxy = f;
                            this._storage = new localStorage_1.MemoryStorageAdapter();
                            this.name = "Mobile";
                        },
                        showPlugin: function showPlugin1(f, p) {
                            var h = f.split(".");
                            var v = h.splice(h.length - 1, 1)[0];
                            if (!h.length) h = [
                                "socialize"
                            ];
                            if (f == "commentsUI") h = [
                                "comments"
                            ];
                            var w = "show" + utils.stringUtils.capitalize(v);
                            h.push(w);
                            var m = window.gigya;
                            while(m && h.length)m = m[h.shift()];
                            if (typeof m !== "function") {
                                return events.dispatchInvalidParamError(utils.object.merge([
                                    {
                                        plugin: f
                                    },
                                    p
                                ]), "plugin");
                            }
                            m(p);
                        }
                    },
                    OAuthMode: {
                        0: "Social",
                        1: "Sso",
                        Social: 0,
                        Sso: 1
                    }
                },
                Uri: function Uri1(f, p) {
                    if (p === void 0) {
                        p = true;
                    }
                    this._anchor = document.createElement("a");
                    var h = document.location.protocol == "http:" ? "http" : "https";
                    if (p && f.indexOf("://") === -1 && f.charAt(0) !== "/") f = h + "://" + f;
                    this._anchor.href = f;
                },
                apiDomainFactory: function apiDomainFactory1(f, p) {
                    if (f === void 0) {
                        f = resolveApiDomain();
                    }
                    if (p === void 0) {
                        p = defaultApiDomain;
                    }
                    var h = Uri_1.Uri.parse(f).isIn(Uri_1.Uri.parse(p));
                    return function(p) {
                        if (p && h) {
                            var v = p.split(".")[0];
                            if (excludeNamespaces.indexOf(v) >= 0) {
                                v = "accounts";
                            } else if (gigyaDomainNamespaces.indexOf(v) == -1) {
                                logger.error("trying to send request to an invalid domain");
                                v = gigyaDomainNamespaces[0];
                            }
                            return v + "." + f;
                        } else {
                            return f;
                        }
                    };
                },
                getGigyaDomain: function getGigyaDomain1(f, p, h) {
                    if (p === void 0) {
                        p = dataCenter;
                    }
                    if (h === void 0) {
                        h = defaultApiDomain;
                    }
                    if (h === "sapcdm.cn" && p !== "cn1") {
                        h = "cn1." + h;
                    }
                    var v = p + "." + h;
                    if (f) return f + "." + v;
                    else return v;
                },
                getBaseDomain: function getBaseDomain1(f, p, h) {
                    if (f === void 0) {
                        f = partnerSettings.baseDomains;
                    }
                    if (p === void 0) {
                        p = location.hostname;
                    }
                    if (h === void 0) {
                        h = [
                            "gigya.com",
                            "cn1.sapcdm.cn",
                            "localhost",
                            defaultApiDomain
                        ];
                    }
                    if (!p) {
                        return "";
                    }
                    if (typeof f == "string") {
                        f = f.split(",");
                    }
                    var v = Uri_1.Uri.parse(p);
                    if (h) {
                        f = f.concat(h);
                    }
                    for(var w = 0, m = f; w < m.length; w++){
                        var b = m[w];
                        var y = stringUtilsUtils.replaceAll(b, "*", "");
                        var S = Uri_1.Uri.parse(y);
                        if (S && v.isIn(S)) {
                            if (!_) {
                                _ = {};
                            }
                            _.isTrustedDomain = true;
                            if (S.isForSubDomains()) {
                                return v.domain;
                            } else {
                                return S.domain;
                            }
                        }
                    }
                    return v.domain;
                },
                resolveApiDomain: function resolveApiDomain1(f, p, h, v) {
                    if (f === void 0) {
                        f = partnerSettings && partnerSettings.customAPIDomainPrefix;
                    }
                    if (p === void 0) {
                        p = LocalInfo_1.localInfo.baseDomain;
                    }
                    if (h === void 0) {
                        h = dataCenter;
                    }
                    if (v === void 0) {
                        v = defaultApiDomain;
                    }
                    var w;
                    var m = getHostedPagesApiDomainCookie();
                    if (m) {
                        return m;
                    }
                    if (p.endsWith(((w = _.config) === null || w === void 0 ? void 0 : w.hostedPagesDomain) || "my.gigya-ext.com")) {
                        return p;
                    }
                    if (f && p && p !== v) {
                        return f + "." + p;
                    }
                    return getGigyaDomain(undefined, h, v);
                },
                getStorageDomain: function getStorageDomain1() {
                    var f, p, h;
                    var v = getHostedPagesApiDomainCookie();
                    if (v) {
                        return v;
                    }
                    if ((p = (f = thisScript) === null || f === void 0 ? void 0 : f.globalConf) === null || p === void 0 ? void 0 : p["storageDomainOverride"]) {
                        return thisScript.globalConf["storageDomainOverride"];
                    }
                    if (((h = thisScript) === null || h === void 0 ? void 0 : h.baseDomain) && FlagService_1.FlagService.useGigyaJsBaseDomain) {
                        return thisScript.baseDomain;
                    }
                    var w = defaultApiDomain;
                    if (utils.stringUtils.endsWith(w, "sapcdm.cn") && dataCenter !== "cn1") {
                        w = "cn1.sapcdm.cn";
                    }
                    var m = dataCenter !== "global" ? "cdns." + dataCenter : "cdns";
                    return m + "." + w;
                },
                providers: {
                    _aliases: {
                        google: "googleplus",
                        googleplus: "googleplus",
                        messenger: "messenger",
                        microsoft: "messenger",
                        wechat: "wechat",
                        weixin: "wechat"
                    },
                    Provider: function Provider1(f, p, h, v, w, m, b) {
                        this.ID = f;
                        this.displayName = p;
                        this.width = h;
                        this.height = v;
                        this.explicitOnly = m;
                        this.aliases = b;
                        this.arDefaultCapabilities = w.split(",");
                        this.name = p.toLowerCase().split(" ").join("").split("!").join("").split(".").join("").split("+").join("plus");
                        if (b) {
                            if (!exports._aliases) {
                                exports._aliases = {};
                            }
                            var y = b.split("|");
                            for(var S = 0; S < y.length; S++){
                                exports._aliases[y[S]] = this.name;
                            }
                        }
                        switch(this.name){
                            case "messenger":
                                this.displayName = "Microsoft";
                                break;
                            case "googleplus":
                                this.displayName = "Google";
                                break;
                            case "customopenid":
                                this.displayName = "OpenID";
                                break;
                            case "paypaloauth":
                                this.displayName = "PayPal";
                                break;
                            default:
                        }
                    },
                    arProviders: [
                        {
                            ID: 64,
                            displayName: "Facebook",
                            width: 650,
                            height: 400,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "places",
                                "status",
                                "actions",
                                "photos"
                            ],
                            name: "facebook"
                        },
                        {
                            ID: 9012,
                            displayName: "Twitter",
                            width: 800,
                            height: 440,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "notifications",
                                "actions",
                                "status",
                                "places",
                                "checkins"
                            ],
                            name: "twitter"
                        },
                        {
                            ID: 72,
                            displayName: "Google",
                            width: 560,
                            height: 600,
                            explicitOnly: false,
                            aliases: "google|googleplus",
                            arDefaultCapabilities: [
                                "login",
                                "contacts"
                            ],
                            name: "googleplus"
                        },
                        {
                            ID: 9042,
                            displayName: "LinkedIn",
                            width: 865,
                            height: 450,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "status",
                                "actions",
                                "notifications",
                                "contacts"
                            ],
                            name: "linkedin"
                        },
                        {
                            ID: 9058,
                            displayName: "Amazon",
                            width: 785,
                            height: 510,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "amazon"
                        },
                        {
                            ID: 9803,
                            displayName: "Yahoo",
                            width: 500,
                            height: 567,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "contacts",
                                "notifications"
                            ],
                            name: "yahoo"
                        },
                        {
                            ID: 1047,
                            displayName: "Microsoft",
                            width: 380,
                            height: 540,
                            explicitOnly: false,
                            aliases: "messenger|microsoft",
                            arDefaultCapabilities: [
                                "login",
                                " friends"
                            ],
                            name: "messenger"
                        },
                        {
                            ID: 9222,
                            displayName: "Odnoklassniki",
                            width: 888,
                            height: 425,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "odnoklassniki"
                        },
                        {
                            ID: 9007,
                            displayName: "FourSquare",
                            width: 1000,
                            height: 650,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "places",
                                "checkins"
                            ],
                            name: "foursquare"
                        },
                        {
                            ID: 8191,
                            displayName: "Renren",
                            width: 450,
                            height: 350,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "status",
                                "actions"
                            ],
                            name: "renren"
                        },
                        {
                            ID: 8203,
                            displayName: "QQ",
                            width: 570,
                            height: 460,
                            arDefaultCapabilities: [
                                "login",
                                "actions"
                            ],
                            name: "qq"
                        },
                        {
                            ID: 9821,
                            displayName: "Sina",
                            width: 640,
                            height: 380,
                            arDefaultCapabilities: [
                                "login",
                                "status",
                                "actions"
                            ],
                            name: "sina"
                        },
                        {
                            ID: 4228,
                            displayName: "Mixi",
                            width: 1000,
                            height: 720,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "actions",
                                "photos"
                            ],
                            name: "mixi"
                        },
                        {
                            ID: 9830,
                            displayName: "Yahoo! JAPAN",
                            width: 980,
                            height: 700,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "yahoojapan"
                        },
                        {
                            ID: 8205,
                            displayName: "Spiceworks",
                            width: 640,
                            height: 380,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "spiceworks"
                        },
                        {
                            ID: 9041,
                            displayName: "VKontakte",
                            width: 610,
                            height: 510,
                            arDefaultCapabilities: [
                                "login",
                                "friends",
                                "photos",
                                "status",
                                "actions"
                            ],
                            name: "vkontakte"
                        },
                        {
                            ID: 4096,
                            displayName: "WordPress",
                            width: 700,
                            height: 540,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "wordpress"
                        },
                        {
                            ID: 256,
                            displayName: "Blogger",
                            width: 760,
                            height: 400,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "blogger"
                        },
                        {
                            ID: 4218,
                            displayName: "Netlog",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "netlog"
                        },
                        {
                            ID: 5002,
                            displayName: "Livedoor",
                            width: 970,
                            height: 700,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "livedoor"
                        },
                        {
                            ID: 5004,
                            displayName: "Fox News",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "foxnews"
                        },
                        {
                            ID: 1051,
                            displayName: "PayPal",
                            width: 400,
                            height: 550,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "paypal"
                        },
                        {
                            ID: 9219,
                            displayName: "Xing",
                            width: 785,
                            height: 510,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login",
                                "friends"
                            ],
                            name: "xing"
                        },
                        {
                            ID: 8206,
                            displayName: "WeChat",
                            width: 730,
                            height: 590,
                            explicitOnly: false,
                            aliases: "wechat|weixin",
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "wechat"
                        },
                        {
                            ID: 4121,
                            displayName: "OpenID",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "customopenid"
                        },
                        {
                            ID: 4122,
                            displayName: "Custom SAML",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "customsaml"
                        },
                        {
                            ID: 10001,
                            displayName: "OpenID Connect",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "openidconnect"
                        },
                        {
                            ID: 6002,
                            displayName: "Site",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                ""
                            ],
                            name: "site"
                        },
                        {
                            ID: 1052,
                            displayName: "PayPal",
                            width: 730,
                            height: 590,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "paypaloauth"
                        },
                        {
                            ID: 8207,
                            displayName: "Line",
                            width: 730,
                            height: 590,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "line"
                        },
                        {
                            ID: 20001,
                            displayName: "Kakao",
                            width: 500,
                            height: 600,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "kakao"
                        },
                        {
                            ID: 20002,
                            displayName: "Naver",
                            width: 780,
                            height: 555,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "naver"
                        },
                        {
                            ID: 20003,
                            displayName: "DocCheck",
                            width: 874,
                            height: 844,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "doccheck"
                        },
                        {
                            ID: 20004,
                            displayName: "Apple",
                            width: 874,
                            height: 844,
                            explicitOnly: true,
                            arDefaultCapabilities: [
                                "login"
                            ],
                            name: "apple"
                        }
                    ],
                    getProviderByName: function getProviderByName1(f, p) {
                        if (p === void 0) {
                            p = exports.arProviders;
                        }
                        for(var h = 0; h < p.length; h++){
                            if (p[h].name.toLowerCase() === f.toLowerCase()) {
                                return p[h];
                            }
                        }
                    },
                    replaceProviderAliases: function replaceProviderAliases1(f) {
                        if (f == null) {
                            return;
                        }
                        var p = f.split(",");
                        for(var h = 0; h < p.length; h++){
                            var v = p[h].replace(/^\s+|\s+$/g, "");
                            if (exports._aliases[v]) {
                                p[h] = exports._aliases[v];
                            }
                        }
                        return p.join(",");
                    },
                    getProviderById: function getProviderById1(f, p) {
                        if (p === void 0) {
                            p = exports.arProviders;
                        }
                        for(var h = 0; h < p.length; h++){
                            if (p[h].ID === f) {
                                return p[h];
                            }
                        }
                    },
                    hideProvidersByName: function hideProvidersByName1(f, p, h) {
                        if (p === void 0) {
                            p = "";
                        }
                        if (h === void 0) {
                            h = exports.arProviders;
                        }
                        p = p.toLowerCase();
                        var v = p.split(" ").join("").split(".").join("").toLowerCase().split(",");
                        v = replaceWildcard(v, h);
                        for(var w = 0; w < v.length; w++){
                            for(var m = 0; m < f.length; m++){
                                var b = f[m];
                                var y = b.name || b.toString();
                                if (y) {
                                    y = y.toLowerCase();
                                }
                                if (y === v[w]) {
                                    f.splice(m, 1);
                                }
                            }
                        }
                        return f;
                    },
                    getProvidersForRequiredCapabilities: function getProvidersForRequiredCapabilities1(f, p) {
                        if (p == null) {
                            p = [];
                        }
                        var h = [];
                        for(var v = 0; v < f.length; v++){
                            var w = f[v];
                            var m = true;
                            for(var b = 0; b < p.length; b++){
                                var y = false;
                                for(var S = 0; S < w.arDefaultCapabilities.length; S++){
                                    if (w.arDefaultCapabilities[S].toLowerCase() == p[b].toLowerCase()) {
                                        y = true;
                                        break;
                                    }
                                }
                                if (!y) {
                                    m = false;
                                    break;
                                }
                            }
                            if (m) {
                                h.push(w);
                            }
                        }
                        return h;
                    },
                    getAllProviders: function getAllProviders1() {
                        return exports.arProviders.concat();
                    },
                    getProvidersByName: function getProvidersByName1(f, p) {
                        if (p === void 0) {
                            p = exports.arProviders;
                        }
                        f = ("" + f).split(" ").join("").split(".").join("").toLowerCase();
                        f = replaceProviderAliases(f);
                        var h = ("" + f).split(",");
                        h = replaceWildcard(h, p);
                        var v = [];
                        for(var w = 0; w < h.length; w++){
                            var m = getProviderByName(h[w], p);
                            if (m != null && arrayUtils.indexOf(v, m) == -1) {
                                v.push(m);
                            }
                        }
                        return v;
                    },
                    replaceWildcard: function replaceWildcard1(f, p) {
                        if (!p) {
                            p = exports.arProviders;
                        }
                        var h = [];
                        for(var v = 0; v < f.length; v++){
                            if (f[v] == "*") {
                                for(var w = 0; w < p.length; w++){
                                    var m = false;
                                    for(var b = 0; b < f.length; b++){
                                        if (f[b].toLowerCase() === p[w].name.toLowerCase()) {
                                            m = true;
                                        }
                                    }
                                    if (!m && !p[w].explicitOnly) {
                                        h.push(p[w].name);
                                    }
                                }
                            } else {
                                h.push(f[v]);
                            }
                        }
                        return h;
                    }
                },
                plugins: {
                    instances: {},
                    getPluginInstance: function getPluginInstance1(f, p) {
                        var h = getInstanceId(f, p);
                        return exports.instances[h];
                    },
                    setPluginInstance: function setPluginInstance1(f, p, h, v) {
                        if (v === void 0) {
                            v = false;
                        }
                        var w = getInstanceId(f, p);
                        if (!v) {
                            var m = w;
                            for(var b = 2; exports.instances[w]; b++){
                                w = m + b.toString();
                            }
                        }
                        f["instanceID"] = w;
                        exports.instances[w] = h;
                    },
                    removePluginInstance: function removePluginInstance1(f, p) {
                        delete exports.instances[getInstanceId(f, p)];
                        delete f["instanceID"];
                    },
                    BasePlugin: function t1(f, p, h) {
                        var v = e.call(this, f, p, !1) || this;
                        return v.params = f, v.explicitParams = p, v.injectionInfo = h, v._pixelRatio = t1.globalPixelRatio, v._imgBase = t1.globalImgBase, v._imgExt = "png", v.MOBILE_MODAL_MIN_WIDTH = 400, v.lang = v.params.lang, v._style = a.PluginStyle.modern, v._poller = new l.Poller, v.POLL_INTERVAL = 150, v.config = utils.object.merge([
                            v.injectionInfo,
                            v.getConfig()
                        ]), v.localizedJsName = v.getTranslationJsName(), v;
                    },
                    resources: {
                        html: {
                            base: {
                                legacyModal: '<div id="gigya-screen-dialog-page-overlay" style="display:${overlayDisplay}"></div>\n<div class="gigya-screen-dialog-inner">\n    <div class="gigya-screen-dialog-top">\n        <div class="gigya-screen-dialog-caption" id="gigya-screen-dialog-caption-${modalID}">$title</div>\n        <div class="gigya-screen-dialog-close"></div>\n    </div>\n</div>',
                                modal: '<div id="gigya-screen-dialog-page-overlay" style="display:${overlayDisplay}"></div>\r\n<div class="gigya-screen-dialog-main">\r\n    <div class="gigya-screen-dialog-top">\r\n        <div class="gigya-screen-dialog-caption" tabindex="0" id="gigya-screen-dialog-caption-${modalID}">$title</div>\r\n        <div class="gigya-screen-dialog-close">\r\n            <a aria-label="close window" role="button" tabindex="0" >${closeImage}</a>\r\n        </div>\r\n    </div>\r\n    <div class="gigya-screen-dialog-inner">\r\n    </div>\r\n</div>\r\n',
                                modalCloseButton: '<img src="${imgUrl}" alt="close" height="${imgHeight}" width="${imgWidth}" />\n'
                            },
                            screenSet: {
                                passwordStrength: '<div class="${scoreClass}" aria-atomic="true" aria-live="polite">${content}</div>\n',
                                passwordStrength_strengthMeter: '<div class="gigya-passwordStrength-text">\n    <span class="gigya-passwordStrength-text">$TEXT(\'password_strength_colon\')</span>\n    <span class="gigya-passwordStrength-text gigya-passwordStrength-scoreText">${scoreText}</span>\n</div>\n<div class="gigya-passwordStrength-bar">\n    <div class="${barIndicatorClass}"></div>\n</div>\n',
                                passwordStrength_minimumRequirements: '<div class="gigya-passwordStrength-text-requirements">$requirements</div>\n',
                                screenSet_dialog: '<div id="${innerContainerID}" class="gigya-screen-content"></div>',
                                screenSet: '<h1 class="gigya-screen-caption" id="${innerContainerID}_caption"></h1>\r\n<div id="${childContainerID}" class="gigya-hidden"></div>\r\n<div id="${innerContainerID}" class="gigya-screen-content"></div>\r\n',
                                photoUpload_ui: '<div class="gigya-photo-upload-image" id="${photoElementID}"></div>\n<div>\n    <div class="gigya-photo-upload-button">$choose_file</div>\n    <div class="gigya-photo-upload-path" id="${pathContainerID}">$no_file_chosen</div>\n    <div class="gigya-photo-upload-text">$tip</div>\n</div>\n',
                                photoUpload_form: '<form enctype="multipart/form-data" method="post" class="gigya-photo-upload-form" target="${formTarget}" action="">\n    <input type="file" accept="image/*" name="_profilePhoto" />\n</form>\n',
                                inlinedPasswordStrength: '<div class="gigya-password-strength" data-on-focus-bubble="true" data-bubble-orientation="${orientation}"></div>\n',
                                consent: '<div class="consent" data-id="v1">\n\n  <div class="gigya-consent-title">${label}</div>\n  <div class="gigya-consent-subtitle" >${docId}</div>\n  <span class="gigya-consent-text">${approvedOnLabel}</span> <span class="gigya-consent-text">${approved}</span>\n\n</div>\n\n<div class="consent" data-id="v2">\n\n  <div class="gigya-consent-title">${label}</div>\n\n  <div class="gigya-version-content">\n    <span class="gigya-consent-text version-label">${versionLabel}</span> <span class="gigya-consent-text version">${docId}</span>\n  </div>\n\n  <div class="gigya-locale-content">\n    <span class="gigya-consent-text locale-label">${localeLabel}</span> <span class="gigya-consent-text locale">${locale}</span>\n  </div>\n\n  <div class="gigya-approved-on-content">\n    <span class="gigya-consent-text gigya-disabled-color approved-on-label">${approvedOnLabel}</span> <span class="gigya-consent-text gigya-disabled-color approved-on">${approved}</span>\n  </div>\n\n</div>',
                                communicationCheckbox: '<div class="subs-widget-container" aria-invalid="false">\n    <input class="gigya-input-checkbox subscription-checkbox"\n           id="subs-checkbox-${topic}-${channel}" name="${gigyaName}" type="checkbox"\n           ${checked}\n           data-communication-status="${status}"\n           data-communication-topic="${topic}"\n           data-communication-channel="${channel}"\n    >\n    <label class="subscription-name-label" for="subs-checkbox-${topic}-${channel}"\n           style="display: inline-block; vertical-align: middle; padding-left: 5px;">\n        ${label}\n    </label>\n</div>\n'
                            },
                            login_v2: {
                                arrow: '<div class="gigya-wrapper-login-providers-arrow-marker">\n    <button type="button"\n            tabindex="${tabindex}"\n            class="tabbing-button gigya-login-providers-arrow-marker"\n            aria-label="${label}">\n    </button>\n</div>\n',
                                footer: '<div class="gigya-login-footer"></div>',
                                footerBrandLong: '<a class="gigya-login-footer-social-by" href="https://www.gigya.com" target="_blank">${socialBy} <img alt="Gigya" class="gigya-logo" src="${logoUrl}" /></a>\n',
                                footerBrandShort: '<a class="gigya-login-footer-social-by" href="https://www.gigya.com" target="_blank"><img alt="Gigya" class="gigya-logo" src="${logoUrl}" /></a>\n',
                                footerBrandWhatIsThis: '<table cellpadding="0" cellspacing="0" class="gigya-login-footer-whatsthis" role="presentation">\n    <tbody>\n        <tr>\n            <td style="vertical-align: middle; text-align: center"><span>$whatsthistext</span></td>\n        </tr>\n    </tbody>\n</table>\n',
                                footerDivider: '<span class="gigya-login-footer-divider">|</span>',
                                footerEdit: '<span class="gigya-login-footer-edit-link">$edit</span>\n',
                                footerTerms: '<a class="gigya-login-footer-terms" target="_blank" href="https://www.gigya.com/terms-of-service/">$terms</a>\n',
                                header: '<div class="gigya-login-header">${headerText}</div>\n',
                                login: '<div class="gigya-login-providers">\n    <label id="social-buttons-login-caption" aria-label="Sign in with"></label>\n    <table class="gigya-login-providers-container" role="presentation">\n        <tr>\n            <td class="gigya-login-providers-arrow-left"></td>\n            <td class="gigya-login-providers-list-container"></td>\n            <td class="gigya-login-providers-arrow-right"></td>\n        </tr>\n    </table>\n</div>\n',
                                providerImage: '<img style="width:${buttonWidth}px;height:${buttonHeight}px;" src="${imageUrl}" />\r\n',
                                uiContainer: '<div id="${containerID}_uiContainer"></div>',
                                welcome: '<div class="gigya-login-welcome-container">\n    <div class="gigya-login-welcome-user"></div>\n    <div class="gigya-login-welcome-provider"></div>\n    <div class="gigya-login-welcome-signin-link"></div>\n</div>\n',
                                welcomeBubble: '<div class="gigya-login-welcome-bubble" tabindex="0" role="button">\n    <div class="gigya-login-welcome-bubble-left"></div>\n    <div class="gigya-login-welcome-bubble-center">\n        <div class="gigya-login-welcome-bubble-text">$notYou</div>\n    </div>\n    <div class="gigya-login-welcome-bubble-right"></div>\n</div>\n',
                                welcomeGreeting: '<div class="gigya-login-welcome-greeting">$welcomeBack</div>\n',
                                welcomeSignInLink: '<a class="gigya-link" href="javascript:void(0);">$singInUsingDifferentNetwork</a>\n'
                            }
                        },
                        css: {
                            base: {
                                legacy_modal: "/* legacy modal */\n\ndiv.gigya-screen-dialog {\n    position: absolute;\n    display: inline-block;\n    top: 25px;\n    left: 25px;\n    border: 8px solid #CCCCCC;\n    border-radius: 8px;\n    background-color: #FFFFFF;\n    outline: none;\n}\n\ndiv.gigya-screen-dialog-inner {\n    border: 1px solid #AAAAAA;\n}\n\ndiv.gigya-screen-dialog-close {\n    line-height: 33px;\n    height: 33px;\n    width: 20px;\n    float: right;\n    cursor: pointer;\n    background-image: url('${imgBase}/accounts/close_dialog.png');\n    background-position: right;\n    background-repeat: no-repeat;\n}\n\ndiv.gigya-screen-dialog-caption {\n    float: left;\n    font-weight: bold;\n    font-size: 16px;\n    font-family: arial;\n}\n\ndiv.gigya-screen-dialog-mobile {\n    position: absolute;\n    display: inline-block;\n    top: 0;\n    left: 0;\n    background-color: #FFFFFF;\n    width: 100%;\n}\n\ndiv.gigya-screen-dialog-top {\n    overflow: hidden;\n    zoom: 1;\n    background-color: #F3F3F3;\n    line-height: 33px;\n    padding: 0 10px 0 11px;\n}\n\n#gigya-screen-dialog-page-overlay {\n        width : 100vw;\n        height : 100vh;\n        background : black;\n        position : fixed;\n        top : 0;\n        left : 0;\n        z-index : -1;\n        filter : alpha(opacity=20);\n        opacity : 0.2;\n    }",
                                modern_modal: '/*modern modal*/\n.gigya-style-modern #gigya-screen-dialog-page-overlay {\n    width: 100vw;\n    height: 100vh;\n    background: black;\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: -1;\n    filter: alpha(opacity=20);\n    opacity: 0.2;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-main {\n    border: 0.5px;\n    border-radius: 3px;\n    background-color: transparent;\n    -webkit-box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.5);\n    -moz-box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.5);\n    box-shadow: 0px 3px 6px 0px rgba(0, 0, 0, 0.5);\n    max-height: 99vh;\n    max-width: 99vw;\n    overflow: auto;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-top {\n    overflow: hidden;\n    zoom: 1;\n    background-color: #1371B9;\n    line-height: 38px;\n    padding: 0 10px 0 11px;\n    border-radius: 3px 3px 0px 0px;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-close {\n    background-image: initial;\n    background-position: initial;\n    background-repeat: initial;\n    float: right;\n    cursor: pointer;\n}\n.gigya-style-modern div.gigya-screen-dialog-close > a{\n    padding: 4px;\n}\n.gigya-style-modern div.gigya-screen-dialog-close > a > img {\n    margin-top: 11px;\n    vertical-align: initial;\n    border: 0px;\n    width: auto;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-caption {\n    float: left;\n    font-size: 19px;\n    font-family: arial;\n    color: #FFFFFF;\n    padding-right: 20px;\n}\n\n.gigya-style-modern div.gigya-screen-dialog-inner {\n    padding: 0px;\n    overflow: hidden;\n    min-width: 32px;\n    min-height: 64px;\n    background-color: white;\n}\n\n.gigya-style-modern div.gigya-screen-dimmer {\n    position: absolute;\n    opacity: 0.2;\n    filter: alpha(opacity=20);\n    background-color: #FFFFFF;\n}\n\n.gigya-style-modern div.gigya-screen-loader {\n    position: absolute;\n    background: transparent url("${imgBase}/accounts/bigLoader.gif") no-repeat center center;\n    min-height: 32px;\n    min-width: 32px;\n}\n\n.gigya-style-modern.gigya-screen-dialog {\n    position: fixed;\n    border: none;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile {\n    position: absolute;\n    display: inline-block;\n    top: 0;\n    left: 0;\n    background-color: white;\n    width: 100%;\n    height: 100%;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-main {\n    max-height: 100vh;\n    max-width: 100vw;\n    box-shadow: initial;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-top {\n    position: fixed;\n    top: 0px;\n    border-radius: 0px;\n    line-height: 27px;\n    box-sizing: border-box;\n    width: 100%;\n    z-index: 1;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-caption {\n    font-size: 14px;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-close > a > img {\n    margin-top: 5px;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-inner {\n    border: 0px;\n    margin-top: 27px;\n    box-sizing: border-box;\n}\n\n.gigya-style-modern.gigya-screen-dialog-mobile div.gigya-screen-dialog-inner > div {\n    margin: 0 auto;\n}\n\n.gigya-style-modern.gigya-ios.gigya-screen-dialog, .gigya-style-modern.gigya-ios.gigya-screen-dialog.gigya-ios-v7.gigya-screen-dialog-mobile div.gigya-screen-dialog-top {\n    position: absolute;\n}\n\n.gigya-style-modern.gigya-android.gigya-screen-dialog-mobile {\n    overflow: auto;\n}\n\n.gigya-style-modern.gigya-ie8 #gigya-screen-dialog-page-overlay {\n    width: 100%;\n    height: 100%;\n}\n\nhtml.gigya-mobile-modal-mode {\n    overflow: hidden;\n}\nhtml.gigya-mobile-modal-mode body {\n    height: 0px;\n    overflow: hidden;\n}\n',
                                defaultCSS: '.gigya-consent-title {\n  font-weight: bold;\n  display: block;\n  font-weight: 700;\n  font-size: 15px;\n  font-family: arial;\n}\n.gigya-consent-subtitle {\n  font-weight: bold;\n  display: block;\n  font-weight: 700;\n  font-size: 13px;\n  font-family: arial;\n}\n\n.consent .gigya-version-content {\n  margin-top: 0.5rem;\n}\n\n.gigya-screen .gigya-disabled-color {\n  color: #b2b2b2;\n}\n.gigya-consent-text {\n  display: inline-block;\n}\n.gigya-composite-control-captcha-widget iframe {\n  width: 100%;\n}\n#FunCaptcha {\n  text-align: center;\n}\n.gigya-reset *,\ndiv.gigya-reset,\n.gigya-reset span,\n.gigya-reset a:hover,\n.gigya-reset a:visited,\n.gigya-reset a:link,\n.gigya-reset a:active {\n  border: none;\n  padding: 0px;\n  margin: 0px;\n  color: inherit;\n  text-decoration: none;\n  width: auto;\n  float: none;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  font-family: arial;\n  font-size: 12px;\n  color: #333333;\n  text-align: left;\n}\n\n.gigya-screen .gigya-error-msg {\n  color: #ce4635;\n  font-size: 11px;\n  display: block;\n  visibility: hidden;\n}\n\n.gigya-screen .gigya-error-msg.gigya-error-msg-active {\n  color: #ce4635;\n  font-size: 11px;\n  display: block;\n  visibility: visible;\n}\n.gigya-screen .gigya-error-msg.gigya-warn {\n  color: #b45a0b !important;\n}\n\n.gigya-screen .gigya-terms-error,\n.gigya-screen input.gigya-error,\n.gigya-screen input[type="text"].gigya-error,\n.gigya-screen input[type="password"].gigya-error,\n.gigya-screen input[type="email"].gigya-error,\n.gigya-screen select.gigya-error {\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid #ce4635;\n  -webkit-box-shadow: none !important;\n  -moz-box-shadow: none !important;\n  box-shadow: none !important;\n}\n\n.gigya-screen input.gigya-warn,\n.gigya-screen input[type="text"].gigya-warn,\n.gigya-screen select.gigya-warn {\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid #b45a0b !important;\n  -webkit-box-shadow: none !important;\n  -moz-box-shadow: none !important;\n  box-shadow: none !important;\n}\n\n.gigya-screen input.gigya-error[type="checkbox"],\n.gigya-screen input.gigya-error[type="radio"] {\n  padding: 0;\n}\n\n.gigya-screen input[disabled],\n.gigya-screen input:disabled {\n  background-color: #e1e1e1;\n  color: #4a4a4a;\n  border-color: #cccccc;\n}\n\ndiv.gigya-attach-file-upload-form {\n  position: absolute;\n  overflow: hidden;\n  font-size: 50px;\n  cursor: pointer;\n  filter: alpha(opacity=0);\n  opacity: 0;\n}\n\ndiv.gigya-photo-upload-form > input {\n  font-size: 500px;\n  direction: rtl;\n  height: 100%;\n  cursor: pointer;\n}\n\n.gigya-password-strength-bubble .gig-balloon-nub {\n  background-image: url("${imgBase}/screenSet/triangle_left.png");\n  height: 16px;\n  width: 10px;\n  left: +2px;\n}\n.gigya-password-strength-bubble .gig-balloon-nub-up {\n  background-image: url("${imgBase}/screenSet/triangle_up.png");\n  height: 10px;\n  width: 16px;\n  top: +2px;\n}\n.gigya-password-strength-bubble .gig-balloon-nub-right {\n  background-image: url("${imgBase}/screenSet/triangle_right.png");\n  height: 16px;\n  width: 10px;\n  left: -2px;\n}\n.gigya-password-strength-bubble .gig-balloon-nub-down {\n  background-image: url("${imgBase}/screenSet/triangle_down.png");\n  height: 10px;\n  width: 16px;\n  top: -2px;\n}\n.gigya-password-strength-bubble .gig-balloon-frame {\n  background-color: #f3f5f6;\n  -webkit-border-radius: 2px;\n  -moz-border-radius: 2px;\n  border-radius: 2px;\n  border: 1px solid #bfcfda;\n  -webkit-box-shadow: inset 0 0 1px 1px RGBA(0, 0, 0, 0.05);\n  -moz-box-shadow: inset 0 0 1px 1px RGBA(0, 0, 0, 0.05);\n  box-shadow: inset 0 0 1px 1px RGBA(0, 0, 0, 0.05);\n}\n\n.gigya-password-strength-bubble .gig-balloon {\n  position: relative;\n}\n.gigya-password-strength-bubble.gig-balloon-left .gig-balloon {\n  left: +10px;\n  top: +3px;\n}\n.gigya-password-strength-bubble.gig-balloon-right .gig-balloon {\n  left: -10px;\n  top: +3px;\n}\n.gigya-password-strength-bubble.gig-balloon-up .gig-balloon {\n  left: -5px;\n  top: +17px;\n}\n.gigya-password-strength-bubble.gig-balloon-down .gig-balloon {\n  left: -5px;\n  top: -12px;\n}\n\n.gigya-passwordStrength-text {\n  text-align: center;\n}\n\nspan.gigya-passwordStrength-text {\n  font-weight: bold;\n  display: inline-block;\n}\n\ndiv.gigya-passwordStrength-text-requirements {\n  text-align: center;\n  width: 100%;\n  margin-top: 8px;\n}\n\nspan.gigya-passwordStrength-scoreText {\n  margin-left: 3px;\n}\n\n.gigya-passwordStrength-too_weak .gigya-passwordStrength-scoreText {\n  color: #e76468;\n}\n.gigya-passwordStrength-weak .gigya-passwordStrength-scoreText {\n  color: #e76468;\n}\n.gigya-passwordStrength-fair .gigya-passwordStrength-scoreText {\n  color: #d99b4b;\n}\n.gigya-passwordStrength-strong .gigya-passwordStrength-scoreText {\n  color: #4ababc;\n}\n.gigya-passwordStrength-very_strong .gigya-passwordStrength-scoreText {\n  color: #4ababc;\n}\n\ndiv.gigya-passwordStrength-bar {\n  width: 100%;\n  height: 1px;\n  background-color: #b6b6b6;\n  margin-top: 8px;\n}\n\ndiv.gigya-passwordStrength-bar-too_weak {\n  width: 20%;\n  height: 100%;\n  background-color: #e76468;\n}\n\ndiv.gigya-passwordStrength-bar-weak {\n  width: 40%;\n  height: 100%;\n  background-color: #e76468;\n}\n\ndiv.gigya-passwordStrength-bar-fair {\n  width: 60%;\n  height: 100%;\n  background-color: #d99b4b;\n}\n\ndiv.gigya-passwordStrength-bar-strong {\n  width: 80%;\n  height: 100%;\n  background-color: #4ababc;\n}\n\ndiv.gigya-passwordStrength-bar-very_strong {\n  width: 100%;\n  height: 100%;\n  background-color: #4ababc;\n}\n\n.gigya-calculate-size {\n  position: absolute !important;\n  -ms-zoom: 1 !important;\n  zoom: 1 !important;\n  left: 10px !important;\n  top: -1000px !important;\n}\n\n.gigya-calculate-size div.gigya-captcha {\n  min-width: 318px;\n  min-height: 80px;\n  _width: 318px;\n  _height: 80px;\n}\n.gigya-calculate-size div.gigya-captcha.v2 {\n  min-height: 80px;\n  _height: 80px;\n}\n\n.gigya-calculate-size div.gigya-social-login {\n  min-width: 110px;\n  min-height: 120px;\n  _width: 110px;\n  _height: 120px;\n}\n\n.gigya-calculate-size div.gigya-tfa {\n  min-width: 325px;\n  min-height: 200px;\n  _width: 325px;\n  _height: 200px;\n}\n\ndiv.gigya-container {\n  display: none;\n}\n\ndiv.gigya-container.gigya-container-enabled {\n  display: block;\n}\n\ndiv.gigya-loginID-availability {\n  line-height: 18px;\n  background-repeat: no-repeat;\n  background-position: left center;\n}\n\ndiv.gigya-loginID-availability-available {\n  padding-left: 17px;\n  background-image: url("${imgBase}/accounts/ok.png");\n  color: #4fa373;\n}\n\ndiv.gigya-loginID-availability-not-available {\n  padding-left: 16px;\n  background-image: url("${imgBase}/accounts/error.png");\n  color: #ce4635;\n}\n\ndiv.gigya-loginID-availability-progress {\n  padding-left: 20px;\n  background-image: url("${imgBase}/accounts/smallLoader.gif");\n  color: #666666;\n}\n\ndiv.gigya-profile-photo {\n  border-radius: 3px;\n}\n\n.gigya-calculate-size div.gigya-profile-photo {\n  min-width: 64px;\n  min-height: 64px;\n}\n\ndiv.gigya-screen-dimmer {\n  position: absolute;\n  opacity: 0.5;\n  filter: "alpha(opacity=50)";\n  background-color: #ffffff;\n}\n\ndiv.gigya-screen-loader {\n  position: absolute;\n  background: transparent url("${imgBase}/accounts/bigLoader.gif") no-repeat center center;\n  min-height: 32px;\n  min-width: 32px;\n}\n\ndiv.gigya-screen-dialog-content {\n  overflow: auto;\n  padding: 25px;\n}\n\ndiv.gigya-screen-dialog-mobile div.gigya-composite-control-captcha-widget {\n  padding: 0;\n}\n\ndiv.gigya-screen-dialog-mobile .gigya-screen {\n  width: 100%;\n}\n\ndiv.gigya-secret-question {\n  display: none;\n}\n\ndiv.gigya-photo-upload {\n  height: 63px;\n  width: 300px;\n  zoom: 1;\n}\n\ndiv.gigya-photo-upload-button {\n  display: inline-block;\n  zoom: 1;\n  margin: 0 8px 8px 0;\n  font-weight: normal;\n  border: 1px solid #cecece;\n  cursor: pointer;\n  padding: 0 12px;\n  color: #333333;\n  font-weight: bold;\n  border-radius: 4px;\n  line-height: 28px;\n  background: #f2f2f2;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#FFFFFF", endColorstr="#F2F2F2");\n  background: -webkit-gradient(linear, left top, left bottom, from(#ffffff), to(#f2f2f2));\n  background: -moz-linear-gradient(top, #ffffff, #f2f2f2);\n}\n\ndiv.gigya-photo-upload-button:hover {\n  background: #ffffff;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#F2F2F2", endColorstr="#FFFFFF");\n  background: -webkit-gradient(linear, left top, left bottom, from(#f2f2f2), to(#ffffff));\n  background: -moz-linear-gradient(top, #f2f2f2, #ffffff);\n}\n\ndiv.gigya-photo-upload-text {\n  font-size: 11px;\n  color: #666666;\n}\n\ndiv.gigya-photo-upload-image {\n  border-radius: 6px;\n  background-position: center center;\n  background-repeat: no-repeat;\n  width: 64px;\n  height: 64px;\n  background-color: #f2f2f2;\n  float: left;\n  margin-right: 8px;\n}\n\ndiv.gigya-photo-upload-path {\n  white-space: nowrap;\n  width: 107px;\n  vertical-align: middle;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  padding-right: 10px;\n  background-position: right;\n  background-repeat: no-repeat;\n  display: inline-block;\n  *display: inline;\n  zoom: 1;\n  padding-right: 20px;\n}\n\nh1.gigya-screen-caption {\n  border-bottom: 1px solid #dbdbdb;\n  font-size: 16px;\n  font-weight: bold;\n  color: #333;\n  padding-bottom: 5px;\n  padding-top: 5px;\n  margin: 0 auto;\n}\n\n.gigya-error-display {\n  display: none;\n}\n\n.gigya-error-display.gigya-error-display-active {\n  display: block;\n}\n\n.gigya-hidden {\n  display: none !important;\n}\n\n.gigya-screen .gigya-tfa input[type="text"] {\n  margin: 5px 0px;\n  padding: 5px;\n  border-radius: 5px;\n  border: 1px solid #cccccc;\n}\n\n.gigya-screen .gigya-tfa input[type="text"]:focus,\n.gigya-screen .gigya-tfa input[type="text"]:focus {\n  border-color: #87b9ea;\n}\n\n.gigya-show-checkmark.gigya-valid {\n  background-image: url("${imgBase}/screenSet/checkmarkValid.png");\n  background-position-x: 100%;\n  background-position-y: 50%;\n  background-position: right 5px center;\n  background-repeat: no-repeat;\n  padding-right: 25px;\n}\n\n.gigya-show-checkmark.gigya-valid.gigya-empty {\n  background-image: none;\n  padding-right: 5px;\n}\n\n.gigya-show-validity-border.gigya-valid:not(.gigya-empty) {\n  border: 1px solid #30914C;\n}\n\n.gigya-show-checkmark.gigya-pending {\n  background-image: url("${imgBase}/screenSet/checkmarkPending.gif");\n  background-position-x: 100%;\n  background-position-y: 50%;\n  background-position: right 5px center;\n  background-repeat: no-repeat;\n  padding-right: 25px;\n}\n\n/* If changed, update UI Builder too. */\n.gigya-screen .gigya-composite-control-image {\n  overflow: hidden;\n}\n.gigya-image {\n  background-repeat: no-repeat;\n  box-sizing: content-box;\n  background-position: center;\n  min-height: 10px;\n}\n.gigya-image[data-background-size="fit"] {\n  background-size: contain;\n}\n.gigya-image[data-background-size="fit-horizontally"] {\n  background-size: 100% auto;\n}\n.gigya-image[data-background-size="fit-vertically"] {\n  background-size: auto 100%;\n}\n.gigya-image[data-background-size="stretch"] {\n  background-size: 100% 100%;\n}\n\n/*IE8*/\n.gigya-ie8 .gigya-layout-cell {\n  overflow: hidden;\n  margin-left: -1px !important;\n}\n\n.gigya-ie8 .gigya-attach-file-upload-form .gigya-attach-file-upload-file-input {\n  width: 1000px;\n}\n\n.gigya-ie8 .gigya-calculate-size div.gigya-profile-photo {\n  _width: 64px;\n  _height: 64px;\n}\n\n.gigya-ie8 div.gigya-photo-upload {\n  *display: inline;\n}\n\n.gigya-ie8 div.gigya-photo-upload-button {\n  *display: inline;\n}\n.gigya-ie8 .gigya-screen .gigya-placeholder {\n  color: #a9a9bb;\n  padding-left: 5px;\n  text-indent: 0;\n}\n.gigya-ie8 .gigya-placeholder:focus {\n  padding-left: 5px;\n}\n.gigya-ie8 .gigya-screen .gigya-input-text:focus {\n  padding-left: 5px;\n  text-indent: 0;\n}\n.gigya-ie8 .gigya-screen.gigya-input-text,\n.gigya-ie8 .gigya-screen .gigya-input-text.gigya-error {\n  padding-top: 12px;\n}\n\n/*IE9*/\n.gigya-ie9 .gigya-screen input.gigya-input-text,\n.gigya-ie9 .gigya-screen input.gigya-input-password {\n  padding-top: 1px;\n  text-indent: 0;\n  padding-bottom: 5px;\n}\n\n.gigya-ie9 .gigya-screen .gigya-input-text:focus,\n.gigya-ie9 .gigya-screen .gigya-input-password:focus {\n  box-shadow: 0px 0px 5px 0px #1d87ff;\n  border: 1px solid #87b9ea;\n  /*padding-left: 5px;*/\n  text-indent: 0;\n}\n\n.gigya-ie9 .gigya-screen input.gigya-input-text.gigya-placeholder,\n.gigya-ie9 .gigya-screen input.gigya-input-password.gigya-placeholder {\n  color: #a9a9bb;\n  padding-top: 5px;\n  text-indent: 0;\n  /*padding-left: 4px;*/\n}\n\n/*IE10*/\n.gigya-ie10 .gigya-screen input.gigya-input-text,\n.gigya-ie10 .gigya-screen input.gigya-input-password {\n  padding-top: 1px;\n}\n\n/*remove bottom padding for outline when focused (not needed anyway)*/\n.gigya-screen .forgot-password-cell a,\n.gigya-screen .gigya-composite-control.gigya-forgotPassword,\n.gigya-screen .gigya-composite-control.gigya-change-password-link,\n.gigya-screen .gigya-composite-control.gigya-composite-control-link {\n  padding-bottom: 0px;\n}\n.gigya-screen .gigya-array-manager.disable-delete > .gigya-array-template > .buttons-wrapper button.gigya-array-remove-btn {\n  display: none;\n}\n.gigya-screen .gigya-composite-control-array-widget {\n  margin: 10px 0;\n}\n.gigya-screen .gigya-composite-control-array-widget .gigya-composite-control-array-widget {\n  margin: 10px;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template {\n  padding: 10px 0 10px 0;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template:not(:last-of-type) {\n  border-bottom: 1px #c1c1c1 solid;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template .buttons-wrapper {\n  text-align: right;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template button {\n  background: none;\n  outline: none !important;\n  color: #1371b9;\n  padding: 10px;\n  cursor: pointer;\n}\n.gigya-screen .gigya-composite-control-array-widget div.gigya-array-template button.hidden {\n  display: none;\n}\n.gigya-screen a.gigya-disabled {\n  color: #757575;\n  cursor: default;\n  pointer-events: none;\n  text-decoration: none;\n}\n\n.gigya-screen input[type="button"].gigya-disabled {\n  background: #757575 !important;\n  cursor: default;\n}\n\n.gigya-screen .gigya-otp-update-form .gigya-input-submit[type="submit"].gigya-disabled {\n  background: #757575 !important;\n  cursor: default;\n  pointer-events: none;\n}\n\n.gigya-screen .gigya-disabled:hover {\n  text-decoration: none;\n  cursor: default;\n}\n\n.gigya-screen .gigya-disabled:active {\n  color: #757575;\n  cursor: default;\n}\n\n.d-flex {\n  display: flex;\n}\n\n.justify-content-space {\n  justify-content: space-between;\n}\n\n.gigya-myPhoto-form-wrapper {\n  width: 100% !important;\n}\n.gigya-myPhoto-uploadForm {\n  opacity: 1 !important;\n}\n\n.gigya-myPhoto-profile-box-wrapper input.gigya-myPhoto-upload {\n  width: 100% !important;\n}\n\n.gigya-myPhoto-status-icon {\n  opacity: 0 !important;\n}\n\n.gigya-myPhoto-uploadForm > input {\n  border: 0 !important;\n  background-color: transparent !important;\n}\n.gigya-myPhoto-upload {\n  opacity: 0 !important;\n}\n.gigya-dummyPhoto-upload {\n  width: 100% !important;\n  height: 100% !important;\n}\n.gigya-composite-control-link:focus,\n.gigya-composite-control select:focus,\n.gigya-composite-control input[type="checkbox"]:focus,\n.gigya-myPhoto-delete-button:focus,\n.gigya-myPhoto-uploadForm input:focus,\n.gigya-dummyPhoto-upload:focus {\n  border: 1px solid #2378cd !important;\n  outline: none !important;\n  box-shadow: 0 0 5px 0 #0070f0 !important;\n}\n\n.gigya-screen .gigya-composite-control.gigya-composite-control-phone-number-widget .gigya-phone-verified-status-image {\n  width: 16px;\n  height: 16px;\n  background-image: url("${imgBase}/screenSet/checkmarkValid.png");\n  background-position-x: 100%;\n  background-position-y: 50%;\n  background-repeat: no-repeat;\n}\n'
                            },
                            login_v2: {
                                ie8patch: "\n.gigya-login-providers-arrow-left,\n.gigya-login-providers-list-container,\n.gigya-login-providers-arrow-right {\n    display:inline;\n}\n\n.gigya-login-provider div {\n    display: -ms-inline-grid;\n}\n\n\ntable.gigya-login-providers-container {\n    top: 0px;\n}",
                                iePatch: ".gigya-login-footer {\n    position: relative;\n    top: -9px;\n}\n",
                                main: "\n.gigya-link {\n    line-height: normal;\n    cursor: pointer;\n    font-family: arial;\n    font-size: 11px;\n    color: #0086f1;\n}\n\n.gigya-login {\n    margin: 10px;\n    overflow: auto;\n}\n\n\n.gigya-login-providers-container {\n    display: block;\n    margin: 0 auto;\n    background-color: transparent;\n    border-collapse: collapse;\n    white-space: nowrap;\n    border: none;\n    vertical-align: middle;\n\n    position:relative;\n    top: 50%;\n    transform: translateY(-50%);\n    -ms-transform: translateY(-50%);\n    -webkit-transform: translateY(-50%);\n    -moz-transform: translateY(-50%);\n\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n.gigya-login-providers-container,\n.gigya-login-providers-container tr,\n.gigya-login-providers-container td,\n.gigya-login-providers-container th {\n    vertical-align: middle;\n}\n\n.gigya-login-providers-list {\n    display: none;\n}\n\n.gigya-active .gigya-login-providers-list {\n    display: block;\n}\n\n.gigya-login-provider-row {\n    display: block;\n    clear: both;\n    float: none;\n    margin: 0;\n    padding: 2.5px 0;\n    line-height:18px;\n}\n\n.gigya-login-provider {\n    cursor: pointer;\n    margin-right: 5px;\n}\n\n.gigya-login-provider div {\n    display: inline-block;\n}\n\n.gigya-login-provider-last {\n    margin-right: 0;\n}\n\n.gigya-login-provider img {\n    vertical-align: baseline;\n}\n\n.gigya-login-providers-container div,\n.gigya-login-providers-container span {\n    margin: 0;\n}\n\n.gigya-login-providers-list-container {\n    vertical-align: top;\n    text-align: center;\n    width: 100%;\n}\n\n.gigya-login-providers-list-container tbody,\n.gigya-login-providers-list-container tr {\n    width: 100%;\n}\n\n.gigya-login-providers-arrow-left,\n.gigya-login-providers-arrow-right {\n    vertical-align: middle;\n    cursor: pointer;\n    box-sizing: border-box;\n    -webkit-tap-highlight-color:transparent;\n}\n\n.gigya-login-providers-arrow-left button,\n.gigya-login-providers-arrow-right button {\n    cursor: inherit;\n}\n\n.gigya-login-providers-arrow-left.no-arrows,\n.gigya-login-providers-arrow-right.no-arrows {\n    display: none;\n}\n\n.gigya-login-providers-arrow-marker-floating-disabled {\n    visibility: hidden;\n}\n\n.gigya-login-providers-arrow-left div .gigya-login-providers-arrow-marker {\n    background-repeat: no-repeat;\n    float: right;\n    margin-right: 17px;\n}\n\n.gigya-login-providers-arrow-right div .gigya-login-providers-arrow-marker {\n    background-repeat: no-repeat;\n    float: left;\n    margin-left: 17px;\n}\n\n.gigya-login-providers-arrow-left.gigya-login-providers-arrow-marker-floating div .gigya-login-providers-arrow-marker {\n    height: 70px;\n    width: 42px;\n    padding: 0px;\n    margin: 0px;\n    position: relative;\n    float: left;\n    background-image: url('$scriptBase/paging/touch_button_left.png');\n}\n\n.gigya-login-providers-arrow-right.gigya-login-providers-arrow-marker-floating div .gigya-login-providers-arrow-marker {\n    background-repeat: no-repeat;\n    height: 70px;\n    width: 42px;\n    padding: 0px;\n    margin: 0px;\n    position: relative;\n    float: right;\n    background-image: url('$scriptBase/paging/touch_button_right.png');\n}\n\n.gigya-login-providers-arrow-left.gigya-login-providers-arrow-marker-arrows div .gigya-login-providers-arrow-marker {\n    height: 14px;\n    width: 8px;\n    background-image: url('$scriptBase/paging/navigation_arrow_left.png');\n    margin-right: 5px;\n}\n\n.gigya-login-providers-arrow-right.gigya-login-providers-arrow-marker-arrows div .gigya-login-providers-arrow-marker {\n    height: 14px;\n    width: 8px;\n    background-image: url('$scriptBase/paging/navigation_arrow_right.png');\n    margin-left: 5px;\n}\n\n.gigya-login-providers-arrow-left.gigya-login-providers-arrow-marker-arrows.gigya-login-providers-arrow-disabled div .gigya-login-providers-arrow-marker {\n    height: 14px;\n    width: 8px;\n    background-image: url('$scriptBase/paging/navigation_arrow_left_disabled.png');\n}\n\n.gigya-login-providers-arrow-right.gigya-login-providers-arrow-marker-arrows.gigya-login-providers-arrow-disabled div .gigya-login-providers-arrow-marker {\n    height: 14px;\n    width: 8px;\n    background-image: url('$scriptBase/paging/navigation_arrow_right_disabled.png');\n}\n\n.gigya-login-providers-arrow-left.gigya-login-providers-arrow-marker-newArrows div .gigya-login-providers-arrow-marker {\n    height: 14px;\n    width: 8px;\n    background-image: url('$scriptBase/paging/navigation_arrow_left.png');\n}\n\n.gigya-login-providers-arrow-right.gigya-login-providers-arrow-marker-newArrows div .gigya-login-providers-arrow-marker {\n    height: 14px;\n    width: 8px;\n    background-image: url('$scriptBase/paging/navigation_arrow_right.png');\n}\n\n.gigya-login-providers-arrow-right.gigya-login-providers-arrow-marker-newArrows.gigya-login-providers-arrow-disabled div .gigya-login-providers-arrow-marker {\n    height: 14px;\n    width: 8px;\n    background-image: url('$scriptBase/paging/navigation_arrow_right_disabled.png');\n}\n\n.gigya-login-providers-arrow-left.gigya-login-providers-arrow-marker-newArrows.gigya-login-providers-arrow-disabled div .gigya-login-providers-arrow-marker {\n    height: 14px;\n    width: 8px;\n    background-image: url('$scriptBase/paging/navigation_arrow_left_disabled.png');\n}\n\n.gigya-login-providers-arrow-left.gigya-login-providers-arrow-disabled,\n.gigya-login-providers-arrow-right.gigya-login-providers-arrow-disabled {\n    cursor: default;\n}\n\n.gigya-login-header {\n    display: block;\n    text-align: center;\n}\n\n.gigya-login-footer {\n    display: block;\n    clear: both;\n    height: 18px;\n    line-height: 18px;\n    overflow: hidden;\n    margin: 0 auto;\n    text-align: center;\n}\n\n\n.gigya-login-footer-terms {\n    line-height: normal;\n    cursor: pointer;\n    font-family: arial;\n    font-size: 11px;\n    color: #0086f1;\n    text-decoration: none;\n    font-weight: bold;\n}\n\n.gigya-login-providers {\n    width: 100%;\n    height: 100%;\n}\n\n.gigya-login-footer-social-by,\n.gigya-login-footer-social-by:hover,\n.gigya-login-footer-social-by:active {\n    text-decoration: none;\n    font-family: arial;\n    font-weight: bold;\n    font-size: 11px;\n    cursor: pointer;\n    color: #828282;\n}\n\n.gigya-login-footer-social-by img.gigya-logo {\n    width: 32px;\n    height: 9px;\n    border: none;\n}\n\n.gigya-login-footer-whatsthis {\n    width: 150px;\n    height: 50px;\n    background-color: #FFFFFF;\n    border: 1px solid #767676;\n    vertical-align: middle;\n    text-align: center;\n    visibility: hidden;\n    position: absolute;\n    padding: 10px;\n}\n\n.gigya-login-footer-whatsthis span {\n    line-height: normal;\n    font-family: arial;\n    font-size: 11px;\n    color: #262626;\n}\n\n.gigya-login-welcome-greeting {\n    line-height: normal;\n    font-family: arial;\n    font-size: 16px;\n    font-weight: bold;\n    color: #4C4C4C;\n    white-space: nowrap;\n    display: inline-block;\n}\n\n.gigya-login-welcome-bubble {\n    display: inline-block;\n    line-height: 16px;\n    margin-left: 5px;\n}\n\n.gigya-login-welcome-bubble-left,\n.gigya-login-welcome-bubble-right,\n.gigya-login-welcome-bubble-center {\n    display: inline-block;\n    height: 17px;\n    float: left;\n}\n\n.gigya-login-welcome-bubble-left {\n    background-image: url('$scriptBase/NotYou_Left.png');\n    width: 8px;\n}\n\n.gigya-login-welcome-bubble-right {\n    background-image: url('$scriptBase/NotYou_Right.png');\n    width: 4px;\n}\n\n.gigya-login-welcome-bubble-center {\n    background-image: url('$scriptBase/NotYou_Mid.png');\n    background-repeat: repeat-x;\n}\n\n.gigya-login-welcome-bubble-text {\n    cursor: pointer;\n    font-family: arial;\n    color: #0086f1;\n    font-size: 10px;\n    line-height: 17px;\n    font-weight: normal;\n}\n\n.gigya-login-welcome-signin-link {\n    white-space: nowrap;\n}\n\n.gigya-login-welcome-signin-link a:hover {\n    text-decoration: none;\n    color: #0086f1;\n}\n\n.gigya-login-footer-divider {\n    line-height: normal;\n    font-family: arial;\n    font-size: 11px;\n    color: #828282;\n    cursor: default;\n    padding: 0 5px;\n}\n\n.gigya-login-footer-edit-link {\n    line-height: normal;\n    cursor: pointer;\n    font-family: arial;\n    color: #0086f1;\n    text-decoration: none;\n    font-size: 11px;\n}\n\n.tabbing-button{\n    font-size: 0px;\n    border: none;\n    padding: 0;\n    background-color: transparent;\n    cursor: pointer;\n    display: inline-block;\n}\n.tabbing-button.gigya-provider-connected {\n    cursor: default;\n}\n.tabbing-button.gigya-provider-connected:focus {\n    outline: none;\n}\n"
                            }
                        },
                        getTemplates: function(f) {
                            var p = [];
                            for(var h in f)p.push(_.plugins.resources.html[f[h]]);
                            return utils.object.merge(p);
                        },
                        getCss: function(f) {
                            var p = [];
                            for(var h in f)p.push(_.plugins.resources.css[f[h]]);
                            return utils.object.merge(p);
                        }
                    },
                    utUtils: {
                        PluginTester: function PluginTester1(f, p, h) {
                            var v = this;
                            void 0 === p && (p = null), this.defaultContainerID = p, this._instanceCount = 0, this.injector = new Map, this.disposeInstanceAfterTest = !0, this.neverInit = !1, beforeAll(function(p) {
                                boot.ensureJsSdkLoaded(PluginTester1.apiKey, function() {
                                    if (h || (h = f.injectionInfo()), v._loadPlugin = PluginTester1.getLoadFunc(h), !v.defaultContainerID) {
                                        var w = document.createElement("div");
                                        w.id = h.name + "Ut", document.body.appendChild(w);
                                    }
                                    p();
                                });
                            }), afterEach(function(f) {
                                v._instance && v.disposeInstanceAfterTest && (v._instance.dispose(), delete v._instance), f();
                            });
                        }
                    },
                    utils: {
                        Collections: {
                            LastIndexOf: function(f, p, h) {
                                void 0 === h && (h = 0);
                                for(var v = f.length; --v >= h;)if (f[v] === p) return v;
                                return -1;
                            },
                            ForEach: function t1(f, p) {
                                for(var h = 0; h < f.length; ++h)p(f[h], h, f);
                            },
                            ForEachProp: function(f, p) {
                                for(var h in f)f.hasOwnProperty(h) && p(f[h], h, f);
                            },
                            Some: function i1(f, p) {
                                for(var h = 0; h < f.length; ++h)if (p(f[h], h, f)) return !0;
                                return !1;
                            },
                            Every: function(f, p) {
                                for(var h = 0; h < f.length; ++h)if (!p(f[h], h, f)) return !1;
                                return !0;
                            },
                            EveryProp: function(f, p) {
                                for(var h in f)if (f.hasOwnProperty(h) && !p(f[h], h, f)) return !1;
                                return !0;
                            },
                            Map: function(f, p) {
                                var h = new Array;
                                return t(f, function(f, v, w) {
                                    return h.push(p(f, v, w));
                                }), h;
                            },
                            FirstIndex: function o1(f, p) {
                                var h;
                                return i(f, function(f, v, w) {
                                    return !!p(f, v, w) && (h = v, !0);
                                }), h;
                            },
                            First: function(f, p) {
                                return f[o(f, p)];
                            }
                        },
                        css: {
                            fixCss: function(f) {
                                return (localInfo.isIE7 || localInfo.isIE && localInfo.quirksMode) && (f = f.replace(/display:inline-block/g, "display:inline-block;zoom:1;*display:inline")), f.replace(/gradient\((.*?),(.*?)\)/g, 'filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="$1", endColorstr="$2");background: linear-gradient(top,  $1,  $2);background: -ms-linear-gradient(top left, $1, $2);background: -webkit-gradient(linear, left top, left bottom, from($1), to($2));background: -moz-linear-gradient(top,  $1,  $2)');
                            },
                            addCss: function(f, p, h, v) {
                                if (void 0 === h && (h = !0), f && "" != f && (f instanceof Array && (f = f.join(" ")), p && (f = f.replace(/([^\s}]*\.gig)/g, p + " $1")), v || (v = utils.object.getMurmurHash(f).toString()), !t[v] || h)) {
                                    t[v] = !0;
                                    var w = document.createElement("style");
                                    w.type = "text/css";
                                    var m = document.createTextNode(f);
                                    w.styleSheet ? null != m.value ? w.styleSheet.cssText = m.value : w.styleSheet.cssText = m.nodeValue : w.appendChild(m);
                                    var b = document.getElementsByTagName("head"), y = document.body;
                                    (b.length > 0 ? b[0] : y).appendChild(w);
                                }
                            }
                        },
                        URL: {
                            addOrReplaceHashFragment: function(f, p, h) {
                                return f = t(f = i(f, p), p, h);
                            },
                            addHashFragment: function t1(f, p, h) {
                                var v = "#";
                                if (-1 != f.indexOf("#")) {
                                    if (-1 != f.indexOf(p)) {
                                        var w = p + "=" + this.getHashParamValue(f, p);
                                        return f.replace(w, p + "=" + h), f;
                                    }
                                    v = "&";
                                }
                                return f + v + p + "=" + h;
                            },
                            removeHashFragment: function i1(f, p) {
                                if (-1 == f.indexOf("#")) return f;
                                var h = f.split("#")[1], v = o(f, p);
                                v && (h = h.replace(p + "=" + v, "")), (h = (h = h.replace("&" + p, "")).replace("#" + p, "#")).length > 0 && (h = h.substring(1, h.length));
                                var w = f.split("#")[0];
                                return 0 == h.length ? w : w + "#" + h;
                            },
                            getHashParamValue: function o1(f, p) {
                                if (p += "=", -1 == f.indexOf("#") || -1 == f.indexOf(p, f.indexOf("#"))) return null;
                                var h = f.indexOf(p, f.indexOf("#")), v = f.indexOf("&", h);
                                return -1 == v && (v = f.length), f.substring(h + p.length, v);
                            }
                        },
                        DOM: {
                            replaceLinksWithHTMLElements: function(f, p) {
                                var h = f.match(/(?:(?:https?):\/\/|www\.)(?:\([-A-Z0-9+&@#\/%=~_|$?!:,.;]*\)|[-A-Z0-9+&@#\/%=~_|$?!:,.;])*(?:\([-A-Z0-9+&@#\/%=~_;|$?!:,.;]*\)|[A-Z0-9+&@#\/%=~_|;$])/gim), v = "";
                                if (h) for(var w = 0; w < h.length; w++){
                                    var m = "";
                                    -1 === h[w].indexOf("http:") && -1 === h[w].indexOf("https:") && (m = "http://");
                                    var b = "";
                                    p && (b = ' class="' + p + '"');
                                    var y = f.substr(0, f.indexOf(h[w]) + h[w].length);
                                    f = f.substr(y.length, f.length - y.length);
                                    var S = h[w].replace(/&#173;/g, "");
                                    v += y.replace(h[w], "<a" + b + ' href="' + m + S + '" target="_blank" rel="nofollow">' + h[w] + "</a>");
                                }
                                return f.length > 0 && (v += f), v;
                            },
                            setAttribute: function(f, p, h) {
                                "class" !== p ? (f.setAttribute(p, h), null === h && f.removeAttribute(p)) : f.className = h;
                            },
                            getAttribute: function(f, p) {
                                var h;
                                if (localInfo.isIE8) h = f.getAttribute(p);
                                else {
                                    if (!f.hasAttributeNS("", p)) return null;
                                    h = f.getAttributeNS("", p);
                                }
                                return h;
                            }
                        }
                    },
                    modal: {
                        ModalDialog: function n1(f, p, h, v, w) {
                            void 0 === v && (v = !1);
                            var m = e.call(this, h) || this;
                            return m._triggerMethod = f, m.isMobileUI = p, m.isLegacy = v, m.onWindowResizeEvent = m.onWindowResize.bind(m), m._dialogClasses = m.isLegacy ? o.legacyDialogClasses : o.dialogClasses, m.create(w), m;
                        },
                        dialogClasses: {
                            document_mobile: "gigya-mobile-modal-mode",
                            all_web: "gigya-screen-dialog",
                            all_mobile: "gigya-screen-dialog-mobile",
                            main: "gigya-screen-dialog-main",
                            caption: "gigya-screen-dialog-caption",
                            closeButton: "gigya-screen-dialog-close",
                            content: "gigya-screen-dialog-inner"
                        },
                        legacyDialogClasses: {
                            document_mobile: "gigya-mobile-modal-mode",
                            all_web: "gigya-screen-dialog",
                            all_mobile: "gigya-screen-dialog-mobile",
                            main: "gigya-screen-dialog-inner",
                            caption: "gigya-screen-dialog-caption",
                            closeButton: "gigya-screen-dialog-close",
                            content: "gigya-screen-dialog-inner"
                        }
                    },
                    pollerActions: {
                        InvalidPropertyAction: function e1(f, p, h) {
                            this._object = f, this._propery = p, this.callback = h;
                        },
                        SizeChangeAction: function e1(f) {
                            this.callback = f, this._last = {
                                width: void 0,
                                height: void 0
                            };
                        },
                        ContainerSizeAction: function n1(f, p) {
                            var h = e.call(this, p) || this;
                            return h._container = f, h;
                        },
                        ViewportSizeAction: function n1(f) {
                            return e.call(this, f) || this;
                        }
                    },
                    cssFlags: {
                        "gigya.services.accounts.plugins.screenSet": {},
                        "gigya.services.socialize.plugins.login_v2": {}
                    },
                    CloseReasons: {
                        0: "pendingError",
                        1: "missing",
                        2: "finished",
                        3: "canceled",
                        4: "backButton",
                        5: "canceledByParent",
                        6: "skip",
                        7: "error",
                        8: "cancel",
                        pendingError: 0,
                        missing: 1,
                        finished: 2,
                        canceled: 3,
                        backButton: 4,
                        canceledByParent: 5,
                        skip: 6,
                        error: 7,
                        cancel: 8
                    },
                    PluginStyle: {
                        0: "_undefined",
                        1: "none",
                        2: "legacy",
                        3: "modern",
                        _undefined: 0,
                        none: 1,
                        legacy: 2,
                        modern: 3
                    },
                    getPluginStyleClass: function(f) {
                        return "gigya-style-" + t[f];
                    },
                    AsyncManager: function n1() {
                        var f = e.call(this, void 0, !1) || this;
                        return f._actions = [], f;
                    },
                    LoadDimmer: function e1(f) {
                        this._container = f, this._isActive = !1, this._dimmer = document.createElement("div"), this._dimmer.className = "gigya-screen-dimmer", this._loader = document.createElement("div"), this._loader.className = "gigya-screen-loader";
                    },
                    ScreenSet: {
                        consent: {
                            consentFieldName: "isConsentGranted",
                            namespace: "preferences",
                            postProcessForm: function(f, p) {
                                var h = function(f, p) {
                                    if (!f) return;
                                    if (!p) return;
                                    var h = Object.keys(f).filter(n).map(i);
                                    return h.length ? h.reduce(function(f, h) {
                                        var v = p[h];
                                        return v ? f[h] = {
                                            docVersion: v.currentDocVersion,
                                            docDate: v.currentDocDate
                                        } : logger.warn("form input bound to " + t.namespace + "." + h + " but it doesn't exist on schema"), f;
                                    }, {}) : void 0;
                                }(f, p);
                                return h && (f = utils.object.merge([
                                    f,
                                    {
                                        displayedPreferences: h
                                    }
                                ])), f;
                            }
                        },
                        SwitchScreen_CONSTS: {
                            selector: "[data-switch-screen]",
                            switchScreen: "data-switch-screen",
                            successScreen: "data-on-success-screen",
                            screenSetSkippedScreen: "data-on-screenset-skipped-screen"
                        },
                        SwitchScreenWidget: function n1(f, p) {
                            var h = e.call(this, f, p, !1) || this;
                            return h._screen = f, h.bindID = h.ID, h;
                        },
                        Form_CONSTS: {
                            originalSuccessScreen: "data-original-success-screen",
                            successScreen: "data-on-success-screen",
                            autoSkipScreen: "data-on-auto-skip-screen",
                            autoSkipFlag: "data-auto-skip",
                            screenSetSkippedScreen: "data-on-screenset-skipped-screen",
                            formErrorClass: "gigya-form-error",
                            defaultCheckedAttribute: "data-checked"
                        },
                        CUSTOM_VALIDATION_TIMEOUT_WARNING: 10000,
                        BaseForm: function v1(f, p, h) {
                            var v = n.call(this, p, f) || this;
                            return v._screen = f, v.gigyaClass = h, v.settings = {
                                supportConsentData: !1
                            }, v.dataToServer = new Array, v._dynamicInputs = new Array, v._inputs = new Array, v._errorDisplayElements = {}, v._widgets = new Array, v._submitButtons = new Array, v._passwordInputs = new Array, v._passwordRetypes = new Array, v._secretQuestions = new Array, v._autoSkipContainers = new Array, v._serverWidgets = new Array, v.filters = new Array, v.isPopulated = !1, v.dataStore = v._screenSet.data, v.behaviorContext = null, v.bindID = v.publishID ? v.ID : h, v.originalSuccessScreen = p.getAttribute(t.Form_CONSTS.successScreen), v.successScreen = v._screenSet.chooseNextScreen(v.originalSuccessScreen), v.autoSkip = "true" == p.getAttribute(t.Form_CONSTS.autoSkipFlag), v.autoSkipScreen = p.getAttribute(t.Form_CONSTS.autoSkipScreen) || v.successScreen, v.screenSetSkippedScreen = p.getAttribute(t.Form_CONSTS.screenSetSkippedScreen) || v.successScreen, v.registerFormInputs(), v.registerBoundedErrorElements(), v._widgets = u.BaseFormWidget.registerWidgets(v), v.submitHandler = function(f) {
                                utils.DOM.disableDefaultEventHandling(f), v.submit();
                            }, v.addEventListener("submit", v.submitHandler), v.fieldChangedHandler = function(f) {
                                v.evaluateConditionalAttributes();
                            }, v;
                        },
                        BaseFormWidget: function t1(f, p, h) {
                            var v = e.call(this, p, f, f._screen, h) || this;
                            return v._form = f, v;
                        },
                        BaseScreenWidget: function t1(f, p, h) {
                            var v = e.call(this, p, f, f, h) || this;
                            return v._childWidgets = [], v;
                        },
                        ServerStates: {
                            0: "NotStarted",
                            1: "InProgress",
                            2: "Done",
                            3: "Error",
                            NotStarted: 0,
                            InProgress: 1,
                            Done: 2,
                            Error: 3
                        },
                        BaseServerWidget: function t1(f, p, h) {
                            var v = e.call(this, f, p, h) || this;
                            return v.nextServerQueryId = 0, v.serverState = i.NotStarted, v.callbacks = new Array, f._serverWidgets.push(v), v;
                        },
                        BaseUploadWidget_CONSTS: {
                            setDimentionsDelay: 500,
                            uploadCheckInterval: 500,
                            uploading: "data-upload-status",
                            uploadForm: "screenSetUploadForm"
                        },
                        BaseUploadWidget: function n1(f, p, h) {
                            var v = e.call(this, f, p, h) || this, w = a++;
                            return v._uploadIframeID = v._screenSet.params.containerID + "_upload" + w + "_target", v.formDivID = v._screenSet.params.containerID + "_upload" + w + "_form", v.listenOnIframe = function() {
                                var f = v.uploadIframe.getAttribute(t.BaseUploadWidget_CONSTS.uploading), p = o.ServerStates[f];
                                p !== v.serverState && v.onServerQueryEnd(v._lastQueryId, p);
                            }, v.fileInputChanged = function() {
                                return v.onFileInputChange();
                            }, v;
                        },
                        BaseWidget: function t1(f, p, h, v) {
                            void 0 === v && (v = !0);
                            var w = e.call(this, f, p) || this;
                            return w._screen = h, w.params = {}, w.renderWidgetUI = !1, w.evaluationCache = {}, w._otherElements = [], w.eventListeners = new Map, w.params = w.getElementParams(f), v && utils.DOM.addClassToElement(f, "gigya-reset"), w;
                        },
                        warn: function(f, p) {
                            "object" == typeof console && console.warn && console.warn("Gigya Screenset (" + f + ") - " + p);
                        },
                        ErrorScopes: {
                            0: "bound-object-error",
                            1: "first-error",
                            2: "any-error",
                            3: "all-errors",
                            boundObjectError: 0,
                            firstError: 1,
                            anyError: 2,
                            allErrors: 3,
                            "bound-object-error": 0,
                            "first-error": 1,
                            "any-error": 2,
                            "all-errors": 3
                        },
                        ErrorDisplayElement_CONSTS: {
                            gigyaClasses: [
                                "gigya-error-display",
                                "gigya-error-msg"
                            ],
                            boundedTo: "data-bound-to",
                            errorCodes: "data-error-codes",
                            scope: "data-scope",
                            flags: "data-error-flags",
                            errorClassPrefix: "gigya-error-code-",
                            errorType: "gigya-error-type-"
                        },
                        ErrorDisplayElement: function n1(f, p) {
                            var h = e.call(this, f, p) || this;
                            h._screen = p, h.boundedTo = f.getAttribute(t.ErrorDisplayElement_CONSTS.boundedTo), h.scope = i[f.getAttribute(t.ErrorDisplayElement_CONSTS.scope)] || i.boundObjectError;
                            var v = f.getAttribute(t.ErrorDisplayElement_CONSTS.errorCodes);
                            h.allowedErrorCodes = v ? o.Map(v.split(","), function(f) {
                                return parseInt(f);
                            }) : [];
                            var w = f.getAttribute(t.ErrorDisplayElement_CONSTS.flags);
                            for(var m in h.allowedFlags = w ? w.split(",") : [], u)if (utils.DOM.isElementClass(f, m)) {
                                h.policy = u[m];
                                break;
                            }
                            return h.policy.hideError(f), f.setAttribute("aria-atomic", "true"), h;
                        },
                        ErrorType: {
                            0: "client",
                            1: "custom",
                            2: "server",
                            client: 0,
                            custom: 1,
                            server: 2
                        },
                        PendingErrorAttributes: {
                            200009: {
                                name: "data-on-accounts-linked-screen",
                                nextScreen: function(f) {
                                    return f._screen.accountsLinkedScreen || "_finish";
                                },
                                requiresFinalize: true
                            },
                            200010: {
                                name: "data-on-existing-login-identifier-screen",
                                nextScreen: function(f) {
                                    return f._screenSet.data.regToken && f._screen.existingLoginIdentifierScreen;
                                },
                                requiresFinalize: true
                            },
                            206001: {
                                name: "data-on-pending-registration-screen",
                                nextScreen: function(f) {
                                    return delete f._screenSet.getApiData().getSchema, f._screen.pendingRegistrationScreen;
                                },
                                requiresFinalize: true
                            },
                            206002: {
                                name: "data-on-pending-verification-screen",
                                nextScreen: function(f) {
                                    return f._screen.pendingVerificationScreen;
                                },
                                resetFinalizeNeededState: true
                            },
                            206003: {
                                name: "data-on-missing-loginid-screen",
                                nextScreen: function(f) {
                                    return f._screen.missingLoginIdScreen;
                                }
                            },
                            206006: {
                                name: "data-on-pending-email-verification-code",
                                requiresFinalize: true,
                                nextScreen: function(f) {
                                    return r.__awaiter(i, void 0, void 0, function() {
                                        var p;
                                        return r.__generator(this, function(h) {
                                            switch(h.label){
                                                case 0:
                                                    return p = f._screen.pendingCodeVerificationScreen, utils.toggles.isOn("preventSendingCodeVerification") ? [
                                                        3,
                                                        5
                                                    ] : s.FlagService.sendPendingEmailVerificationCodeOnce ? p ? [
                                                        4,
                                                        l(f)
                                                    ] : [
                                                        3,
                                                        2
                                                    ] : [
                                                        3,
                                                        3
                                                    ];
                                                case 1:
                                                    h.sent(), h.label = 2;
                                                case 2:
                                                    return [
                                                        3,
                                                        5
                                                    ];
                                                case 3:
                                                    return [
                                                        4,
                                                        l(f)
                                                    ];
                                                case 4:
                                                    h.sent(), h.label = 5;
                                                case 5:
                                                    return [
                                                        2,
                                                        p
                                                    ];
                                            }
                                        });
                                    });
                                }
                            },
                            403100: {
                                name: "data-on-pending-password-change-screen",
                                nextScreen: function(f) {
                                    return f._screen.pendingPasswordChangeScreen;
                                },
                                requiresFinalize: true
                            },
                            403101: {
                                name: "data-on-pending-tfa-verification-screen",
                                nextScreen: function(f) {
                                    return f._screen.pendingTfaVerificationScreen;
                                },
                                requiresFinalize: true
                            },
                            403102: {
                                name: "data-on-pending-tfa-registration-screen",
                                nextScreen: function(f) {
                                    return f._screen.pendingTfaRegistrationScreen;
                                },
                                requiresFinalize: true
                            },
                            403110: {
                                name: "data-on-pending-recent-login-screen",
                                nextScreen: function(f) {
                                    return f._screen.pendingReAuthenticationScreen;
                                }
                            },
                            409003: {
                                name: "data-on-existing-login-identifier-screen",
                                nextScreen: function(f) {
                                    var p;
                                    return f._screenSet.data.regToken && (null === (p = f._screenSet) || void 0 === p ? void 0 : p.providerSessionInfo) && f._screen.existingLoginIdentifierScreen;
                                },
                                requiresFinalize: true
                            }
                        },
                        notImplementerAbstract: function() {
                            throw new Error("NOT IMPLEMENTED");
                        },
                        ConflictHandling: {
                            0: "fail",
                            1: "saveProfileAndFail",
                            fail: 0,
                            saveProfileAndFail: 1
                        },
                        LoginModes: {
                            connect: {
                                name: "connect"
                            },
                            standard: {
                                name: "standard",
                                getLoginProviders: function(f, p, h) {
                                    var v = p.enabledProviders;
                                    return "string" != typeof v ? null : v.toLowerCase();
                                },
                                filterParams: function(f) {
                                    return delete f.regToken, delete f.instanceID, delete f.getInstance, f;
                                }
                            },
                            reAuth: {
                                name: "reAuth",
                                getLoginProviders: function(f, p, h) {
                                    var v = f.getAccountInfo && f.getAccountInfo.socialProviders, w = f.getAccountInfo && f.getAccountInfo.identities;
                                    if (!v) return null;
                                    var m = (v = v.toLowerCase()).split(",");
                                    return w && i.ForEach(w, function(f) {
                                        if (!f.allowsLogin) {
                                            var p = m.indexOf(f.provider.toLowerCase());
                                            p > -1 && m.splice(p, 1);
                                        }
                                    }), m.join(",");
                                },
                                filterParams: function(f) {
                                    return delete f.instanceID, delete f.getInstance, f;
                                }
                            },
                            link: {
                                name: "link",
                                getLoginProviders: function(f, p, h) {
                                    var v, w, m, b;
                                    return h ? null === (b = null === (m = null === (w = null === (v = null == f ? void 0 : f.getConflictingAccount) || void 0 === v ? void 0 : v.conflictingAccount) || void 0 === w ? void 0 : w.loginProviders) || void 0 === m ? void 0 : m.join(",")) || void 0 === b ? void 0 : b.toLowerCase() : null;
                                },
                                filterParams: function(f) {
                                    return delete f.instanceID, delete f.getInstance, f;
                                }
                            }
                        },
                        Screen: function t1(f, p) {
                            var h = e.call(this, p, f) || this;
                            return h._screenSet = f, h.templateElement = p, h._errorDisplayElements = {}, h._profilePhotos = new Array, h._captchas = new Array, h._others = new Array, h.ID || h.warn("screen is missing an id"), /[^-_0-9a-zA-Z]/.test(h.ID) && h.warn("screen id contains special characters that may contain special meaning"), o.ScreenOptions.call(h, p, f.screenOptions), h.prepareBoundedToFormElements(), h._forms = a.BaseForm.registerForms(h), h._widgets = u.BaseScreenWidget.registerWidgets(h), h.prepareOtherElements(), h.setCssClass(), s.replaceAttribute(h.templateElement, "for", r.TemplateElement_CONSTS.elementFor), h;
                        },
                        Screen_CONSTS: {
                            gigyaClass: "gigya-screen",
                            conditionalAttributePrefix: "gigya-conditional",
                            expressionAttributePrefix: "gigya-expression",
                            cssClass: "data-css-class",
                            dataVariantPercentage: "data-variant-percentage",
                            dataVariantGroup: "data-variant-group",
                            dataVariantOriginalScreen: "data-variant-original-screen",
                            dataVariantTestId: "data-variant-test-id"
                        },
                        ScreenOptions_CONSTS: {
                            accountsLinkedScreen: "data-on-accounts-linked-screen",
                            pendingTfaRegistrationScreen: "data-on-pending-tfa-registration-screen",
                            pendingTfaVerificationScreen: "data-on-pending-tfa-verification-screen",
                            pendingRegistrationScreen: "data-on-pending-registration-screen",
                            existingLoginIdentifierScreen: "data-on-existing-login-identifier-screen",
                            pendingVerificationScreen: "data-on-pending-verification-screen",
                            pendingCodeVerificationScreen: "data-on-pending-email-verification-code",
                            missingLoginIdScreen: "data-on-missing-loginid-screen",
                            pendingPasswordChangeScreen: "data-on-pending-password-change-screen",
                            pendingReAuthenticationScreen: "data-on-pending-recent-login-screen",
                            width: "data-width",
                            height: "data-height",
                            caption: "data-caption"
                        },
                        ScreenOptions: function(f, p) {
                            p = p || {}, this.accountsLinkedScreen = f.getAttribute(t.ScreenOptions_CONSTS.accountsLinkedScreen) || p.accountsLinkedScreen, this.pendingTfaRegistrationScreen = f.getAttribute(t.ScreenOptions_CONSTS.pendingTfaRegistrationScreen) || p.pendingTfaRegistrationScreen, this.pendingTfaVerificationScreen = f.getAttribute(t.ScreenOptions_CONSTS.pendingTfaVerificationScreen) || p.pendingTfaVerificationScreen, this.pendingRegistrationScreen = f.getAttribute(t.ScreenOptions_CONSTS.pendingRegistrationScreen) || p.pendingRegistrationScreen, this.existingLoginIdentifierScreen = f.getAttribute(t.ScreenOptions_CONSTS.existingLoginIdentifierScreen) || p.existingLoginIdentifierScreen, this.pendingVerificationScreen = f.getAttribute(t.ScreenOptions_CONSTS.pendingVerificationScreen) || p.pendingVerificationScreen, this.pendingCodeVerificationScreen = f.getAttribute(t.ScreenOptions_CONSTS.pendingCodeVerificationScreen) || p.pendingCodeVerificationScreen, this.missingLoginIdScreen = f.getAttribute(t.ScreenOptions_CONSTS.missingLoginIdScreen) || p.missingLoginIdScreen, this.pendingPasswordChangeScreen = f.getAttribute(t.ScreenOptions_CONSTS.pendingPasswordChangeScreen) || p.pendingPasswordChangeScreen, this.pendingReAuthenticationScreen = f.getAttribute(t.ScreenOptions_CONSTS.pendingReAuthenticationScreen) || p.pendingReAuthenticationScreen, this.width = f.getAttribute(t.ScreenOptions_CONSTS.width) || p.width, this.height = f.getAttribute(t.ScreenOptions_CONSTS.height) || p.height, this.caption = f.getAttribute(t.ScreenOptions_CONSTS.caption) || p.caption;
                        },
                        ScreenSetData: function(f) {
                            this.params = f, this.apiData = {}, this.lastSubmittedFormResponse = {}, this.finalizeRegistrationNeeded = !1, this.neededData = {}, this.extraEventData = {}, this.otpData = {}, this.pushData = {}, this.authMethodData = {
                                identifiers: {}
                            }, this.shouldConnectAccounts = !1, this.tfaProviders = {
                                activeProviders: []
                            }, this.regToken = f.regToken, this.finalizeRegistrationNeeded = f.finalizeRegistration;
                        },
                        EndFlowScreens: {
                            _skip: 6,
                            _finish: 2,
                            _cancel: 8
                        },
                        ScreenSet_CONSTS: {
                            gigyaClass: "gigya-screen-set",
                            mobileDialogClass: "gigya-screen-dialog-mobile",
                            webDialogClass: "gigya-screen-dialog",
                            contentClass: "gigya-screen-dialog-content",
                            topElementClass: "gigya-screen-dialog-top",
                            calculateSizeClass: "gigya-calculate-size",
                            gigyaHidden: "gigya-hidden",
                            startScreen: "data-start-screen",
                            isResponsive: "data-responsive",
                            dialogStyle: "data-dialog-style",
                            dataActiveGroups: "data-active-groups"
                        },
                        ScreenSetPlugin: function E1() {
                            var f = null !== n && n.apply(this, arguments) || this;
                            return f._addedCSS = !1, f._screens = {}, f._random = Math.random(), f._placeholderIntervalID = -1, f.onUserStateChange = function(p) {
                                return f.onAccountInfo(p);
                            }, f._screenSet = f, f;
                        },
                        ElementRoles: {
                            0: "_undefined",
                            1: "template",
                            2: "instance",
                            _undefined: 0,
                            template: 1,
                            instance: 2
                        },
                        TemplateElement_CONSTS: {
                            elementId: "data-screenset-element-id",
                            elementFor: "data-screenset-element-for",
                            publishElementId: "data-screenset-element-id-publish",
                            templateForArray: "screenSetTemplateFor",
                            instanceOfArray: "screenSetInstanceOf",
                            screenSetRoles: "data-screenset-roles"
                        },
                        TemplateElement: function n1(f, p) {
                            if (this.templateElement = f, this._parent = p, this.eventHandlers = {}, this.conditionalExpressions = new Array, this._screenSet = p._screenSet, n1.isTemplateInstance(this.templateElement)) this.ID = this.templateElement.getAttribute(t.TemplateElement_CONSTS.elementId) || "", this.publishID = "true" === this.templateElement.getAttribute(t.TemplateElement_CONSTS.publishElementId);
                            else {
                                if (this.ID = this.templateElement.id || "", "" !== this.ID) this.publishID = !0, this.templateElement.removeAttribute("id");
                                else {
                                    var h = ++a + "_" + (new Date).getTime();
                                    this.ID = "__gig_template_element_" + h, this.publishID = !1;
                                }
                                this.templateElement.setAttribute(t.TemplateElement_CONSTS.elementId, this.ID), this.templateElement.setAttribute(t.TemplateElement_CONSTS.publishElementId, String(this.publishID));
                            }
                            this.ID = this.ID.trim();
                            var v = n1.getRoles(this.templateElement);
                            v.push(i.template), n1.setRoles(this.templateElement, v);
                            var w = f[t.TemplateElement_CONSTS.templateForArray];
                            w || (w = new Array, f[t.TemplateElement_CONSTS.templateForArray] = w), this.conditionalExpressions = this.getConditionalExpression(this.templateElement), w.push(this);
                        },
                        TemplatesCache: function e1() {
                            this._map = {};
                        },
                        createDefaultTemplates: function() {
                            var f = new r;
                            return f.set("passwordStrength", i.passwordStrength), f.set("passwordStrength-strengthMeter", i.passwordStrength_strengthMeter), f.set("passwordStrength-minimumRequirements", i.passwordStrength_minimumRequirements), f.set("screenSet-dialog", i.screenSet_dialog), f.set("screenSet", i.screenSet), f.set("photoUpload_ui", i.photoUpload_ui), f.set("photoUpload_form", i.photoUpload_form), f.set("inlinedPasswordStrength", i.inlinedPasswordStrength), f.set("consent", i.consent), f.set("communicationCheckBox", i.communicationCheckbox), f;
                        },
                        isHidden: function(f) {
                            for(; f && f.parentElement;){
                                if ("hidden" === f.style.visibility || "none" === f.style.display || utils.DOM.isElementClass(f, "gigya-error-display") && !utils.DOM.isElementClass(f, "gigya-error-display-active") || utils.DOM.isElementClass(f, "ng-hide")) return !0;
                                f = f.parentElement;
                            }
                            return !1;
                        },
                        inIFrame: function() {
                            try {
                                return window.self !== window.top;
                            } catch (f) {
                                return !0;
                            }
                        },
                        isFieldInHiddenContainer: function(f) {
                            for(var p = f; p;){
                                if (utils.DOM.isElementClass(p, "gigya-container") && !utils.DOM.isElementClass(p, "gigya-container-enabled")) return !0;
                                p = p.parentElement;
                            }
                            return !1;
                        },
                        hasParentAttribute: function(f, p, h) {
                            for(var v = f; v;){
                                if (v.getAttribute(p) === h) return !0;
                                v = v.parentElement;
                            }
                            return !1;
                        },
                        firstPart: function(f, p) {
                            var h = f.indexOf(p);
                            return h > -1 ? f.substring(0, h) : f;
                        },
                        LastIndexOf: function(f, p, h) {
                            void 0 === h && (h = 0);
                            for(var v = f.length; --v >= h;)if (f[v] === p) return v;
                            return -1;
                        },
                        ForEach: function r1(f, p) {
                            for(var h = 0; h < f.length; ++h)p(f[h], h, f);
                        },
                        ForEachProp: function(f, p) {
                            for(var h in f)f.hasOwnProperty(h) && p(f[h], h, f);
                        },
                        Some: function(f, p) {
                            for(var h = 0; h < f.length; ++h)if (p(f[h], h, f)) return !0;
                            return !1;
                        },
                        Every: function(f, p) {
                            for(var h = 0; h < f.length; ++h)if (!p(f[h], h, f)) return !1;
                            return !0;
                        },
                        EveryProp: function(f, p) {
                            for(var h in f)if (f.hasOwnProperty(h) && !p(f[h], h, f)) return !1;
                            return !0;
                        },
                        Map: function(f, p) {
                            var h = new Array;
                            return r(f, function(f, v, w) {
                                return h.push(p(f, v, w));
                            }), h;
                        },
                        DeepFreeze: function(f) {},
                        getElementsByHavingAttribute: function(f, p, h) {
                            var v = new Array;
                            return r(f.getElementsByTagName(p), function(f) {
                                f.getAttribute(h) && v.push(f);
                            }), v;
                        },
                        getElementsByHavingAttributePrefix: function(f, p, h) {
                            void 0 === h && (h = []), "string" == typeof p && (p = [
                                p
                            ]);
                            for(var v = f.getElementsByTagName("*"), w = new Array, m = 0; m <= v.length - 1; m++){
                                var b = v.item(m);
                                if (-1 === utils.array.indexOf(h, b.tagName.toLowerCase())) for(var y = 0, S = p; y < S.length; y++){
                                    var E = S[y];
                                    o(v[m], E) && w.push(v[m]);
                                }
                            }
                            return w;
                        },
                        isElementContainAttributePrefix: function o1(f, p) {
                            var h = f.attributes, v = !1;
                            if (h) {
                                for(var w = 0; w < h.length; w++)if (-1 !== h[w].nodeName.indexOf(p)) {
                                    v = !0;
                                    break;
                                }
                            }
                            return v;
                        },
                        getConditionalAttributeExpressions: function(f, p) {
                            if (void 0 === p && (p = !1), !f) return [];
                            var h, v, w = new Array, m = !1;
                            return r(s(f), function(b) {
                                try {
                                    var y = -1 !== b.nodeName.indexOf(i.Screen_CONSTS.conditionalAttributePrefix), S = -1 !== b.nodeName.indexOf(i.Screen_CONSTS.expressionAttributePrefix);
                                    if (y || S) {
                                        var E = b.nodeName.indexOf(":");
                                        if (-1 !== E) {
                                            var C = void 0;
                                            if (p) h = _.plugins.utils.DOM.getAttribute(f, "value"), C = _.plugins.utils.DOM.getAttribute(f, "name"), m = "param" === f.tagName.toLowerCase();
                                            else {
                                                C = b.nodeName.substring(E + 1, b.nodeName.length), v = _.plugins.utils.DOM.getAttribute(f, C);
                                                var I = "gigya-default-" + C;
                                                _.plugins.utils.DOM.getAttribute(f, I) || _.plugins.utils.DOM.setAttribute(f, I, null !== v ? v : "null");
                                                var R = _.plugins.utils.DOM.getAttribute(f, I);
                                                h = "null" !== R ? R : null;
                                            }
                                            var A = {
                                                attributeName: C,
                                                condition: S ? b.nodeValue : a(b.nodeValue, h),
                                                defaultValue: h,
                                                lastAttributeValue: v,
                                                isWidgetParamTag: m
                                            };
                                            w.push(A);
                                        }
                                    }
                                } catch (U) {
                                    throw new Error("Conditional format error: " + U);
                                }
                            }), w;
                        },
                        setupConditionalExpressionValue: function a1(f, p) {
                            var h = function(f) {
                                var p = f.lastIndexOf("?"), h = f.substr(p + 1, f.length), v = h.indexOf(":") + 1, w = h.substr(v, h.length);
                                "'" != (w = utils.stringUtils.trim(w))[0] && (w = "'" + w);
                                "'" != w[w.length] && (w += "'");
                                var m = h.substr(0, v - 1);
                                return f = f.substr(0, p + 1) + m + ":" + w;
                            }(function(f) {
                                return f = (f = (f = f.replace(/\'/g, "'")).replace(/\?/g, "?'")).replace(/:/g, "':");
                            }(function(f, p) {
                                var h = f.lastIndexOf("?"), v = f.substr(h + 1, f.length), w = v.indexOf(":");
                                if (-1 === w) f += ":", p && (f += p);
                                else {
                                    "" === v.substr(w + 1, v.length) && (f = f.substr(0, f.length) + p);
                                }
                                return f;
                            }(f, p)));
                            if (!p) {
                                var v = h.lastIndexOf(":'" + p + "'");
                                v > -1 && (h = h.substring(0, v) + ":null");
                            }
                            return h;
                        },
                        isKeyCodeDisplayable: function(f) {
                            return f > 47 && f < 58 || 32 == f || 13 == f || f > 64 && f < 91 || f > 95 && f < 112 || f > 185 && f < 193 || f > 218 && f < 223;
                        },
                        UnitMeasurementType: {
                            pixel: "px",
                            percentage: "%",
                            auto: ""
                        },
                        getUnitMeasurementType: function(f) {
                            return void 0 === f && (f = ""), null === f || "auto" == f ? t.UnitMeasurementType.auto : -1 != f.indexOf("%") ? t.UnitMeasurementType.percentage : t.UnitMeasurementType.pixel;
                        },
                        getAttributesAsArray: function s1(f) {
                            for(var p = [], h = f.attributes, v = 0; v < h.length; v++)p.push(h[v]);
                            return p;
                        },
                        endsWith: function(f, p) {
                            return -1 !== f.indexOf(p, f.length - p.length);
                        },
                        hasIndex: function(f) {
                            return /\[[0-9]]|\.[0-9]/.test(f);
                        },
                        removeSerializedKeyLastEnumerator: function(f) {
                            return f.replace(/[0-9]\.(?=[^.]*$)/, "").replace(/\[[0-9]](?=[^\[]*$)/, "");
                        },
                        removeSerializedKeyEdgeProperty: function(f) {
                            return f.substr(0, f.lastIndexOf("."));
                        },
                        IETemplateElementPolyfill: function(f) {
                            if (void 0 === f && (f = document), !("content" in document.createElement("template"))) for(var p, h, v, w = Array.prototype.slice.call(document.getElementsByTagName("template")), m = 0; (p = w[m++]) && !p.content;){
                                for(h = p.children, v = document.createDocumentFragment(); h[0];)v.appendChild(h[0]);
                                p.content = v;
                            }
                        },
                        replaceAttribute: function(f, p, h) {
                            try {
                                r(null == f ? void 0 : f.querySelectorAll("[" + p + "]"), function(f) {
                                    f.setAttribute(h, f.getAttribute(p)), f.removeAttribute(p);
                                });
                            } catch (v) {}
                        },
                        isDOMXSS: function(f) {
                            var p = document.createElement("span");
                            return p.innerText = f, p.innerHTML !== f;
                        },
                        delayedFocus: function(f, p) {
                            void 0 === p && (p = 0), setTimeout(function() {
                                return null == f ? void 0 : f.focus();
                            }, p);
                        },
                        LinkAccountsForm_CONSTS: {
                            gigyaClass: "gigya-link-accounts-form"
                        },
                        LinkAccountsForm: function n1(f, p, h) {
                            return e.call(this, f, p, h) || this;
                        },
                        LoginForm_CONSTS: {
                            gigyaClass: "gigya-login-form"
                        },
                        LoginForm: function n1(f, p, h) {
                            return e.call(this, f, p, h) || this;
                        },
                        PasswordlessLoginForm_CONSTS: {
                            gigyaClass: "gigya-passwordless-login-form"
                        },
                        PasswordlessLoginForm: function n1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        PasswordlessRegisterForm_CONSTS: {
                            gigyaClass: "gigya-passwordless-register-form"
                        },
                        PasswordlessRegisterForm: function n1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        AuthMethodsForm_CONSTS: {
                            gigyaClass: "gigya-auth-methods-form",
                            authMethodSelector: "[data-auth-method]",
                            authMethod: "data-auth-method"
                        },
                        AuthMethodsForm: function n1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f._authMethodToScreenMap = {}, f;
                        },
                        PasswordAuthMethodForm_CONSTS: {
                            gigyaClass: "gigya-password-auth-method-form",
                            authMethod: "password"
                        },
                        PasswordAuthMethodForm: function n1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        PushAuthMethodForm_CONSTS: {
                            gigyaClass: "gigya-push-auth-method-form",
                            authMethod: "push"
                        },
                        PushAuthMethodForm: function n1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f._pollingStartTime = 0, f._pollingLimit = f._screenSet.params.isVerifiedPollingLimit || 12e4, f._pollingInterval = f._screenSet.params.isVerifiedPollingInterval || 3e3, f;
                        },
                        MagicLinkMethodForm_CONSTS: {
                            gigyaClass: "gigya-magic-link-auth-method-form",
                            authMethod: "magicLink"
                        },
                        MagicLinkAuthMethodForm: function n1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        EmaiLCodeAuthMethodForm_CONSTS: {
                            gigyaClass: "gigya-email-code-auth-method-form",
                            authMethod: "emailOtp"
                        },
                        EmailCodeAuthMethodForm: function n1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        CONSTS: {
                            selector: ".gigya-composite-control.gigya-login-user-enabled-tfa-widget",
                            toggleSelector: ".gigya-switch-control .gigya-switch-toggle",
                            widgetStateAttr: "data-widget-state-active",
                            rbaRuleAttr: "data-rba-rule",
                            errorDisplaySelector: ".gigya-error-display",
                            errorMessageSelector: ".gigya-error-msg",
                            errorActiveClass: "gigya-error-display-active",
                            errorMessageActiveClass: "gigya-error-msg-active",
                            bindingNameErrorAttrValue: "userEnabled2fa",
                            successMessageKey: "user_enable_2fa_success",
                            errorMessageKey: "user_enable_2fa_error",
                            switcherWrapperSelector: ".gigya-switch-control",
                            labelActiveState: ".gigya-user-enabled-tfa-label-enabled-state",
                            labelDisableState: ".gigya-user-enabled-tfa-label-disabled-state",
                            alertRole: "alert",
                            roleAttribute: "role"
                        },
                        NewsletterSignup_CONSTS: {
                            gigyaClass: "gigya-subscribe-with-email-form"
                        },
                        NewsletterSignupForm: function n1(f, p, h) {
                            var v = e.call(this, f, p, h) || this;
                            return v.settings = {
                                supportConsentData: !0
                            }, v;
                        },
                        ProfileForm_CONSTS: {
                            gigyaClass: "gigya-profile-form",
                            specialFields: {
                                username: true,
                                oldPassword: true,
                                password: true,
                                newPassword: true,
                                passwordRetype: true,
                                secretQuestion: true,
                                secretAnswer: true,
                                addLoginEmails: true,
                                removeLoginEmails: true,
                                phoneNumber: true
                            }
                        },
                        ProfileForm: function n1(f, p, h) {
                            var v = e.call(this, f, p, h) || this;
                            return v.requiredProfileFields = [
                                "samlData",
                                "locale"
                            ], v.settings = {
                                supportConsentData: !0
                            }, v;
                        },
                        ReauthenticationForm_CONSTS: {
                            gigyaClass: "gigya-reauthentication-form"
                        },
                        ReauthenticationForm: function n1(f, p, h) {
                            var v = e.call(this, f, p, h) || this;
                            return v.settings = {
                                supportConsentData: !0
                            }, v;
                        },
                        RegisterForm_CONSTS: {
                            gigyaClass: "gigya-register-form"
                        },
                        RegisterForm: function n1(f, p, h) {
                            var v = e.call(this, f, p, h) || this;
                            return v.initApiName = "initRegistration", v.settings = {
                                supportConsentData: !0
                            }, v;
                        },
                        ProgressionForm_CONSTS: {
                            gigyaClass: "gigya-lite-account-progression-form"
                        },
                        ProgressionForm: function n1(f, p, h) {
                            var v = e.call(this, f, p, h) || this;
                            return v.initApiName = "initProgression", v;
                        },
                        ResendVerificationCodeForm_CONSTS: {
                            gigyaClass: "gigya-resend-verification-code-form"
                        },
                        ResendVerificationCodeForm: function n1(f, p, h) {
                            return e.call(this, f, p, h) || this;
                        },
                        ResetPasswordForm_CONSTS: {
                            gigyaClass: "gigya-reset-password-form"
                        },
                        ResetPasswordForm: function n1(f, p, h) {
                            var v = e.call(this, f, p, h) || this;
                            return v.filters.push({
                                filterOutWidgetsToSend: function(f) {
                                    return f.securityFields && f.securityFields.passwordRetype && delete f.securityFields.passwordRetype, f;
                                }
                            }), v;
                        },
                        OrgRegisterForm_CONSTS: {
                            gigyaClass: "gigya-org-register-form"
                        },
                        OrgRegisterForm: function n1(f, p, h) {
                            var v = e.call(this, f, p, h) || this;
                            return v.settings = {
                                supportConsentData: !0
                            }, v;
                        },
                        ButtonInput: function t1(f) {
                            var p = e.call(this, f, !1) || this;
                            return p._form._submitButtons.push(p), p;
                        },
                        CheckboxInput_CONSTS: {
                            errorClass: "gigya-terms-error",
                            validClass: "gigya-terms-valid",
                            dataValueInArray: "data-value-in-array"
                        },
                        CheckboxInput: function n1(f) {
                            return e.call(this, f) || this;
                        },
                        CommunicationCheckboxInput: function t1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        EmailInput: function t1(f) {
                            return e.call(this, f) || this;
                        },
                        ValidityStates: {
                            0: "_undefined",
                            1: "valid",
                            2: "error",
                            3: "pending",
                            _undefined: 0,
                            valid: 1,
                            error: 2,
                            pending: 3
                        },
                        fieldsNameData: {
                            loginID: {
                                autoFillName: "username",
                                paramName: "loginID"
                            },
                            passwordRetype: {
                                autoFillName: "",
                                paramName: ""
                            }
                        },
                        WriteAccessModes: {
                            0: "clientModify",
                            1: "clientCreate",
                            clientModify: 0,
                            clientCreate: 1
                        },
                        FormInput_CONSTS: {
                            fieldName: "data-gigya-name",
                            displayName: "data-display-name",
                            captcha: "gigya-captcha",
                            allowEmpty: "data-allow-empty",
                            required: "data-required",
                            originalValue: "data-original-value",
                            serverValidation: "data-invalid-error-code",
                            showValidCheckmark: "show-valid-checkmark",
                            showCheckmarkClass: "gigya-show-checkmark",
                            validityBorderClass: "gigya-show-validity-border",
                            showValidityBorderAttr: "show-validity-border",
                            errorClass: "gigya-error",
                            warnClass: "gigya-warn",
                            validClass: "gigya-valid",
                            pendingClass: "gigya-pending",
                            emptyClass: "gigya-empty",
                            placeholderAttribute: "data-gigya-placeholder",
                            arrayRootAttribute: "data-array-root",
                            arrayKeyFieldAttribute: "data-array-key-field",
                            arrayKeyValueAttribute: "data-array-key-value",
                            identifierType: "data-identifier-type"
                        },
                        FormInputPriorities: {
                            0: "_start",
                            1: "Important",
                            2: "Normal",
                            3: "Fallback",
                            4: "_end",
                            _start: 0,
                            Important: 1,
                            Normal: 2,
                            Fallback: 3,
                            _end: 4
                        },
                        FieldType: {
                            hidden: "hidden"
                        },
                        FormInput: function n1(f, p, h) {
                            void 0 === p && (p = !0), void 0 === h && (h = 1e3);
                            var v = e.call(this, f.element, f.form) || this;
                            return v.isDataField = p, v.dynamicField = !1, v.isCaptcha = !1, v._validityState = i._undefined, v._showValidityMarker = {}, v.isCurrnetValuePlaceholderText = !0, v.isCtrlKeyUp = !1, v.KEY_CODE_DELETE = 46, v.KEY_CODE_BACKSPACE = 8, v.KEYCODE_LETTER_X = 88, v.previousValue = null, v.intervalID = 0, v.valueConverter = c.schemaTypeToConverter("string"), v.additionalFieldData = {}, v.validityStateListeners = new Array, v._form = f.form, v.type = f.type, v._screen = v._form._screen, v.update(f.element, f.fieldName, p), v.shouldShowValidityIndication(v.templateElement) && (v._showValidityMarker[i.valid] = v._showValidityMarker[i.pending] = !0), v.onFieldChangeDebounced = utils.functions.debounce(function() {
                                return v.onFieldChange();
                            }, v._screenSet.params.debounceDelay || h), v;
                        },
                        AddressInput: function t1(f) {
                            var p = e.call(this, f) || this;
                            return p.currentSuggestions = [], p.geolocation = new s.GeoLocation, p.minCharactersBeforeServer = 3, f.element.setAttribute("autocomplete", "off"), p;
                        },
                        LoginIdInput: function t1(f) {
                            var p = e.call(this, f) || this;
                            return p.isServerValidationEnabled = !0, p._serverValidateAvaliability = p.shouldShowValidityIndication(f.element), p.loginIdMustBeEmail = "email" === f.fieldName, p;
                        },
                        BasePasswordInput_CONSTS: {
                            showPasswordStrength: "show-password-strength"
                        },
                        BasePasswordInput: function n1(f) {
                            var p = e.call(this, f) || this;
                            return p.showPasswordStrengthConditionalExists = !1, p.showPasswordStrengthAttribute = "", r.ForEach(p.conditionalExpressions, function(f) {
                                f.attributeName == t.BasePasswordInput_CONSTS.showPasswordStrength && (p.showPasswordStrengthConditionalExists = !0, p.showPasswordStrengthConditional = f);
                            }), p.showPasswordStrengthAttribute = _.plugins.utils.DOM.getAttribute(p.templateElement, t.BasePasswordInput_CONSTS.showPasswordStrength), null != p.showPasswordStrengthAttribute && p.showPasswordStrengthAttribute.length ? (p.passwordStrengthOrientation = a.BubbleOrientations[p.showPasswordStrengthAttribute], void 0 === p.passwordStrengthOrientation && (p.passwordStrengthOrientation = p._screenSet.isModal ? a.BubbleOrientations.left : a.BubbleOrientations.up), p.showPasswordStrength = void 0 !== p.passwordStrengthOrientation && p.passwordStrengthOrientation != a.BubbleOrientations.none || p.showPasswordStrengthConditionalExists) : p.showPasswordStrength = !1, p;
                        },
                        PasswordInput: function t1(f) {
                            var p = e.call(this, f) || this;
                            return p._form._passwordInputs.push(p), p;
                        },
                        NewPasswordInput: function t1(f) {
                            var p = e.call(this, f) || this;
                            return p._form._passwordInputs.unshift(p), p;
                        },
                        gigyaPhoneNumberInput: "gigya-phone-number-input",
                        PhoneInput_Attributes: {
                            countryCodesSelection: "data-country-codes-selection",
                            countryCodes: "data-country-codes"
                        },
                        PhoneNumberInput: function n1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f.countryCodesDataStructure = {}, f.countryCodesList = [], f.onCountryCodeSelected = function(p) {
                                f.countryCodeSelectHadChanged = !0;
                                var h = f.countryCodeSelect.value;
                                "0" !== h && (f.countryCodeSelect.options[0].value = h, f.countryCodeSelect.options[0].text = h, f.countryCodeSelect.selectedIndex = 0, f.onFieldChange(p));
                            }, f.onSubscriberNumberChanged = function() {
                                f.subscriberNumberHadChanged = !0;
                            }, f;
                        },
                        RadioInput_CONSTS: {
                            wrapperSelector: ".gigya-composite-control-multi-choice",
                            displayNameExpressionAttr: "gigya-expression:data-display-name"
                        },
                        RadioInput: function n1(f) {
                            return e.call(this, f) || this;
                        },
                        RememeberInput: function t1(f) {
                            var p = e.call(this, f) || this;
                            return p._form._rememberMe = p, p;
                        },
                        RetypePasswordInput: function t1(f) {
                            var p = e.call(this, f) || this;
                            return p._form._passwordRetypes.push(p), p;
                        },
                        ArrayManager_CONST: {
                            selector: ".gigya-composite-control-array-widget",
                            containerSelector: ".gigya-array-manager",
                            formElSelector: "input,select, fieldset, .gigya-array-manager",
                            addButtonSelector: "button.gigya-array-add-btn",
                            removeButtonSelector: "button.gigya-array-remove-btn",
                            itemWrapperClass: "gigya-array-template",
                            inputsWrapperClass: "inputs-wrapper",
                            buttonsWrapperClass: "buttons-wrapper",
                            templateItemAttr: "data-array-template-id",
                            arrayManagerRootAttr: "data-array-manager-root",
                            deleteDisabledClass: "disable-delete",
                            indexMatcher: {}
                        },
                        ArrayManagerItem: function e1(f, p) {
                            this.arrayManager = f, this._index = p, this._container = document.createElement("div"), this._inputsWrapper = document.createElement("div"), this._buttonsWrapper = document.createElement("div"), this.onDispose = [], this.screenWidgets = [], this.formInputs = [], this.formWidgets = [], this.boundedErrors = [], this._form = f._form, this._screen = f._screen, this._uniqueItemID = "array-template-" + Date.now() + "-" + p, this._buttonsWrapper.id = this._uniqueItemID + "_" + t.ArrayManager_CONST.buttonsWrapperClass, utils.DOM.addClassToElement(this._buttonsWrapper, t.ArrayManager_CONST.buttonsWrapperClass), utils.DOM.addClassToElement(this._inputsWrapper, t.ArrayManager_CONST.inputsWrapperClass), this._inputsWrapper.appendChild(f.createInputsWrapper());
                            var h = f.attachRemoveButton(this);
                            this._buttonsWrapper.appendChild(h), this._container.appendChild(this._inputsWrapper), this._container.appendChild(this._buttonsWrapper), utils.DOM.addClassToElement(this._container, t.ArrayManager_CONST.itemWrapperClass), this._container.setAttribute(t.ArrayManager_CONST.templateItemAttr, this._uniqueItemID);
                            var v = this._getAllElements().filter(function(f) {
                                return Boolean(f.id);
                            }).reduce(function(f, p) {
                                return f[p.id] = p.id + "_" + ++l, f;
                            }, {});
                            utils.DOM.manipulateAttributes(this._getAllElements(), new RegExp(Object.keys(v).join("|"), "g"), function(f) {
                                return v[f];
                            }), this._indexNameBindings();
                        },
                        ArrayManagerWidget: function n1(f, p) {
                            var h = e.call(this, f, p, !1) || this;
                            h.onDispose = new Array, h._items = [];
                            var v = h.templateElement.querySelectorAll("template");
                            return h._inputsTemplate = v[0], h._buttonsTemplate = v[1], !h._inputsTemplate && console && console.warn && console.warn("gigya: Array Manager is provided with invalid template"), h._minimumItems = Number(h.params.minimum) || 1, h._fieldsNames = h.getFieldsNamesNormalized(), h._storeAsArrayRoots = Array.prototype.slice.call(h._inputsTemplate.content.querySelectorAll("[" + o.FormInput_CONSTS.arrayRootAttribute + "]")).map(function(f) {
                                return f.getAttribute(o.FormInput_CONSTS.arrayRootAttribute);
                            }), h;
                        },
                        addIndex: function d1(f, p, h) {
                            if (!f || !p) return "";
                            f = f.replace(t.ArrayManager_CONST.indexMatcher, "");
                            var v = p.replace(t.ArrayManager_CONST.indexMatcher, "");
                            return p + "[" + h + "]." + f.substr(v.length + 1);
                        },
                        Binding_CONSTS: {
                            selector: "*[data-binding]",
                            dataBindingAttribute: "data-binding"
                        },
                        BindingWidget: function n1(f, p) {
                            var h = e.call(this, f, p, !1) || this;
                            return h.deps = [
                                a.TranslatedWidget
                            ], h;
                        },
                        CaptchaWidget_CONSTS: {
                            selector: "div.gigya-captcha"
                        },
                        CaptchaWidget: function n1(f, p) {
                            var h = e.call(this, f, p) || this;
                            h._index = f._screen._captchas.length, f._screen._captchas.push(h);
                            var v = utils.object.merge([
                                h.params,
                                {
                                    lang: h._screenSet.params.lang,
                                    mode: h.captchaMode(f)
                                }
                            ]), w = o.CaptchaHandlers[partnerSettings.captchaProvider];
                            if (!w || "function" != typeof w) throw new Error("[Gigya]: unsupported captcha provider");
                            return h._captchaHandler = new w(v), h;
                        },
                        Consent_CONSTS: {
                            selector: "div.gigya-consent",
                            titleAttr: "data-label",
                            approvedOnLabelAttr: "data-approved-on-label",
                            versionAttr: "data-version",
                            versionLabelAttr: "data-version-title-label",
                            localeLabelAttr: "data-locale-label"
                        },
                        ConsentWidget: function n1(f, p) {
                            return e.call(this, f, p, !1) || this;
                        },
                        ContainerWidget_CONSTS: {
                            selector: "div.gigya-container",
                            activeClass: "gigya-container-enabled",
                            emptyFields: "data-empty-fields",
                            loginIdentities: "data-login-idenities",
                            conditionAttr: "data-condition",
                            onRenderAttr: "data-on-render"
                        },
                        ContainerWidget: function n1(f, p) {
                            var h = e.call(this, f, p, !1) || this;
                            return h.onElementChange = function() {
                                return h.refresh();
                            }, h.name = p.getAttribute("name"), h.emptyFields = p.getAttribute(t.ContainerWidget_CONSTS.emptyFields), h.emptyFields && f._autoSkipContainers.push(h), h.update(p), h;
                        },
                        Image_CONSTS: {
                            selector: "div.gigya-image",
                            srcAttribute: "data-src",
                            widthAttribute: "data-width",
                            heightAttribute: "data-height",
                            backgroundSizeAttribute: "data-background-size"
                        },
                        ImageWidget: function n1(f, p) {
                            return e.call(this, f, p, !1) || this;
                        },
                        LoginAvailabilityWidget_CONSTS: {
                            selector: "div.gigya-loginID-availability",
                            boundTo: "data-bound-to"
                        },
                        LoginAvailabilityWidget: function n1(f, p) {
                            var h = e.call(this, f, p) || this;
                            return h.init(f, p), h;
                        },
                        MyPhotoWidget_CONSTS: {
                            selector: "div.gigya-myPhoto"
                        },
                        MyPhotoWidget: function n1(f, p) {
                            var h = e.call(this, f, p) || this;
                            return h.containerId = h._screenSet.containerID + "_myPhoto_" + a++, h;
                        },
                        DisplayModes: {
                            policy: {
                                hasMinimumRequirements: true,
                                hasStrengthMeter: false,
                                getTemplate: function(f) {
                                    return f.passwordStrength_minimumRequirements;
                                }
                            },
                            meter: {
                                hasMinimumRequirements: false,
                                hasStrengthMeter: true,
                                getTemplate: function(f) {
                                    return f.passwordStrength_strengthMeter;
                                }
                            },
                            combined: {
                                hasMinimumRequirements: true,
                                hasStrengthMeter: true,
                                getTemplate: function(f) {
                                    return f.passwordStrength_strengthMeter + f.passwordStrength_minimumRequirements;
                                }
                            }
                        },
                        BubbleOrientations: {
                            0: "right",
                            1: "left",
                            2: "up",
                            3: "down",
                            4: "none",
                            right: 0,
                            left: 1,
                            up: 2,
                            down: 3,
                            none: 4
                        },
                        PasswordStrengthWidget_CONSTS: {
                            selector: "div.gigya-password-strength",
                            bubbleClass: "gigya-password-strength-bubble",
                            mobileClass: "mobile-bubble",
                            desktopClass: "desktop-bubble",
                            displayMode: "data-display-mode",
                            bubble: "data-on-focus-bubble",
                            bubbleOrientation: "data-bubble-orientation"
                        },
                        PasswordStrengthWidget: function n1(f, p) {
                            var h = e.call(this, f, p) || this;
                            return h.bubbleLastTop = "", h.originalClass = p.className, h.originalStyle = p.getAttribute("style"), h.originalDisplay = p.style.display, p.style.display = "none", h._passwordField = f.getField("newPassword") || f.getField("password"), h._passwordField ? (h.getText = function(f) {
                                return h._screenSet.getText(f);
                            }, h.displayMode = t.DisplayModes[p.getAttribute(t.PasswordStrengthWidget_CONSTS.displayMode)] || t.DisplayModes.combined, h.template = utils.templates.fill(h._screenSet.getTemplates().passwordStrength, {
                                content: h.displayMode.getTemplate(h._screenSet.getTemplates())
                            }), h.isBubble = Boolean(p.getAttribute(t.PasswordStrengthWidget_CONSTS.bubble)), h.isBubble && (h.bubbleOrientation = i[p.getAttribute(t.PasswordStrengthWidget_CONSTS.bubbleOrientation)], void 0 === h.bubbleOrientation && (h.bubbleOrientation = h._screenSet.isModal ? i.left : i.up), h.bubbleID = h._screenSet.params.containerID + "_bubble", h.onBlur = function() {
                                return h.hideBubble();
                            }, h.onFocus = function() {
                                return h.updateBubbleDisplay();
                            }, h.onScroll = function() {
                                var f = global.divGMBalloon;
                                f && f.style.top == h.bubbleLastTop && h.refreshBubble();
                            }), h.fnKeyUp = function() {
                                return h.updateBubbleDisplay();
                            }, h._passwordField.addEventListener("keyup", h.fnKeyUp), h.isBubble && (h._passwordField.addEventListener("focus", h.onFocus), h._passwordField.addEventListener("blur", h.onBlur), utils.DOM.addEventListener(document, "scroll", h.onScroll)), h._screenSet.onRefreshExternalComponentsEvent().add(function() {
                                h.refreshBubble();
                            }), h) : (h.warn(t.PasswordStrengthWidget_CONSTS.selector + "'s form is missing password field to bound to"), h);
                        },
                        getPasswordStrengthData: function u1(f) {
                            f || (f = "");
                            var p = {
                                lower: l(f.match(/[a-z]/g)),
                                upper: l(f.match(/[A-Z]/g)),
                                digits: l(f.match(/\d/g)),
                                specialChars: l(f.match(/[^\dA-Za-z]/g)),
                                length: f.length,
                                charGroups: 0
                            };
                            return p.lower && p.charGroups++, p.upper && p.charGroups++, p.digits && p.charGroups++, p.specialChars && p.charGroups++, p;
                        },
                        isPasswordStrengthValid: function c3(f, p, h) {
                            if (f && p && h) {
                                if (h.regExp) {
                                    if (!new RegExp(h.regExp).test(f)) return !1;
                                }
                                return !(p.lower < h.minLowercase || p.upper < h.minUppercase || p.digits < h.minDigit || p.specialChars < h.minSpecialChars || p.charGroups < h.minCharGroups || p.length < h.minLength);
                            }
                        },
                        PhotoUploadWidget_CONSTS: {
                            selector: "div.gigya-photo-upload"
                        },
                        PhotoUploadWidget: function n1(f, p) {
                            var h = e.call(this, f, p) || this;
                            h.photoElementID = h._uploadIframeID + "_photo", h.pathContainerID = h._uploadIframeID + "_path", h.defaultBGImage = _.getCdnResource() + "/gs/i/accounts/avatar_64.png";
                            var v = h._screenSet.getTemplates().photoUpload_ui;
                            return h.uiHtml = utils.templates.fill(v, {
                                pathContainerID: h.pathContainerID,
                                photoElementID: h.photoElementID,
                                choose_file: h._screenSet.getText("choose_file"),
                                no_file_chosen: h._screenSet.getText("no_file_chosen"),
                                tip: h._screenSet.getText("maximum_size_of_3mb.") + " JPG, GIF, PNG."
                            }), p.innerHTML = "", (localInfo.isIE9 || localInfo.isIE8) && h._form.filters.push({
                                filterOutWidgetsToSend: function(f) {
                                    return f.profile && delete f.profile._profilePhoto, f;
                                }
                            }), h;
                        },
                        ProfilePhotoWidget_CONSTS: {
                            selector: "div.gigya-profile-photo"
                        },
                        ProfilePhotoWidget: function n1(f, p) {
                            var h = e.call(this, f, p) || this;
                            return f._profilePhotos.push(h), h;
                        },
                        RequiredDisplayWidget_CONSTS: {
                            selector: ".gigya-required-display",
                            boundTo: "data-bound-to",
                            alwaysVisible: "gigya-required-display-always-visible"
                        },
                        RequiredDisplayWidget: function n1(f, p) {
                            var h = e.call(this, f, p) || this;
                            return "none" === p.style.display && (p.style.display = ""), p.setAttribute("aria-hidden", "true"), p.removeAttribute("for"), h;
                        },
                        SecretQuestionWidget_CONSTS: {
                            selector: "div.gigya-secret-question",
                            allowEmpty: "data-allow-empty"
                        },
                        SecretQuestionWidget: function n1(f, p) {
                            var h = e.call(this, f, p, !1) || this;
                            h.questions = new Array, f._secretQuestions.push(h);
                            var v = p.querySelectorAll('*[name="secretQuestion"]');
                            return r.ForEach(v, function(f) {
                                return h.questions.push(new l(f, h));
                            }), h.answerField = f.getField("secretAnswer"), h.answerField || h.warn(t.SecretQuestionWidget_CONSTS.selector + "'s form is missing secretAnswer field to link to"), h;
                        },
                        SocialLoginWidget_CONSTS: {
                            selector: "div.gigya-social-login"
                        },
                        SocialLoginWidget: function n1(f, p) {
                            var h = e.call(this, f, p) || this;
                            return h.bindID = h.publishID ? h.ID : t.SocialLoginWidget_CONSTS.selector, h.loginMode = a.LoginModes[h.params.loginMode || "standard"], h.containerId = h._screenSet.containerID + "_social_" + c++, h.onErrorResponse = function(f) {
                                if (400100 !== f.errorCode && 400006 !== f.errorCode) {
                                    409003 === Number(f.errorCode) && (h._screenSet.data.shouldConnectAccounts = !0);
                                    var p = h.getProviderSessionInfo(f);
                                    return h._screenSet.onScreenResponse(p, h);
                                }
                            }, h.onLoginResponse = function(f) {
                                h._screenSet.removeRegToken(), h._screenSet.data.shouldConnectAccounts = !0, h._screenSet.onScreenResponse({
                                    errorCode: 0,
                                    event: f
                                }, h);
                            }, h;
                        },
                        SubscriptionWidget_CONSTS: {
                            selector: "div.gigya-subscription",
                            subscriptionName: "name"
                        },
                        SubscriptionWidget: function n1(f, p) {
                            var h = e.call(this, f, p) || this;
                            return h._shouldPopulate = f instanceof a.ProfileForm, h;
                        },
                        PhoneNumberWidget_CONSTS: {
                            selector: ".gigya-phone-number-widget",
                            verifyButtonClass: "gigya-phone-verify-button",
                            resendButtonCLass: "gigya-phone-resend-button",
                            phonePreviewClass: "gigya-phone-number-preview",
                            useAsIdentifierAttr: "data-use-as-identifier",
                            codeInputClass: "gigya-phone-number-verification-code",
                            phoneInputNumberClass: "gigya-subscriber-phone-number-input",
                            countryCodeInputClass: "gigya-country-code-select",
                            verifiedStatusClass: "gigya-phone-verified-status",
                            resendBlockedLabelClass: "gigya-phone-resend-blocked",
                            linkDisabledClass: "gigya-disabled",
                            errorMessageClass: "gigya-error-msg",
                            placeholderTextAttribute: "data-gigya-placeholder",
                            gigyaHiddenClass: "gigya-hidden",
                            placeholderAttribute: "placeholder",
                            widgetStateAttribute: "data-widget-state",
                            requiredAttribute: "data-widget-required",
                            codeStateAttributes: "data-widget-code-state",
                            displayNameAttribute: "data-display-name",
                            translationKeyAttribute: "data-translation-key",
                            resendBlockDefaultLabelAttr: "data-resend-blocked-default-label",
                            phoneNumberFieldName: "phoneNumber",
                            resendCountTemplate: "%sec",
                            disableVerifyInSeconds: 10,
                            otpCodeLength: 6,
                            deps: [
                                function n1(f, p) {
                                    return e.call(this, f, p, !1) || this;
                                }
                            ]
                        },
                        PhoneNumberWidget: function n1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f.debounceDelay = f._screenSet.params.debounceDelay || 1e3, f;
                        },
                        Channel_Status: {
                            noticed: "noticed",
                            OptIn: "OptIn",
                            optIn: "optIn",
                            OptOut: "OptOut",
                            optOut: "optOut"
                        },
                        CommunicationWidget_CONSTS: {
                            selector: "div.gigya-communication",
                            channel: "data-communication-channel",
                            topic: "data-communication-topic",
                            status: "data-communication-status",
                            subscriptionName: "name",
                            communicationsPrefix: "communications.",
                            subscriptionType: "data-subscription-type",
                            subscriptionTopic: "data-subscription-topic",
                            communicationChannel: "data-subscription-channel"
                        },
                        CommunicationWidget: function n1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        TfaWidget_CONSTS: {
                            selector: "div.gigya-tfa"
                        },
                        TfaWidget: function n1(f, p) {
                            var h = e.call(this, f, p) || this;
                            return h.bindID = h.publishID ? h.ID : t.TfaWidget_CONSTS.selector, f._hasTfa = !0, h.tfaContainerId = (h._screenSet.params.containerID || "showScreenSet") + "_showTfaUI_" + a++, h;
                        },
                        Translated_CONSTS: {
                            selector: "*[data-translation-key]",
                            translationKeyAttribute: "data-translation-key"
                        },
                        TranslatedWidget: function n1(f, p) {
                            return e.call(this, f, p, !1) || this;
                        },
                        CaptchaHandlers: {
                            FunCaptcha: function t1() {
                                return null !== e && e.apply(this, arguments) || this;
                            },
                            Google: function t1() {
                                return null !== e && e.apply(this, arguments) || this;
                            }
                        },
                        CaptchaMode: {
                            visible: "visible",
                            invisible: "invisible"
                        },
                        BaseCaptchaHandler: function e1(f) {
                            void 0 === f && (f = {}), this.params = f, this._ID = "gig_captcha_" + ++o;
                        },
                        FunCaptchaHandler: function t1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        GoogleCaptchaHandler: function t1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        RegisterDeviceRequestParam: {
                            UserCode: "user_code"
                        },
                        RegisterDeviceFormParam: {
                            UserCode: "userCode"
                        },
                        DeviceCodeForm_CONSTS: {
                            gigyaClass: "gigya-device-code-form"
                        },
                        DeviceCodeForm: function n1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        PasskeyLogin_CONSTS: {
                            selector: ".gigya-composite-control-passkey-login-widget"
                        },
                        PasskeyLoginWidget: function n1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        PasskeyRegister_CONSTS: {
                            selector: ".gigya-composite-control-passkey-register-widget",
                            behaviorAttr: "data-passkey-behavior"
                        },
                        PasskeyRegisterMode: {
                            Connect: "connect",
                            Submit: "submit"
                        },
                        PasskeyRegisterWidget: function n1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        PasskeyManager_CONSTS: {
                            selector: ".gigya-composite-control-passkey-manager-widget"
                        },
                        PasskeyManagerWidget: function n1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f.itemId = "id", f.refreshList = function() {
                                f.reloadList();
                            }, f.credentialMapper = function(p) {
                                return p.DeviceName = p.DeviceName || p.Platform + " / " + p.Browser, Object.keys(p).reduce(function(h, v) {
                                    var w, m = v.charAt(0).toLowerCase() + v.slice(1);
                                    return i.__assign(i.__assign({}, h), ((w = {})[m] = f.getValue(v, p[v]), w));
                                }, {});
                            }, f;
                        },
                        TFAVerification_CONSTS: {
                            selector: ".gigya-composite-control-tfa-verification-widget"
                        },
                        TFAVerificationWidget: function n1(f, p) {
                            return e.call(this, f, p) || this;
                        },
                        TFAPhoneList_CONSTS: {
                            selector: ".gigya-tfa-verification-method.tfa-phone-method"
                        },
                        TFAVerificationPhoneListWidget: function n1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f.providerName = o.TfaProvider.phone, f;
                        },
                        TFAPhoneItem_CONSTS: {
                            sendButtonSelector: ".gigya-tfa-verification-action-btn",
                            submitButtonSelector: ".gigya-input-submit",
                            expandedAttribute: "data-device-expanded",
                            errorMessageSelector: '.gigya-error-msg[data-bound-to="tfaVerificationWidget"]',
                            errorActiveMessageClass: "gigya-error-msg-active",
                            rememberDeviceSelector: ".gigya-remember-device-checkbox input",
                            codeInputSelector: ".gigya-code-input",
                            nameAttr: "name",
                            boundToAttr: "data-bound-to",
                            inputErrorSelector: ".gigya-input-error",
                            ariaLabelAttr: "aria-label",
                            deviceLabelSelector: ".gigya-tfa-verification-device-label",
                            titleAttr: "title",
                            symbolsPlaceholder: "%lastSymbols",
                            resendButtonSelector: ".gigya-tfa-resend-code",
                            selector: '.gigya-tfa-verification-method[data-tfa-method="phone"] .gigya-card',
                            sendSMSButtonSelector: '.gigya-tfa-verification-action-btn[data-method="sms"]',
                            sendVoiceButtonSelector: '.gigya-tfa-verification-action-btn[data-method="voice"]',
                            resendButtonSelectorSms: '.gigya-tfa-resend-code[data-method="sms"]',
                            resendButtonSelectorVoice: '.gigya-tfa-resend-code[data-method="voice"]',
                            countDownSelector: ".gigya-api-countdown",
                            gigyaHiddenClass: "gigya-hidden"
                        },
                        TFAVerificationPhoneItemWidget: function n1(f, p, h) {
                            void 0 === h && (h = utils.DOM);
                            var v = e.call(this, f, p) || this;
                            return v._domUtils = h, v.providerName = o.TfaProvider.phone, v.bindID = v.ID || t.TFAPhoneItem_CONSTS.selector, v;
                        },
                        TFATotpItem_CONSTS: {
                            sendButtonSelector: ".gigya-tfa-verification-action-btn",
                            submitButtonSelector: ".gigya-input-submit",
                            expandedAttribute: "data-device-expanded",
                            errorMessageSelector: '.gigya-error-msg[data-bound-to="tfaVerificationWidget"]',
                            errorActiveMessageClass: "gigya-error-msg-active",
                            rememberDeviceSelector: ".gigya-remember-device-checkbox input",
                            codeInputSelector: ".gigya-code-input",
                            nameAttr: "name",
                            boundToAttr: "data-bound-to",
                            inputErrorSelector: ".gigya-input-error",
                            ariaLabelAttr: "aria-label",
                            deviceLabelSelector: ".gigya-tfa-verification-device-label",
                            titleAttr: "title",
                            selector: '.gigya-tfa-verification-method[data-tfa-method="totp"] .gigya-card',
                            namePlaceholder: "%name"
                        },
                        TFAVerificationTotpItemWidget: function n1(f, p, h) {
                            void 0 === h && (h = utils.DOM);
                            var v = e.call(this, f, p) || this;
                            return v._domUtils = h, v.providerName = a.TfaProvider.totp, v.bindID = v.ID || t.TFATotpItem_CONSTS.selector, v;
                        },
                        TFATotpList_CONSTS: {
                            selector: '.gigya-tfa-verification-method[data-tfa-method="totp"]',
                            deps: [
                                function n1(f, p) {
                                    return e.call(this, f, p, !1) || this;
                                }
                            ]
                        },
                        TFAVerificationTotpListWidget: function n1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f.providerName = o.TfaProvider.totp, f;
                        },
                        TFAVerificationBackupCodesWidget_CONSTS: {
                            selector: '.gigya-tfa-verification-method[data-tfa-method="backup-codes"]',
                            expandButtonSelector: ".gigya-tfa-verification-action-btn",
                            submitButtonSelector: ".gigya-input-submit",
                            codeInputSelector: ".gigya-code-input",
                            cardItemSelector: ".gigya-tfa-verification-device",
                            cardBodySelector: ".gigya-card-body"
                        },
                        TFAVerificationBackupCodesWidget: function n1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f.enabledForProviders = [
                                a.TfaProvider.totp,
                                a.TfaProvider.push
                            ], f.expandedStateAttribute = s.TFABaseItem_CONSTS.expandedAttribute, f.providerName = "backupCode", f;
                        },
                        PasskeyCard_CONSTS: {
                            selector: "li.gigya-passkey-card",
                            deleteButtonSelector: ".gigya-remove-passkey-icon",
                            newCardClass: "gigya-card-new",
                            deps: [
                                function n1(f, p) {
                                    return e.call(this, f, p, !1) || this;
                                }
                            ]
                        },
                        PasskeyCardWidget: function n1(f, p, h) {
                            void 0 === h && (h = utils.DOM);
                            var v = e.call(this, f, p, !1) || this;
                            return v._domUtils = h, v.deletePasskey = function(f) {
                                return i.__awaiter(v, void 0, void 0, function() {
                                    var p, h;
                                    return i.__generator(this, function(v) {
                                        switch(v.label){
                                            case 0:
                                                return f.preventDefault(), this._screen.dimScreen(), [
                                                    4,
                                                    s.default.removePasskey(this.elementId, this._screenSet.regToken)
                                                ];
                                            case 1:
                                                if (0 !== (p = v.sent()).errorCode) {
                                                    if (!(h = this._screen.getFormByElement(this.instanceElement))) return [
                                                        2
                                                    ];
                                                    this._screenSet.onScreenResponse(p, this), this._screenSet.displayServerErrors(p, h);
                                                }
                                                return this._screen.undimScreen(), [
                                                    2
                                                ];
                                        }
                                    });
                                });
                            }, v.bindID = v.ID || t.PasskeyCard_CONSTS.selector, v;
                        },
                        TfaManagementWidget: function t1(f, p) {
                            return e.call(this, f, p) || this;
                        },
                        TfaPhoneManagement_CONSTS: {
                            selector: ' .gigya-tfa-management-method[data-tfa-method="phone"]'
                        },
                        TfaManagementPhoneListWidget: function n1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f.removeEvent = a.TfaManagementEvent.RemovePhone, f.listUpdateEvent = a.TfaManagementEvent.PhoneListUpdated, f.providerName = o.TfaProvider.phone, f;
                        },
                        TfaManagementPhoneItemWidget: function t1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f.removeEvent = r.TfaManagementEvent.RemovePhone, f.listUpdateEvent = r.TfaManagementEvent.PhoneListUpdated, f.providerName = s.TfaProvider.phone, f;
                        },
                        TfaEmailManagement_CONSTS: {
                            selector: '.gigya-tfa-management-method[data-tfa-method="email"]'
                        },
                        TfaManagementEmailListWidget: function n1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f.removeEvent = a.TfaManagementEvent.RemoveEmail, f.listUpdateEvent = a.TfaManagementEvent.EmailListUpdated, f.providerName = o.TfaProvider.email, f;
                        },
                        TfaManagementEmailItemWidget: function t1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f.removeEvent = r.TfaManagementEvent.RemoveEmail, f.listUpdateEvent = r.TfaManagementEvent.EmailListUpdated, f.providerName = s.TfaProvider.email, f;
                        },
                        TfaRegistrationWidget: function t1(f, p) {
                            return e.call(this, f, p) || this;
                        },
                        TfaRegistrationPhoneWidget: function t1() {
                            var f = null !== e && e.apply(this, arguments) || this;
                            return f.providerName = o.TfaProvider.phone, f;
                        },
                        TFABackupCodes_CONSTS: {
                            selector: ".gigya-composite-control-tfa-backup-codes-widget",
                            backupCodesListEl: ".gigya-tfa-backup-codes-content",
                            backupCodesListContainerEl: ".gigya-backup-codes-list-container",
                            printButtonEl: ".gigya-tfa-print-button",
                            downloadButtonEl: ".gigya-tfa-download-button",
                            generateBackupCodesButtonEl: ".gigya-generate-code-button",
                            downloadHeader: "Backup Codes",
                            downloadFileTitle: "backup-codes.txt",
                            downloadTextContent: "Download Backup Codes",
                            backupCodeListItemClass: "gigya-backup-code-item"
                        },
                        TFABackupCodesWidget: function n1(f, p) {
                            var h = e.call(this, f, p) || this;
                            return h.backupCodes = [], h;
                        },
                        CustomForm_CONSTS: {
                            gigyaClass: "gigya-custom-form"
                        },
                        CustomForm: function n1(f, p, h) {
                            return e.call(this, f, p, h) || this;
                        },
                        TfaForm_CONSTS: {
                            gigyaClass: "gigya-tfa-form"
                        },
                        TfaForm: function n1() {
                            return null !== e && e.apply(this, arguments) || this;
                        },
                        OrganizationContextConsts: {
                            selector: ".gigya-organization-context-widget",
                            dropdownSelector: ".gigya-organization-context-dropdown",
                            buttonSelector: ".gigya-organization-context-control-link-button",
                            errorDisplayClass: ".gigya-error-display",
                            errorMessageClass: ".gigya-error-msg",
                            errorActiveClass: "gigya-error-display-active",
                            disabledClass: "gigya-disabled",
                            noDataAvailableMessage: "no_data_available"
                        },
                        OrganizationContextWidget: function n1(f, p, h) {
                            void 0 === h && (h = utils.DOM);
                            var v = e.call(this, f, p, !1) || this;
                            return v._domUtils = h, v;
                        }
                    },
                    login_v2: {
                        ButtonStyles: {
                            fulllogocolored: {
                                ratio: 2.6,
                                base: "FullLogoColored/",
                                ext: ".png",
                                noConnected: true,
                                minSize: 15,
                                maxSize: 65
                            },
                            fulllogo: {
                                ratio: 2.6,
                                base: "FullLogo/",
                                ext: ".png",
                                noConnected: true,
                                minSize: 15,
                                maxSize: 65
                            },
                            signinwith: {
                                ratio: 7.05,
                                base: "SignInWith/",
                                ext: ".png",
                                noLastLogin: true,
                                noConnected: true,
                                minSize: 20,
                                maxSize: 60
                            },
                            standard: {
                                ratio: 1,
                                base: "",
                                ext: ".png",
                                minSize: 15,
                                maxSize: 65
                            }
                        },
                        ContainerBase: function i1() {},
                        FooterContainer: function i1(f, p) {
                            this.plugin = f, this.gridSize = p, this.template = f.getTemplates().footer, this.element = this.plugin.createElementFromHTMLString(this.template);
                        },
                        LoginContainer: function t1(f, p) {
                            var h = i.call(this) || this;
                            return h.plugin = f, h.gridSize = p, h.ElementsSelector = {
                                main: "gigya-login-providers",
                                container: "gigya-login-providers-container",
                                arrowLeft: "gigya-login-providers-arrow-left",
                                arrowRight: "gigya-login-providers-arrow-right",
                                providersContainer: "gigya-login-providers-list-container",
                                connectedProviderClass: "gigya-provider-connected",
                                providerNameAttr: "data-gigya-provider"
                            }, h.template = h.plugin.getTemplates().login, h;
                        },
                        NavigationDirection: {
                            0: "Next",
                            1: "Prev",
                            Next: 0,
                            Prev: 1
                        },
                        LastLoginIndication: {
                            0: "_undefined",
                            1: "none",
                            2: "border",
                            3: "welcome",
                            _undefined: 0,
                            none: 1,
                            border: 2,
                            welcome: 3
                        },
                        PluginMode: {
                            0: "_undefined",
                            1: "Login",
                            2: "AddConnection",
                            3: "LinkAccount",
                            _undefined: 0,
                            Login: 1,
                            AddConnection: 2,
                            LinkAccount: 3
                        },
                        RenderingMode: {
                            0: "Unknown",
                            1: "Login",
                            2: "Welcome",
                            3: "Footer",
                            Unknown: 0,
                            Login: 1,
                            Welcome: 2,
                            Footer: 3
                        },
                        LoginPlugin: function t1() {
                            var f = null !== i && i.apply(this, arguments) || this;
                            return f.pixelRatio = window.devicePixelRatio > 1 ? 2 : 1, f.imageBase = _.getCdnResource("/gs/i/HTMLLogin"), f.showEdit = !1, f.showWelcome = !1, f.loginChangeEventHandler = function() {
                                return f.render();
                            }, f.pluginConfig = {
                                arrowWidth: 16,
                                floatingArrowWidth: 15,
                                arrowHeight: 14,
                                defaultlastLoginButtonSize: 30,
                                defaultButtonSize: 30,
                                defaultButtonSizeOnPopup: 35,
                                headerHeight: 18,
                                footerHeight: 18,
                                rowSpacing: 5
                            }, f.onUserStateChange = function(p) {
                                return f.userStateChanged(p);
                            }, f;
                        },
                        PagingButtonStyles: {
                            arrows: {
                                getStyleClass: function() {
                                    return "gigya-login-providers-arrow-marker-" + i;
                                },
                                getStyleName: function(f) {
                                    return i;
                                }
                            },
                            newArrows: {
                                getStyleClass: function() {
                                    return "gigya-login-providers-arrow-marker-" + i;
                                },
                                getStyleName: function(f) {
                                    return i;
                                }
                            },
                            floating: {
                                getStyleClass: function() {
                                    return "gigya-login-providers-arrow-marker-" + i;
                                },
                                getStyleName: function(f) {
                                    return i;
                                }
                            },
                            auto: {
                                getStyleClass: function(f) {
                                    var p = t.PagingButtonStyles.auto.getStyleName(f);
                                    return t.PagingButtonStyles[p].getStyleClass(f);
                                },
                                getStyleName: function(f) {
                                    return f.isMobileUI && (!f.lastPolledWidth || f.lastPolledWidth < 500) ? "floating" : "newArrows";
                                }
                            }
                        },
                        Utils: function i1() {},
                        WelcomeContainer: function t1(f) {
                            var p = i.call(this) || this;
                            p.plugin = f, p.ElementsSelector = {
                                container: "gigya-login-welcome-container",
                                user: "gigya-login-welcome-user",
                                provider: "gigya-login-welcome-provider",
                                signinlink: "gigya-login-welcome-signin-link",
                                greeting: "gigya-login-welcome-greeting"
                            };
                            var h = p.plugin.getTemplates().welcome;
                            return p.element = p.plugin.createElementFromHTMLString(h), p;
                        }
                    }
                },
                UI: {
                    registerPlugin: function registerPlugin1(f) {
                        queueUtils.queueForExecution("UI", f);
                    },
                    attachPlugin: function attachPlugin1(f, p, h, v) {
                        if (!p) p = "socialize";
                        if (!window.gigya[p]) window.gigya[p] = {};
                        if (!window.gigya[p].plugins) window.gigya[p].plugins = {};
                        if (!window.gigya[p].plugins[h]) window.gigya[p].plugins[h] = {
                            instances: []
                        };
                        var w = window.gigya[p].plugins[h];
                        if (!w[v]) {
                            w[v] = function(v) {
                                var m = "gigya." + p + ".plugins." + h + ".instances[" + w.instances.length + "]";
                                var b = new f(v, m);
                                w.instances.push(b);
                            };
                        }
                        if (f.StaticApi) {
                            for(var m in f.StaticApi){
                                var b = f.StaticApi[m];
                                var y = f[b];
                                functionsUtils.createAlias("gigya." + p + ".plugins." + h + "." + m, y);
                            }
                        }
                    }
                },
                api: {
                    VersionSelector: function VersionSelector1(f, p, h) {
                        this.methodName = f;
                        this._versions = p;
                        if (!this._versions || this._versions.length < 1) throw new Error(this.methodName + ": required at least one valid version");
                        if (!h) {
                            this._defaultVersionIndex = 0;
                        } else {
                            this._defaultVersionIndex = this.findVersionIndexOrDefault(h);
                            if (this._defaultVersionIndex == -1) throw new Error(this.methodName + ": default version is not defined as a version");
                        }
                    }
                },
                saml: {},
                CDN_HOSTS: {
                    http: [
                        "cdn.gigya.com",
                        "cdn1.gigya.com",
                        "cdn2.gigya.com",
                        "cdn3.gigya.com"
                    ],
                    https: [
                        "cdns.gigya.com",
                        "cdns1.gigya.com",
                        "cdns2.gigya.com",
                        "cdns3.gigya.com"
                    ]
                },
                getCdnResource: function getCdnResource1(f) {
                    var p, h, v, w;
                    var m = (h = (p = thisScript) === null || p === void 0 ? void 0 : p.baseDomain) !== null && h !== void 0 ? h : "";
                    var b = (w = (v = thisScript) === null || v === void 0 ? void 0 : v.protocol) !== null && w !== void 0 ? w : "https";
                    if (!m || /cdns?\.gigya\.com$/.test(m)) {
                        var y = exports.CDN_HOSTS[b];
                        if (y.length <= selectedCdnHostsIndex) {
                            selectedCdnHostsIndex = 0;
                        }
                        m = y[selectedCdnHostsIndex++];
                    }
                    if (f) {
                        if (f.indexOf("/") !== 0) {
                            f = "/" + f;
                        }
                    }
                    return b + "://" + m + (f || "");
                },
                getImgCdnResource: function getImgCdnResource1() {
                    return getCdnResource("/gs/i/");
                },
                MessagingMethod: {
                    0: "LocalStorageListener",
                    1: "PostMessage",
                    2: "Flash",
                    LocalStorageListener: 0,
                    PostMessage: 1,
                    Flash: 2
                },
                checkCompleteRegistration: function checkCompleteRegistration1(f, p, h, v) {
                    var w, m;
                    var b;
                    var y;
                    var S = false;
                    var E;
                    if (f["errorCode"] == GSErrors_1.GSErrors.AFTER_EMAIL_VERIFICATION) {
                        logger.info("finalizing registration after email verification");
                        S = true;
                        accounts.finalizeRegistration({
                            regToken: f["regToken"],
                            ignoreApiQueue: true,
                            callback: v
                        });
                    } else if (!p["ignoreInterruptions"] && !p["dontHandleScreenSet"] && ((f["regToken"] || p["regToken"]) && (f["errorCode"] == GSErrors_1.GSErrors.OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS || f["errorCode"] == GSErrors_1.GSErrors.FORCE_LINK_LOGIN_IDENTIFIER_EXISTS || f["errorCode"] == GSErrors_1.GSErrors.LOGIN_IDENTIFIER_EXISTS) || f["errorCode"] == GSErrors_1.GSErrors.ACCOUNT_PENDING_REGISTRATION || f["errorCode"] == GSErrors_1.GSErrors.ACCOUNT_PENDING_VERIFICATION || f["errorCode"] == GSErrors_1.GSErrors.ACCOUNT_MISSING_LOGINID || f["errorCode"] == GSErrors_1.GSErrors.ACCOUNT_PENDING_TFA_VERIFICATION || f["errorCode"] == GSErrors_1.GSErrors.ACCOUNT_PENDING_TFA_REGISTRATION || f["errorCode"] == GSErrors_1.GSErrors.ACCOUNT_PENDING_RECENT_LOGIN || f["errorCode"] == GSErrors_1.GSErrors.PENDING_PASSWORD_CHANGE || f["errorCode"] == GSErrors_1.GSErrors.PENDING_CODE_VERIFICATION)) {
                        if (f["errorCode"] == GSErrors_1.GSErrors.FORCE_LINK_LOGIN_IDENTIFIER_EXISTS) {
                            E = {
                                access_token: f["access_token"],
                                provider: f["provider"],
                                provider_uid: f["provider_uid"],
                                idToken: f["id_token"],
                                code: f["code"],
                                lastName: f["lastName"],
                                firstName: f["firstName"]
                            };
                        }
                        var C;
                        if (f["errorCode"] == GSErrors_1.GSErrors.ACCOUNT_PENDING_RECENT_LOGIN) {
                            y = true;
                            C = true;
                        }
                        if (p["defaultMobileRegScreenSet"] && LocalInfo_1.localInfo.isMobile) {
                            b = p["defaultMobileRegScreenSet"];
                        } else if (p["defaultRegScreenSet"]) {
                            b = p["defaultRegScreenSet"];
                        }
                        if (b && p["overrideDefaultScreenSet"]) {
                            b = p["overrideDefaultScreenSet"];
                        }
                    }
                    if (b) {
                        logger.info("showing screenset '" + b + "' for errorCode " + f["errorCode"]);
                        logger.group(b);
                        var I = {
                            ignoreApiQueue: true,
                            newModal: C,
                            screenSet: b,
                            initialMethod: h,
                            initialResponse: f,
                            suppressLoginEvent: p["suppressLoginEvent"],
                            providerSessionInfo: E,
                            onError: function(p) {
                                v(f);
                            },
                            onHide: function(p) {
                                logger.groupEnd(b);
                                if (p.reason === "finished" && p.user) {
                                    var h = {
                                        errorCode: 0,
                                        userInfo: p.user,
                                        source: p.source
                                    };
                                    v(h, true, y);
                                } else {
                                    v(f);
                                }
                            }
                        };
                        if (FlagService_1.FlagService.passLanguageParamsToReauthScreen) {
                            var R = (w = p["languageParams"]) === null || w === void 0 ? void 0 : w.lang;
                            var A = (m = p["languageParams"]) === null || m === void 0 ? void 0 : m.customLang;
                            if (R) {
                                I["lang"] = R;
                            }
                            if (A) {
                                I["customLang"] = A;
                            }
                        }
                        accounts.showScreenSet(I);
                    } else if (!S) {
                        v(f);
                    }
                },
                checkGroupInvitation: function checkGroupInvitation1(f) {
                    return tslib_1.__awaiter(this, void 0, void 0, function() {
                        var p, h;
                        return tslib_1.__generator(this, function(v) {
                            switch(v.label){
                                case 0:
                                    if (!f.invitationId) {
                                        events.global.dispatchWhenHandlersAdded([
                                            "accounts.error",
                                            "socialize.error"
                                        ], {
                                            status: "MISSING_REQUIRED_PARAMETER",
                                            statusMessage: "Missing required parameter: invitationId",
                                            errorCode: GSErrors_1.GSErrors.MISSING_REQUIRED_PARAMETER,
                                            errorMessage: "Missing required parameter: invitationId"
                                        });
                                    }
                                    return [
                                        4,
                                        confirmGroupInvitation(f.invitationId)
                                    ];
                                case 1:
                                    p = v.sent();
                                    if (!!p.token) return [
                                        3,
                                        2
                                    ];
                                    events.global.dispatchWhenHandlersAdded([
                                        "accounts.error",
                                        "socialize.error"
                                    ], p);
                                    return [
                                        3,
                                        5
                                    ];
                                case 2:
                                    if (!(tokenStore.get() === null)) return [
                                        3,
                                        3
                                    ];
                                    accounts.addEventHandlers({
                                        onLogin: function() {
                                            return tslib_1.__awaiter(this, void 0, void 0, function() {
                                                return tslib_1.__generator(this, function(f) {
                                                    switch(f.label){
                                                        case 0:
                                                            return [
                                                                4,
                                                                finalizeGroupInvitation(p.token)
                                                            ];
                                                        case 1:
                                                            f.sent();
                                                            return [
                                                                2
                                                            ];
                                                    }
                                                });
                                            });
                                        }
                                    });
                                    h = LocalInfo_1.localInfo.isMobile ? thisScript.globalConf.defaultMobileRegScreenSet : thisScript.globalConf.defaultRegScreenSet;
                                    accounts.showScreenSet({
                                        ignoreApiQueue: true,
                                        screenSet: h
                                    });
                                    return [
                                        3,
                                        5
                                    ];
                                case 3:
                                    return [
                                        4,
                                        finalizeGroupInvitation(p.token)
                                    ];
                                case 4:
                                    v.sent();
                                    v.label = 5;
                                case 5:
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                },
                getGigyaSettings: function getGigyaSettings1(f) {
                    var p = localStorageUtils.getObject("gigyaSettings");
                    return JSONUtils.serialize(p[f]);
                },
                setGigyaSettings: function setGigyaSettings1(f, p) {
                    var h;
                    var v = localStorageUtils.getObject("gigyaSettings", (h = {}, h[f] = {}, h));
                    for(var w in p){
                        v[f][w] = p[w];
                    }
                    localStorageUtils.setItem("gigyaSettings", JSONUtils.serialize(v));
                },
                delGigyaSettings: function delGigyaSettings1(f) {
                    if (!f) {
                        localStorageUtils.removeItem("gigyaSettings");
                    } else {
                        var p = localStorageUtils.getObject("gigyaSettings");
                        if (p) {
                            delete p[f];
                            localStorageUtils.setItem("gigyaSettings", JSONUtils.serialize(p));
                        }
                    }
                },
                handleSpecialFields: function handleSpecialFields1(f) {
                    var p = socialize.Collection;
                    var toTyped1 = function(f, p) {
                        var h = [];
                        var v = 0;
                        var w = f[v];
                        while(w){
                            h.push(new p(w));
                            if (h[v].identities) {
                                convertIdentitiesArrayToObject(h[v]);
                            }
                            w = f[++v];
                        }
                        return h;
                    };
                    if (f.photos) f.photos = new p(f.photos, "photoID");
                    if (f.albums) f.albums = new p(f.albums, "albumID");
                    if (f.contacts) f.contacts = new p(toTyped1(f.contacts, socialize.Contact), "email");
                    if (f.friend) f.friend = new p(toTyped1(f.friend, socialize.Friend), "UID");
                    if (f.user) f.user = new socialize.User(f.user);
                    if (f.friends && f.friends instanceof Array) {
                        var h = [];
                        for(var v = 0; v < f.friends.length; v++){
                            h.push(f.friends[v].UID);
                        }
                        f.UIDs = h.join(",");
                        f.friends = new p(toTyped1(f.friends, socialize.Friend), "UID");
                    }
                },
                convertIdentitiesArrayToObject: function convertIdentitiesArrayToObject1(f) {
                    if (f.identities == null) {
                        f.identities = {};
                        return;
                    }
                    if (f.identities.constructor != Array) {
                        return;
                    }
                    var p = f.identities;
                    f.identities = {};
                    for(var h = 0; h < p.length; h++){
                        f.identities[p[h].provider] = new socialize.Identity(p[h]);
                    }
                },
                addUserInfoToEvent: function addUserInfoToEvent1(f, p, h, v) {
                    var w = f["user"] || f["userInfo"];
                    if (p == null) p = {};
                    if (w != null) {
                        p["user"] = objectUtils.clone(w);
                        if (f["isLoggedIn"] != null) p["user"]["isLoggedIn"] = f["isLoggedIn"];
                        if (f["isSiteUID"] != null) p["user"]["isSiteUID"] = f["isSiteUID"];
                        if (f["iRank"] != null) p["user"]["iRank"] = f["iRank"];
                    }
                    if (h) {
                        objectUtils.extractProperties(f, p, "signature|UIDSig|timestamp|UIDSignature|signatureTimestamp|UID|signKeysUIDSignature|dataCenter|id_token|groups");
                        if (p["user"] != null) {
                            p["UID"] = w.UID;
                            p["isSiteUID"] = w.isSiteUID;
                        }
                    }
                    return p;
                },
                sendEmailNative: function sendEmailNative1(f) {
                    var p = f["userAction"] || {};
                    var h = p["title"] || "";
                    var v = p["linkBack"] || "";
                    document.location.href = "mailto:?to=&subject=" + URLUtils.URLEncode(h) + "&body=" + URLUtils.URLEncode(v);
                    socialize.sendEmail(f, {
                        dontSendEmail: true
                    });
                },
                getApi: function getApi1(f) {
                    return apis[f];
                },
                BaseApi: function BaseApi1(f, p) {
                    this.methodName = f;
                    this.settings = p;
                    this.addAlias();
                    apis[f] = this;
                },
                __pluginsCoreLoaded: false,
                UiApi: function UiApi1(f, p, h, v, w, m) {
                    if (h === void 0) {
                        h = {};
                    }
                    if (v === void 0) {
                        v = {};
                    }
                    if (w === void 0) {
                        w = "";
                    }
                    if (m === void 0) {
                        m = {};
                    }
                    var b = _super.call(this, UiApi1.getApiName(p, f, m), m) || this;
                    b.methodName = f;
                    b.jsName = p;
                    b.settings = m;
                    m.defaultParams = h || {};
                    m.defaultPopupParams = v || {};
                    m.requiredParams = w || "";
                    return b;
                },
                BaseObject: function BaseObject1(f, p, h) {
                    if (h === void 0) {
                        h = true;
                    }
                    this.params = f;
                    this.explicitParams = p;
                    this._logger = logger;
                    this._eventDispatcher = function(f, p) {
                        return events.dispatchForWidget(f, p);
                    };
                    this._errorDispatcher = events;
                    this._globalEventsManager = events.global;
                    this._isDisposed = false;
                    this._eventWrappers = {};
                    this._globalEventHandlers = {};
                    this._id = ++BaseObject1.instanceCounter;
                    this.params = f ? objectUtils.clone(f) : {};
                    this.explicitParams = p ? objectUtils.clone(p) : {};
                    if (h) {
                        this.validateParams();
                    }
                    for(var v in f){
                        if (BaseObject1[v]) {
                            BaseObject1[v] = f[v];
                        }
                    }
                },
                EventWrapper: function EventWrapper1(f) {
                    if (f === void 0) {
                        f = [];
                    }
                    this._handlers = f;
                },
                DeviceTypes: {
                    0: "_undefined",
                    1: "desktop",
                    2: "mobile",
                    3: "auto",
                    _undefined: 0,
                    desktop: 1,
                    mobile: 2,
                    auto: 3
                },
                bookmarkSize: {
                    facebook: {
                        w: 640,
                        h: 370
                    },
                    twitter: {
                        w: 880,
                        h: 585
                    },
                    messenger: {
                        w: 710,
                        h: 905
                    },
                    linkedin: {
                        w: 560,
                        h: 500
                    },
                    yahoobookmarks: {
                        w: 840,
                        h: 975
                    },
                    digg: {
                        w: 1010,
                        h: 1045
                    },
                    googlebookmarks: {
                        w: 710,
                        h: 905
                    },
                    mixi: {
                        w: 640,
                        h: 470
                    },
                    googleplus: {
                        w: 496,
                        h: 420
                    }
                },
                socializeAddEventHandlers: function socializeAddEventHandlers1() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        thisScript.globalConf,
                        f
                    ]);
                    var v = h["namespace"] ? h["namespace"] : "socialize";
                    for(var w in h){
                        if (w.indexOf("on") == 0) globalEvents.add(w, h[w], h["listenerType"], h["context"], v, h);
                    }
                    if (typeof h["callback"] == "function") {
                        h["callback"]({
                            status: "OK",
                            statusMessage: "",
                            errorCode: 0,
                            errorMessage: "",
                            operation: "addEventHandlers",
                            context: h["context"]
                        });
                    }
                },
                accountsAddEventHandlers: function accountsAddEventHandlers1() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    socializeAddEventHandlers(objectUtils.merge([
                        f,
                        {
                            namespace: "accounts"
                        }
                    ]));
                },
                isLoggedIn: function isLoggedIn1() {
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        arguments
                    ]);
                    socialize.getUserInfo(f, {
                        callback: function(p) {
                            var h = p["user"];
                            var v = {
                                loggedIn: h ? validationUtils.isExplicitTrue(h["isLoggedIn"]) : false
                            };
                            objectUtils.extractProperties(p, v, "status|statusMessage|callId|errorCode|errorMessage|errorDetails|context");
                            if (f["callback"]) f["callback"](v);
                        }
                    });
                },
                waitForService: function waitForService1() {
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        arguments
                    ]);
                    var p = f["service"];
                    if (!p) return;
                    p = p.toLowerCase();
                    var h = f["callback"];
                    if (p == "fbconnect" || p == "facebook") {
                        if (!facebookExternal.isLoaded()) {
                            socialize.addEventHandlers({
                                listenerType: "component"
                            }, {
                                onFacebookLoaded: h,
                                context: f["context"]
                            });
                        } else {
                            h({
                                context: f["context"]
                            });
                        }
                    }
                    if (p == "googleplus") {
                        if (!googlePlusExternal.isLoaded()) {
                            socialize.addEventHandlers({
                                listenerType: "component"
                            }, {
                                onGooglePlusLoaded: h,
                                context: f["context"]
                            });
                        } else {
                            h({
                                context: f["context"]
                            });
                        }
                    }
                },
                postBookmark: function postBookmark1() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    return tslib_1.__awaiter(this, void 0, void 0, function() {
                        var p, h, v, w, m, b, y, S, E, C, I, R, A, I, R, U;
                        return tslib_1.__generator(this, function(x) {
                            switch(x.label){
                                case 0:
                                    p = objectUtils.merge([
                                        thisScript.globalConf,
                                        f
                                    ]);
                                    if (!p["APIKey"]) {
                                        p["APIKey"] = thisScript.APIKey;
                                    }
                                    h = {};
                                    objectUtils.extractProperties([
                                        p
                                    ], h, consts_1.postBookmarkSchema);
                                    if (!h["url"] && h["URL"]) {
                                        h["url"] = h["URL"];
                                        delete h["URL"];
                                    }
                                    h["sdk"] = "js_" + build.version;
                                    if (!h["url"] && h["userAction"] && !h["userAction"]["linkBack"]) {
                                        v = document.getElementsByTagName("meta");
                                        for(w = 0; w < v.length; w++){
                                            if (v[w].getAttribute("property") === "og:url" && v[w].getAttribute("content")) {
                                                h["url"] = v[w].getAttribute("content");
                                                break;
                                            }
                                        }
                                    }
                                    if (!h["url"] && h["userAction"] && !h["userAction"]["linkBack"]) {
                                        h["url"] = document.location.href;
                                    }
                                    h["provider"] = h["provider"] ? (h["provider"] + "").toLowerCase() : "";
                                    if (h["provider"] === "facebook") {
                                        h["providerKey"] = Opengraph.getMetaTag("fb:app_id");
                                    }
                                    return [
                                        4,
                                        _.apiAdapter.getGmidTicket()
                                    ];
                                case 1:
                                    m = x.sent();
                                    if (m) {
                                        h["gmidTicket"] = m;
                                    }
                                    b = _.bookmarkSize[h["provider"]] || {};
                                    y = {
                                        width: p["popupWidth"] || b.w,
                                        height: p["popupHeight"] || b.h,
                                        top: p["popupPositionY"],
                                        left: p["popupPositionX"],
                                        menubar: 0,
                                        resizable: 1,
                                        scrollbars: 1
                                    };
                                    if (p["enablePopupLocation"]) {
                                        y.location = 1;
                                        y.toolbar = 1;
                                    } else {
                                        y.toolbar = 0;
                                    }
                                    S = _.apiAdapters["web"] ? _.apiAdapters["web"].tokenStore : undefined;
                                    if (S) {
                                        h["login_token"] = _.apiAdapters.web.tokenStore.get();
                                    }
                                    if (h["provider"] === "twitter" && LocalInfo_1.localInfo.isIOS) {
                                        C = h["userAction"] || {};
                                        I = {
                                            url: C["linkBack"] || h["url"],
                                            text: C["title"] || h["title"]
                                        };
                                        R = "https://twitter.com/intent/tweet?{0}";
                                        E = stringUtilsUtils.format(R, keyValueUtils.serialize(I));
                                        A = p["sourceData"] ? objectUtils.clone(p["sourceData"]) : {};
                                        A.provider = h["provider"];
                                        A.url = I.url;
                                        legacyReports.report("share", p["APIKey"], p["cid"], p["source"], A, {
                                            tags: p["tags"]
                                        });
                                    } else {
                                        I = keyValueUtils.serialize(h);
                                        R = "https://" + _.getApiDomain("socialize") + "/gs/bookmark.aspx?{0}";
                                        E = stringUtilsUtils.format(R, I);
                                    }
                                    LegacyLogger_1.logCall("postBookmark", h);
                                    globalEvents.dispatch({
                                        eventName: "beforeRequest",
                                        methodName: "socialize.postBookmark",
                                        rawParams: p,
                                        params: h
                                    });
                                    U = h["provider"] === "whatsapp" ? "_self" : "gs_bookmark_" + h["provider"];
                                    winUtils.open(E, U, y);
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                },
                refreshUI: function refreshUI1() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        thisScript.globalConf,
                        f
                    ]);
                    var v = h["callback"];
                    socialize.getUserInfo(h, {
                        callback: function(f) {
                            var p = {
                                eventName: "login",
                                isInternal: true
                            };
                            if (h["provider"]) p["provider"] = h["provider"];
                            InternalFlows_1.addUserInfoToEvent(f, p, true);
                            if (h["context"]) p["context"] = h["context"];
                            globalEvents.dispatch(p);
                            if (typeof v == "function") v(f);
                        }
                    });
                },
                trackReferrals: function trackReferrals1() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = {
                        "digg.com": "digg",
                        "stumbleupon.com": "stumbleupon",
                        "technorati.com": "technorati",
                        "t.co": "twitter",
                        "plus.url.google.com": "googlePlus",
                        "facebook.com": "facebook",
                        "linkedin.com": "linkedIn",
                        "pinterest.com": "pinterest",
                        "mixi.jp": "mixi",
                        "b.hatena.ne.jp": "hatena",
                        "line.me": "line"
                    };
                    var v;
                    var w = objectUtils.merge([
                        thisScript.globalConf,
                        f
                    ]);
                    var m = {
                        eventName: "linkback",
                        CID: w["cid"]
                    };
                    var b = {};
                    var y = {};
                    if (document.location.href.indexOf("#") != -1) {
                        y = keyValueUtils.deserialize(document.location.href.split("#")[1]);
                    }
                    if (document.location.href.indexOf("?") != -1) {
                        b = keyValueUtils.deserialize(document.location.href.split("?")[1].split("#")[0]);
                    }
                    socialize.updateRefUID(w["APIKey"], y, b);
                    var S = y["_gus"] != null || b["_gus"] != null;
                    if (S) {
                        m.CID = y["_gucid"] || b["_gucid"];
                        m.shortCode = y["_gsc"] || b["_gsc"];
                        m.provider = y["_gup"] || b["_gup"];
                    }
                    if (!v) {
                        var E;
                        var C = {
                            url: document.location.href,
                            ref: document.referrer
                        };
                        if (b["fb_ref"]) {
                            var I = keyValueUtils.deserialize(b["fb_ref"], ":");
                            C["uuid"] = I["uu"];
                            C["sn"] = I["p"];
                            E = I["s"];
                        } else if (document.referrer && document.referrer.indexOf("://") != -1) {
                            var R = document.referrer.split("://")[1].split("/")[0];
                            if (R.indexOf("www.") == 0) {
                                R = R.split("www.")[1];
                            }
                            if (h[R]) {
                                m.provider = C["sn"] = h[R];
                            }
                        }
                        if (!C["sn"] && (!document.referrer || document.referrer.indexOf("http://soc.li") == -1 && document.referrer.indexOf("https://shr.gs") == -1)) {
                            var A = document.location.href.split("#guid=");
                            if (A.length > 1) {
                                var U = A[1].split("#")[0].split("&")[0];
                                if (U != _.apiAdapter.getTokenParam(w["APIKey"], "UUID")) {
                                    C["sn"] = "AddressBarShares";
                                    C["uuid"] = U;
                                    if (U == "_") delete C["uuid"];
                                    document.location.replace("#");
                                    legacyReports.trackAddressBarShares();
                                    C.url = document.location.href.split("#")[0];
                                }
                            }
                        }
                        if (C["uuid"]) {
                            setGigRefUidCookie(w["APIKey"], C["uuid"]);
                        }
                        if (C["sn"] && !S) legacyReports.report("linkback", w["APIKey"], w["cid"], E, null, C);
                        if (C["sn"] || S) globalEvents.dispatch(objectUtils.removeUndefined(m));
                        v = true;
                    }
                    if (typeof w["callback"] == "function") w["callback"]({
                        status: "OK",
                        statusMessage: "",
                        operation: "trackReferrals",
                        context: w["context"],
                        errorMessage: "",
                        errorCode: 0
                    });
                },
                updateRefUID: function updateRefUID1(f, p, h) {
                    if (!f) f = thisScript.globalConf["APIKey"];
                    if (!p) {
                        p = {};
                        if (document.location.href.indexOf("#") != -1) {
                            p = keyValueUtils.deserialize(document.location.href.split("#")[1]);
                        }
                    }
                    if (!h) {
                        h = {};
                        if (document.location.href.indexOf("?") != -1) {
                            h = keyValueUtils.deserialize(document.location.href.split("?")[1].split("#")[0]);
                        }
                    }
                    if (p["guid"] && p["guid"] != "_") {
                        setGigRefUidCookie(f, p["guid"]);
                    }
                    var v = p["_giguuid"] || h["_giguuid"];
                    if (v) {
                        setGigRefUidCookie(f, v);
                    }
                },
                setGigRefUidCookie: function setGigRefUidCookie1(f, p) {
                    if (FlagService_1.FlagService.setCookieSameSiteLaxLowPriority) {
                        cookie_1.default.set(this.getGigRefUidCookieKey(f), p, null, null, null, "Lax");
                    } else {
                        cookie_1.default.set(this.getGigRefUidCookieKey(f), p);
                    }
                },
                hideUI: function hideUI1() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        thisScript.globalConf,
                        f
                    ]);
                    if (typeof h["callback"] == "function") {
                        var v = {
                            status: "OK",
                            statusMessage: "",
                            operation: "hideUI",
                            context: h["context"],
                            errorMessage: "",
                            errorCode: 0
                        };
                        h["callback"](v);
                    }
                },
                submitUserForm: function submitUserForm1() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = {};
                    var v = objectUtils.merge([
                        thisScript.globalConf,
                        f
                    ]);
                    var w = document.getElementById(v["form"]);
                    if (!w) {
                        var m = document.getElementsByName(v["form"]);
                        if (m && m.length > 0) v["form"] = m[0];
                    }
                    for(var b = 0; b < w["elements"].length; b++){
                        var y = w["elements"][b];
                        if (y.name) {
                            var S = y.name.split(".");
                            var E = h;
                            for(var C = 0; C < S.length - 1; C++){
                                var I = S[C];
                                if (!E[I]) E[I] = {};
                                E = E[I];
                            }
                            E[S[S.length - 1]] = y.value;
                        }
                    }
                    v["data"] = h;
                    gcs.setUserData(v);
                },
                getProviderShareCounts: function getProviderShareCounts1() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        thisScript.globalConf,
                        f
                    ]);
                    scriptUtils.load(cdn_1.getCdnResource("/js/gigya.services.socialize.plugins.shareCounts.min.js"), null, function() {
                        socialize.plugins.shareCounts.getProviderShareCounts(h);
                    }, true);
                },
                openDelegateAdminHandler: function openDelegateAdminHandler1(f) {
                    if (!f) {
                        f = {};
                    }
                    var p = window.open("", "_blank");
                    f["callback"] = function(h) {
                        if (h.errorCode !== GSErrors_1.GSErrors.OK) {
                            p.close();
                            if (typeof f.onError === "function") {
                                f.onError(h);
                            }
                        } else if (!h.targetUrl || !h.id_token) {
                            p.close();
                            logger.error("accounts.b2b.delegatedAdminLogin - missing required params", {
                                targetURL: h.targetUrl,
                                id_token: h.id_token
                            });
                        } else {
                            HTTPUtils.redirect(h.targetUrl, [
                                {
                                    id_token: h.id_token
                                }
                            ], h["method"] ? h["method"] : "POST", undefined, p.document);
                        }
                    };
                    accounts.b2b.delegatedAdminLogin(f);
                },
                passkeyService: {
                    eventHandlers: {}
                },
                runJsUnitTests: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                loadBasePlugin: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                bootstrap: {
                    parseScriptRetries: 0,
                    init: function init1() {
                        var f = this;
                        logger.group("websdk root");
                        logger.info("partner settings:", partnerSettings);
                        logger.info("local info:", LocalInfo_1.localInfo);
                        var p = logger.group("bootstrap websdk");
                        queueUtils.hold("bootstrap", "API");
                        if ((LocalInfo_1.localInfo.isIE6 || LocalInfo_1.localInfo.isIE7 || LocalInfo_1.localInfo.isIE8 || LocalInfo_1.localInfo.isIE9 || LocalInfo_1.localInfo.isIE10) && typeof console != "undefined" && typeof console.log != "undefined") console.log("Gigya: It looks like you're using an old version of Internet Explorer. This browser is not supported. Please upgrade to a newer version of IE.");
                        parseScriptElement(function(h) {
                            return tslib_1.__awaiter(f, void 0, void 0, function() {
                                var f, v, w;
                                var m, b, y, S;
                                return tslib_1.__generator(this, function(E) {
                                    switch(E.label){
                                        case 0:
                                            return [
                                                4,
                                                apiBootstrap_1.getSdkConfig()
                                            ];
                                        case 1:
                                            f = E.sent();
                                            _.config = {
                                                flags: f.flags,
                                                plugins: f.plugins,
                                                api: f.api,
                                                hostedPagesDomain: f.hostedPagesDomain,
                                                toggles: {
                                                    linkAccountV2: (m = f.toggles) === null || m === void 0 ? void 0 : m.linkAccountV2,
                                                    httpStatusCodes: (b = f.toggles) === null || b === void 0 ? void 0 : b.httpStatusCodes
                                                },
                                                consent: {
                                                    hasLicense: (y = f.hasConsentLicense) !== null && y !== void 0 ? y : false
                                                }
                                            };
                                            if (h) {
                                                replaceContext(f);
                                            }
                                            v = thisScript.globalConf["customEventMap"];
                                            if (v) {
                                                logger.info("adding custom event map");
                                                events.addMap(v);
                                            }
                                            logger.group("init api adapter");
                                            initApiAdapter(function() {
                                                logger.groupEnd("init api adapter");
                                                isReady = true;
                                                if (typeof onGigyaServiceReady === "function") {
                                                    logger.info("invoke local onGigyaServiceReady event");
                                                    try {
                                                        onGigyaServiceReady("socialize");
                                                    } catch (f) {
                                                        logger.warn("gigya: error while invoking onGigyaServiceReady", f);
                                                    }
                                                }
                                                if (typeof thisScript.globalConf["onGigyaServiceReady"] === "function") {
                                                    logger.info("invoke globalconf's onGigyaServiceReady event");
                                                    try {
                                                        thisScript.globalConf["onGigyaServiceReady"]("socialize");
                                                    } catch (f) {
                                                        logger.warn("gigya: error while invoking onGigyaServiceReady injected from server", f);
                                                    }
                                                }
                                                checkReturnFromRedirect(function() {
                                                    queueUtils.release("bootstrap", "API");
                                                    if (!LocalInfo_1.localInfo.isNativeMobileApp) {
                                                        injectExternalSdks();
                                                        autoLogin();
                                                        functionsUtils.invokeOnPageLoad(function() {
                                                            return window.setTimeout(socialize.trackReferrals, 1000);
                                                        });
                                                    }
                                                    p.end();
                                                });
                                            });
                                            warnOnUnsupportedBrowser();
                                            loadOmniture();
                                            loadABTesting();
                                            w = {
                                                sref: (S = document.referrer) === null || S === void 0 ? void 0 : S.substr(0, 1000)
                                            };
                                            if (thisScript.globalConf["actionCounterPath"]) w["actionCounterPath"] = thisScript.globalConf["actionCounterPath"];
                                            return [
                                                2
                                            ];
                                    }
                                });
                            });
                        });
                    },
                    warnOnUnsupportedBrowser: function warnOnUnsupportedBrowser1() {},
                    loadABTesting: function loadABTesting1() {
                        if (abTesting) {
                            for(var f in abTesting){
                                if (f === "optimizely") {
                                    var p = abTesting[f];
                                    if (p.serviceParams && p.serviceParams.hasOwnProperty("apiKey")) {
                                        var h = window.location.pathname;
                                        var v = false;
                                        if (p.disabledPaths) {
                                            for(var w = 0; w < p.disabledPaths.length; w++){
                                                if (p.disabledPaths[w].indexOf(h) > -1) {
                                                    v = true;
                                                    break;
                                                }
                                            }
                                        }
                                        if (!v) {
                                            for(var w = 0; w < p.enabledPaths.length; w++){
                                                if (h.indexOf(p.enabledPaths[w]) > -1) {
                                                    scriptUtils.load("//cdn.optimizely.com/js/" + p.serviceParams["apiKey"] + ".js");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    startDebugIfNeeded: function startDebugIfNeeded1(f) {
                        if (!LocalInfo_1.localInfo.isNativeMobileApp && _.apiAdapter.getStorage().getItem("gig_debug") == "1") {
                            socialize.showDebugUI({
                                ignoreApiQueue: true,
                                waitForDebug: false,
                                onLoad: f
                            });
                        } else {
                            f();
                        }
                    },
                    loadOmniture: function loadOmniture1() {
                        functionsUtils.invokeOnPageLoad(function() {
                            if (typeof window["gigya_omniture_conf"] != "undefined") scriptUtils.load(cdn_1.getCdnResource("/js/GenesisExchange_Gigya.min.js"));
                        });
                    },
                    parseLang: function parseLang1(f) {
                        if (f === void 0) {
                            f = defaultLang;
                        }
                        var p = f.replace("en-US", "en");
                        f = f.replace("_", "-").toLowerCase();
                        var h = f.split("-");
                        var v = h[0];
                        var w;
                        if (h.length > 1) {
                            w = h[1];
                        } else {
                            w = v;
                        }
                        w = w.toUpperCase();
                        var m;
                        switch(f){
                            case "es-mx":
                                m = f;
                                w = "ES";
                                break;
                            case "pt-br":
                            case "zh-cn":
                            case "zh-hk":
                            case "zh-tw":
                            case "te-st":
                            case "fr-inf":
                            case "de-inf":
                            case "es-inf":
                            case "nl-inf":
                            case "lt-lt":
                            case "lv-lv":
                            case "et-ee":
                                m = f;
                                break;
                            default:
                                m = v;
                        }
                        return {
                            full: v + "-" + w,
                            langCode: m,
                            countryCode: w,
                            originalLang: p
                        };
                    },
                    parseScriptElement: function parseScriptElement1(f) {
                        return tslib_1.__awaiter(this, void 0, void 0, function() {
                            var p, h, v, w, m, b, y, S;
                            return tslib_1.__generator(this, function(E) {
                                switch(E.label){
                                    case 0:
                                        p = gigyaScriptEl_1.getGigyaScriptElement();
                                        if (!(p && !window["__gig_hidescript"])) return [
                                            3,
                                            3
                                        ];
                                        logger.info("parsing gigya script");
                                        h = URLUtils.getParamsFromURL(p.src, true) || {};
                                        v = JSONUtils.deserialize(partnerSettings.siteGroupGlobalConf) || {};
                                        w = JSONUtils.deserialize(partnerSettings.globalConf, {}, {
                                            siteGroupGlobalConf: v
                                        }) || {};
                                        m = JSONUtils.deserialize(p.innerHTML) || {};
                                        b = window["__gigyaConf"] || {};
                                        thisScript = {
                                            scriptElement: p,
                                            protocol: p.src.indexOf("https:") === 0 ? "https" : "http",
                                            baseDomain: p.src.split("/")[2],
                                            APIKey: h["apikey"],
                                            lang: parseLang(h["lang"] || b["lang"] || m["lang"] || w["lang"] || v["lang"]),
                                            globalConf: objectUtils.merge([
                                                partnerSettings.plugins || {},
                                                v,
                                                w,
                                                m,
                                                b
                                            ], false),
                                            URLParams: h
                                        };
                                        thisScript.globalConf["lang"] = thisScript.lang.langCode;
                                        if (!thisScript.APIKey && typeof console === "object" && console.warn) {
                                            console.warn("**** WARNING - Loading socialize.js without an APIKey parameter is unsupported and may result in an unexpected behavior.  ****");
                                        } else {
                                            thisScript.globalConf["APIKey"] = thisScript.APIKey;
                                        }
                                        y = false;
                                        if (!shouldReplaceContext()) return [
                                            3,
                                            2
                                        ];
                                        return [
                                            4,
                                            getContext()
                                        ];
                                    case 1:
                                        S = E.sent();
                                        if (S === null || S === void 0 ? void 0 : S.apiKey) {
                                            logger.warn("APIKey changed. using APIKey: " + S.apiKey);
                                            apiKey = thisScript.APIKey = thisScript.globalConf["APIKey"] = S.apiKey;
                                            y = true;
                                        }
                                        centralizedSSO_1.setSsoContext(S);
                                        E.label = 2;
                                    case 2:
                                        f(y);
                                        return [
                                            3,
                                            4
                                        ];
                                    case 3:
                                        if (exports.parseScriptRetries < 10) {
                                            exports.parseScriptRetries++;
                                            window.setTimeout(function() {
                                                parseScriptElement1(f);
                                            }, 200);
                                        } else {
                                            thisScript = {
                                                scriptElement: null,
                                                protocol: LocalInfo_1.localInfo.protocol,
                                                baseDomain: "https://cdns.gigya.com",
                                                APIKey: "",
                                                lang: parseLang(""),
                                                globalConf: {},
                                                URLParams: {}
                                            };
                                            f(false);
                                        }
                                        E.label = 4;
                                    case 4:
                                        return [
                                            2
                                        ];
                                }
                            });
                        });
                    },
                    initApiAdapter: function initApiAdapter1(f) {
                        var p = window["__gigAPIAdapterSettings"];
                        var h = getAdapterType(p);
                        LocalInfo_1.localInfo.isNativeMobileApp = h === "mobile";
                        logger.info("selecting api adapter: " + h);
                        _.apiAdapter = _.apiAdapters[h].newApiAdapter(p);
                        functionsUtils.createAlias("gigya.auth.loginToken.getTokenParam", _.apiAdapter.getTokenParam);
                        startDebugIfNeeded(function() {
                            _.apiAdapter.init(f, 3);
                        });
                    },
                    autoLogin: function autoLogin1() {
                        if (thisScript.globalConf["autoLogin"]) {
                            logger.info("triggering auto-login");
                            facebookExternal.autoLogin();
                            googlePlusExternal.autoLogin();
                        }
                    },
                    checkReturnFromRedirect: function checkReturnFromRedirect1(f) {
                        var p = utils.URL.getParamsFromURL(document.location.href);
                        if (p["mode"] && p["mode"] === "error") {
                            events.global.dispatchWhenHandlersAdded([
                                "accounts.error",
                                "socialize.error"
                            ], p);
                            f();
                        } else if (p["errorCode"] && p["regToken"]) {
                            logger.info("returned from redirect with regToken (errorCode: " + p["errorCode"] + ")");
                            InternalFlows_1.checkCompleteRegistration(p, thisScript.globalConf, "", function() {
                                return f();
                            });
                        } else {
                            f();
                        }
                    },
                    injectExternalSdks: function injectExternalSdks1() {
                        queueUtils.queueForExecution("API", function() {
                            functionsUtils.invokeOnPageLoad(function() {
                                if (providersConfig.facebook) {
                                    logger.info("loading facebook sdk");
                                    facebookExternal.load(false);
                                }
                                if (providersConfig.googlePlus) {
                                    logger.info("loading google plus sdk");
                                    googlePlusExternal.load();
                                }
                            });
                        });
                    }
                },
                sso: {},
                logoutBehaviour: {
                    logoutBeforeServerResponse: true,
                    alwaysSendLogoutToServer: false
                },
                arApiList: [
                    {
                        methodName: "socialize.login",
                        settings: {
                            oauth: true,
                            preprocessor: function(f, p) {
                                if (globalAccount.dataCenter) f["dataCenter"] = globalAccount.dataCenter;
                                p();
                            }
                        },
                        schema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication",
                        requiresSession: false,
                        adapterSettings: {
                            clearSessionCondition: function(f) {
                                return f["loginMode"] !== "link" && f["loginMode"] !== "reAuth";
                            },
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.addConnection",
                        settings: {
                            oauth: true
                        },
                        schema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.requestPermissions",
                        settings: {
                            oauth: true,
                            defaultParams: {
                                forcePermissions: true
                            }
                        },
                        schema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.socialLogin",
                        settings: {
                            oauth: true,
                            preprocessor: function(f, p) {
                                if (globalAccount.dataCenter) f["dataCenter"] = globalAccount.dataCenter;
                                p();
                            }
                        },
                        schema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication",
                        requiresSession: false,
                        adapterSettings: {
                            clearSessionCondition: function(f) {
                                return f["loginMode"] !== "link" && f["loginMode"] !== "reAuth";
                            },
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "showDebugUI",
                        settings: {
                            allowPopup: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "socialize.plugins.debug"
                    },
                    {
                        methodName: "showMyPhotoUI",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "accounts.plugins.profilePhoto",
                        namespace: "accounts",
                        className: "profilePhoto.MyPhotoPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "runJsUnitTests",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "_.plugins.jsUtRunner",
                        namespace: "_",
                        className: "JsUtRunner.Jasmine.JasmineUtRunnerPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "loadBasePlugin",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "_.plugins.mock",
                        namespace: "_",
                        className: "Mock.MockPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "showLoginUI_v1",
                        settings: {
                            allowPopup: true,
                            defaultParams: {
                                width: 120,
                                height: 110
                            },
                            defaultPopupParams: {
                                width: 280,
                                height: 220
                            },
                            requiredParams: ""
                        },
                        jsName: "socialize.plugins.login"
                    },
                    {
                        methodName: "showLoginUI_v2",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "socialize.plugins.login_v2",
                        namespace: "socialize",
                        className: "login_v2.LoginPlugin",
                        instanceMethods: [],
                        pluginType: function t1() {
                            var f = null !== i && i.apply(this, arguments) || this;
                            return f.pixelRatio = window.devicePixelRatio > 1 ? 2 : 1, f.imageBase = _.getCdnResource("/gs/i/HTMLLogin"), f.showEdit = !1, f.showWelcome = !1, f.loginChangeEventHandler = function() {
                                return f.render();
                            }, f.pluginConfig = {
                                arrowWidth: 16,
                                floatingArrowWidth: 15,
                                arrowHeight: 14,
                                defaultlastLoginButtonSize: 30,
                                defaultButtonSize: 30,
                                defaultButtonSizeOnPopup: 35,
                                headerHeight: 18,
                                footerHeight: 18,
                                rowSpacing: 5
                            }, f.onUserStateChange = function(p) {
                                return f.userStateChanged(p);
                            }, f;
                        },
                        injectionInfo: {
                            methodName: "showLoginUI_v2",
                            jsName: "gigya.services.socialize.plugins.login_v2",
                            namespace: "socialize",
                            className: "login_v2.LoginPlugin",
                            pluginType: function t1() {
                                var f = null !== i && i.apply(this, arguments) || this;
                                return f.pixelRatio = window.devicePixelRatio > 1 ? 2 : 1, f.imageBase = _.getCdnResource("/gs/i/HTMLLogin"), f.showEdit = !1, f.showWelcome = !1, f.loginChangeEventHandler = function() {
                                    return f.render();
                                }, f.pluginConfig = {
                                    arrowWidth: 16,
                                    floatingArrowWidth: 15,
                                    arrowHeight: 14,
                                    defaultlastLoginButtonSize: 30,
                                    defaultButtonSize: 30,
                                    defaultButtonSizeOnPopup: 35,
                                    headerHeight: 18,
                                    footerHeight: 18,
                                    rowSpacing: 5
                                }, f.onUserStateChange = function(p) {
                                    return f.userStateChanged(p);
                                }, f;
                            },
                            constructor: function UiApi1(f, p, h, v, w, m) {
                                if (h === void 0) {
                                    h = {};
                                }
                                if (v === void 0) {
                                    v = {};
                                }
                                if (w === void 0) {
                                    w = "";
                                }
                                if (m === void 0) {
                                    m = {};
                                }
                                var b = _super.call(this, UiApi1.getApiName(p, f, m), m) || this;
                                b.methodName = f;
                                b.jsName = p;
                                b.settings = m;
                                m.defaultParams = h || {};
                                m.defaultPopupParams = v || {};
                                m.requiredParams = w || "";
                                return b;
                            },
                            addInstanceMethodsAliases: function() {
                                for(var f = 0; f < this.instanceMethods.length; f++){
                                    this.createInstanceMethodAlias(this.instanceMethods[f]);
                                }
                            },
                            createInstanceMethodAlias: function(f) {
                                var p = this;
                                functionsUtils.createAlias("gigya." + this.namespace + "." + f, function(h) {
                                    if (!p.injectionInfo) {
                                        LegacyLogger_1.addLog("invalid injection info", p, false);
                                        return;
                                    }
                                    var v = p.getPublicMethod(f);
                                    var w = UiApiHelpers_1.getPluginInstance(h, p.injectionInfo);
                                    if (!w) {
                                        LegacyLogger_1.addLog("couldn't find instance", p, false);
                                    } else {
                                        var m = [];
                                        arrayUtils.forEach(v.argNames, function(f) {
                                            if (f && h[f] !== undefined) m.push(h[f]);
                                        });
                                        w[v.instanceMethod].apply(w, m);
                                    }
                                });
                            },
                            getPublicMethod: function(f) {
                                var p;
                                if (this.injectionInfo.publicMethods) {
                                    p = this.injectionInfo.publicMethods[f];
                                }
                                if (!p) {
                                    throw new Error("public method " + f + " is not configured for " + this.injectionInfo.name);
                                }
                                return p;
                            },
                            preprocessRequest: function(f, p) {
                                var h = this;
                                _super.prototype.preprocessRequest.call(this, f, function() {
                                    if (!f["source"]) h.setSourceData(f);
                                    if (p) p();
                                });
                            },
                            run: function(f, p) {
                                var h = this;
                                if (this.settings.silentMode) {
                                    logger.warn("Deprecated Feature: " + this.methodName);
                                    var v = f["callback"];
                                    if (typeof v === "function") v();
                                    return;
                                }
                                if (!this.settings.waitForAPIQueue || f["ignoreApiQueue"]) {
                                    this.startUI(f, p);
                                } else {
                                    queueUtils.queueForExecution("API", function() {
                                        h.startUI(f, p);
                                    });
                                }
                            },
                            startUI: function(f, p) {
                                var h = this;
                                f = objectUtils.clone(f);
                                this.prepareParameters(f);
                                this.preprocessRequest(f, function() {
                                    if (!h.settings.useBasePlugin) {
                                        logger.info("loading legacy plugin");
                                        h.legacyStartUI(f, p);
                                    } else {
                                        logger.info("loading modern plugin");
                                        h.loadPluginJS(f, p, function(v) {
                                            queueUtils.queueForExecution("UI", function() {
                                                if (v && h.className) {
                                                    h.pluginType = h.getPluginType();
                                                    h.injectionInfo = h.pluginType.injectionInfo(h);
                                                }
                                                var fnStart1 = function() {
                                                    h.startPlugin(f, p);
                                                };
                                                if (f["waitForDebug"] == false) {
                                                    fnStart1();
                                                } else {
                                                    queueUtils.queueForExecution("debug", fnStart1);
                                                }
                                            });
                                        });
                                    }
                                });
                            },
                            startPlugin: function(f, p) {
                                var h = this;
                                globalEvents.dispatch({
                                    eventName: "beforePluginRequest",
                                    methodName: this.methodName,
                                    params: f,
                                    explicitParams: p
                                }, f);
                                var v = f["originalMethodName"] || this.methodName;
                                LegacyLogger_1.logCall(v, f);
                                legacyReports.reportLoad(v, f);
                                if (this.pluginType) {
                                    if (f) {
                                        var w = UiApiHelpers_1.getPluginInstance(f, this.injectionInfo);
                                        if (w && w.dispose && !f["_allowMultipleInstances"] && !f["newModal"]) {
                                            w.dispose();
                                        }
                                    }
                                    var m = new this.pluginType(f, p, this.injectionInfo);
                                    UiApiHelpers_1.setPluginInstance(f, this.injectionInfo, m);
                                    m.onDisposedEvent().add(function() {
                                        return UiApiHelpers_1.removePluginInstance(f, h.injectionInfo);
                                    });
                                    logger.info("starting plugin " + this.injectionInfo.name + " with params", m.params);
                                    m.start();
                                    if (m.containerID) {
                                        var b = document.getElementById(m.containerID);
                                        if (b) {
                                            b["gigyaPluginInstance"] = m;
                                        }
                                    }
                                    if (f["getInstance"]) {
                                        f["getInstance"](m);
                                    }
                                } else {
                                    functionsUtils.callFunction("gigya." + this.jsName + "." + this.methodName, [
                                        f,
                                        f,
                                        f
                                    ]);
                                }
                            },
                            loadPluginJS: function(f, p, h) {
                                if (this.wasPluginJSLoaded(f)) {
                                    logger.info("plugin was already loaded");
                                    if (h) h(false);
                                } else {
                                    var v = false;
                                    var w = cdn_1.getCdnResource("/js/");
                                    var m = "gigya.services." + this.jsName;
                                    var b = (f["lang"] ? "lang=" + f["lang"] : "") + ("&version=" + build.version);
                                    var y = w + m + ".min.js" + ("?" + b);
                                    var S = w + "gigya.services.plugins.base.min.js?services=" + m + ("&" + b);
                                    var E = void 0;
                                    if (!exports.__pluginsCoreLoaded) {
                                        logger.debug("locking queue to fetch basePlugin");
                                        E = S;
                                        exports.__pluginsCoreLoaded = true;
                                        v = true;
                                        queueUtils.hold("pluginsJS", "UI");
                                    } else {
                                        E = y;
                                    }
                                    logger.info("loading " + m);
                                    globalEvents.dispatch({
                                        eventName: "beforePluginLoad",
                                        methodName: this.methodName,
                                        explicitParams: p,
                                        params: f
                                    }, f);
                                    scriptUtils.load(E, null, function() {
                                        if (v) queueUtils.release("pluginsJS", "UI");
                                        if (h) h(true);
                                    }, true, undefined, [
                                        y,
                                        S
                                    ]);
                                }
                            },
                            wasPluginJSLoaded: function(f) {
                                var p = "gigya." + this.jsName + "." + this.methodName;
                                var h = "gigya.services." + this.jsName + ".js";
                                try {
                                    var v = this.getPluginType();
                                    var w = window.gigya["i18n"][h][f["lang"]];
                                } catch (m) {
                                    return false;
                                }
                                return typeof v !== "undefined" && typeof w !== "undefined";
                            },
                            getPluginType: function() {
                                var f = objectUtils.expressionHelper(window.gigya);
                                var p = [
                                    "_.plugins." + this.className,
                                    this.jsName + "." + this.methodName
                                ];
                                for(var h = 0, v = p; h < v.length; h++){
                                    var w = v[h];
                                    var m = f.getField(w);
                                    if (m) return m;
                                }
                                return undefined;
                            },
                            setSourceData: function(f) {
                                if (this.methodName == "socialize.showSimpleShareUI") {
                                    f["source"] = "socialize.showShareUI";
                                } else {
                                    f["source"] = f["originalMethodName"] || this.methodName;
                                }
                                if (!f["sourceData"] && sourceDataParams[this.methodName]) {
                                    var p = {};
                                    var h;
                                    for(var v = 0; v < sourceDataParams[this.methodName].length; v++){
                                        var w = sourceDataParams[this.methodName][v];
                                        if (f[w] != null) {
                                            h = true;
                                            p[w] = f[w];
                                        }
                                    }
                                    if (h) f["sourceData"] = p;
                                }
                                if (!f["pluginsStack"]) f["pluginsStack"] = [];
                                f["pluginsStack"].push({
                                    source: this.methodName
                                });
                                f["lastSource"] = this.methodName;
                            },
                            validateRequiredParams: function(f) {
                                var p = this.settings.requiredParams.split("|");
                                for(var h = 0; h < p.length; h++){
                                    var v = p[h];
                                    if (v != "" && (f[v] == null || f[v] == "")) {
                                        events.dispatchInvalidParamError(f, v);
                                        return false;
                                    }
                                }
                                return true;
                            },
                            setDefaultParams: function(f) {
                                var p = !f["containerID"] || f["isPopup"];
                                for(var h in this.settings.defaultParams){
                                    if (f[h] == null) {
                                        if (p && this.settings.defaultPopupParams[h]) {
                                            f[h] = this.settings.defaultPopupParams[h];
                                        } else {
                                            f[h] = this.settings.defaultParams[h];
                                        }
                                    }
                                }
                                if (p) {
                                    for(var h in this.settings.defaultPopupParams){
                                        if (!f[h]) f[h] = this.settings.defaultParams[h];
                                    }
                                }
                            },
                            prepareParameters: function(f) {
                                for(var p in f){
                                    if (p.toLowerCase().indexOf("provider") != -1 && typeof f[p] == "string") {
                                        f[p] = Providers_1.replaceProviderAliases(f[p]);
                                    }
                                }
                                if (!f["lang"]) {
                                    f["lang"] = thisScript.lang.langCode;
                                }
                                if (!f["source"]) {
                                    this.setSourceData(f);
                                } else {
                                    f["isPopup"] = false;
                                }
                            },
                            legacyStartUI: function(f, p) {
                                var h = this;
                                var v = f["containerID"];
                                if (this.settings.ignoreContainerId) {
                                    f["containerID"] = "";
                                    v = "";
                                } else if (f["containerID"] == null && !this.settings.allowPopup || f["containerID"] && !document.getElementById(f["containerID"])) {
                                    events.dispatchInvalidParamError(f, "containerID");
                                    return;
                                }
                                var w = this.settings.allowPopup && (!v || f["isPopup"]);
                                if (w && this.settings.useNewModal) f["useNewModal"] = true;
                                this.setDefaultParams(f);
                                if (!this.settings.allowPopup && !w) {
                                    DOMUtils.clearByID(v);
                                }
                                if (!this.validateRequiredParams(f)) {
                                    return;
                                }
                                this.loadPluginJS(f, p, function() {
                                    var fnStart1 = function() {
                                        h.prepareContainer(f, w, function() {
                                            h.startPlugin(f, p);
                                        });
                                    };
                                    queueUtils.queueForExecution("UI", function() {
                                        if (f["waitForDebug"] == false) {
                                            fnStart1();
                                        } else {
                                            queueUtils.queueForExecution("debug", fnStart1);
                                        }
                                    });
                                });
                            },
                            prepareContainer: function(f, p, h) {
                                var v = this;
                                if (!document.body) {
                                    window.setTimeout(function() {
                                        v.prepareContainer(f, p, h);
                                    }, 200);
                                } else {
                                    var w = f["containerID"];
                                    var m;
                                    if (p) {
                                        w = DOMUtils.getCenteredDivID(this.methodName);
                                        if (f["newModal"]) w += new Date().getTime();
                                        f["containerID"] = w;
                                        f["isPopup"] = true;
                                        if (!document.getElementById(w)) {
                                            m = DOMUtils.createTopLevelDiv(w);
                                            m.style.position = "absolute";
                                        }
                                    }
                                    m = m || document.getElementById(w);
                                    if (!m) {
                                        events.dispatchInvalidParamError(f, "containerID");
                                        h();
                                        return;
                                    }
                                    var b = m["Reqs"] ? m["Reqs"] : m["Reqs"] = [];
                                    var y = b.length + "@" + 0 + "@" + w;
                                    f["rid"] = y;
                                    var S = b[b.length] = {
                                        rid: y,
                                        container: m,
                                        method: this.methodName,
                                        context: f["context"],
                                        c: f,
                                        p: f,
                                        i: f,
                                        operation: this.methodName,
                                        isHTML: true
                                    };
                                    if (m && m.style) {
                                        m.style.display = "";
                                        m.style.visibility = "";
                                        var E = document.getElementById("gigya_ifr_" + w);
                                        if (E) {
                                            E.style.display = "";
                                            E.style.visibility = "";
                                        }
                                        var fncFixPosition1 = function() {
                                            if (E != null) {
                                                DOMUtils.setSize(E, f["width"], f["height"], p);
                                                E.style.visibility = "visible";
                                            }
                                            DOMUtils.setSize(m, f["width"], f["height"], p);
                                        };
                                        fncFixPosition1();
                                    }
                                    var C = this.methodName.split(".").pop();
                                    if (m.setAttribute) {
                                        m.setAttribute("gigid", (f["source"] && f["source"] != C ? f["source"] + "_" : "") + C);
                                    }
                                    h();
                                }
                            },
                            addAlias: function() {
                                var f = this;
                                functionsUtils.createAlias("gigya." + this.methodName, function() {
                                    var p = [];
                                    for(var h = 0; h < arguments.length; h++){
                                        p[h] = arguments[h];
                                    }
                                    var v = objectUtils.merge([
                                        p
                                    ]);
                                    var fnRun1 = function() {
                                        if (v.lang) {
                                            v._explicitLang = true;
                                        }
                                        var p = objectUtils.merge([
                                            thisScript.globalConf,
                                            v
                                        ]);
                                        f.run(p, v);
                                    };
                                    if (!thisScript || !thisScript.globalConf) {
                                        queueUtils.queueForExecution("API", fnRun1);
                                    } else {
                                        fnRun1();
                                    }
                                });
                            },
                            name: "login_v2"
                        }
                    },
                    {
                        methodName: "showLoginUI",
                        _versions: [
                            {
                                versionName: "1",
                                method: function() {
                                    var f = [];
                                    for(var p = 0; p < arguments.length; p++){
                                        f[p] = arguments[p];
                                    }
                                    var h = objectUtils.merge([
                                        f
                                    ]);
                                    var fnRun1 = function() {
                                        if (h.lang) {
                                            h._explicitLang = true;
                                        }
                                        var f = objectUtils.merge([
                                            thisScript.globalConf,
                                            h
                                        ]);
                                        _this.run(f, h);
                                    };
                                    if (!thisScript || !thisScript.globalConf) {
                                        queueUtils.queueForExecution("API", fnRun1);
                                    } else {
                                        fnRun1();
                                    }
                                }
                            },
                            {
                                versionName: "2",
                                method: function() {
                                    var f = [];
                                    for(var p = 0; p < arguments.length; p++){
                                        f[p] = arguments[p];
                                    }
                                    var h = objectUtils.merge([
                                        f
                                    ]);
                                    var fnRun1 = function() {
                                        if (h.lang) {
                                            h._explicitLang = true;
                                        }
                                        var f = objectUtils.merge([
                                            thisScript.globalConf,
                                            h
                                        ]);
                                        _this.run(f, h);
                                    };
                                    if (!thisScript || !thisScript.globalConf) {
                                        queueUtils.queueForExecution("API", fnRun1);
                                    } else {
                                        fnRun1();
                                    }
                                }
                            }
                        ],
                        _defaultVersionIndex: 0
                    },
                    {
                        methodName: "showAddConnectionsUI_v1",
                        settings: {
                            allowPopup: true,
                            defaultParams: {
                                width: 110,
                                height: 65
                            },
                            defaultPopupParams: {
                                width: 250,
                                height: 200
                            },
                            requiredParams: ""
                        },
                        jsName: "socialize.plugins.login"
                    },
                    {
                        methodName: "showAddConnectionsUI_v2",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "socialize.plugins.login_v2",
                        namespace: "socialize",
                        className: "login_v2.LoginPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "showAddConnectionsUI",
                        _versions: [
                            {
                                versionName: "1",
                                method: function() {
                                    var f = [];
                                    for(var p = 0; p < arguments.length; p++){
                                        f[p] = arguments[p];
                                    }
                                    var h = objectUtils.merge([
                                        f
                                    ]);
                                    var fnRun1 = function() {
                                        if (h.lang) {
                                            h._explicitLang = true;
                                        }
                                        var f = objectUtils.merge([
                                            thisScript.globalConf,
                                            h
                                        ]);
                                        _this.run(f, h);
                                    };
                                    if (!thisScript || !thisScript.globalConf) {
                                        queueUtils.queueForExecution("API", fnRun1);
                                    } else {
                                        fnRun1();
                                    }
                                }
                            },
                            {
                                versionName: "2",
                                method: function() {
                                    var f = [];
                                    for(var p = 0; p < arguments.length; p++){
                                        f[p] = arguments[p];
                                    }
                                    var h = objectUtils.merge([
                                        f
                                    ]);
                                    var fnRun1 = function() {
                                        if (h.lang) {
                                            h._explicitLang = true;
                                        }
                                        var f = objectUtils.merge([
                                            thisScript.globalConf,
                                            h
                                        ]);
                                        _this.run(f, h);
                                    };
                                    if (!thisScript || !thisScript.globalConf) {
                                        queueUtils.queueForExecution("API", fnRun1);
                                    } else {
                                        fnRun1();
                                    }
                                }
                            }
                        ],
                        _defaultVersionIndex: 0
                    },
                    {
                        methodName: "showEditConnectionsUI",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "socialize.plugins.edit",
                        namespace: "socialize",
                        className: "editConnections.EditConnectionPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "showSimpleShareUI",
                        settings: {
                            allowPopup: true,
                            dontLoadPluginsCore: true,
                            waitForAPIQueue: true,
                            defaultParams: {
                                width: 280,
                                height: 175
                            },
                            defaultPopupParams: {},
                            requiredParams: "userAction"
                        },
                        jsName: "socialize.plugins.simpleShare"
                    },
                    {
                        methodName: "showShareMobileUI",
                        settings: {
                            allowPopup: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: "userAction"
                        },
                        jsName: "socialize.plugins.shareMobile"
                    },
                    {
                        methodName: "showTfaUI",
                        settings: {
                            defaultParams: {
                                width: 325
                            },
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "accounts.plugins.tfa"
                    },
                    {
                        methodName: "initHostedPage",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "accounts.plugins.pages",
                        namespace: "accounts",
                        className: "Pages.PagesPlugin",
                        instanceMethods: []
                    },
                    {
                        methodName: "showScreenSet",
                        settings: {
                            useBasePlugin: true,
                            defaultParams: {},
                            defaultPopupParams: {},
                            requiredParams: ""
                        },
                        jsName: "accounts.plugins.screenSet",
                        namespace: "accounts",
                        className: "ScreenSet.ScreenSetPlugin",
                        instanceMethods: [
                            "hideScreenSet",
                            "switchScreen"
                        ],
                        pluginType: function E1() {
                            var f = null !== n && n.apply(this, arguments) || this;
                            return f._addedCSS = !1, f._screens = {}, f._random = Math.random(), f._placeholderIntervalID = -1, f.onUserStateChange = function(p) {
                                return f.onAccountInfo(p);
                            }, f._screenSet = f, f;
                        },
                        injectionInfo: {
                            name: "screenSet",
                            namespace: "accounts",
                            methodName: "showScreenSet",
                            jsName: "gigya.services.accounts.plugins.screenSet",
                            publicMethods: {
                                hideScreenSet: {
                                    instanceMethod: "cancel",
                                    argNames: []
                                },
                                switchScreen: {
                                    instanceMethod: "switchScreen",
                                    argNames: [
                                        "screen"
                                    ]
                                }
                            }
                        }
                    },
                    {
                        methodName: "socialize.getAvailableProviders",
                        settings: {},
                        schema: "enabledProviders|disabledProviders|requiredCapabilities",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.notifyLogin",
                        settings: {},
                        schema: "siteUID|UIDTimestamp|UIDSig|UIDNonce|provider|authToken|tokenSecret|regSource|tokenExpiration|sessionHandle|sessionHandleExpiration|userInfo|providerSessions|sessionExpiration|authCode|includeAllIdentitiesincludeiRank|group|settings|extraFields|signIDs|newUser|actionAttributes|profileAttributes|bp_channel_url|lang|signKeys",
                        requiresSession: false,
                        adapterSettings: {
                            clearSession: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.convertAction",
                        settings: {},
                        schema: "userAction|[providerCapability=actions]UserAction|provider",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.deleteAccount",
                        settings: {},
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.delUserSettings",
                        settings: {},
                        schema: "group|settings",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.getContacts",
                        settings: {},
                        schema: "enabledProviders|disabledProviders",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.getRawData",
                        settings: {},
                        schema: "provider|UID|fields|dataFormat|path",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.getSessionInfo",
                        settings: {},
                        schema: "provider|paddingMode|encrypt|signIDs|encryptAll",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.getUserInfo",
                        settings: {},
                        schema: "enabledProviders|disabledProviders|signIDs|includeiRank|includeAllIdentities|extraFields|group|settings|includeOpenidUID|include",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.checkin",
                        settings: {},
                        schema: "enabledProviders|disabledProviders|placeID|comment|latitude|longitude|actionAttributes|profileAttributes",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.logout",
                        settings: {
                            preprocessor: function(f, p) {
                                if (partnerSettings.ssoKey) f.signIDs = true;
                                p();
                            },
                            disableCache: true
                        },
                        schema: "signIDs|samlContext|sustainLogoutURLs",
                        requiresSession: true,
                        adapterSettings: {
                            requiresSession: function() {
                                return !exports.logoutBehaviour.alwaysSendLogoutToServer;
                            },
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "socialize.notifyRegistration",
                        settings: {},
                        schema: "siteUID|UIDTimestamp|UIDSig",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.removeConnection",
                        settings: {},
                        schema: "provider|lastIdentityHandling|removeLoginID",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.setUID",
                        settings: {},
                        schema: "siteUID|UIDTimestamp|UIDSig",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.unlinkAccounts",
                        settings: {},
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.facebookGraphOperation",
                        settings: {},
                        schema: "graphPath|graphParams|authRequired|method|authType",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "socialize.notifySSOLogin",
                        settings: {},
                        schema: "bp_channel_url",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "gcs.getUserData",
                        settings: {},
                        schema: "type|fields",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "gcs.setUserData",
                        settings: {},
                        schema: "data|type|updateBehavior",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "gcs.search",
                        settings: {},
                        schema: "expTime|querySig|query",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "gcs.getSchema",
                        settings: {},
                        schema: "schemaType",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.b2b.registerOrganization",
                        settings: {},
                        schema: "organization|requester",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.b2b.getOrganizationSchema",
                        settings: {
                            preprocessor: function(f, p) {
                                f["noAuth"] = true;
                                p();
                            }
                        },
                        schema: "",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.login",
                        settings: {
                            riskAssessment: true
                        },
                        schema: "loginID|password|sessionExpiration|targetEnv|regToken|include|actionAttributes|profileAttributes|includeUserInfo|includeDynamicSchema|bp_channel_url|captchaToken|blackBoxToken|captchaType|captchaText|loginMode|signKeys|lang|riskContext|aToken",
                        requiresSession: false,
                        adapterSettings: {
                            clearSessionCondition: function(f) {
                                return f["loginMode"] !== "link" && f["loginMode"] !== "reAuth";
                            },
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.linkAccounts",
                        settings: {},
                        schema: "loginID|password|sessionExpiration|targetEnv|include|regToken|includeUserInfo|bp_channel_url|signKeys",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.notifySocialLogin",
                        settings: {},
                        schema: "loginMode|providerSessions|sessionExpiration",
                        requiresSession: true,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        },
                        altSessionParams: "providerSessions"
                    },
                    {
                        methodName: "accounts.initRegistration",
                        settings: {
                            preprocessor: function(f, p) {
                                if (globalAccount.dataCenter) f["dataCenter"] = globalAccount.dataCenter;
                                p();
                            }
                        },
                        schema: "sdk|isLite|dataCenter",
                        requiresSession: false,
                        adapterSettings: {
                            clearSession: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.initProgression",
                        settings: {
                            preprocessor: function(f, p) {
                                var h = getUrlParam("regToken");
                                if (h) f["regToken"] = h;
                                p();
                            }
                        },
                        schema: "sdk|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            clearSession: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.register",
                        settings: {
                            riskAssessment: true
                        },
                        schema: "username|email|password|UID|regToken|siteUID|secretQuestion|secretAnswer|regSource|profile|preferences|displayedPreferences|data|captchaText|captchaType|captchaToken|blackBoxToken|lang|hashedPassword|pwHashAlgorithm|skipVerification|finalizeRegistration|targetEnv|sessionExpiration|include|actionAttributes|profileAttributes|includeUserInfo|bp_channel_url|signKeys|subscriptions|communications|addresses",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.finalizeRegistration",
                        settings: {},
                        schema: "regToken|targetEnv|include|includeUserInfo|bp_channel_url|allowAccountsLinking|signKeys|subscriptions",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.captchaImage",
                        settings: {},
                        schema: "regToken",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.importProfilePhoto",
                        settings: {},
                        schema: "regToken|URL|publish",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.setProfilePhoto",
                        settings: {},
                        schema: "regToken|publish|photoBytes",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.resetPassword",
                        settings: {
                            riskAssessment: true
                        },
                        schema: "lang|loginID|passwordResetToken|secretAnswer|securityFields|newPassword|email|captchaType|captchaToken|blackBoxToken",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.removeProfilePhoto",
                        settings: {},
                        schema: "regToken",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.isAvailableLoginID",
                        settings: {},
                        schema: "loginID",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.address.suggestions.get",
                        settings: {},
                        schema: "address|country|apiKey|suggestionreply|longitude|latitude",
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.resendVerificationCode",
                        settings: {},
                        schema: "regToken|email",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.getCaptcha",
                        settings: {},
                        schema: "",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.getPolicies",
                        settings: {
                            preprocessor: function(f, p) {
                                f["noAuth"] = true;
                                p();
                            }
                        },
                        schema: "sections",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.getSchema",
                        settings: {
                            preprocessor: function(f, p) {
                                f["noAuth"] = true;
                                p();
                            }
                        },
                        schema: "sections|schemaType",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.getSiteConsentDetails",
                        settings: {
                            preprocessor: function(f, p) {
                                f["noAuth"] = true;
                                p();
                            }
                        },
                        schema: "",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.getLegalStatements",
                        settings: {
                            preprocessor: function(f, p) {
                                f["noAuth"] = true;
                                p();
                            }
                        },
                        schema: "consentId|lang",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.verifyLogin",
                        settings: {},
                        schema: "include|extraProfileFields|targetEnv",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.getAccountInfo",
                        settings: {},
                        schema: "include|extraProfileFields|regToken|lang|includeCommunications",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.setAccountInfo",
                        settings: {
                            riskAssessment: true
                        },
                        schema: "profile|preferences|displayedPreferences|data|regToken|verifyToken|oldPassword|password|newPassword|addLoginEmails|removeLoginEmails|username|secretQuestion|secretAnswer|requirePasswordChange|conflictHandling|tfaStatus|rba|subscriptions|communications|preferences|lang|captchaToken|blackBoxToken|captchaType|customIdentifiers|addresses",
                        requiresSession: true,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.logout",
                        settings: {
                            preprocessor: function(f, p) {
                                if (partnerSettings.ssoKey) f.signIDs = true;
                                p();
                            },
                            disableCache: true
                        },
                        schema: "signIDs|samlContext|sustainLogoutURLs",
                        requiresSession: true,
                        adapterSettings: {
                            requiresSession: function() {
                                return !exports.logoutBehaviour.alwaysSendLogoutToServer;
                            },
                            forceHttps: true
                        }
                    },
                    {
                        methodName: "accounts.search",
                        settings: {},
                        schema: "expTime|querySig|query",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.getScreenSets",
                        settings: {
                            preprocessor: function(f, p) {
                                f["noAuth"] = true;
                                p();
                            }
                        },
                        schema: "screenSetIDs|include|lang|screenSetVersion",
                        requiresSession: false,
                        adapterSettings: {
                            useHttpStatusCodes: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.sso.login",
                        settings: {
                            oauth: true
                        },
                        schema: "redirectURL|state|authFlow|context|useChildContext",
                        requiresSession: false,
                        adapterSettings: {
                            oauthMode: 1,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.getConflictingAccount",
                        settings: {},
                        schema: "regToken|loginID",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.resetSitePreferences",
                        settings: {
                            postprocessor: function(f, p) {
                                if ((p === null || p === void 0 ? void 0 : p.errorCode) === GSErrors_1.GSErrors.OK) accounts.logout();
                            }
                        },
                        schema: "",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.getJWT",
                        settings: {},
                        schema: "fields|expiration|audience",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.getProviders",
                        settings: {},
                        schema: "regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.tfa.initTFA",
                        settings: {},
                        schema: "provider|mode|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.finalizeTFA",
                        settings: {},
                        schema: "gigyaAssertion|providerAssertion|tempDevice|regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.tfa.deactivateProvider",
                        settings: {},
                        schema: "provider",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.unregisterDevice",
                        settings: {},
                        schema: "allDevices",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.backupcodes.get",
                        settings: {},
                        schema: "gigyaAssertion",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.backupcodes.create",
                        settings: {},
                        schema: "gigyaAssertion",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.backupcodes.verify",
                        settings: {},
                        schema: "gigyaAssertion|code|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.phone.getRegisteredPhoneNumbers",
                        settings: {
                            preprocessor: function(f, p) {
                                f["noAuth"] = true;
                                p();
                            }
                        },
                        schema: "gigyaAssertion",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.phone.removePhone",
                        settings: {},
                        schema: "gigyaAssertion|phoneId",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.phone.sendVerificationCode",
                        settings: {},
                        schema: "gigyaAssertion|lang|phoneID|phone|method|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.phone.completeVerification",
                        settings: {},
                        schema: "gigyaAssertion|phvToken|code|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.email.getEmails",
                        settings: {
                            preprocessor: function(f, p) {
                                f["noAuth"] = true;
                                p();
                            }
                        },
                        schema: "gigyaAssertion",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.email.sendVerificationCode",
                        settings: {},
                        schema: "emailID|gigyaAssertion|lang|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.email.completeVerification",
                        settings: {},
                        schema: "gigyaAssertion|phvToken|code|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.totp.register",
                        settings: {},
                        schema: "gigyaAssertion|includeSecret",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.totp.verify",
                        settings: {},
                        schema: "gigyaAssertion|sctToken|code|name|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.totp.getRegistered",
                        settings: {
                            preprocessor: function(f, p) {
                                f["noAuth"] = true;
                                p();
                            }
                        },
                        schema: "gigyaAssertion",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.totp.remove",
                        settings: {},
                        schema: "gigyaAssertion|id",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.push.isVerified",
                        settings: {},
                        schema: "gigyaAssertion|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.tfa.push.sendVerification",
                        settings: {},
                        schema: "gigyaAssertion|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.b2b.delegatedAdminLogin",
                        settings: {},
                        schema: "orgId|lang",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.b2b.getOrganizationInfo",
                        settings: {},
                        schema: "orgId|bpid",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.b2b.setOrganizationContext",
                        settings: {},
                        schema: "bpid",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.b2b.getOrganizationContext",
                        settings: {},
                        schema: "",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.b2b.auth.getAssets",
                        settings: {},
                        schema: "appId|bpid|orgId|includePolicies|environments",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.getSchema",
                        settings: {},
                        schema: "model",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.registerGroup",
                        settings: {},
                        schema: "model|groupId|groupData",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.setGroupInfo",
                        settings: {},
                        schema: "model|groupId|groupData",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.getGroupInfo",
                        settings: {},
                        schema: "model|groupId",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.deleteGroup",
                        settings: {},
                        schema: "model|groupId",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.setGroupMemberInfo",
                        settings: {},
                        schema: "model|groupId|uid|relationshipData|permissions",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.getGroupMemberInfo",
                        settings: {},
                        schema: "model|groupId|uid|include",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.removeMember",
                        settings: {},
                        schema: "model|groupId|uid",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.getAllMemberGroups",
                        settings: {},
                        schema: "uid|flatNestedFields",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.searchGroupMembers",
                        settings: {},
                        schema: "model|groupId|limit|start",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.createInvitation",
                        settings: {},
                        schema: "model|groupId|isOneTime",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.invitationConfirm",
                        settings: {},
                        schema: "invitationId",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.groups.finalizeInvitation",
                        settings: {},
                        schema: "token",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.otp.sendCode",
                        settings: {
                            riskAssessment: true,
                            preprocessor: function(f, p) {
                                if (globalAccount.dataCenter) f["dataCenter"] = globalAccount.dataCenter;
                                p();
                            }
                        },
                        schema: "regToken|phoneNumber|email|lang|captchaToken|captchaType|blackBoxToken|dataCenter|phvToken",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.otp.login",
                        settings: {},
                        schema: "vToken|code|targetEnv|includeUserInfo|include|regSource|sessionExpiration",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.otp.update",
                        settings: {},
                        schema: "vToken|code|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.guest",
                        settings: {},
                        schema: "identifier|identifierType",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.otp.verify",
                        settings: {},
                        schema: "vToken|code",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.otp.authenticate",
                        settings: {},
                        schema: "vToken|code",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.getMethods",
                        settings: {},
                        schema: "identifier|aToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.push.sendVerification",
                        settings: {},
                        schema: "identifier",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.push.isVerified",
                        settings: {},
                        schema: "vToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.magiclink.email.send",
                        settings: {},
                        schema: "email|context|lang",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.magiclink.email.login",
                        settings: {},
                        schema: "vToken|code|targetEnv|includeUserInfo|include|regSource|sessionExpiration",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.otp.email.sendCode",
                        settings: {},
                        schema: "email|lang",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.otp.email.login",
                        settings: {},
                        schema: "code|vToken|targetEnv|includeUserInfo|include|regSource|sessionExpiration",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.identifier.createToken",
                        settings: {},
                        schema: "identifier|identifierType",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.identity.authorize",
                        settings: {},
                        schema: "authorization_details|grant_type",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.fido.initRegisterCredentials",
                        settings: {
                            preprocessor: function(f, p) {
                                _.apiAdapter.isSessionValid({}, function(p) {
                                    if (p) {
                                        f === null || f === void 0 ? true : delete f["regToken"];
                                    }
                                });
                                p();
                            }
                        },
                        schema: "regToken|aToken",
                        requiresSession: true,
                        adapterSettings: {
                            clearSessionCondition: function(f) {
                                return !!f["aToken"];
                            },
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        },
                        altSessionParams: "regToken|aToken"
                    },
                    {
                        methodName: "accounts.auth.fido.registerCredentials",
                        settings: {
                            preprocessor: function(f, p) {
                                _.apiAdapter.isSessionValid({}, function(p) {
                                    if (p) {
                                        f === null || f === void 0 ? true : delete f["regToken"];
                                    }
                                });
                                p();
                            }
                        },
                        schema: "token|attestation|deviceName|regToken",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.fido.getAssertionOptions",
                        settings: {},
                        schema: "",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.fido.verifyAssertion",
                        settings: {},
                        schema: "token|authenticatorAssertion",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "accounts.auth.fido.getCredentials",
                        settings: {
                            preprocessor: function(f, p) {
                                _.apiAdapter.isSessionValid({}, function(p) {
                                    if (p) {
                                        f === null || f === void 0 ? true : delete f["regToken"];
                                    }
                                });
                                p();
                            }
                        },
                        schema: "regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.auth.fido.removeCredential",
                        settings: {
                            preprocessor: function(f, p) {
                                _.apiAdapter.isSessionValid({}, function(p) {
                                    if (p) {
                                        f === null || f === void 0 ? true : delete f["regToken"];
                                    }
                                });
                                p();
                            }
                        },
                        schema: "credentialId|regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.session.verify",
                        settings: {},
                        schema: "",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "oauth.register",
                        settings: {},
                        schema: "lang|regSource|cid|context|sessionExpiration|userInfo|verifyToken|authMode",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            useBearerToken: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "oauth.connect",
                        settings: {
                            preprocessor: function(f, p) {
                                _.apiAdapter.isSessionValid({}, function(p) {
                                    if (p) {
                                        f === null || f === void 0 ? true : delete f["regToken"];
                                    }
                                });
                                p();
                            }
                        },
                        schema: "regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forcePost: true,
                            useBearerToken: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "oauth.disconnect",
                        settings: {
                            preprocessor: function(f, p) {
                                _.apiAdapter.isSessionValid({}, function(p) {
                                    if (p) {
                                        f === null || f === void 0 ? true : delete f["regToken"];
                                    }
                                });
                                p();
                            }
                        },
                        schema: "regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forcePost: true,
                            useBearerToken: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "oauth.authorize",
                        settings: {},
                        schema: "response_type|authMode",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            useBearerToken: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "oauth.token",
                        settings: {},
                        schema: "grant_type|code|targetEnv|sessionExpiration",
                        requiresSession: false,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "auth.token.authenticationContext",
                        settings: {},
                        schema: "regToken",
                        requiresSession: true,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        },
                        altSessionParams: "regToken"
                    },
                    {
                        methodName: "accounts.auth.login",
                        settings: {},
                        schema: "accessToken|sessionExpiration|targetEnv|include|includeUserInfo|loginMode|lang",
                        requiresSession: false,
                        adapterSettings: {
                            clearSessionCondition: function(f) {
                                return f["loginMode"] !== "link" && f["loginMode"] !== "reAuth";
                            },
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "ds.store",
                        settings: {},
                        schema: "type|data|oid|updateBehavior",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "ds.get",
                        settings: {},
                        schema: "type|data|oid|fields",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "ds.search",
                        settings: {},
                        schema: "expTime|querySig|query",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "ds.getSchema",
                        settings: {},
                        schema: "",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "ds.delete",
                        settings: {},
                        schema: "type|oid|fields",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "ids.getAccountInfo",
                        settings: {},
                        schema: "include|extraProfileFields",
                        requiresSession: true,
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "ids.setAccountInfo",
                        settings: {},
                        schema: "profile|preferences|data|oldPassword|password|newPassword|addLoginEmails|removeLoginEmails|username|secretQuestion|secretAnswer|requirePasswordChange|lang",
                        requiresSession: false,
                        adapterSettings: {
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "ids.search",
                        settings: {},
                        schema: "expTime|querySig|query",
                        adapterSettings: {
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "fidm.oidc.op.deviceContinue",
                        settings: {
                            restUrl: "oidc/op/v1.0/{APIKey}/device_continue"
                        },
                        schema: "user_code",
                        requiresSession: true,
                        adapterSettings: {
                            namespace: "fidm",
                            forcePost: true,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    },
                    {
                        methodName: "fidm.oidc.op.getContextData",
                        settings: {
                            restUrl: "oidc/op/v1.0/{APIKey}/contextData"
                        },
                        schema: "oidc_context",
                        requiresSession: false,
                        adapterSettings: {
                            namespace: "fidm",
                            forcePost: false,
                            forceHttps: true,
                            requiresSession: function() {
                                return requiresSession;
                            }
                        }
                    }
                ],
                defaultApiSchema: "ctag|APIKey|cid|oauth_token|source|sourceData|usePost|refUID|fb_UID|fb_at|fb_exp|environment|noAuth|httpStatusCodes",
                defaultOauthSchema: "ctag|temporary_account|authFlow|connectWithoutLogin|provider|redirectMethod|redirect_uri|pendingRegistration|lang|regSource|extraPermissions|sessionExpiration|forceAuthentication|includeiRank|includeAllIdentities|extraFields|enabledProviders|disabledProviders|signIDs|openIDUsername|openIDURL|openIDProviderLogo|openIDProviderName|finalizeRegistration|include|actionAttributes|profileAttributes|googlePlayAppID|bp_channel_url|loginIfExists|includeUserInfo|redirectURL|authCodeOnly|enablePopupLocation|invite|regToken|loginMode|apiDomain|conflictHandling|forcePermissions|signKeys|dataCenter|forceAuthentication",
                postBookmarkSchema: "provider|URL|url|title|description|target|cid|APIKey|shortURLs|source|sourceData|providerKey|thumbnailURL|tags|userAction|[providerCapability=actions]UserAction|actionAttributes|facebookDialogType",
                loginMethods: {
                    "socialize.login": 1,
                    "socialize.addConnection": 1,
                    "socialize.notifyLogin": 1,
                    "socialize.linkAccounts": 1,
                    "accounts.login": 1,
                    "accounts.otp.login": 1,
                    "accounts.auth.magiclink.email.login": 1,
                    "accounts.auth.otp.email.login": 1,
                    "accounts.auth.login": 1,
                    "accounts.socialLogin": 1,
                    "accounts.linkAccounts": 1,
                    "accounts.register": 1,
                    "accounts.finalizeRegistration": 1,
                    "accounts.notifySocialLogin": 1
                },
                logoutMethods: {
                    "socialize.logout": 1,
                    "accounts.logout": 1,
                    "socialize.deleteAccount": 1,
                    "socialize.unlinkAccounts": 1
                },
                ServerApi: function ServerApi1(f, p, h, v, w, m) {
                    if (v === void 0) {
                        v = {};
                    }
                    if (w === void 0) {
                        w = {};
                    }
                    var b = _super.call(this, f, v) || this;
                    b.schema = p;
                    b.requiresSession = h;
                    b.settings = v;
                    b.adapterSettings = w;
                    b.altSessionParams = m;
                    w.forceHttps = true;
                    if (typeof w.requiresSession === "undefined") {
                        w.requiresSession = function() {
                            return h;
                        };
                    }
                    return b;
                },
                ServerApiRequest: function ServerApiRequest1(f, p, h) {
                    if (h === void 0) {
                        h = null;
                    }
                    this.api = f;
                    this.params = objectUtils.merge([
                        objectUtils.clone(p),
                        f.settings.defaultParams
                    ]);
                    this.originalParams = objectUtils.clone(p);
                    this.callback = p["callback"];
                    this.riskAssessmentHandler = new RiskAssessmentHandler_1.RiskAssessmentHandlerTimeoutDecorator(h || new RiskAssessmentHandler_1.RiskAssessmentHandler());
                },
                WindowProvider: function WindowProvider1() {},
                config: {
                    flags: {
                        alignSocialWidget: true,
                        alwaysCheckCookieSave: true,
                        dispatchLoginEventWhenHandlerAdded: false,
                        enforceAuthFlowRedirectForSocial: false,
                        fixPhoneTFATranslations: true,
                        forceErrorReport: false,
                        forceWebSdkBootstrap: false,
                        hideSSOFrame: false,
                        loadSsoFrameOnlyOnce: false,
                        magicLinkDispatchLoginWhenAdded: true,
                        newFormLinkInstanceElement: false,
                        oidcUseLocalStorage: false,
                        reBootstrapOnLogin: false,
                        sanitizeEvaluatedValue: false,
                        sendPendingEmailVerificationCodeOnce: false,
                        setCookieSameSiteLax: false,
                        setCookieSameSiteLaxSession: true,
                        setGroupApiDomainAfterLogin: false,
                        setProviderFromResponse: true,
                        skipSameScreenCheckOnSwitch: true,
                        supportConsentFallbackLang: true,
                        updateAccountInfoAsync: true,
                        useDecodeURIComponent: false,
                        useExtendedPhoneNumberRegex: false,
                        useGigyaJsBaseDomain: false,
                        useMigratedGoogleAuth: false,
                        useNewOidcContextFlow: false,
                        useSessionVerify: false,
                        verifyLoginOnlyOnce: true,
                        wcagContrastFix: false,
                        enableLinkAccountsV2Fallback: false,
                        forcePostForSensitiveParams: true,
                        generateNewCodeWcagCompliance: true,
                        getOnlyVisibleField: true,
                        ignoreInterruptionsInOidcPassiveLogin: false,
                        initBackgroundWorker: false,
                        newLinkInstanceElement: true,
                        overrideAllChildContext: false,
                        passLanguageParamsToReauthScreen: false,
                        redirectOnMissingOidcContext: false,
                        removeAkamaiEdgeControlHeader: false,
                        revokeSSOGltOnOverride: true,
                        sendLangForEmailOTP: true,
                        setCookieSameSiteLaxLowPriority: true,
                        setCookieSameSiteLaxSocial: true,
                        stopSendingReports: false,
                        supportWorkflow: false,
                        useHttpStatusCode: true,
                        useLocalStorageListener: false,
                        useViewportPollerAction: false
                    },
                    plugins: {
                        connectWithoutLoginBehavior: "alwaysLogin",
                        defaultRegScreenSet: "Default-RegistrationLogin",
                        defaultMobileRegScreenSet: "Default-RegistrationLogin",
                        sessionExpiration: 0,
                        rememberSessionExpiration: 0,
                        apiDomain: "eu1.gigya.com",
                        workflow: {
                            path: "workflow/resources/js/entryPoint.js"
                        }
                    },
                    api: {
                        customAPIDomainPrefix: "gigya",
                        gmidTicketExpiration: 3600,
                        baseDomains: [
                            "local.pyzlo.in"
                        ]
                    },
                    hostedPagesDomain: "my.gigya-ext.com",
                    toggles: {
                        linkAccountV2: "off",
                        httpStatusCodes: "off"
                    },
                    consent: {
                        hasLicense: true,
                        isMigrated: true
                    }
                },
                apiAdapter: {
                    _storage: {},
                    name: "Web",
                    _reBootstrapCount: 0,
                    _ssoService: null
                },
                getApiDomain: function(f) {
                    if (f && shouldAddNamespace) {
                        var p = f.split(".")[0];
                        if (excludeNamespaces.indexOf(p) >= 0) {
                            p = "accounts";
                        } else if (gigyaDomainNamespaces.indexOf(p) == -1) {
                            logger.error("trying to send request to an invalid domain");
                            p = gigyaDomainNamespaces[0];
                        }
                        return p + "." + apiDomain;
                    } else {
                        return apiDomain;
                    }
                },
                Poller: function e1(f) {
                    void 0 === f && (f = "object" == typeof console && console.log ? console.log : function() {}), this._logger = f, this._intervalID = void 0, this._actions = [];
                }
            },
            setAccountResidency: function setAccountResidency1(f) {
                if (f && allowedResidencies.indexOf(f.toLowerCase()) == -1) return logger.warn("invalid residency", {
                    dataCenter: f
                });
                globalAccount.dataCenter = f;
            },
            setGroupContext: function setGroupContext1(f) {
                return tslib_1.__awaiter(this, void 0, void 0, function() {
                    var p;
                    return tslib_1.__generator(this, function(h) {
                        switch(h.label){
                            case 0:
                                return [
                                    4,
                                    SsoService_1.SsoService.getInstance()
                                ];
                            case 1:
                                p = h.sent();
                                return [
                                    4,
                                    p === null || p === void 0 ? void 0 : p.setGroupContext(f)
                                ];
                            case 2:
                                h.sent();
                                return [
                                    2
                                ];
                        }
                    });
                });
            },
            setSSOToken: function setSSOToken1() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                return tslib_1.__awaiter(this, void 0, gigya.Promise, function() {
                    var p, h;
                    return tslib_1.__generator(this, function(v) {
                        p = utils.object.merge([
                            thisScript.globalConf,
                            f
                        ]);
                        h = p["redirectURL"] || document.location.href;
                        utils.HTTP.redirect(h, [
                            {}
                        ], "GET", "_top");
                        return [
                            2
                        ];
                    });
                });
            },
            syncGroupGltExp: function syncGroupGltExp1(f) {
                if (f === void 0) {
                    f = TokenStore_1.getGltexpCookie();
                }
                return tslib_1.__awaiter(this, void 0, void 0, function() {
                    var p, h, v;
                    return tslib_1.__generator(this, function(w) {
                        switch(w.label){
                            case 0:
                                if (!partnerSettings.ssoKey) return [
                                    2,
                                    gigya.Promise.resolve()
                                ];
                                return [
                                    4,
                                    SsoService_1.SsoService.getInstance()
                                ];
                            case 1:
                                p = w.sent();
                                return [
                                    4,
                                    p === null || p === void 0 ? void 0 : p.setTokenExpiration(f, false)
                                ];
                            case 2:
                                h = w.sent();
                                v = (h === null || h === void 0 ? void 0 : h.gltexp) !== f;
                                if (v) {
                                    TokenStore_1.setGltexp(h.gltexp);
                                }
                                return [
                                    2,
                                    {
                                        hasChanged: v,
                                        oldExpiration: utils.gltexp.getMillis(f),
                                        newExpiration: utils.gltexp.getMillis(h.gltexp || f)
                                    }
                                ];
                        }
                    });
                });
            },
            hasSession: function() {
                return tslib_1.__awaiter(_this, void 0, void 0, function() {
                    return tslib_1.__generator(this, function(f) {
                        return [
                            2,
                            new gigya.Promise(function(f) {
                                if (!isReady) {
                                    console.warn("**** gigya.hasSession must be called AFTER gigya service ready ****");
                                    logger.report("Bad Implementation: gigya.hasSession");
                                }
                                utils.queue.queueForExecution("API", function() {
                                    return sessionHelpers_1.hasSession().then(f);
                                });
                            })
                        ];
                    });
                });
            },
            sso: {
                getContext: function getSsoContext1(f) {
                    var p;
                    f === null || f === void 0 ? void 0 : f.callback(((p = _.sso) === null || p === void 0 ? void 0 : p.context) || {});
                },
                login: function ssoLogin1(f) {
                    if (f === void 0) {
                        f = {};
                    }
                    if (!verifySiteConfiguration()) {
                        return;
                    }
                    if (!utils.toggles.isOn("keepSessionOnSSOLogin")) {
                        TokenStore_1.remove();
                    }
                    accounts.sso.login(f);
                },
                continue: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    utils.queue.queueForExecution("API", centralizedSSO_1.continueSso, f);
                }
            },
            services: {
                proxy: {
                    utils: {
                        getParentUrl: function(f, p) {
                            if (f === void 0) {
                                f = window;
                            }
                            if (p === void 0) {
                                p = document;
                            }
                            return f.location != f.parent.location ? p.referrer : p.location.href;
                        },
                        getBodyElement: function(f) {
                            if (f === void 0) {
                                f = document;
                            }
                            return new gigya.Promise(function(p) {
                                if (f.body) p(f.body);
                                else f.addEventListener("DOMContentLoaded", function() {
                                    return p(f.body);
                                });
                            });
                        },
                        validateOrigin: function(f, p) {
                            var h;
                            return ((h = f === null || f === void 0 ? void 0 : f.toLowerCase()) === null || h === void 0 ? void 0 : h.indexOf(p === null || p === void 0 ? void 0 : p.toLowerCase())) === 0;
                        },
                        createIframe: function(f, p) {
                            if (f === void 0) {
                                f = "Gigya Frame";
                            }
                            if (p === void 0) {
                                p = document;
                            }
                            var h = p.createElement("iframe");
                            h.style.position = "absolute";
                            h.style.height = "0px";
                            h.style.width = "0px";
                            h.style.display = "none";
                            h.title = f;
                            h.setAttribute("aria-hidden", "true");
                            return h;
                        },
                        generateId: function() {
                            return String(_counter++);
                        },
                        getAllClassMethodsNames: function(f) {
                            var p = [];
                            var h = isClass(f) ? f.prototype : f;
                            do {
                                try {
                                    var v = Object.getOwnPropertyNames(h).map(function(f) {
                                        return f.toString();
                                    }).sort().filter(function(f, v, w) {
                                        return typeof h[f] === "function" && f !== "constructor" && (v == 0 || f !== w[v - 1]) && p.indexOf(f) === -1;
                                    });
                                    p = p.concat(v);
                                } catch (f) {
                                    var w = Object.getOwnPropertyNames(h).map(function(f) {
                                        return f.toString();
                                    }).sort();
                                    var v = [];
                                    for(var m = 0; m < w.length; m++){
                                        var b = w[m];
                                        if (typeof h[b] === "function" && b !== "constructor" && (m == 0 || b !== w[m - 1]) && p.indexOf(b) === -1) {
                                            v.push(b);
                                        }
                                    }
                                    p = p.concat(v);
                                }
                            }while ((h = Object.getPrototypeOf(h)) && Object.getPrototypeOf(h));
                            return p;
                        }
                    },
                    isSignalRequest: function isSignalRequest1(f) {
                        return Boolean(f.signal);
                    },
                    ProxyListener: function ProxyListener1(f, p, h, v, w) {
                        var m = this;
                        if (p === void 0) {
                            p = utils.getParentUrl();
                        }
                        if (h === void 0) {
                            h = utils.getAllClassMethodsNames(f);
                        }
                        if (v === void 0) {
                            v = window.parent;
                        }
                        if (w === void 0) {
                            w = window;
                        }
                        this._service = f;
                        this.origin = p;
                        this._allowedMethods = h;
                        this._target = v;
                        this._win = w;
                        this.stopCancellers = [];
                        this._listening = false;
                        this.onRequest = function(f) {
                            return tslib_1.__awaiter(m, void 0, gigya.Promise, function() {
                                var p, h;
                                return tslib_1.__generator(this, function(v) {
                                    switch(v.label){
                                        case 0:
                                            if (!utils.validateOrigin(this.origin, f.origin)) return [
                                                3,
                                                7
                                            ];
                                            p = JSON.parse(f.data);
                                            v.label = 1;
                                        case 1:
                                            v.trys.push([
                                                1,
                                                6,
                                                ,
                                                7
                                            ]);
                                            if (!interfaces_1.isSignalRequest(p)) return [
                                                3,
                                                3
                                            ];
                                            return [
                                                4,
                                                this.handleSignalRequest(p)
                                            ];
                                        case 2:
                                            v.sent();
                                            return [
                                                3,
                                                5
                                            ];
                                        case 3:
                                            return [
                                                4,
                                                this.handleProxyRequest(p)
                                            ];
                                        case 4:
                                            v.sent();
                                            v.label = 5;
                                        case 5:
                                            return [
                                                3,
                                                7
                                            ];
                                        case 6:
                                            h = v.sent();
                                            this.postError({
                                                res: h.message || h,
                                                id: p.id
                                            });
                                            return [
                                                3,
                                                7
                                            ];
                                        case 7:
                                            return [
                                                2
                                            ];
                                    }
                                });
                            });
                        };
                    },
                    ServiceProxy: function ServiceProxy1(f, p, h, v, w, m) {
                        var b = this;
                        if (p === void 0) {
                            p = 60000;
                        }
                        if (h === void 0) {
                            h = utils.generateId;
                        }
                        if (v === void 0) {
                            v = utils.createIframe;
                        }
                        if (w === void 0) {
                            w = function() {
                                return new gigya.Promise(function(f) {
                                    if (document.body) f(document.body);
                                    else document.addEventListener("DOMContentLoaded", function() {
                                        return f(document.body);
                                    });
                                });
                            };
                        }
                        if (m === void 0) {
                            m = window;
                        }
                        this.url = f;
                        this.timeout = p;
                        this._idCreator = h;
                        this._iframeCreator = v;
                        this.getIframeHost = w;
                        this._win = m;
                        this._pendingReqs = [];
                        this._mutationObservers = [];
                        this.onResponse = function(f) {
                            var p = utils.JSON.parse(f.data);
                            if (p && b._pendingReqs[p.id] && b.validateOrigin(f.origin)) {
                                b._pendingReqs[p.id](p);
                                delete b._pendingReqs[p.id];
                            }
                        };
                    }
                },
                TokenKeys: {
                    GMID: "gig_gmid",
                    UCID: "gig_ucid",
                    GMID_TICKET: "gmidTicket",
                    GMID_TICKET_EXPIRATION_TIME: "gmidTicketExpiration"
                },
                ApiService: function ApiService1(f, p, h, v, w, m) {
                    if (v === void 0) {
                        v = new GroupApiDomainService_1.GroupApiDomainService();
                    }
                    if (w === void 0) {
                        w = new RequestProvider_1.RequestProvider();
                    }
                    this._apiKey = f;
                    this._hasGmid = p;
                    this._domainResolver = h;
                    this._groupApiDomainService = v;
                    this._requestProvider = w;
                    this.didFallback = false;
                    if (m) {
                        this._storage = m;
                    }
                },
                GroupApiDomainService: function GroupApiDomainService1(f, p, h) {
                    if (f === void 0) {
                        f = partnerSettings.ssoKey;
                    }
                    if (p === void 0) {
                        p = utils.localStorage.initializeAdapter(utils.localStorage.CookieStorageAdapter);
                    }
                    if (h === void 0) {
                        h = LocalInfo_1.localInfo.pageDomain;
                    }
                    this._ssoKey = f;
                    this._storage = p;
                    this._pageDomain = h;
                    this._cookieName = GroupApiDomainKey + "_" + this._ssoKey;
                },
                RequestType: {
                    GET: "GET",
                    POST: "POST"
                },
                AccountService: function AccountService1() {},
                accountService: {},
                SiteDataService: function SiteDataService1() {},
                siteData: {},
                socialize: {
                    getAllProviders: function getAllProviders1() {
                        return exports.arProviders.concat();
                    },
                    replaceProviderAliases: function replaceProviderAliases1(f) {
                        if (f == null) {
                            return;
                        }
                        var p = f.split(",");
                        for(var h = 0; h < p.length; h++){
                            var v = p[h].replace(/^\s+|\s+$/g, "");
                            if (exports._aliases[v]) {
                                p[h] = exports._aliases[v];
                            }
                        }
                        return p.join(",");
                    },
                    getProvidersByName: function getProvidersByName1(f, p) {
                        if (p === void 0) {
                            p = exports.arProviders;
                        }
                        f = ("" + f).split(" ").join("").split(".").join("").toLowerCase();
                        f = replaceProviderAliases(f);
                        var h = ("" + f).split(",");
                        h = replaceWildcard(h, p);
                        var v = [];
                        for(var w = 0; w < h.length; w++){
                            var m = getProviderByName(h[w], p);
                            if (m != null && arrayUtils.indexOf(v, m) == -1) {
                                v.push(m);
                            }
                        }
                        return v;
                    },
                    _getProviderByName: function getProviderByName1(f, p) {
                        if (p === void 0) {
                            p = exports.arProviders;
                        }
                        for(var h = 0; h < p.length; h++){
                            if (p[h].name.toLowerCase() === f.toLowerCase()) {
                                return p[h];
                            }
                        }
                    },
                    hideProvidersByName: function hideProvidersByName1(f, p, h) {
                        if (p === void 0) {
                            p = "";
                        }
                        if (h === void 0) {
                            h = exports.arProviders;
                        }
                        p = p.toLowerCase();
                        var v = p.split(" ").join("").split(".").join("").toLowerCase().split(",");
                        v = replaceWildcard(v, h);
                        for(var w = 0; w < v.length; w++){
                            for(var m = 0; m < f.length; m++){
                                var b = f[m];
                                var y = b.name || b.toString();
                                if (y) {
                                    y = y.toLowerCase();
                                }
                                if (y === v[w]) {
                                    f.splice(m, 1);
                                }
                            }
                        }
                        return f;
                    },
                    _getProviderByID: function getProviderById1(f, p) {
                        if (p === void 0) {
                            p = exports.arProviders;
                        }
                        for(var h = 0; h < p.length; h++){
                            if (p[h].ID === f) {
                                return p[h];
                            }
                        }
                    },
                    getProvidersForRequiredCapabilities: function getProvidersForRequiredCapabilities1(f, p) {
                        if (p == null) {
                            p = [];
                        }
                        var h = [];
                        for(var v = 0; v < f.length; v++){
                            var w = f[v];
                            var m = true;
                            for(var b = 0; b < p.length; b++){
                                var y = false;
                                for(var S = 0; S < w.arDefaultCapabilities.length; S++){
                                    if (w.arDefaultCapabilities[S].toLowerCase() == p[b].toLowerCase()) {
                                        y = true;
                                        break;
                                    }
                                }
                                if (!y) {
                                    m = false;
                                    break;
                                }
                            }
                            if (m) {
                                h.push(w);
                            }
                        }
                        return h;
                    },
                    updateRefUID: function updateRefUID1(f, p, h) {
                        if (!f) f = thisScript.globalConf["APIKey"];
                        if (!p) {
                            p = {};
                            if (document.location.href.indexOf("#") != -1) {
                                p = keyValueUtils.deserialize(document.location.href.split("#")[1]);
                            }
                        }
                        if (!h) {
                            h = {};
                            if (document.location.href.indexOf("?") != -1) {
                                h = keyValueUtils.deserialize(document.location.href.split("?")[1].split("#")[0]);
                            }
                        }
                        if (p["guid"] && p["guid"] != "_") {
                            setGigRefUidCookie(f, p["guid"]);
                        }
                        var v = p["_giguuid"] || h["_giguuid"];
                        if (v) {
                            setGigRefUidCookie(f, v);
                        }
                    },
                    hideUI: function() {
                        var f = utils.object.merge([
                            thisScript.globalConf,
                            arguments
                        ]);
                        for(var p in o(!1), _.plugins.instances){
                            var h = _.plugins.instances[p];
                            h.isModal && h.dispose();
                        }
                        for(var v in utils.DOM._popupContainers){
                            var w = utils.DOM._popupContainers[v];
                            null != w && (w.innerHTML = "", w.parentNode && (w.style.display = "none"));
                            var m = document.getElementById("gigya_ifr_" + v);
                            null != m && (m.style.display = "none");
                        }
                        if (events.global.dispatch({
                            eventName: "HideUIRequested"
                        }), "function" == typeof f.callback) {
                            var b = {
                                status: "OK",
                                statusMessage: "",
                                operation: "hideUI",
                                context: f.context,
                                errorMessage: "",
                                errorCode: 0
                            };
                            f.callback(b);
                        }
                    },
                    getProviderShareCounts: function getProviderShareCounts1() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            thisScript.globalConf,
                            f
                        ]);
                        scriptUtils.load(cdn_1.getCdnResource("/js/gigya.services.socialize.plugins.shareCounts.min.js"), null, function() {
                            socialize.plugins.shareCounts.getProviderShareCounts(h);
                        }, true);
                    },
                    addEventHandlers: function socializeAddEventHandlers1() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            thisScript.globalConf,
                            f
                        ]);
                        var v = h["namespace"] ? h["namespace"] : "socialize";
                        for(var w in h){
                            if (w.indexOf("on") == 0) globalEvents.add(w, h[w], h["listenerType"], h["context"], v, h);
                        }
                        if (typeof h["callback"] == "function") {
                            h["callback"]({
                                status: "OK",
                                statusMessage: "",
                                errorCode: 0,
                                errorMessage: "",
                                operation: "addEventHandlers",
                                context: h["context"]
                            });
                        }
                    },
                    isLoggedIn: function isLoggedIn1() {
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            arguments
                        ]);
                        socialize.getUserInfo(f, {
                            callback: function(p) {
                                var h = p["user"];
                                var v = {
                                    loggedIn: h ? validationUtils.isExplicitTrue(h["isLoggedIn"]) : false
                                };
                                objectUtils.extractProperties(p, v, "status|statusMessage|callId|errorCode|errorMessage|errorDetails|context");
                                if (f["callback"]) f["callback"](v);
                            }
                        });
                    },
                    waitForService: function waitForService1() {
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            arguments
                        ]);
                        var p = f["service"];
                        if (!p) return;
                        p = p.toLowerCase();
                        var h = f["callback"];
                        if (p == "fbconnect" || p == "facebook") {
                            if (!facebookExternal.isLoaded()) {
                                socialize.addEventHandlers({
                                    listenerType: "component"
                                }, {
                                    onFacebookLoaded: h,
                                    context: f["context"]
                                });
                            } else {
                                h({
                                    context: f["context"]
                                });
                            }
                        }
                        if (p == "googleplus") {
                            if (!googlePlusExternal.isLoaded()) {
                                socialize.addEventHandlers({
                                    listenerType: "component"
                                }, {
                                    onGooglePlusLoaded: h,
                                    context: f["context"]
                                });
                            } else {
                                h({
                                    context: f["context"]
                                });
                            }
                        }
                    },
                    postBookmark: function postBookmark1() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        return tslib_1.__awaiter(this, void 0, void 0, function() {
                            var p, h, v, w, m, b, y, S, E, C, I, R, A, I, R, U;
                            return tslib_1.__generator(this, function(x) {
                                switch(x.label){
                                    case 0:
                                        p = objectUtils.merge([
                                            thisScript.globalConf,
                                            f
                                        ]);
                                        if (!p["APIKey"]) {
                                            p["APIKey"] = thisScript.APIKey;
                                        }
                                        h = {};
                                        objectUtils.extractProperties([
                                            p
                                        ], h, consts_1.postBookmarkSchema);
                                        if (!h["url"] && h["URL"]) {
                                            h["url"] = h["URL"];
                                            delete h["URL"];
                                        }
                                        h["sdk"] = "js_" + build.version;
                                        if (!h["url"] && h["userAction"] && !h["userAction"]["linkBack"]) {
                                            v = document.getElementsByTagName("meta");
                                            for(w = 0; w < v.length; w++){
                                                if (v[w].getAttribute("property") === "og:url" && v[w].getAttribute("content")) {
                                                    h["url"] = v[w].getAttribute("content");
                                                    break;
                                                }
                                            }
                                        }
                                        if (!h["url"] && h["userAction"] && !h["userAction"]["linkBack"]) {
                                            h["url"] = document.location.href;
                                        }
                                        h["provider"] = h["provider"] ? (h["provider"] + "").toLowerCase() : "";
                                        if (h["provider"] === "facebook") {
                                            h["providerKey"] = Opengraph.getMetaTag("fb:app_id");
                                        }
                                        return [
                                            4,
                                            _.apiAdapter.getGmidTicket()
                                        ];
                                    case 1:
                                        m = x.sent();
                                        if (m) {
                                            h["gmidTicket"] = m;
                                        }
                                        b = _.bookmarkSize[h["provider"]] || {};
                                        y = {
                                            width: p["popupWidth"] || b.w,
                                            height: p["popupHeight"] || b.h,
                                            top: p["popupPositionY"],
                                            left: p["popupPositionX"],
                                            menubar: 0,
                                            resizable: 1,
                                            scrollbars: 1
                                        };
                                        if (p["enablePopupLocation"]) {
                                            y.location = 1;
                                            y.toolbar = 1;
                                        } else {
                                            y.toolbar = 0;
                                        }
                                        S = _.apiAdapters["web"] ? _.apiAdapters["web"].tokenStore : undefined;
                                        if (S) {
                                            h["login_token"] = _.apiAdapters.web.tokenStore.get();
                                        }
                                        if (h["provider"] === "twitter" && LocalInfo_1.localInfo.isIOS) {
                                            C = h["userAction"] || {};
                                            I = {
                                                url: C["linkBack"] || h["url"],
                                                text: C["title"] || h["title"]
                                            };
                                            R = "https://twitter.com/intent/tweet?{0}";
                                            E = stringUtilsUtils.format(R, keyValueUtils.serialize(I));
                                            A = p["sourceData"] ? objectUtils.clone(p["sourceData"]) : {};
                                            A.provider = h["provider"];
                                            A.url = I.url;
                                            legacyReports.report("share", p["APIKey"], p["cid"], p["source"], A, {
                                                tags: p["tags"]
                                            });
                                        } else {
                                            I = keyValueUtils.serialize(h);
                                            R = "https://" + _.getApiDomain("socialize") + "/gs/bookmark.aspx?{0}";
                                            E = stringUtilsUtils.format(R, I);
                                        }
                                        LegacyLogger_1.logCall("postBookmark", h);
                                        globalEvents.dispatch({
                                            eventName: "beforeRequest",
                                            methodName: "socialize.postBookmark",
                                            rawParams: p,
                                            params: h
                                        });
                                        U = h["provider"] === "whatsapp" ? "_self" : "gs_bookmark_" + h["provider"];
                                        winUtils.open(E, U, y);
                                        return [
                                            2
                                        ];
                                }
                            });
                        });
                    },
                    refreshUI: function refreshUI1() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            thisScript.globalConf,
                            f
                        ]);
                        var v = h["callback"];
                        socialize.getUserInfo(h, {
                            callback: function(f) {
                                var p = {
                                    eventName: "login",
                                    isInternal: true
                                };
                                if (h["provider"]) p["provider"] = h["provider"];
                                InternalFlows_1.addUserInfoToEvent(f, p, true);
                                if (h["context"]) p["context"] = h["context"];
                                globalEvents.dispatch(p);
                                if (typeof v == "function") v(f);
                            }
                        });
                    },
                    trackReferrals: function trackReferrals1() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = {
                            "digg.com": "digg",
                            "stumbleupon.com": "stumbleupon",
                            "technorati.com": "technorati",
                            "t.co": "twitter",
                            "plus.url.google.com": "googlePlus",
                            "facebook.com": "facebook",
                            "linkedin.com": "linkedIn",
                            "pinterest.com": "pinterest",
                            "mixi.jp": "mixi",
                            "b.hatena.ne.jp": "hatena",
                            "line.me": "line"
                        };
                        var v;
                        var w = objectUtils.merge([
                            thisScript.globalConf,
                            f
                        ]);
                        var m = {
                            eventName: "linkback",
                            CID: w["cid"]
                        };
                        var b = {};
                        var y = {};
                        if (document.location.href.indexOf("#") != -1) {
                            y = keyValueUtils.deserialize(document.location.href.split("#")[1]);
                        }
                        if (document.location.href.indexOf("?") != -1) {
                            b = keyValueUtils.deserialize(document.location.href.split("?")[1].split("#")[0]);
                        }
                        socialize.updateRefUID(w["APIKey"], y, b);
                        var S = y["_gus"] != null || b["_gus"] != null;
                        if (S) {
                            m.CID = y["_gucid"] || b["_gucid"];
                            m.shortCode = y["_gsc"] || b["_gsc"];
                            m.provider = y["_gup"] || b["_gup"];
                        }
                        if (!v) {
                            var E;
                            var C = {
                                url: document.location.href,
                                ref: document.referrer
                            };
                            if (b["fb_ref"]) {
                                var I = keyValueUtils.deserialize(b["fb_ref"], ":");
                                C["uuid"] = I["uu"];
                                C["sn"] = I["p"];
                                E = I["s"];
                            } else if (document.referrer && document.referrer.indexOf("://") != -1) {
                                var R = document.referrer.split("://")[1].split("/")[0];
                                if (R.indexOf("www.") == 0) {
                                    R = R.split("www.")[1];
                                }
                                if (h[R]) {
                                    m.provider = C["sn"] = h[R];
                                }
                            }
                            if (!C["sn"] && (!document.referrer || document.referrer.indexOf("http://soc.li") == -1 && document.referrer.indexOf("https://shr.gs") == -1)) {
                                var A = document.location.href.split("#guid=");
                                if (A.length > 1) {
                                    var U = A[1].split("#")[0].split("&")[0];
                                    if (U != _.apiAdapter.getTokenParam(w["APIKey"], "UUID")) {
                                        C["sn"] = "AddressBarShares";
                                        C["uuid"] = U;
                                        if (U == "_") delete C["uuid"];
                                        document.location.replace("#");
                                        legacyReports.trackAddressBarShares();
                                        C.url = document.location.href.split("#")[0];
                                    }
                                }
                            }
                            if (C["uuid"]) {
                                setGigRefUidCookie(w["APIKey"], C["uuid"]);
                            }
                            if (C["sn"] && !S) legacyReports.report("linkback", w["APIKey"], w["cid"], E, null, C);
                            if (C["sn"] || S) globalEvents.dispatch(objectUtils.removeUndefined(m));
                            v = true;
                        }
                        if (typeof w["callback"] == "function") w["callback"]({
                            status: "OK",
                            statusMessage: "",
                            operation: "trackReferrals",
                            context: w["context"],
                            errorMessage: "",
                            errorCode: 0
                        });
                    },
                    User: function(f) {
                        var p = defaultObjects[name];
                        for(var h in p){
                            this[h] = objectUtils.clone(p[h]);
                        }
                        if (typeof f == "object") {
                            for(var h in f){
                                if (typeof f[h] != "function") {
                                    this[h] = objectUtils.clone(f[h]);
                                }
                            }
                        }
                    },
                    Friend: function(f) {
                        var p = defaultObjects[name];
                        for(var h in p){
                            this[h] = objectUtils.clone(p[h]);
                        }
                        if (typeof f == "object") {
                            for(var h in f){
                                if (typeof f[h] != "function") {
                                    this[h] = objectUtils.clone(f[h]);
                                }
                            }
                        }
                    },
                    Identity: function(f) {
                        var p = defaultObjects[name];
                        for(var h in p){
                            this[h] = objectUtils.clone(p[h]);
                        }
                        if (typeof f == "object") {
                            for(var h in f){
                                if (typeof f[h] != "function") {
                                    this[h] = objectUtils.clone(f[h]);
                                }
                            }
                        }
                    },
                    Contact: function(f) {
                        var p = defaultObjects[name];
                        for(var h in p){
                            this[h] = objectUtils.clone(p[h]);
                        }
                        if (typeof f == "object") {
                            for(var h in f){
                                if (typeof f[h] != "function") {
                                    this[h] = objectUtils.clone(f[h]);
                                }
                            }
                        }
                    },
                    person: function(f) {
                        var p = defaultObjects[name];
                        for(var h in p){
                            this[h] = objectUtils.clone(p[h]);
                        }
                        if (typeof f == "object") {
                            for(var h in f){
                                if (typeof f[h] != "function") {
                                    this[h] = objectUtils.clone(f[h]);
                                }
                            }
                        }
                    },
                    personwithuid: function(f) {
                        var p = defaultObjects[name];
                        for(var h in p){
                            this[h] = objectUtils.clone(p[h]);
                        }
                        if (typeof f == "object") {
                            for(var h in f){
                                if (typeof f[h] != "function") {
                                    this[h] = objectUtils.clone(f[h]);
                                }
                            }
                        }
                    },
                    UserAction: function(f) {
                        var p = defaultObjects[name];
                        for(var h in p){
                            this[h] = objectUtils.clone(p[h]);
                        }
                        if (typeof f == "object") {
                            for(var h in f){
                                if (typeof f[h] != "function") {
                                    this[h] = objectUtils.clone(f[h]);
                                }
                            }
                        }
                    },
                    Collection: function(f, p) {
                        this.arr = f;
                        this._key = p ? p : "";
                    },
                    login: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    addConnection: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    requestPermissions: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    showDebugUI: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    showLoginUI_v1: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    showLoginUI_v2: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    showLoginUI: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = f[0];
                        var v = f[1];
                        if (!v) {
                            v = h;
                            h = null;
                        }
                        if (!v) {
                            v = {};
                            f.push(v);
                        }
                        var w = objectUtils.merge([
                            {},
                            h,
                            v
                        ]);
                        selector.callVersion("" + w[versionField], v, f);
                    },
                    showAddConnectionsUI_v1: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    showAddConnectionsUI_v2: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    showAddConnectionsUI: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = f[0];
                        var v = f[1];
                        if (!v) {
                            v = h;
                            h = null;
                        }
                        if (!v) {
                            v = {};
                            f.push(v);
                        }
                        var w = objectUtils.merge([
                            {},
                            h,
                            v
                        ]);
                        selector.callVersion("" + w[versionField], v, f);
                    },
                    showEditConnectionsUI: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    showSimpleShareUI: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    showShareMobileUI: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getAvailableProviders: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    notifyLogin: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    convertAction: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    deleteAccount: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    delUserSettings: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getContacts: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getRawData: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getSessionInfo: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getUserInfo: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    checkin: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    logout: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    notifyRegistration: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    removeConnection: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    setUID: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    unlinkAccounts: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    facebookGraphOperation: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    notifySSOLogin: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    connect: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    disconnect: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    linkAccounts: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    showConnectUI: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = f[0];
                        var v = f[1];
                        if (!v) {
                            v = h;
                            h = null;
                        }
                        if (!v) {
                            v = {};
                            f.push(v);
                        }
                        var w = objectUtils.merge([
                            {},
                            h,
                            v
                        ]);
                        selector.callVersion("" + w[versionField], v, f);
                    },
                    GrayOut: function o1(f, p) {
                        var h = p || {}, v = h.zindex || 50, w = h.opacity || 70, m = w / 100, b = h.bgcolor || "#000000", y = document.getElementById("darkenScreenObject"), S = document.body;
                        if (!y) {
                            var E = localInfo.isMobile || localInfo.isIE6 || "BackCompat" == document.compatMode, C = document.documentElement.scrollTop;
                            0 == C && (C = document.body.scrollTop);
                            var I = document.createElement("div");
                            E ? (I.style.position = "absolute", I.style.top = C + "px") : (I.style.position = "fixed", I.style.top = "0px"), I.style.overflow = "hidden", I.style.left = "0px", I.style.display = "none", I.id = "darkenScreenObject", I.innerHTML = "&#160;", S.appendChild(I), y = document.getElementById("darkenScreenObject"), attachedFixGray || (attachedFixGray = !0, window.addEventListener && window.addEventListener("resize", i._fixGraySize, !1), window.attachEvent && window.attachEvent("onresize", i._fixGraySize), E && (window.addEventListener && window.addEventListener("scroll", i._fixGrayPosition, !1), window.attachEvent && window.attachEvent("onscroll", i._fixGrayPosition)));
                        }
                        if (f) {
                            var R, A;
                            if (window.innerHeight && (R = window.innerHeight, A = window.innerWidth), void 0 === R) {
                                var U = document.documentElement;
                                R = U.clientHeight, A = U.clientWidth;
                            }
                            0 == A && (A = S.clientWidth), 0 == R && (R = S.clientHeight), y.style.opacity = m.toString(), y.style.MozOpacity = m, y.style.width = A + "px", y.style.height = R + "px", y.style.filter = "alpha(opacity=" + w + ")", y.style.zIndex = v, y.style.backgroundColor = b, y.style.display = "block";
                        } else S.removeChild(y);
                    },
                    getStyleString: function(f, p) {
                        var h = "";
                        return h += "line-height: normal;", p && (h += "cursor:pointer;"), f.underline && (h += "text-decoration:underline;"), f.font && (h += "font-family:" + f.font + ";"), f.size && (h += "font-size:" + f.size + "px;"), f.color && (h += "color:" + f.color + ";"), f.bold && (h += "font-weight:bold;"), f["frame-thickness"] && (h += "border-style:solid; border-width:" + f["frame-thickness"] + "px;"), f["frame-color"] && (h += "border-color:" + f["frame-color"] + ";"), f["background-color"] && (h += "background-color:" + f["background-color"] + ";"), h;
                    },
                    _fixGrayPosition: function() {
                        var f = document.getElementById("darkenScreenObject");
                        if (f) {
                            var p = document.documentElement, h = document.body, v = p.scrollTop;
                            0 == v && (v = h.scrollTop);
                            var w = p.scrollLeft;
                            0 == w && (w = h.scrollLeft);
                            var m = p.clientHeight;
                            0 == m && (m = h.clientHeight);
                            var b = p.clientWidth;
                            0 == b && (b = h.clientWidth), localInfo.isIE6 && (b -= 1), f.style.top = v.toString(), f.style.left = w.toString();
                        }
                    },
                    _fixGraySize: function() {
                        var f = document.getElementById("darkenScreenObject");
                        if (f) {
                            var p = document.documentElement, h = document.body, v = p.clientHeight;
                            0 == v && (v = h.clientHeight);
                            var w = p.clientWidth;
                            0 == w && (w = h.clientWidth), localInfo.isIE6 && (w -= 1), f.style.width = w + "px", f.style.height = v + "px";
                        }
                    },
                    _createJSPopup: function(f, p, h, v) {
                        var w = a(f).req, m = w.p, b = w.c;
                        utils.validation.isExplicitFalse(m.showCaption) && (v = !0);
                        var y = document.getElementById(m.containerID);
                        w.container = y;
                        var S = p.Resolve("+/config/body/background"), E = p.Resolve("+/config/body/captions"), C = '<table role="presentation" style="' + i.getStyleString(S) + ';empty-cells:show;" cellpadding="0" cellspacing="0" >';
                        v ? C += "<tr><td>" : (C += '<tr style="' + i.getStyleString(E) + '"><td><table role="presentation" style="width:100%" width="100%" cellpadding="0" cellspacing="0"><tr id="' + m.containerID + '_caption"><td style="vertical-align:middle"><div style="' + i.getStyleString(E) + ';padding:7px">' + h + '</div></td><td style="vertical-align:middle">', C += '<div align="right" style="padding-right: 7px; cursor: pointer;' + i.getStyleString(E) + '"><img tabindex="0" onclick="gigya.services.socialize._closeComponent(\'' + f + '\', true);"  src="' + _.getCdnResource("/gs/i/HTMLLogin/closeIcon.gif") + '" alt="" /></div></td></tr></table></td></tr><tr><td colspan="2">'), C += '<div id="' + m.containerID + '_container"></div></td></tr></table>', y.innerHTML = C;
                        var I = {}, R = {};
                        for(var A in m)I[A] = m[A];
                        for(A in b)R[A] = b[A];
                        var U = document.getElementById(I.containerID + "_caption");
                        return I.height = I.height - 2 * S["frame-thickness"], v || (I.height -= U.offsetHeight), I.width = I.width - 2 * S["frame-thickness"], utils.DOM._popupContainers[I.containerID] = y, I.containerID = I.containerID + "_container", {
                            c: R,
                            p: I
                        };
                    },
                    _createJSPopup2: function(f, p, h, v, w, m) {
                        var b = a(f).req, y = b.p, S = b.c, E = document.getElementById(y.containerID);
                        b.container = E;
                        var C = p.Resolve("+/config/body/captions");
                        h || (h = 10), v || (v = _.getCdnResource("/gs/i/Dialog/DialogBg_"));
                        var I, R = "width:" + h + "px;height:" + h + "px";
                        m && (I = "1px solid #555555");
                        var A = '<table role="presentation" style="font-size:1px;padding:0px;margin:0px;vertical-align:middle;font-size:1px;line-height:1px;empty-cells:show;" cellpadding="0" cellspacing="0" >';
                        A += '<tr><td height="' + h + '" style="font-size:1px"><div style="height:' + h + 'px"><img src="' + v + 'TopLeft.png" style="' + R + '" alt="" /></div></td><td height="' + h + '" style="background-image:url(\'' + v + 'filler.png\');bakground-repeat:repeat"></td><td height="' + h + '" style="font-size:1px;"><div style="height:' + h + 'px"><img style="' + R + '" src="' + v + 'TopRight.png" alt="" /></div></td></tr>', w && (A += "<tr><td style=\"background-image:url('" + v + 'filler.png\');background-repeat:repeat"></td><td><table width="100%" cellspacing="0" cellpadding="0" style="border-top:' + I + ";border-left:" + I + ";border-right:" + I + ';width:100%;background-color:#FFFFFF"><tr><td style="padding-top:10px;padding-left:10px;' + i.getStyleString(C) + '">' + w + '</td><td align="right" valign="top" style="' + i.getStyleString(C) + '"><div style="padding-right:5px;padding-top:5px;text-align:right;"><img tabindex="0" style="cursor:pointer" onclick="gigya.services.socialize._closeComponent(\'' + f + '\', true);" src="' + v + 'close.png" alt="" /></div></td></tr></table></td><td style="background-image:url(\'' + v + "filler.png');background-repeat:repeat\"></td></tr>"), A += "<tr><td style=\"background-image:url('" + v + 'filler.png\');background-repeat:repeat"></td><td><div style="border-bottom:' + I + ";border-left:" + I + ";border-right:" + I + ';background-color:#FFFFFF" id="' + y.containerID + '_container"></div></td><td style="background-image:url(\'' + v + "filler.png');background-repeat:repeat\"></td></tr>", A += '<tr><td height="' + h + '" style="font-size:1px;"><div style="height:' + h + 'px"><img style="' + R + '" src="' + v + 'BottomLeft.png" alt="" /></div></td><td height="' + h + '" style="background-image:url(\'' + v + 'filler.png\');bakground-repeat:repeat"></td><td height="' + h + '" style="font-size:1px;"><div style="height:' + h + 'px"><img style="' + R + '" src="' + v + 'BottomRight.png" alt="" /></div></td></tr></table>', E.innerHTML = A;
                        var U = {}, x = {};
                        for(var N in y)U[N] = y[N];
                        for(N in S)x[N] = S[N];
                        return utils.DOM._popupContainers[U.containerID] = E, U.containerID = U.containerID + "_container", U.height = U.height - 2 * h, w && ("" == w.replace(/ /g, "") ? U.height -= 10 : U.height -= o.measureText(w, C).h + 10), U.width = U.width - 2 * h, {
                            c: x,
                            p: U
                        };
                    },
                    _parseRID: function a1(f) {
                        var p, h = f.split("@"), v = document.getElementById(h[2] + "_" + h[1]), w = h[2];
                        null == (p = utils.DOM._pseudoContainers[w]) && (p = document.getElementById(h[2]));
                        var m = null;
                        null != p && (m = p.Reqs);
                        var b = null;
                        return null != m && (b = m[parseInt(h[0])]), {
                            rid: f,
                            container: p,
                            Reqs: m,
                            req: b,
                            swf: v
                        };
                    },
                    _closeComponent: function(f, p) {
                        var h = socialize._parseRID(f).req;
                        socialize.GrayOut && socialize.GrayOut(!1);
                        var v = document.getElementById("gigya_ifr_" + h.container.id);
                        null != v && (v.style.display = "none"), p && events.dispatchForWidget({
                            eventName: "close"
                        }, h.p), h.container.style.display = "none";
                    },
                    plugins: {
                        login: {
                            instances: [],
                            showLoginUI_v2: function(f) {
                                var p = "gigya." + namespace + ".plugins." + pluginName + ".instances[" + ns.instances.length + "]";
                                var h = new pluginClass(f, p);
                                ns.instances.push(h);
                            },
                            showAddConnectionsUI_v2: function(f) {
                                var p = "gigya." + namespace + ".plugins." + pluginName + ".instances[" + ns.instances.length + "]";
                                var h = new pluginClass(f, p);
                                ns.instances.push(h);
                            }
                        }
                    }
                },
                gcs: {
                    submitUserForm: function submitUserForm1() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = {};
                        var v = objectUtils.merge([
                            thisScript.globalConf,
                            f
                        ]);
                        var w = document.getElementById(v["form"]);
                        if (!w) {
                            var m = document.getElementsByName(v["form"]);
                            if (m && m.length > 0) v["form"] = m[0];
                        }
                        for(var b = 0; b < w["elements"].length; b++){
                            var y = w["elements"][b];
                            if (y.name) {
                                var S = y.name.split(".");
                                var E = h;
                                for(var C = 0; C < S.length - 1; C++){
                                    var I = S[C];
                                    if (!E[I]) E[I] = {};
                                    E = E[I];
                                }
                                E[S[S.length - 1]] = y.value;
                            }
                        }
                        v["data"] = h;
                        gcs.setUserData(v);
                    },
                    getUserData: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    setUserData: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    search: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getSchema: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    }
                },
                accounts: {
                    addEventHandlers: function accountsAddEventHandlers1() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        socializeAddEventHandlers(objectUtils.merge([
                            f,
                            {
                                namespace: "accounts"
                            }
                        ]));
                    },
                    b2b: {
                        openDelegatedAdminLogin: function openDelegateAdminHandler1(f) {
                            if (!f) {
                                f = {};
                            }
                            var p = window.open("", "_blank");
                            f["callback"] = function(h) {
                                if (h.errorCode !== GSErrors_1.GSErrors.OK) {
                                    p.close();
                                    if (typeof f.onError === "function") {
                                        f.onError(h);
                                    }
                                } else if (!h.targetUrl || !h.id_token) {
                                    p.close();
                                    logger.error("accounts.b2b.delegatedAdminLogin - missing required params", {
                                        targetURL: h.targetUrl,
                                        id_token: h.id_token
                                    });
                                } else {
                                    HTTPUtils.redirect(h.targetUrl, [
                                        {
                                            id_token: h.id_token
                                        }
                                    ], h["method"] ? h["method"] : "POST", undefined, p.document);
                                }
                            };
                            accounts.b2b.delegatedAdminLogin(f);
                        },
                        registerOrganization: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        getOrganizationSchema: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        delegatedAdminLogin: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        getOrganizationInfo: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        setOrganizationContext: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        getOrganizationContext: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        auth: {
                            getAssets: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            }
                        }
                    },
                    setSSOToken: function setSSOToken1() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        return tslib_1.__awaiter(this, void 0, gigya.Promise, function() {
                            var p, h;
                            return tslib_1.__generator(this, function(v) {
                                p = utils.object.merge([
                                    thisScript.globalConf,
                                    f
                                ]);
                                h = p["redirectURL"] || document.location.href;
                                utils.HTTP.redirect(h, [
                                    {}
                                ], "GET", "_top");
                                return [
                                    2
                                ];
                            });
                        });
                    },
                    auth: {
                        fido: {
                            register: function registerPasskey1(f) {
                                if (f === void 0) {
                                    f = {};
                                }
                                return PasskeyService_1.default.registerPasskey(f, true).then(function(p) {
                                    return invokeCallback(f, p);
                                }).catch(function(p) {
                                    throw invokeCallback(f, p);
                                });
                            },
                            login: function passkeyLogin1(f) {
                                if (f === void 0) {
                                    f = {};
                                }
                                return PasskeyService_1.default.authenticate(f).then(function(p) {
                                    return invokeCallback(f, p);
                                }).catch(function(p) {
                                    throw invokeCallback(f, p);
                                });
                            },
                            initRegisterCredentials: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            registerCredentials: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            getAssertionOptions: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            verifyAssertion: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            getCredentials: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            removeCredential: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            }
                        },
                        getPreferredLoginMethod: function getPreferredLoginMethod1(f) {
                            return SiteData_1.siteData.getPreferredLoginMethod(f);
                        },
                        setPreferredLoginMethod: function setPreferredLoginMethod1(f, p) {
                            SiteData_1.siteData.setPreferredLoginMethod(f, p);
                        },
                        guest: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        otp: {
                            verify: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            authenticate: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            email: {
                                sendCode: function() {
                                    var f = [];
                                    for(var p = 0; p < arguments.length; p++){
                                        f[p] = arguments[p];
                                    }
                                    var h = objectUtils.merge([
                                        f
                                    ]);
                                    var fnRun1 = function() {
                                        if (h.lang) {
                                            h._explicitLang = true;
                                        }
                                        var f = objectUtils.merge([
                                            thisScript.globalConf,
                                            h
                                        ]);
                                        _this.run(f, h);
                                    };
                                    if (!thisScript || !thisScript.globalConf) {
                                        queueUtils.queueForExecution("API", fnRun1);
                                    } else {
                                        fnRun1();
                                    }
                                },
                                login: function() {
                                    var f = [];
                                    for(var p = 0; p < arguments.length; p++){
                                        f[p] = arguments[p];
                                    }
                                    var h = objectUtils.merge([
                                        f
                                    ]);
                                    var fnRun1 = function() {
                                        if (h.lang) {
                                            h._explicitLang = true;
                                        }
                                        var f = objectUtils.merge([
                                            thisScript.globalConf,
                                            h
                                        ]);
                                        _this.run(f, h);
                                    };
                                    if (!thisScript || !thisScript.globalConf) {
                                        queueUtils.queueForExecution("API", fnRun1);
                                    } else {
                                        fnRun1();
                                    }
                                }
                            }
                        },
                        getMethods: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        push: {
                            sendVerification: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            isVerified: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            }
                        },
                        magiclink: {
                            email: {
                                send: function() {
                                    var f = [];
                                    for(var p = 0; p < arguments.length; p++){
                                        f[p] = arguments[p];
                                    }
                                    var h = objectUtils.merge([
                                        f
                                    ]);
                                    var fnRun1 = function() {
                                        if (h.lang) {
                                            h._explicitLang = true;
                                        }
                                        var f = objectUtils.merge([
                                            thisScript.globalConf,
                                            h
                                        ]);
                                        _this.run(f, h);
                                    };
                                    if (!thisScript || !thisScript.globalConf) {
                                        queueUtils.queueForExecution("API", fnRun1);
                                    } else {
                                        fnRun1();
                                    }
                                },
                                login: function() {
                                    var f = [];
                                    for(var p = 0; p < arguments.length; p++){
                                        f[p] = arguments[p];
                                    }
                                    var h = objectUtils.merge([
                                        f
                                    ]);
                                    var fnRun1 = function() {
                                        if (h.lang) {
                                            h._explicitLang = true;
                                        }
                                        var f = objectUtils.merge([
                                            thisScript.globalConf,
                                            h
                                        ]);
                                        _this.run(f, h);
                                    };
                                    if (!thisScript || !thisScript.globalConf) {
                                        queueUtils.queueForExecution("API", fnRun1);
                                    } else {
                                        fnRun1();
                                    }
                                }
                            }
                        },
                        login: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        }
                    },
                    socialLogin: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    showMyPhotoUI: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    showTfaUI: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    initHostedPage: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    showScreenSet: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    hideScreenSet: function(f) {
                        if (!_this.injectionInfo) {
                            LegacyLogger_1.addLog("invalid injection info", _this, false);
                            return;
                        }
                        var p = _this.getPublicMethod(methodName);
                        var h = UiApiHelpers_1.getPluginInstance(f, _this.injectionInfo);
                        if (!h) {
                            LegacyLogger_1.addLog("couldn't find instance", _this, false);
                        } else {
                            var v = [];
                            arrayUtils.forEach(p.argNames, function(p) {
                                if (p && f[p] !== undefined) v.push(f[p]);
                            });
                            h[p.instanceMethod].apply(h, v);
                        }
                    },
                    switchScreen: function(f) {
                        if (!_this.injectionInfo) {
                            LegacyLogger_1.addLog("invalid injection info", _this, false);
                            return;
                        }
                        var p = _this.getPublicMethod(methodName);
                        var h = UiApiHelpers_1.getPluginInstance(f, _this.injectionInfo);
                        if (!h) {
                            LegacyLogger_1.addLog("couldn't find instance", _this, false);
                        } else {
                            var v = [];
                            arrayUtils.forEach(p.argNames, function(p) {
                                if (p && f[p] !== undefined) v.push(f[p]);
                            });
                            h[p.instanceMethod].apply(h, v);
                        }
                    },
                    login: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    linkAccounts: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    notifySocialLogin: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    initRegistration: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    initProgression: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    register: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    finalizeRegistration: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    captchaImage: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    importProfilePhoto: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    setProfilePhoto: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    resetPassword: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    removeProfilePhoto: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    isAvailableLoginID: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    address: {
                        suggestions: {
                            get: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            }
                        }
                    },
                    resendVerificationCode: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getCaptcha: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getPolicies: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getSchema: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getSiteConsentDetails: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getLegalStatements: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    verifyLogin: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getAccountInfo: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    setAccountInfo: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    logout: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    search: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getScreenSets: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    sso: {
                        login: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        }
                    },
                    getConflictingAccount: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    resetSitePreferences: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    getJWT: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    },
                    tfa: {
                        getProviders: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        initTFA: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        finalizeTFA: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        deactivateProvider: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        unregisterDevice: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        backupcodes: {
                            get: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            create: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            verify: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            }
                        },
                        phone: {
                            getRegisteredPhoneNumbers: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            removePhone: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            sendVerificationCode: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            completeVerification: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            }
                        },
                        email: {
                            getEmails: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            sendVerificationCode: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            completeVerification: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            }
                        },
                        totp: {
                            register: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            verify: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            getRegistered: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            remove: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            }
                        },
                        push: {
                            isVerified: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            },
                            sendVerification: function() {
                                var f = [];
                                for(var p = 0; p < arguments.length; p++){
                                    f[p] = arguments[p];
                                }
                                var h = objectUtils.merge([
                                    f
                                ]);
                                var fnRun1 = function() {
                                    if (h.lang) {
                                        h._explicitLang = true;
                                    }
                                    var f = objectUtils.merge([
                                        thisScript.globalConf,
                                        h
                                    ]);
                                    _this.run(f, h);
                                };
                                if (!thisScript || !thisScript.globalConf) {
                                    queueUtils.queueForExecution("API", fnRun1);
                                } else {
                                    fnRun1();
                                }
                            }
                        }
                    },
                    groups: {
                        getSchema: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        registerGroup: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        setGroupInfo: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        getGroupInfo: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        deleteGroup: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        setGroupMemberInfo: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        getGroupMemberInfo: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        removeMember: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        getAllMemberGroups: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        searchGroupMembers: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        createInvitation: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        invitationConfirm: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        finalizeInvitation: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        }
                    },
                    otp: {
                        sendCode: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        login: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        update: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        }
                    },
                    identifier: {
                        createToken: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        }
                    },
                    identity: {
                        authorize: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        }
                    },
                    session: {
                        verify: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        }
                    }
                }
            },
            Request: function Request1(f, p, h, v) {
                var w = this;
                if (v === void 0) {
                    v = {};
                }
                this.baseDomain = f;
                this.method = p;
                this.params = h;
                this.settings = v;
                this.retry = 0;
                this.getUrl = function() {
                    return _.Uri.parse(w.baseDomain + "/" + w.method);
                };
            },
            XhrRequest: function XhrRequest1(f, p, h, v, w) {
                if (v === void 0) {
                    v = {};
                }
                if (w === void 0) {
                    w = {};
                }
                var m = _super.call(this, f, p, h, v) || this;
                m.headers = {};
                m.xhttp = new XMLHttpRequest();
                m.setRequestHeaders(w);
                return m;
            },
            Promise: function Promise1(f) {
                this[PROMISE_ID] = nextId();
                this._result = this._state = undefined;
                this._subscribers = [];
                if (noop !== f) {
                    typeof f !== "function" && needsResolver();
                    this instanceof Promise1 ? initializePromise(this, f) : needsNew();
                }
            },
            debug: function p1() {
                a.load(s.getCdnResource("/js/gigya.services.socialize.plugins.log.min.js"), null, function() {}, !0);
            },
            gm: {},
            comments: {},
            gscounters: {},
            getLoginToken: function get1(f) {
                if (f === void 0) {
                    f = thisScript.APIKey;
                }
                var p = utils.cookie.get(_getTokenCookieName(f));
                if (p) {
                    return p.split("|")[0];
                } else {
                    return null;
                }
            },
            updateConfiguration: function updateConfiguration1(f) {
                if (f === void 0) {
                    f = {};
                }
                logger.info("globalConf is updated", {
                    updateObject: f
                });
                __webpack_provided_Object_dot_assign(thisScript.globalConf || {}, f);
            },
            utils: {
                toggles: {},
                array: {
                    indexOf: function indexOf1(f, p) {
                        for(var h = 0; h < f.length; h++){
                            if (f[h] == p) return h;
                        }
                        return -1;
                    },
                    clone: function clone1(f) {
                        var p = [];
                        for(var h = 0; h < f.length; h++){
                            p[h] = f[h];
                        }
                        return p;
                    },
                    removeByValue: function removeByValue1(f, p) {
                        if (!f) return;
                        for(var h = f.length - 1; h >= 0; h--){
                            if (f[h] == p) {
                                f.splice(h, 1);
                            }
                        }
                    },
                    removeByProperty: function removeByProperty1(f, p, h) {
                        if (!f) return;
                        for(var v = f.length - 1; v >= 0; v--){
                            if (f[v][p] == h) {
                                f.splice(v, 1);
                            }
                        }
                    },
                    getArrayFromString: function getArrayFromString1(f, p, h) {
                        if (!f || typeof f != "string") return [];
                        if (h) f = f.toLowerCase();
                        f = f.replace(/[ ]/g, "").replace(/,,/g, ",");
                        if (!f) return [];
                        return f.split(p);
                    },
                    intersect: function intersect1(f) {
                        var p = [];
                        for(var h = 1; h < arguments.length; h++){
                            p[h - 1] = arguments[h];
                        }
                        if (f == null) return [];
                        var v = [];
                        var w = arguments.length;
                        for(var m = 0, b = f.length; m < b; m++){
                            var y = f[m];
                            if (this.indexOf(v, y) != -1) continue;
                            for(var S = 1; S < w; S++){
                                var E = arguments[S];
                                if (E == null || this.indexOf(E, y) == -1) break;
                            }
                            if (S === w) v.push(y);
                        }
                        return v;
                    },
                    lastIndexOf: function lastIndexOf1(f, p, h) {
                        if (h === void 0) {
                            h = 0;
                        }
                        for(var v = f.length; --v >= h;){
                            if (f[v] === p) return v;
                        }
                        return -1;
                    },
                    forEach: function forEach1(f, p) {
                        for(var h = 0; h < f.length; ++h)p(f[h], h, f);
                    },
                    forEachProp: function forEachProp1(f, p) {
                        for(var h in f){
                            if (f.hasOwnProperty(h)) p(f[h], h, f);
                        }
                    },
                    some: function some1(f, p) {
                        for(var h = 0; h < f.length; ++h){
                            if (p(f[h], h, f)) return true;
                        }
                        return false;
                    },
                    every: function every1(f, p) {
                        for(var h = 0; h < f.length; ++h){
                            if (!p(f[h], h, f)) return false;
                        }
                        return true;
                    },
                    everyProp: function everyProp1(f, p) {
                        for(var h in f){
                            if (f.hasOwnProperty(h) && !p(f[h], h, f)) return false;
                        }
                        return true;
                    },
                    map: function map1(f, p) {
                        var h = new Array();
                        forEach(f, function(f, v, w) {
                            return h.push(p(f, v, w));
                        });
                        return h;
                    },
                    firstIndex: function firstIndex1(f, p) {
                        var h = -1;
                        some(f, function(f, v, w) {
                            if (p(f, v, w)) {
                                h = v;
                                return true;
                            }
                            return false;
                        });
                        return h;
                    },
                    first: function first1(f, p) {
                        return f[firstIndex(f, p)];
                    },
                    getAllEnumValues: function getAllEnumValues1(f) {
                        var p = [];
                        for(var h in f)if (typeof f[h] == "number") p.push(f[h]);
                        return p;
                    },
                    getUniqueValues: function getUniqueValues1(f) {
                        for(var p = 0; p < f.length; ++p){
                            for(var h = p + 1; h < f.length; h++)if (f[p] === f[h]) {
                                f.splice(h, 1);
                            }
                        }
                        return f;
                    },
                    includes: function includes1(f, p) {
                        if (f === void 0) {
                            f = [];
                        }
                        return (f === null || f === void 0 ? void 0 : f.indexOf(p)) >= 0;
                    },
                    containsOnly: function containsOnly1(f, p) {
                        if (!f || !p) return false;
                        if (f.length !== p.length) return false;
                        if (f.length === 0 && p.length === 0) return true;
                        return !f.some(function(f) {
                            return !includes(p, f);
                        });
                    }
                },
                browser: {
                    isModern: function isModern1() {
                        return LocalInfo_1.localInfo.isChrome || LocalInfo_1.localInfo.isFF || LocalInfo_1.localInfo.isEdge || LocalInfo_1.localInfo.isOpera || LocalInfo_1.localInfo.isIOSWebView || LocalInfo_1.localInfo.isIE && getVersion() >= 9 || LocalInfo_1.localInfo.isEdgeLegacy || LocalInfo_1.localInfo.isSafari && getVersion() >= 4 || LocalInfo_1.localInfo.isGoogleBot;
                    },
                    getVersion: function getVersion1() {
                        if (_cache.version) return _cache.version;
                        try {
                            var f = userAgent.match(/(opera|chrome|safari|firefox|msie|trident.*rv:)\/?\s*(\.?\d+(\.\d+)*)/i);
                            if (f[2]) {
                                var p = f[2].split(".")[0];
                                if (!isNaN(parseInt(p))) {
                                    return _cache.version = parseInt(p);
                                }
                            }
                        } catch (h) {}
                        return 0;
                    }
                },
                cookie: {
                    _cookieStore: {}
                },
                date: {
                    now: function now1() {
                        return Date.now();
                    }
                },
                delegate: {
                    create: function create1(f, p) {
                        return function() {
                            var h = [];
                            for(var v = 0; v < arguments.length; v++){
                                h[v] = arguments[v];
                            }
                            return p.apply(f, h);
                        };
                    }
                },
                DOM: {
                    _popupContainers: [],
                    _pseudoContainers: [],
                    getNextZIndex: function getNextZIndex1() {
                        _nextZIndex++;
                        return _nextZIndex;
                    },
                    getGigyaScriptElement: function getGigyaScriptElement1(f) {
                        var p = document.getElementsByTagName("script");
                        var h;
                        var v = /\/\/cdn(s)?\.(ru1\.)?gigya.com/;
                        for(var w = p.length - 1; w >= 0; w--){
                            var m = p[w];
                            var b = m.src.toLowerCase();
                            if (b !== "") {
                                if (v.test(b) || b.indexOf("?apikey=") > -1) {
                                    var y = f.length === 0 || f.some(function(f) {
                                        return b.indexOf(f) > -1;
                                    });
                                    if (y) {
                                        h = m;
                                        break;
                                    }
                                }
                            }
                        }
                        return h;
                    },
                    dispatch: function dispatch1(f, p) {
                        var h;
                        try {
                            h = new Event(p);
                        } catch (v) {
                            h = document.createEvent("CustomEvent");
                            h.initCustomEvent(p, true, true, {});
                        }
                        f.dispatchEvent(h);
                    },
                    addButtonSubmitListener: function addButtonSubmitListener1(f, p, h, v) {
                        if (h === void 0) {
                            h = "click";
                        }
                        if (!f) {
                            return;
                        }
                        f.setAttribute("role", "button");
                        if (f.getAttribute("tabindex") != "-1") {
                            f.setAttribute("tabindex", "0");
                        }
                        addEventListener(f, h, function(f) {
                            return p(f);
                        });
                        addEventListener(f, "keydown", function(f) {
                            if ((f.which || f.keyCode) == 13) {
                                f.preventDefault();
                                p(f);
                            }
                        });
                    },
                    addEventListener: function addEventListener1(f, p, h) {
                        if (!f || !h) return;
                        if (f.addEventListener) {
                            f.addEventListener(p, h, true);
                        } else {
                            f.attachEvent("on" + p, h);
                        }
                    },
                    addActivationHandler: function addActivationHandler1(f, p) {
                        if (!f || !p) return;
                        this.addEventListener(f, "keydown", function(f) {
                            if (f.code === "Space" || f.code === "Enter") {
                                p();
                            }
                        });
                        this.addEventListener(f, "click", p);
                    },
                    removeEventListener: function removeEventListener1(f, p, h) {
                        if (!f || !h) return;
                        if (f.removeEventListener) {
                            f.removeEventListener(p, h, true);
                        } else {
                            f.detachEvent("on" + p, h);
                        }
                    },
                    disableDefaultEventHandling: function disableDefaultEventHandling1(f) {
                        if (f.preventDefault) {
                            f.preventDefault();
                        } else if (window.event) {
                            window.event.returnValue = false;
                        }
                    },
                    addDialogBackListener: function addDialogBackListener1(f) {
                        _removeDialogBackListener();
                        backListener = function(p) {
                            if (p && p.newURL && p.newURL.indexOf("|gigyaMobileDialog") == -1) {
                                f(p);
                                _removeDialogBackListener();
                            }
                        };
                        window.setTimeout(function() {
                            if (window.location.hash.indexOf("|gigyaMobileDialog") == -1) {
                                window.location.hash = window.location.hash + "|gigyaMobileDialog";
                            }
                            addEventListener(window, "hashchange", backListener);
                        }, 50);
                    },
                    _removeDialogBackListener: function _removeDialogBackListener1() {
                        if (!backListener) return;
                        removeEventListener(window, "hashchange", backListener);
                        backListener = null;
                        window.location.hash = window.location.hash.replace("|gigyaMobileDialog", "");
                    },
                    prependToBody: function prependToBody1(f, p) {
                        if (p === void 0) {
                            p = window.document;
                        }
                        if (!p.body) return;
                        if (p.body.insertBefore && p.body.firstChild) {
                            p.body.insertBefore(f, p.body.firstChild);
                        } else {
                            p.body.appendChild(f);
                        }
                    },
                    appendToBody: function appendToBody1(f, p) {
                        if (p === void 0) {
                            p = window.document;
                        }
                        if (!p.body) return;
                        p.body.appendChild(f);
                    },
                    removeElement: function removeElement1(f) {
                        if (f && f.parentElement) {
                            f.parentElement.removeChild(f);
                        }
                    },
                    isChildOf: function isChildOf1(f, p) {
                        var h = f.parentNode;
                        while(h){
                            if (p == h) {
                                return true;
                            }
                            h = h.parentNode;
                        }
                        return false;
                    },
                    isVisible: function isVisible1(f) {
                        while(f){
                            var p = getComputedStyle(f);
                            if (p.display === "none" || p.visibility === "hidden") {
                                return false;
                            } else {
                                f = f.parentElement;
                            }
                        }
                        return true;
                    },
                    getCenteredDivID: function getCenteredDivID1(f) {
                        return "gig_" + LocalInfo_1.localInfo.initTime.getTime().toString() + "_" + f;
                    },
                    createElementWithAttributes: function createElementWithAttributes1(f, p) {
                        var h = document.createElement(f);
                        if (p) {
                            for(var v in p){
                                h[v] = p[v];
                            }
                        }
                        return h;
                    },
                    createTopLevelDiv: function createTopLevelDiv1(f) {
                        var p = document.createElement("div");
                        if (p.style.zIndex != null) {
                            p.style.zIndex = "" + getNextZIndex();
                        }
                        p.innerHTML = "";
                        if (f) {
                            p.id = f;
                        }
                        if (document.body) {
                            if (document.body.insertBefore && document.body.firstChild) {
                                document.body.insertBefore(p, document.body.firstChild);
                            } else if (document.body.appendChild) {
                                document.body.appendChild(p);
                            }
                        }
                        return p;
                    },
                    hideByID: function hideByID1(f) {
                        var p = document.getElementById(f);
                        if (p) {
                            p.style.display = "none";
                        }
                    },
                    showByID: function showByID1(f) {
                        var p = document.getElementById(f);
                        if (p) {
                            p.style.display = LocalInfo_1.localInfo.isIE6 ? p.tagName == "TD" ? "table-cell" : p.tagName == "TR" ? "" : p.tagName == "TABLE" ? "" : "block" : "";
                        }
                    },
                    clearByID: function clearByID1(f) {
                        try {
                            var p = document.getElementById(f);
                            if (p != null) {
                                p.innerHTML = "";
                            }
                        } catch (h) {}
                    },
                    getHTMLSize: function getHTMLSize1(f, p) {
                        var h = document.createElement("div");
                        h.style.position = "absolute";
                        h.style.left = "-1000px";
                        h.innerHTML = f;
                        p.appendChild(h);
                        var v = h.offsetWidth;
                        var w = h.offsetHeight;
                        h.parentNode.removeChild(h);
                        return {
                            w: v,
                            h: w
                        };
                    },
                    getElementsByClass: function getElementsByClass1(f, p, h) {
                        if (!f) {
                            return [];
                        }
                        var v = [];
                        if (h && isElementClass(f, p)) {
                            v.push(f);
                        }
                        var w = f.getElementsByTagName("*");
                        for(var m = 0; m < w.length; m++){
                            if (isElementClass(w[m], p)) {
                                v.push(w[m]);
                            }
                        }
                        return v || [];
                    },
                    getElementsByAttribute: function getElementsByAttribute1(f, p, h, v) {
                        var w = [];
                        var m = f.getElementsByTagName(p);
                        for(var b = 0; b < m.length; b++){
                            if (m[b].getAttribute(h) == v) {
                                w.push(m[b]);
                            }
                        }
                        return w;
                    },
                    getElementPosition: function getElementPosition1(f) {
                        if (!f) {
                            return {
                                left: 0,
                                top: 0,
                                bottom: 0,
                                right: 0
                            };
                        }
                        var p = f.getBoundingClientRect();
                        var h = viewportUtils.getScroll();
                        var v = p.left + h.left;
                        var w = p.top + h.top;
                        return {
                            left: v,
                            top: w,
                            right: v + p.width,
                            bottom: w + p.height
                        };
                    },
                    addClassToElement: function addClassToElement1(f, p) {
                        if (!f) {
                            return;
                        }
                        var h = f.className ? getClassNames(f) : [];
                        var v = h.length;
                        var w = p.split(" ");
                        for(var m in w){
                            var b = false;
                            if (!w[m]) {
                                break;
                            }
                            for(var y in h){
                                if (h[y] === w[m]) {
                                    b = true;
                                    break;
                                }
                            }
                            if (!b) {
                                h.push(w[m]);
                            }
                        }
                        if (h.length !== v) {
                            f.className = h.join(" ");
                        }
                    },
                    removeClassFromElement: function removeClassFromElement1(f, p, h) {
                        if (h === void 0) {
                            h = false;
                        }
                        if (!f) {
                            return;
                        }
                        var v = getClassNames(f);
                        for(var w = v.length - 1; w >= 0; w--){
                            if (v[w] === p || h && v[w].indexOf(p) !== -1) {
                                v.splice(w, 1);
                            }
                        }
                        f.className = v.join(" ");
                    },
                    getClassNames: function getClassNames1(f) {
                        var p = [];
                        if (typeof f.className === "string") {
                            p = f.className.split(" ");
                        }
                        return p;
                    },
                    isElementClass: function isElementClass1(f, p) {
                        if (!f) return false;
                        else if (!p) return true;
                        else if (!f.className) return false;
                        var h = false;
                        var v = getClassNames(f);
                        for(var w = 0; w < v.length; w++){
                            if (v[w] === p) {
                                h = true;
                                break;
                            }
                        }
                        return h;
                    },
                    cancelEvent: function cancelEvent1(f) {
                        if (!f) return;
                        if ("cancelable" in f) f.preventDefault();
                        else f.returnValue = false;
                    },
                    createElement: function createElement1(f, p) {
                        var h = document.createElement("div");
                        p = p || "";
                        h.innerHTML = "<" + f + ' name="' + p + '" id="' + p + '"></' + f + ">";
                        return h.firstChild;
                    },
                    setSize: function setSize1(f, p, h, v) {
                        if (f == null || f.style == null) {
                            return;
                        }
                        if (p) {
                            p = "" + p;
                            var w = p.indexOf("%") > 0;
                            if (!isNaN(p) || w) {
                                var m = "" + (w ? p : p + "px");
                                if (f.style.width != m) {
                                    f.style.width = m;
                                }
                            }
                        }
                        if (h) {
                            h = "" + h;
                            var b = h.indexOf("%") > 0;
                            if (!isNaN(p) || b) {
                                var y = "" + (b ? h : h + "px");
                                if (f.style.height !== y) {
                                    f.style.height = y;
                                }
                            }
                        }
                        if (v && p && h) {
                            if (f.style.zIndex == null || v) {
                                f.style.zIndex = "" + getNextZIndex();
                            }
                            var S = viewportUtils.getInnerSize();
                            var E = viewportUtils.getScroll();
                            var C = E.top;
                            var I = E.left;
                            f.style.top = "" + Math.max(0, C + Math.floor((S.h - h) / 2)) + "px";
                            f.style.left = "" + Math.max(0, I + Math.floor((S.w - p) / 2)) + "px";
                            f.style.visibility = "";
                        }
                    },
                    createHiddenIframe: function createHiddenIframe1(f) {
                        var p = document.createElement("iframe");
                        p.src = f;
                        p.style.width = "30px";
                        p.style.height = "10px";
                        p.style.position = "absolute";
                        p.style.top = "-1000px";
                        p.style.left = "-1000px";
                        if (document.body) {
                            appendToBody(p);
                        } else {
                            functionsUtils.invokeOnPageLoad(function() {
                                appendToBody(p);
                            });
                        }
                        return p;
                    },
                    attributeEncode: function attributeEncode1(f) {
                        return f.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\"/g, "&quot;").replace(/\'/g, "&#39;");
                    },
                    manipulateAttributes: function manipulateAttributes1(f, p, h, v) {
                        if (v === void 0) {
                            v = function() {
                                return true;
                            };
                        }
                        f.forEach(function(f) {
                            if (!f.attributes) return;
                            Array.prototype.slice.call(f.attributes).forEach(function(f) {
                                if (v(f)) {
                                    f.value = f.value.replace(p, h);
                                }
                            });
                        });
                    },
                    textNodesUnder: function textNodesUnder1(f) {
                        var p;
                        var h = [];
                        var v = document.createTreeWalker(f, NodeFilter.SHOW_TEXT, null, false);
                        while(p = v.nextNode()){
                            h.push(p);
                        }
                        return h;
                    },
                    isHTMLBooleanAttribute: function isHTMLBooleanAttribute1(f) {
                        return [
                            "autocomplete",
                            "autofocus",
                            "checked",
                            "disabled",
                            "hidden",
                            "readonly",
                            "required",
                            "selected"
                        ].indexOf(f) > -1;
                    },
                    isBelongToGigyaFieldset: function isBelongToGigyaFieldset1(f) {
                        if (!f || f instanceof HTMLFormElement) {
                            return false;
                        }
                        if (isElementClass(f.parentElement, "gigya-fieldset")) {
                            return true;
                        }
                        return isBelongToGigyaFieldset1(f.parentElement);
                    },
                    getClosestElement: function getClosestElement1(f, p, h) {
                        if (h === void 0) {
                            h = document;
                        }
                        setMatchesPolyfill();
                        for(; f && f !== h; f = f.parentNode){
                            if (f === null || f === void 0 ? void 0 : f.matches(p)) return f;
                        }
                        return null;
                    },
                    createElementFromTemplate: function createElementFromTemplate1(f) {
                        if (f === void 0) {
                            f = "";
                        }
                        var p;
                        var h = document.createElement("div");
                        h.innerHTML = f === null || f === void 0 ? void 0 : f.trim();
                        return (p = h.firstChild) !== null && p !== void 0 ? p : h;
                    },
                    isParentHasClass: function isParentHasClass1(f, p) {
                        var h;
                        if ((h = f === null || f === void 0 ? void 0 : f.classList) === null || h === void 0 ? void 0 : h.contains(p)) {
                            return true;
                        }
                        if (!(f === null || f === void 0 ? void 0 : f.parentElement)) {
                            return false;
                        }
                        return isParentHasClass1(f === null || f === void 0 ? void 0 : f.parentElement, p);
                    },
                    enableSafeCopy: function(f) {
                        f.addedSafeCopy || (utils.DOM.addEventListener(f, "copy", function(f) {
                            var p = (f = f || window.event).target || f.srcElement, h = p && p.nodeName ? p.nodeName.toLowerCase() : "";
                            if ("textarea" != h && "input" != h) {
                                var v = document.createElement("div");
                                v.style.color = window.getComputedStyle ? window.getComputedStyle(document.body).backgroundColor : "#FFFFFF", v.style.fontSize = "0px", utils.DOM.prependToBody(v);
                                var w, m, b = new RegExp("(&shy;|" + String.fromCharCode(173) + ")", "g");
                                if (window.getSelection) {
                                    f.stopPropagation();
                                    var y = (w = window.getSelection()).getRangeAt(0);
                                    v.appendChild(y.cloneContents()), v.innerHTML = v.innerHTML.replace(b, ""), w.selectAllChildren(v);
                                    var s1 = function() {
                                        v.parentNode.removeChild(v), w.removeAllRanges(), w.addRange(y);
                                    };
                                } else f.cancelBubble = !0, w = window.document.selection, y = w.createRange(), v.innerHTML = y.htmlText, v.innerHTML = v.innerHTML.replace(b, ""), (m = document.body.createTextRange()).moveToElementText(v), m.select(), s1 = function() {
                                    v.parentNode.removeChild(v), "" !== y.text && y.select();
                                };
                                window.setTimeout(s1, 0);
                            }
                        }), f.addedSafeCopy = !0);
                    }
                },
                functions: {
                    callAsync: function callAsync1(f, p) {
                        if (p === void 0) {
                            p = {};
                        }
                        return tslib_1.__awaiter(this, void 0, gigya.Promise, function() {
                            return tslib_1.__generator(this, function(h) {
                                return [
                                    2,
                                    new gigya.Promise(function(h) {
                                        callFunction("gigya." + f, [
                                            tslib_1.__assign(tslib_1.__assign({}, p), {
                                                callback: h
                                            })
                                        ]);
                                    })
                                ];
                            });
                        });
                    },
                    callFunction: function callFunction(name, arParams) {
                        var fn = eval(name);
                        var arParts = name.split(".");
                        arParts.splice(arParts.length - 1, 1);
                        var scope = eval(arParts.join("."));
                        fn.apply(scope, arParams);
                    },
                    invokeOnPageLoad: function invokeOnPageLoad1(f, p) {
                        if (!document.readyState && document.body || document.readyState === "complete" || !p && document.readyState === "interactive" && document.body) {
                            f();
                        } else {
                            var h = false;
                            var fnOnLoad1 = function() {
                                if (!h) {
                                    h = true;
                                    f();
                                }
                            };
                            window.setTimeout(fnOnLoad1, 20000);
                            DOMUtils.addEventListener(window, "load", fnOnLoad1);
                            DOMUtils.addEventListener(document, "DOMContentLoaded", fnOnLoad1);
                        }
                    },
                    createAlias: function createAlias1(f, p) {
                        var h = f.split(".");
                        var v = window;
                        for(var w = 0; w < h.length - 1; w++){
                            var m = h[w];
                            if (!v[m]) {
                                v[m] = {};
                            }
                            v = v[m];
                        }
                        v[h[h.length - 1]] = p;
                    },
                    debounce: function debounce1(f, p) {
                        var h = undefined;
                        return function() {
                            if (h !== undefined) {
                                clearTimeout(h);
                            }
                            h = setTimeout(function() {
                                h = undefined;
                                f();
                            }, p);
                        };
                    },
                    addSrcToIFrameIfNeeded: function addSrcToIFrameIfNeeded1(f, p) {
                        if (p === void 0) {
                            p = cdn_1.getCdnResource("/");
                        }
                        if (LocalInfo_1.localInfo.isIOSWebView || LocalInfo_1.localInfo.isIOS && LocalInfo_1.localInfo.isWeChat) {
                            f.setAttribute("src", p);
                        }
                    }
                },
                gltexp: {
                    isValid: function isValid1(f) {
                        return getMillis(f) > Date.now();
                    },
                    getMax: function getMax1() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        if (!f || !f.length) return undefined;
                        return f.sort(function(f, p) {
                            return getMillis(p) - getMillis(f);
                        })[0];
                    },
                    getMillis: function getMillis1(f) {
                        return !f ? 0 : Number(f.substr(0, f.indexOf("_"))) * 1000;
                    }
                },
                HTTP: {
                    redirect: function redirect1(f, p, h, v, w) {
                        if (w === void 0) {
                            w = window.document;
                        }
                        if (h && h.toLowerCase() == "post") {
                            var m = w.createElement("form");
                            var b = [];
                            m.setAttribute("accept-charset", "UTF-8");
                            m.setAttribute("method", "POST");
                            m.setAttribute("action", f);
                            if (v) m.setAttribute("target", v);
                            var y = objectUtils.merge(p);
                            for(var S in y){
                                if ((typeof y[S] == "number" || typeof y[S] == "boolean" || typeof y[S] == "string") && S != "eventName") {
                                    b.push('<textarea name="' + encodeURIComponent(S) + '">' + y[S].toString().replace(/\&/g, "&amp;") + "</textarea>");
                                }
                            }
                            m.innerHTML = b.join("");
                            m.style.display = "none";
                            DOMUtils.appendToBody(m, w);
                            m.submit();
                        } else {
                            var E = new Uri_1.Uri(f);
                            var C = {};
                            for(var I = 0; I < p.length; I++){
                                var R = p[I];
                                for(var A in R){
                                    if (R.hasOwnProperty(A)) {
                                        var U = R[A];
                                        C[A] = U;
                                    }
                                }
                            }
                            E.addToSearch(C);
                            w.location.href = E.toString();
                        }
                    }
                },
                JSON: {
                    serialize: function serialize1(f, p, h, v, w) {
                        if (p === void 0) {
                            p = false;
                        }
                        if (h === void 0) {
                            h = false;
                        }
                        if (v === void 0) {
                            v = 0;
                        }
                        if (w === void 0) {
                            w = 20;
                        }
                        if (!localInfo.isIE8) {
                            return window["JSON"].stringify(f);
                        } else {
                            if (!v) v = 0;
                            if (v > w) return "[Too deep]";
                            var m = "";
                            var b = "";
                            var y = "";
                            if (h) {
                                y = "	";
                                b = "\n";
                                for(var S = 0; S < v + 1; S++){
                                    m += y;
                                }
                            }
                            var E = typeof f;
                            if (E == "function") {
                                return E.toString();
                            }
                            if (E != "object" || f === null) {
                                if (E == "string") f = '"' + f.replace(/(\"|\\)/g, "\\$1").replace(/\r\n|\r|\n/g, "\\n") + '"';
                                return String(f);
                            } else {
                                var C, I, R = [], A = f && f.constructor == Array;
                                if (A) {
                                    for(var S = 0; S < f.length; S++){
                                        I = f[S];
                                        E = typeof I;
                                        if (I == null || E == "undefined") I = "";
                                        else if (E == "string") I = '"' + I.replace(/(\"|\\)/g, "\\$1").replace(/\r\n|\r|\n/g, "\\n") + '"';
                                        else if (E == "function") {
                                            if (p) I = "Function";
                                            else I = "";
                                        } else if (I.parentNode && I.innerHTML) I = "HTMLElement";
                                        else if (I.constructor == Date) I = "";
                                        else if (E == "object" && I !== null) I = serialize1(I, p, h, v + 1);
                                        if (String(I) != "") R.push(m + y + String(I));
                                    }
                                } else {
                                    for(C in f){
                                        I = f[C];
                                        E = typeof I;
                                        if (I == null || E == "undefined") I = String(I);
                                        else if (E == "string") I = '"' + I.replace(/(\"|\\)/g, "\\$1").replace(/\r\n|\r|\n/g, "\\n") + '"';
                                        else if (E == "function") {
                                            if (p) {
                                                I = "Function";
                                            } else {
                                                I = "";
                                            }
                                        } else if (I.parentNode && I.innerHTML) I = "HTMLElement";
                                        else if (I.constructor == Date) I = "";
                                        else if (E == "object" && I !== null) I = b + serialize1(I, p, h, v + 1);
                                        if (String(I) != "") R.push(m + y + '"' + C.replace(/(\"|\\)/g, "\\$1").replace(/\r\n|\r|\n/g, "\\n") + '":' + String(I));
                                    }
                                }
                                return b + m + (A ? "[" : "{") + b + R.join("," + b) + b + m + (A ? "]" : "}");
                            }
                        }
                    },
                    deserialize: function deserialize(json, defaultValue, scope) {
                        if (!json || !json.replace(/^\s+|\s+$/g, "")) {
                            return defaultValue || {};
                        }
                        try {
                            var keys = [];
                            var values = [];
                            if (scope) {
                                for(var key in scope){
                                    keys.push(key);
                                    values.push(scope[key]);
                                }
                            }
                            var fn = eval("(function(" + keys.join(",") + ") { return " + json.trim() + "; })");
                            return fn.apply(undefined, values);
                        } catch (e) {
                            console.warn("Error deserializing JavaScript", e);
                            return defaultValue || {};
                        }
                    },
                    parse: function parse1(f, p) {
                        if (localInfo.isIE8) {
                            return deserialize(f, p);
                        } else {
                            try {
                                return window["JSON"].parse(f);
                            } catch (h) {
                                return p || {};
                            }
                        }
                    }
                },
                keyboard: {
                    Keys: {
                        8: "backspace",
                        13: "enter",
                        27: "escape",
                        escape: 27,
                        backspace: 8,
                        enter: 13
                    },
                    keyCodes: {
                        8: "Backspace",
                        13: "Enter",
                        27: "Escape"
                    },
                    onHotKeyClicked: function onHotKeyClicked1(f, p) {
                        return new HotKeyEvent(f, p);
                    }
                },
                keyValue: {
                    serialize: function serialize1(f, p) {
                        var h = [];
                        if (!p) {
                            p = "&";
                        }
                        for(var v in f){
                            switch(typeof f[v]){
                                case "function":
                                    break;
                                case "object":
                                    if (f[v] != null) {
                                        h.push(v + "=" + URLUtils.URLEncode(JSONUtils.serialize(f[v])));
                                    }
                                    break;
                                case "undefined":
                                    break;
                                default:
                                    h.push(v + "=" + URLUtils.URLEncode(f[v]));
                            }
                        }
                        var w = h.join(p);
                        return w;
                    },
                    deserialize: function deserialize1(f, p, h, v) {
                        var w = {};
                        if (!f) {
                            return w;
                        }
                        if (!p) {
                            p = "&";
                        }
                        var m = f.split(p);
                        for(var b = 0; b < m.length; b++){
                            var y = m[b];
                            var S = y.indexOf("=");
                            if (S === -1) {
                                var E = h ? y.toLowerCase() : y;
                                w[E] = "1";
                            } else {
                                var E = y.substr(0, S);
                                if (h) {
                                    E = E.toLowerCase();
                                }
                                var C = y.substr(S + 1).replace(/\+/g, " ");
                                try {
                                    if (v) {
                                        w[E] = FlagService_1.FlagService.useDecodeURIComponent ? compareResultsAndReturnURLDecode(C) : unescape(C);
                                    } else {
                                        w[E] = URLUtils.URLDecode(C);
                                    }
                                } catch (f) {
                                    w[E] = FlagService_1.FlagService.useDecodeURIComponent ? URLUtils.URLDecode(C) : unescape(C);
                                }
                            }
                        }
                        return w;
                    }
                },
                localStorage: {
                    AbstractLocalStorageAdapter: function AbstractLocalStorageAdapter1() {},
                    AbstractAsyncLocalStorageAdapter: function AbstractAsyncLocalStorageAdapter1() {
                        var f = _super.call(this) || this;
                        f.isLoaded = false;
                        return f;
                    },
                    CookieStorageAdapter: function CookieStorageAdapter1() {
                        return _super !== null && _super.apply(this, arguments) || this;
                    },
                    MemoryStorageAdapter: function MemoryStorageAdapter1() {
                        var f = _super.call(this) || this;
                        f.memory = {};
                        return f;
                    },
                    adapters: [
                        function LocalStorageAdapter1() {
                            var f = _super.call(this) || this;
                            f.storage = window.localStorage;
                            return f;
                        },
                        function SessionStorageAdapter1() {
                            var f = _super.call(this) || this;
                            f.storage = window.sessionStorage;
                            return f;
                        },
                        function FirefoxStorageAdapter1() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        },
                        function CookieStorageAdapter1() {
                            return _super !== null && _super.apply(this, arguments) || this;
                        },
                        function MemoryStorageAdapter1() {
                            var f = _super.call(this) || this;
                            f.memory = {};
                            return f;
                        }
                    ],
                    instances: {},
                    initializeAdapter: function initializeAdapter1(f) {
                        var p = f.getName() || f.name;
                        if (!exports.instances[p]) {
                            exports.instances[p] = new f();
                        }
                        return exports.instances[p];
                    },
                    waitForService: function waitForService1(f) {
                        var p;
                        for(var h = 0, v = exports.adapters; h < v.length; h++){
                            var w = v[h];
                            if (w.isAvailable()) {
                                if (w.prototype instanceof AbstractAsyncLocalStorageAdapter && !f) {
                                    continue;
                                }
                                p = initializeAdapter(w);
                                break;
                            }
                        }
                        if (!p) {
                            p = initializeAdapter(MemoryStorageAdapter);
                        }
                        if (f) {
                            if (p instanceof AbstractAsyncLocalStorageAdapter) {
                                p.waitForService(function() {
                                    f(p);
                                });
                            } else {
                                f(p);
                            }
                        }
                        return p;
                    },
                    getItem: function getItem1(f) {
                        return adapter.getItem(f);
                    },
                    setItem: function setItem1(f, p, h) {
                        return adapter.setItem(f, p, h);
                    },
                    removeItem: function removeItem1(f) {
                        return adapter.removeItem(f);
                    },
                    setObject: function setObject1(f, p) {
                        return adapter.setObject(f, p);
                    },
                    getObject: function getObject1(f, p) {
                        return adapter.getObject(f, p);
                    }
                },
                mouse: {
                    getPosition: function getPosition1() {
                        var f = 0;
                        var p = 0;
                        if (document.body) {
                            var h = mouseEventObject;
                            if (!h) h = {
                                clientX: 0,
                                clientY: 0
                            };
                            if (h.pageX || h.pageY) {
                                f = h.pageX;
                                p = h.pageY;
                            } else if (h.clientX || h.clientY) {
                                f = h.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                                p = h.clientY + document.body.scrollTop + document.documentElement.scrollTop;
                            }
                            return {
                                x: f,
                                y: p
                            };
                        }
                    }
                },
                object: {
                    removeUndefined: function removeUndefined1(f) {
                        var p = {};
                        for(var h in f){
                            if (f[h] != null && f[h] != undefined) {
                                p[h] = f[h];
                            }
                        }
                        return p;
                    },
                    expressionHelper: function expressionHelper1(f) {
                        f = f || {};
                        return {
                            getField: function(p) {
                                if (!p) return undefined;
                                var h = p.split("."), v = f, w;
                                for(w = 0; w < h.length; ++w){
                                    if (v[h[w]] == undefined) {
                                        return undefined;
                                    } else {
                                        v = v[h[w]];
                                    }
                                }
                                return v;
                            }
                        };
                    },
                    getPropertyBySerializedName: function getPropertyBySerializedName1(f, p, h) {
                        if (!p) return f;
                        var v = f;
                        var w = p.split(".");
                        for(var m = 0; m < w.length; m++){
                            var b = w[m];
                            var y = null;
                            if (b.match(/\[[0-9]+]/)) {
                                y = Number(b.match(/\[[0-9]+]/)[0].replace(/[\[\]]/g, ""));
                            }
                            b = b.split(/\[[0-9]+]/).join("");
                            var S = (y || y === 0) && v[b] ? v[b][y] : v[b];
                            if (h && !v[b]) {
                                v[b] = {};
                            } else if (h && !S && S !== false) {
                                v[b] = [];
                            }
                            if (S || S === false) {
                                v = S;
                            } else {
                                return null;
                            }
                        }
                        return v;
                    },
                    setPropertyBySerializedName: function setPropertyBySerializedName1(f, p, h) {
                        var v = p.split(".");
                        var w = v.pop();
                        getPropertyBySerializedName(f, v.join("."), true)[w] = h;
                    },
                    add: function add1(f, p, h) {
                        for(var v in p){
                            if (!h || typeof f[v] === "undefined") {
                                f[v] = p[v];
                            }
                        }
                    },
                    getHash: function getHash1(f) {
                        var p = [];
                        for(var h in f){
                            var v;
                            if (typeof f[h] == "object") v = JSONUtils.serialize(f[h], false);
                            else if (f[h]) v = f[h].toString();
                            p.push(h + "=" + v);
                        }
                        return p.sort().join("&");
                    },
                    getMurmurHash: function getMurmurHash1(f, p) {
                        if (!p) p = 0;
                        var h, v, w, m, b, y, S, E, C, I;
                        h = f.length & 3;
                        v = f.length - h;
                        w = p;
                        b = 0xcc9e2d51;
                        S = 0x1b873593;
                        I = 0;
                        while(I < v){
                            C = f.charCodeAt(I) & 0xff | (f.charCodeAt(++I) & 0xff) << 8 | (f.charCodeAt(++I) & 0xff) << 16 | (f.charCodeAt(++I) & 0xff) << 24;
                            ++I;
                            C = (C & 0xffff) * b + (((C >>> 16) * b & 0xffff) << 16) & 0xffffffff;
                            C = C << 15 | C >>> 17;
                            C = (C & 0xffff) * S + (((C >>> 16) * S & 0xffff) << 16) & 0xffffffff;
                            w ^= C;
                            w = w << 13 | w >>> 19;
                            m = (w & 0xffff) * 5 + (((w >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;
                            w = (m & 0xffff) + 0x6b64 + (((m >>> 16) + 0xe654 & 0xffff) << 16);
                        }
                        C = 0;
                        switch(h){
                            case 3:
                                C ^= (f.charCodeAt(I + 2) & 0xff) << 16;
                            case 2:
                                C ^= (f.charCodeAt(I + 1) & 0xff) << 8;
                            case 1:
                                C ^= f.charCodeAt(I) & 0xff;
                                C = (C & 0xffff) * b + (((C >>> 16) * b & 0xffff) << 16) & 0xffffffff;
                                C = C << 15 | C >>> 17;
                                C = (C & 0xffff) * S + (((C >>> 16) * S & 0xffff) << 16) & 0xffffffff;
                                w ^= C;
                        }
                        w ^= f.length;
                        w ^= w >>> 16;
                        w = (w & 0xffff) * 0x85ebca6b + (((w >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;
                        w ^= w >>> 13;
                        w = (w & 0xffff) * 0xc2b2ae35 + (((w >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;
                        w ^= w >>> 16;
                        return w >>> 0;
                    },
                    clone: function clone1(f, p, h, v, w, m) {
                        if (v === void 0) {
                            v = 20;
                        }
                        if (w === void 0) {
                            w = 0;
                        }
                        if (f === window) return window;
                        if (w > v) return null;
                        if (typeof f == "undefined" || f == null) {
                            return toggles_1.default.isOn("removeUndefinedProperties") ? f : null;
                        } else if (typeof f == "function" && h) {
                            return null;
                        } else if (f.constructor == Array) {
                            var b = [];
                            for(var y = 0; y < f.length; y++){
                                if (!h || typeof f[y] != "function") {
                                    if (p) {
                                        b[y] = clone1(f[y], p, h, v, w + 1, m);
                                    } else {
                                        b[y] = f[y];
                                    }
                                }
                            }
                            return b;
                        } else if (typeof f == "object") {
                            var S = {};
                            for(var E in f){
                                if (m && E == "context") continue;
                                if (!h || typeof f[E] != "function") {
                                    if (p) {
                                        S[E] = clone1(f[E], p, h, v, w + 1, m);
                                    } else {
                                        S[E] = f[E];
                                    }
                                }
                            }
                            return S;
                        } else {
                            return f;
                        }
                    },
                    merge: function merge1(f, p) {
                        var h = {};
                        for(var v = 0; v < f.length; v++){
                            if (f[v] && f[v].length) {
                                for(var w = 0; w < f[v].length; w++){
                                    for(var m in f[v][w]){
                                        h[m] = f[v][w][m];
                                    }
                                }
                            } else {
                                if (!p) {
                                    for(var m in f[v]){
                                        h[m] = f[v][m];
                                    }
                                } else {
                                    for(var m in f[v]){
                                        if (typeof h[m] !== "object" || h[m] instanceof Array) {
                                            h[m] = f[v][m];
                                        } else {
                                            h[m] = merge1([
                                                h[m],
                                                f[v][m]
                                            ], true);
                                        }
                                    }
                                }
                            }
                        }
                        return h;
                    },
                    unflatten: function unflatten1(f) {
                        if (Object(f) !== f || Array.isArray(f)) {
                            return f;
                        }
                        var p = {};
                        for(var h in f){
                            var v = p;
                            var w = "";
                            var m = h.replace(/\[([0-9])]/, ".$1").split(".");
                            for(var b = 0; b < m.length; b++){
                                var y = !isNaN(Number(m[b]));
                                v = v[w] || (v[w] = y ? [] : {});
                                w = m[b];
                            }
                            v[w] = f[h];
                        }
                        return p[""] || {};
                    },
                    flatten: function flatten1(f, p) {
                        if (p === void 0) {
                            p = false;
                        }
                        var h = {};
                        function recurse1(f, v) {
                            if (Object(f) !== f) {
                                h[v] = f;
                            } else if (Array.isArray(f)) {
                                var w = f.length;
                                for(var m = 0; m < w; m++){
                                    var b = p ? v + "[" + m + "]" : v + "." + m;
                                    recurse1(f[m], v ? b : String(m));
                                }
                                if (w === 0) {
                                    h[v] = [];
                                }
                            } else {
                                var y = true;
                                for(var S in f){
                                    y = false;
                                    recurse1(f[S], v ? v + "." + S : S);
                                }
                                if (y && v !== "") {
                                    h[v] = {};
                                }
                            }
                        }
                        recurse1(f, "");
                        return h;
                    },
                    extractProperties: function extractProperties1(f, p, h) {
                        if (f == null) return;
                        if (p == null) p = {};
                        if (f.constructor == Array) {
                            for(var v = 0; v < f.length; v++){
                                extractProperties1(f[v], p, h);
                            }
                        } else if (h) {
                            var w = h.split("|");
                            var m = {};
                            for(var b in f){
                                m[b.toLowerCase()] = 1;
                            }
                            for(var y = 0; y < w.length; y++){
                                var S = w[y];
                                if (m[S.toLowerCase()]) p[S] = f[S];
                            }
                        } else {
                            p = clone(f, false);
                        }
                        return p;
                    },
                    extractProperty: function extractProperty1(f, p) {
                        var h;
                        return extractProperties(f, h, p)[p];
                    },
                    parseToObject: function parseToObject1(f) {
                        try {
                            var p = window["JSON"].parse(f);
                            if (typeof p == "object") {
                                return p;
                            }
                        } catch (h) {}
                        return undefined;
                    },
                    removePropertiesPrefix: function removePropertiesPrefix1(f, p) {
                        if (f === void 0) {
                            f = {};
                        }
                        if (p === void 0) {
                            p = "";
                        }
                        return Object.keys(f).reduce(function(h, v) {
                            var w;
                            return __webpack_provided_Object_dot_assign(h, (w = {}, w[v.replace(p, "")] = f[v], w));
                        }, {});
                    },
                    addPrefixToProperties: function addPrefixToProperties1(f, p) {
                        if (f === void 0) {
                            f = {};
                        }
                        if (p === void 0) {
                            p = "";
                        }
                        return Object.keys(f).reduce(function(h, v) {
                            if (v.indexOf(p) !== 0) {
                                h["" + p + v] = f[v];
                            } else {
                                h[v] = f[v];
                            }
                            return h;
                        }, {});
                    },
                    normalizeObjectKeysToLowerCase: function normalizeObjectKeysToLowerCase1(f) {
                        for(var p in f){
                            f[p.toLowerCase()] = f[p];
                        }
                        return f;
                    },
                    decodeObjectKeys: function decodeObjectKeys1(f) {
                        var p = {};
                        for(var h in f){
                            var v = h;
                            while(v.indexOf("%") !== -1){
                                v = decodeURIComponent(v);
                            }
                            p[v] = f[h];
                        }
                        return p;
                    },
                    cloneParamsForPlugin: function(f) {
                        var p = utils.object.clone(f);
                        return delete p.instanceID, delete p.getInstance, p;
                    }
                },
                queue: {
                    _servicesStatus: function _servicesStatus1() {
                        var f = {};
                        for(var p in _q){
                            var h = isActive(p);
                            if (h) {
                                f[p] = {
                                    active: true,
                                    waitingFor: _q[p].ids,
                                    queuedCount: _q[p].q.length
                                };
                            } else {
                                f[p] = {
                                    active: false
                                };
                            }
                        }
                        return f;
                    },
                    isActive: function isActive1(f) {
                        if (!_q[f]) return false;
                        for(var p in _q[f].ids)return true;
                        return false;
                    },
                    release: function release1(f, p) {
                        logger.debug("releasing " + p + " queue by " + f);
                        if (!_q[p]) return;
                        delete _q[p].ids[f];
                        if (!isActive(p)) {
                            var h = _q[p].q;
                            _q[p].q = [];
                            while(h.length > 0){
                                var v = h.splice(0, 1)[0];
                                try {
                                    v.func.apply(this, v.args);
                                } catch (w) {
                                    if (typeof console == "object" && console.log) {
                                        console.log("Gigya: Exception while invoking queued method (" + p + ": " + f + ")");
                                    }
                                }
                                if (isActive(p)) {
                                    _q[p].q = h;
                                    break;
                                }
                            }
                        }
                    },
                    hold: function hold1(f, p) {
                        logger.debug("locking queue " + p + " by " + f);
                        if (!_q[p]) _q[p] = {
                            q: [],
                            ids: {}
                        };
                        _q[p].ids[f] = true;
                    },
                    waitFor: function waitFor1(f, p, h) {
                        if (!_q[f]) _q[f] = {
                            q: [],
                            ids: {}
                        };
                        _q[f].q.push({
                            func: p,
                            args: h
                        });
                    },
                    queueForExecution: function queueForExecution1(f, p, h) {
                        h = h || [];
                        if (isActive(f)) {
                            waitFor(f, p, h);
                        } else {
                            p.apply(this, h);
                        }
                    }
                },
                sanitize: {
                    sanitizeHTML: function sanitizeHTML1(f) {
                        if (f == null || typeof f == "undefined") return f;
                        return f.replace(/&/g, "&#38;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace(/\"/g, "&#34;").replace(/'/g, "&#39;").replace(/&#38;#173;/g, "&#173;");
                    },
                    sanitizeAttribute: function sanitizeAttribute1(f) {
                        if (f == null || typeof f == "undefined") return f;
                        return f.replace(/&/g, "&#38;").replace(/</g, "&#60;").replace(/>/g, "&#62;").replace(/\"/g, "&#34;").replace(/\=/g, "&#61;");
                    }
                },
                script: {
                    isLoaded: function isLoaded1(f) {
                        var p = formatSrcUrl(f);
                        return Boolean(pending[p] && pending[p].loaded);
                    },
                    load: function load1(f, p, h, v, w, m) {
                        if (w === void 0) {
                            w = 5000;
                        }
                        var b;
                        if (f.indexOf("//") === 0) {
                            f = LocalInfo_1.localInfo.protocol + ":" + f;
                        }
                        if (v) {
                            var y = formatSrcUrl(f);
                            if (pending[y]) {
                                if (pending[y].loaded) {
                                    logger.debug("script was already loaded:", {
                                        src: f
                                    });
                                    if (h) {
                                        h();
                                    }
                                } else {
                                    pending[y].onLoad.push(h);
                                    pending[y].onError.push(p);
                                }
                                return;
                            }
                            b = pending[y] = {
                                loaded: false,
                                onLoad: [
                                    h
                                ],
                                onError: [
                                    p
                                ]
                            };
                            if (m && m.length > 0) {
                                arrayUtils.forEach(m, function(f) {
                                    pending[f] = b;
                                });
                            }
                        } else {
                            b = {
                                loaded: false,
                                onLoad: [
                                    h
                                ],
                                onError: [
                                    p
                                ]
                            };
                        }
                        var scriptLoader1 = function() {
                            var p = document.createElement("script");
                            p.async = true;
                            p.type = "text/javascript";
                            p.charset = "UTF-8";
                            var h = false;
                            var fnOnScriptLoad1 = function() {
                                if (!h) {
                                    if (b.onLoad && b.onLoad.length) {
                                        for(var f = 0; f < b.onLoad.length; f++){
                                            if (typeof b.onLoad[f] === "function") {
                                                b.onLoad[f]();
                                            }
                                        }
                                    }
                                    b.loaded = true;
                                    b.onError = b.onLoad = null;
                                    h = true;
                                    if (w === true) {
                                        w = 0;
                                    }
                                    if (w !== false) {
                                        setTimeout(function() {
                                            if (p.parentNode) {
                                                p.parentNode.removeChild(p);
                                            }
                                        }, w);
                                    }
                                }
                            };
                            p.onload = fnOnScriptLoad1;
                            p["onreadystatechange"] = function() {
                                if (this.readyState === "loaded") {
                                    fnOnScriptLoad1();
                                }
                            };
                            p.onerror = function() {
                                for(var p = 0; p < b.onError.length; p++){
                                    if (typeof b.onError[p] === "function") {
                                        b.onError[p]();
                                    }
                                }
                                delete pending[f];
                            };
                            var v = document.getElementsByTagName("head");
                            if (v && v.length > 0) {
                                v[0].appendChild(p);
                            }
                            var fnSetScriptSrc1 = function() {
                                var h = new RegExp("^https?://cdns?.*" + defaultApiDomain + "/.*gigya.js");
                                var v = h.test(f) ? addSdkVersion(f) : f;
                                p.src = v;
                            };
                            if (LocalInfo_1.localInfo.iosVersion >= 6) {
                                fnSetScriptSrc1();
                            } else {
                                setTimeout(fnSetScriptSrc1, 1);
                            }
                        };
                        if (LocalInfo_1.localInfo.isIE) {
                            functionsUtils.invokeOnPageLoad(scriptLoader1);
                        } else {
                            scriptLoader1();
                        }
                    },
                    ResourceTypes: {
                        0: "script",
                        1: "image",
                        2: "iframe",
                        script: 0,
                        image: 1,
                        iframe: 2
                    },
                    triggerResource: function triggerResource1(f, p, h, v) {
                        if (h === void 0) {
                            h = ResourceTypes.image;
                        }
                        if (v === void 0) {
                            v = 5000;
                        }
                        switch(h){
                            case ResourceTypes.script:
                                load(f, p, p, false, v);
                                break;
                            case ResourceTypes.image:
                                loadImage(f, p);
                                break;
                            case ResourceTypes.iframe:
                                loadIframe(f, p, v);
                                break;
                            default:
                                throw new Error("Unsupported resource type");
                        }
                    },
                    loadService: function loadService1(f, p, h) {
                        var v = cdn_1.getCdnResource() + "/js/gigya.services." + f + ".js";
                        load(v, function() {
                            if (typeof console === "object" && console.error) {
                                console.error("error loading gigya service " + f + " from url: " + v);
                                if (p) {
                                    p();
                                }
                            }
                        }, h, true);
                    }
                },
                sessionCache: {
                    set: function set1(f, p) {
                        if (!sessionStorageEnabled) return;
                        var h;
                        try {
                            h = JSONUtils.deserialize(window.sessionStorage.getItem("gigyaCache"));
                            if (p == null && h[f]) {
                                delete h[f];
                            } else {
                                var v = new Date().getTime();
                                h[f] = {
                                    response: p,
                                    time: v
                                };
                                if (f.indexOf("gig_oidcContext_") >= 0) {
                                    logger.report("oidc storage logs - set", {
                                        key: f,
                                        value: h[f]
                                    }, false, FlagService_1.FlagService.forceErrorReport);
                                }
                            }
                            window.sessionStorage.setItem("gigyaCache", JSONUtils.serialize(h));
                        } catch (w) {}
                        queueUtils.release("cache", "cache_" + f);
                    },
                    get: function get1(f, p) {
                        if (p === void 0) {
                            p = -1;
                        }
                        if (!sessionStorageEnabled) {
                            return null;
                        }
                        try {
                            if (!queueUtils.isActive("cache_" + f)) {
                                var h = window.sessionStorage.getItem("gigyaCache");
                                var v = JSONUtils.deserialize(h);
                                var w = v[f];
                                if (w) {
                                    var m = new Date().getTime();
                                    if (p < 0 || p + w.time > m) {
                                        return w.response;
                                    } else {
                                        if (f.indexOf("gig_oidcContext_") >= 0) {
                                            logger.report("oidc storage logs - get", {
                                                key: f,
                                                value: v[f],
                                                cacheTime: w.time,
                                                currentTime: m
                                            }, false, FlagService_1.FlagService.forceErrorReport);
                                        }
                                        remove(f);
                                        return null;
                                    }
                                }
                                if (!w) {
                                    queueUtils.hold("cache", "cache_" + f);
                                    return null;
                                }
                            } else {
                                queueUtils.waitFor("cache_" + f, get1, arguments);
                                return null;
                            }
                        } catch (b) {}
                        return null;
                    },
                    remove: function remove1(f) {
                        set(f, null);
                    }
                },
                localCache: {
                    set: function set1(f, p) {
                        if (!localStorageEnabled) return;
                        var h;
                        try {
                            h = JSONUtils.deserialize(window.localStorage.getItem("gigyaCache"));
                            if (p == null && h[f]) {
                                delete h[f];
                            } else {
                                var v = new Date().getTime();
                                h[f] = {
                                    response: p,
                                    time: v
                                };
                                if (f.indexOf("gig_oidcContext_") >= 0) {
                                    logger.report("oidc storage logs - set", {
                                        key: f,
                                        value: h[f]
                                    }, false, FlagService_1.FlagService.forceErrorReport);
                                }
                            }
                            window.localStorage.setItem("gigyaCache", JSONUtils.serialize(h));
                        } catch (w) {}
                        queueUtils.release("cache", "cache_" + f);
                    },
                    get: function get1(f, p) {
                        if (p === void 0) {
                            p = -1;
                        }
                        if (!localStorageEnabled) {
                            return null;
                        }
                        try {
                            if (!queueUtils.isActive("cache_" + f)) {
                                var h = window.localStorage.getItem("gigyaCache");
                                var v = JSONUtils.deserialize(h);
                                var w = v[f];
                                if (w) {
                                    var m = new Date().getTime();
                                    if (p < 0 || p + w.time > m) {
                                        return w.response;
                                    } else {
                                        if (f.indexOf("gig_oidcContext_") >= 0) {
                                            logger.report("oidc storage logs - get", {
                                                key: f,
                                                value: v[f],
                                                cacheTime: w.time,
                                                currentTime: m
                                            }, false, FlagService_1.FlagService.forceErrorReport);
                                        }
                                        remove(f);
                                        return null;
                                    }
                                }
                                if (!w) {
                                    queueUtils.hold("cache", "cache_" + f);
                                    return null;
                                }
                            } else {
                                queueUtils.waitFor("cache_" + f, get1, arguments);
                                return null;
                            }
                        } catch (b) {}
                        return null;
                    },
                    remove: function remove1(f) {
                        set(f, null);
                    }
                },
                stringUtils: {
                    trim: function trim1(f) {
                        return f.replace(/^\s*(\S*(.*\S)?)\s*$/, "$1");
                    },
                    format: function format1(f) {
                        var p = [];
                        for(var h = 1; h < arguments.length; h++){
                            p[h - 1] = arguments[h];
                        }
                        for(var v = 0; v < arguments.length - 1; v++){
                            if (arguments[v + 1] != null) {
                                f = f.split("{" + v + "}").join(arguments[v + 1]);
                            }
                        }
                        return f;
                    },
                    capitalize: function capitalize1(f) {
                        return f.substring(0, 1).toUpperCase() + f.substring(1);
                    },
                    endsWith: function endsWith1(f, p) {
                        return f.indexOf(p, f.length - p.length) !== -1;
                    },
                    escapeRegExp: function escapeRegExp1(f) {
                        return f.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
                    },
                    replaceAll: function replaceAll1(f, p, h) {
                        if (!p) return f;
                        return f.replace(new RegExp(escapeRegExp(p), "g"), h);
                    },
                    mergeCommaSeparatedValues: function mergeCommaSeparatedValues1(f, p) {
                        if (f === void 0) {
                            f = "";
                        }
                        if (p === void 0) {
                            p = "";
                        }
                        var h = f.concat(",", p).split(",");
                        return utils.array.getUniqueValues(h).filter(function(f) {
                            return f;
                        }).join(",");
                    }
                },
                templates: {
                    fill: function fill1(f, p) {
                        if (typeof f == "function") {
                            f = f(p);
                        }
                        if (f instanceof Array) {
                            f = f.join("");
                        }
                        var h = /(\$)(!?)([a-z_][a-z_.\d]*)([(][^()]*[)])?|(\$)(!?)\{([a-z_][a-z_.\d]*)([(][^()]*[)])?\}/gi;
                        h.lastIndex = 0;
                        var v = f;
                        var w = h.exec(v);
                        var m;
                        while(w != null){
                            if (w[1] == "$") {
                                m = 0;
                            } else {
                                m = 4;
                            }
                            var b = w[2 + m] == "!";
                            var y = w[3 + m];
                            var S = w[4 + m];
                            if (S == null) S = "";
                            var E = 0;
                            if (y.substring(0, 1) == ".") {
                                y = y.substring(1);
                            }
                            if (y.substring(0, 3) == "DBG") {
                                y = y.substring(3);
                                E = 1;
                            }
                            var C = "";
                            var I = y + S;
                            while(I != C){
                                C = I;
                                var R = h.lastIndex;
                                I = fill1(C, p);
                                h.lastIndex = R;
                            }
                            var A = "";
                            var U = 0;
                            if (p[y.split(".")[0]] != null) {
                                try {
                                    A = new Function("o", "p", 'return eval("o." + p)')(p, I);
                                } catch (f) {}
                            } else {
                                A = "$" + (b ? "!" : "") + I;
                                U = 1;
                            }
                            if (b) {
                                v = v.replace(w[0], "");
                            } else {
                                v = v.substr(0, w.index) + A + v.substr(w.index + w[0].length);
                            }
                            h.lastIndex = w.index + U;
                            w = h.exec(v);
                        }
                        return v;
                    }
                },
                URL: {
                    URLEncode: function URLEncode1(f) {
                        return encodeURIComponent(f);
                    },
                    URLDecode: function URLDecode1(f) {
                        return decodeURIComponent(f.replace(/\+/g, " "));
                    },
                    URLDecodeRecursive: function URLDecodeRecursive1(f) {
                        var p = "";
                        var h = f;
                        while(h != p){
                            p = h;
                            h = URLDecode(p);
                        }
                        return h;
                    },
                    getParamsFromURL: function getParamsFromURL1(f, p) {
                        if (!f || f.indexOf("?") === -1) {
                            return {};
                        }
                        return keyValueUtils.deserialize(f.split("#")[0].split("?")[1], "&", p);
                    },
                    getGigParamsFromURL: function getGigParamsFromURL1(f) {
                        var p = f || {}, h = p.url, v = p.paramPrefix, w = p.keysToLower, m = p.removePrefix;
                        var b = v || constants_1.GIGYA_PARAM_PREFIX;
                        var y = getParamsFromURL(h, w);
                        return Object.keys(y).filter(function(f) {
                            return f.indexOf(b) === 0 && f !== b;
                        }).reduce(function(f, p) {
                            var h = m ? p.slice(4) : p;
                            f[h] = y[p];
                            return f;
                        }, {});
                    },
                    getParamValueFromURL: function getParamValueFromURL1(f, p, h) {
                        if (null == p || "" == p) {
                            return h;
                        }
                        var v = p.indexOf("?");
                        if (v === -1) {
                            return h;
                        }
                        var w = "&" + p.substr(v + 1);
                        var m = w.toLowerCase().indexOf("&" + f.toLowerCase() + "=");
                        if (m === -1) {
                            return h;
                        }
                        var b = w.substr(m + (1 + f.length + 1)) + "&";
                        m = b.indexOf("&");
                        return b.substr(0, m);
                    },
                    addParamsToURL: function addParamsToURL1(f, p) {
                        var h = getParamsFromURL(f);
                        objectUtils.add(h, p);
                        var v = f.split("#");
                        var w = v[0].split("?")[0] + "?" + keyValueUtils.serialize(h, "&");
                        if (v.length > 1) {
                            w += "#" + v[1];
                        }
                        return w;
                    },
                    getContextParamsFromUrl: function getContextParamsFromUrl1(f) {
                        var p = f || {}, h = p.url, v = p.paramPrefix, w = p.unacceptableParams;
                        if (!h) {
                            return {};
                        }
                        var m = utils.URL.getGigParamsFromURL({
                            url: h,
                            paramPrefix: v
                        });
                        return removeUnacceptableParams(m, w);
                    }
                },
                validation: {
                    isExplicitTrue: function isExplicitTrue1(f) {
                        var p = ("" + f).toLowerCase();
                        return p == "true" || p == "1";
                    },
                    isExplicitFalse: function isExplicitFalse1(f) {
                        var p = ("" + f).toLowerCase();
                        return p == "false" || p == "0";
                    },
                    isLaterThanNow: function isLaterThanNow1(f) {
                        return f > new Date().getTime();
                    },
                    allDefinedOrAllUndefined: function allDefinedOrAllUndefined1() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = f.some(function(f) {
                            return typeof f === "undefined";
                        });
                        var v = f.some(function(f) {
                            return typeof f !== "undefined";
                        });
                        return v && !h || !v && h;
                    }
                },
                viewport: {
                    getScroll: function getScroll1() {
                        var f = 0, p = 0;
                        if (typeof window.pageYOffset == "number") {
                            p = window.pageYOffset;
                            f = window.pageXOffset;
                        } else if (document.body && (document.body.scrollLeft || document.body.scrollTop)) {
                            p = document.body.scrollTop;
                            f = document.body.scrollLeft;
                        } else if (document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {
                            p = document.documentElement.scrollTop;
                            f = document.documentElement.scrollLeft;
                        }
                        return {
                            left: f,
                            top: p
                        };
                    },
                    getFullSize: function getFullSize1() {
                        var f = document.documentElement;
                        var p = document.body;
                        var h = f.clientHeight;
                        if (h == 0) h = p.clientHeight;
                        var v = f.clientWidth;
                        if (v == 0) v = p.clientWidth;
                        return {
                            w: v,
                            h: h
                        };
                    },
                    getOrientation: function getOrientation1() {
                        var f = parseInt(window["orientation"] || "0");
                        if (f < 0) f += 360;
                        return f;
                    },
                    getOuterSize: function getOuterSize1() {
                        var f;
                        var p;
                        var h = document.documentElement;
                        var v = document.body;
                        if (window.outerHeight) {
                            f = window.outerHeight;
                            p = window.outerWidth;
                        } else {
                            f = h.clientHeight;
                            if (f == 0) f = v.clientHeight;
                            p = h.clientWidth;
                            if (p == 0) p = v.clientWidth;
                        }
                        return {
                            w: p,
                            h: f
                        };
                    },
                    getInnerSize: function getInnerSize1() {
                        var f;
                        var p;
                        var h = document.documentElement;
                        var v = document.body;
                        if (window.innerHeight) {
                            f = window.innerHeight;
                            p = window.innerWidth;
                        } else {
                            f = h.clientHeight;
                            if (f == 0) f = v.clientHeight;
                            p = h.clientWidth;
                            if (p == 0) p = v.clientWidth;
                        }
                        return {
                            w: p,
                            h: f
                        };
                    },
                    getMiddleCenter: function getMiddleCenter1() {
                        var f = getScroll();
                        var p = getInnerSize();
                        return {
                            top: f.top + Math.floor(p.h / 2),
                            left: f.left + Math.floor(p.w / 2)
                        };
                    },
                    isRectHorizontallyVisible: function isRectHorizontallyVisible1(f) {
                        var p = getScroll();
                        var h = getInnerSize();
                        return f.left >= p.left && f.right <= p.left + h.w;
                    },
                    isRectFullyVisible: function isRectFullyVisible1(f) {
                        var p = getScroll();
                        var h = getInnerSize();
                        return f.top >= p.top && f.bottom <= p.top + h.h && f.left >= p.left && f.right <= p.left + h.w;
                    },
                    scrollIntoView: function scrollIntoView1(f) {
                        if (f && f.scrollIntoView) {
                            f.scrollIntoView();
                        }
                    }
                },
                win: {
                    _openedWindows: {},
                    _uniqueWindowCounter: 0,
                    _calcPixels: function _calcPixels1(f, p, h, v) {
                        var w;
                        if (typeof f === "string") {
                            w = parseInt(f);
                            if (f.indexOf("%") !== -1) {
                                w = parseInt(f) * 0.01 * p;
                                if (v) {
                                    w -= v / 2;
                                }
                            }
                        } else {
                            w = f;
                        }
                        w = Math.round(w);
                        if (isNaN(w) && h !== undefined) {
                            w = _calcPixels1(h, p, undefined, v);
                        }
                        return w;
                    },
                    open: function open1(f, p, h) {
                        if (!h) {
                            h = {
                                menubar: 0,
                                toolbar: 0,
                                resizable: 1,
                                scrollbars: 1
                            };
                        }
                        h.width = _calcPixels(h.width, screen.width, 960);
                        h.height = _calcPixels(h.height, screen.height, 680);
                        h.left = _calcPixels(h.left, screen.width, "50%", h.width);
                        h.top = _calcPixels(h.top, screen.height, "50%", h.height);
                        var v = "";
                        for(var w in h){
                            v += "," + w + "=" + h[w];
                        }
                        v = v.substr(1);
                        var m = LocalInfo_1.localInfo.isIE && f.length > 2048 || f.length > 4096;
                        var b = f;
                        if (m) {
                            b = "";
                            if (LocalInfo_1.localInfo.isIE) {
                                b = "about:blank";
                            }
                        }
                        if (!p) {
                            p = "_gigWindow_" + new Date().getTime() + "_" + ++exports._uniqueWindowCounter;
                        }
                        var y = window.open(b, p, v);
                        if (y && y.focus) {
                            y.focus();
                        }
                        exports._openedWindows[p] = y;
                        var S = URLUtils.getParamsFromURL(f);
                        if (m) {
                            HTTPUtils.redirect(f.split("?")[0], [
                                S
                            ], "POST", p);
                        }
                        globalEvents.dispatch({
                            eventName: "windowOpened",
                            url: f,
                            params: S
                        });
                        return exports._openedWindows[p] != null;
                    },
                    close: function close1(f) {
                        if (exports._openedWindows[f] != null) {
                            var fnClose1 = function() {
                                try {
                                    if (exports._openedWindows[f] != null) exports._openedWindows[f].close();
                                    delete exports._openedWindows[f];
                                } catch (p) {}
                            };
                            if (LocalInfo_1.localInfo.iosVersion >= 6) {
                                fnClose1();
                            } else {
                                window.setTimeout(fnClose1, 10);
                            }
                        }
                    }
                },
                xd: {
                    _flashListenerID: "flid1701874189669",
                    addMessageListener: function addMessageListener1(f, p, h, v, w) {
                        _listeners[f] = {
                            callback: v,
                            context: p,
                            t: new Date().getTime()
                        };
                        if (!w) {
                            w = localInfo.messagingMethod;
                            if (localInfo.isIE11 && h && window.indexedDB) w = InternalFlows_1.MessagingMethod.LocalStorageListener;
                            if (localInfo.isAndroid && p && p["provider"] && p["provider"].toLowerCase() == "line") {
                                w = InternalFlows_1.MessagingMethod.LocalStorageListener;
                            }
                        }
                        if (w == InternalFlows_1.MessagingMethod.LocalStorageListener || w == InternalFlows_1.MessagingMethod.PostMessage) {
                            if (w == InternalFlows_1.MessagingMethod.LocalStorageListener && h) {
                                _createLocalStorageListenerIFrame(f);
                            }
                            if (!_added) {
                                var fnOnMessage1 = function(f) {
                                    if (f && f.data && typeof f.data === "string") {
                                        var p = f.data.split("=")[0];
                                        if (_listeners[p]) {
                                            _onMessage(f);
                                        }
                                    }
                                };
                                if (window.addEventListener) {
                                    window.addEventListener("message", fnOnMessage1, false);
                                } else if (window["attachEvent"]) {
                                    window["attachEvent"]("onmessage", fnOnMessage1);
                                }
                                _added = true;
                            }
                        }
                    },
                    removeMessageListener: function removeMessageListener1(f) {
                        delete _listeners[f];
                    }
                },
                recaptcha: {},
                getGigyaScriptElement: function getGigyaScriptElement1() {
                    var f;
                    var p = document.getElementsByTagName("script");
                    var _loop_11 = function(h) {
                        var v = p[h];
                        var w = v.src.toLowerCase();
                        if (w !== "") {
                            if (gigyaCdnRegex.test(w) || w.indexOf("?apikey=") > -1) {
                                var m = fileNames.length === 0 || fileNames.some(function(f) {
                                    return w.indexOf(f) > -1;
                                });
                                if (m) {
                                    f = v;
                                    return "break";
                                }
                            }
                        }
                    };
                    for(var h = p.length - 1; h >= 0; h--){
                        var v = _loop_11(h);
                        if (v === "break") break;
                    }
                    return f;
                },
                updateConfiguration: function updateConfiguration1(f) {
                    if (f === void 0) {
                        f = {};
                    }
                    logger.info("globalConf is updated", {
                        updateObject: f
                    });
                    __webpack_provided_Object_dot_assign(thisScript.globalConf || {}, f);
                },
                getParamValue: function getParamValue1(f, p, h) {
                    if (h === void 0) {
                        h = "&";
                    }
                    var v = f.match(new RegExp(p + "=([^" + h + "]*)"));
                    return v ? v[1] : null;
                },
                getReqParamValue: function getReqParamValue1(f, p) {
                    var h = getParamValue(f, p);
                    return h ? decodeURIComponent(h) : null;
                },
                Tabbable: function Tabbable1() {
                    this.bindings = [];
                },
                tabbable: {
                    bindings: [
                        {
                            container: {},
                            listener: function(f) {
                                var p = document.activeElement;
                                if (f.keyCode === 9 && container.contains(p)) {
                                    var h = !f.shiftKey ? _this.getNextTabbableElement(container, p, filterSelector) : _this.getPreviousTabbableElement(container, p, filterSelector);
                                    if (h) {
                                        h.focus();
                                        DOMUtils.cancelEvent(f);
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            getUrlParam: function(f) {
                return stringParams_1.getReqParamValue(location.search, f);
            },
            logger: {
                _groupsStack: [],
                _currColorIdx: 0,
                configKey: "gig_loggerConfig",
                _console: {
                    debug: function() {},
                    error: function() {},
                    info: function() {},
                    log: function() {},
                    warn: function() {},
                    dir: function() {},
                    dirxml: function() {},
                    table: function() {},
                    trace: function() {},
                    group: function() {},
                    groupCollapsed: function() {},
                    groupEnd: function() {},
                    clear: function() {},
                    count: function() {},
                    countReset: function() {},
                    assert: function() {},
                    profile: function() {},
                    profileEnd: function() {},
                    time: function() {},
                    timeLog: function() {},
                    timeEnd: function() {},
                    timeStamp: function() {},
                    context: function() {},
                    createTask: function() {},
                    memory: {}
                },
                _config: {
                    logLevel: 0,
                    clientMuteLevel: 0,
                    logTheme: 1
                },
                _random: function() {
                    return Math.random() * 100;
                },
                _jsonp: function loggerJsonp1(f, p) {
                    var h = document.createElement("script");
                    h.src = f + "?" + p;
                    h.type = "text/javascript";
                    h.onload = function() {
                        document.getElementsByTagName("head")[0].removeChild(h);
                    };
                    document.getElementsByTagName("head")[0].appendChild(h);
                }
            },
            events: {
                global: {
                    _activeNamespaces: {
                        socialize: 1
                    },
                    add: function add1(f, p, h, v, w, m) {
                        if (h === void 0) {
                            h = "other";
                        }
                        if (w === void 0) {
                            w = "socialize";
                        }
                        var b = w + "_" + getEventHandlerName(f);
                        if (!_eventHandlers[b]) {
                            _eventHandlers[b] = [];
                        }
                        var y = {
                            handler: p,
                            type: h,
                            context: v,
                            params: m,
                            fullEventName: b
                        };
                        _eventHandlers[b].push(y);
                        if (!this._activeNamespaces[w] && _.apiAdapter) {
                            _.apiAdapter.registerForNamespaceEvents(w);
                        }
                        this._activeNamespaces[w] = 1;
                        var S = _pendingEvents[b];
                        if (S && h == "other") {
                            _pendingEvents[b] = [];
                            for(var E = 0; E < S.length; E++){
                                var C = S[E];
                                dispatchRegisteredHandlers(C.eventObj, C.params, C.preProcess);
                            }
                        }
                        return y;
                    },
                    remove: function remove1(f, p) {
                        if (_eventHandlers[f]) {
                            arrayUtils.removeByValue(_eventHandlers[f], p);
                        }
                    },
                    dispatch: function dispatch1(f, p) {
                        var h = 0;
                        var v = f.isInternal;
                        var w = f["eventName"].split(",");
                        LegacyLogger_1.addLog('Dispatching global event "' + f["eventName"] + '" with this event object', f);
                        for(var m = 0; m < w.length; m++){
                            var b = w[m].split(".");
                            var y = b.length > 1 ? b.shift() : "socialize";
                            var S = b[0];
                            var E = getEventHandlerName(S);
                            var C = y + "_" + E;
                            var I = objectUtils.clone(_eventHandlers[C]) || [];
                            var R = objectUtils.clone(f);
                            R["isGlobal"] = true;
                            R.eventName = S;
                            R.fullEventName = w[m];
                            if (p) {
                                if (p.source) R.source = p.source;
                                if (p.sourceData) R.sourceData = p.sourceData;
                                if (p.context) R.context = p.context;
                            }
                            var A = [
                                "component"
                            ];
                            if (!v) A.push("other");
                            for(var U = 0; U < A.length; U++){
                                var x = A[U];
                                for(var N = 0; N < I.length; N++){
                                    var P = I[N];
                                    if (P.type == x) {
                                        var O = objectUtils.clone(R);
                                        if (!O["context"] && P.context) {
                                            O["context"] = P["context"];
                                        }
                                        if (!O["context"]) {
                                            delete O["context"];
                                        }
                                        if (x !== "component") {
                                            h++;
                                            InternalFlows_1.handleSpecialFields(O);
                                        }
                                        if (P.params && P.params["signKey"]) {
                                            O["UIDSignature"] = f["signKeysUIDSignature"][P.params["signKey"]];
                                            delete O["signKeysUIDSignature"];
                                        }
                                        try {
                                            P.handler(O);
                                        } catch (p) {
                                            LegacyLogger_1.addLog('Error while trying to invoke "' + f["eventName"] + '" global event handler', p);
                                        }
                                    }
                                }
                            }
                            if (!v) {
                                events._dispatchFromMaps(R, true);
                            }
                            var D = window["GenesisExchange_Gigya"];
                            var L = window["gigya_omniture_conf"];
                            var T = window["myOmnitureIntegrationFunc"];
                            if (!v && typeof D != "undefined" && typeof L != "undefined" && y == "socialize") {
                                var F = new D(L);
                                F.processAction(R);
                                if (typeof T != "undefined") {
                                    T(L, R);
                                }
                            }
                        }
                        return h;
                    },
                    dispatchWhenHandlerAdded: function dispatchWhenHandlerAdded1(f, p, h) {
                        if (p === void 0) {
                            p = {};
                        }
                        var v = f["eventName"].split(".");
                        var w = v.length > 1 ? v.shift() : "socialize";
                        var m = v[0];
                        dispatchRegisteredHandlers(f, p, h, function(v) {
                            if (v == 0) {
                                var b = "on" + m.substring(0, 1).toUpperCase() + m.substring(1);
                                var y = w + "_" + b;
                                if (!_pendingEvents[y]) _pendingEvents[y] = [];
                                _pendingEvents[y].push({
                                    eventObj: f,
                                    params: p,
                                    preProcess: h
                                });
                            }
                        });
                    },
                    dispatchWhenHandlersAdded: function dispatchWhenHandlersAdded1(f, p, h, v) {
                        if (h === void 0) {
                            h = {};
                        }
                        for(var w = 0, m = f; w < m.length; w++){
                            var b = m[w];
                            dispatchWhenHandlerAdded(tslib_1.__assign({
                                eventName: b
                            }, p), h, v);
                        }
                    },
                    getEventsForOperation: function getEventsForOperation1(f) {
                        var p = [];
                        if (f.toLowerCase().indexOf("login") != -1) {
                            if (this._activeNamespaces.socialize) p.push("socialize.login");
                            if (this._activeNamespaces.accounts) p.push("accounts.login");
                        } else if (f.toLowerCase().indexOf("addconnection") != -1) {
                            if (this._activeNamespaces.socialize) p.push("socialize.connectionAdded");
                        }
                        return p.join(",");
                    }
                },
                addMap: function addMap1(f) {
                    defaultEventMaps.splice(0, 0, f);
                },
                dispatchErrorFromResponse: function dispatchErrorFromResponse1(f, p, h) {
                    if (!p) {
                        p = {};
                    }
                    var v = p;
                    if (v.response) {
                        v = v.response;
                    }
                    var w = {
                        eventName: "error",
                        status: v.status ? v.status : "FAIL",
                        statusMessage: v.statusMessage ? v.statusMessage : "General Server Error",
                        errorMessage: v.errorMessage ? v.errorMessage : "General Server Error",
                        errorDetails: v.errorDetails ? v.errorDetails : "",
                        errorCode: v.errorCode ? v.errorCode : 500001,
                        response: p
                    };
                    objectUtils.add(w, h);
                    return dispatchForWidget(w, f);
                },
                dispatchInvalidParamError: function dispatchInvalidParamError1(f, p) {
                    var h = {
                        eventName: "error"
                    };
                    if (typeof f[p] == "undefined" || f[p] == null) {
                        h.errorCode = GSErrors_1.GSErrors.MISSING_REQUIRED_PARAMETER;
                        h.errorMessage = "Missing_required_parameter (" + p + ")";
                    } else {
                        h.errorCode = GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE;
                        h.errorMessage = "Invalid_parameter_value (" + p + ")";
                    }
                    h.status = h.errorCode;
                    h.statusMessage = h.errorMessage;
                    dispatchForWidget(h, f);
                },
                dispatchForWidget: function dispatchForWidget1(f, p) {
                    if (!f || !f.eventName) return;
                    var h = f.eventName;
                    LegacyLogger_1.addLog('Dispatching widget event "' + h + '" for ' + p.lastSource + " with this event object", f);
                    InternalFlows_1.handleSpecialFields(f);
                    var v = h.split(",");
                    var w;
                    for(var m = 0; m < v.length; m++){
                        var b = v[m];
                        var y = getEventHandlerName(b);
                        if (p) {
                            if (p.context) {
                                f.context = p.context;
                            }
                            if (p.source) {
                                f.source = p.source;
                            }
                            if (p.sourceData) {
                                f.sourceData = p.sourceData;
                            }
                            if (p.containerID) {
                                f.sourceContainerID = p.containerID;
                            }
                            if (p.instanceID) {
                                f.instanceID = p.instanceID;
                            }
                        }
                        if (p[y]) {
                            w = dispatchEventObject(p[y], f);
                        }
                        if (typeof w === "undefined") {
                            w = true;
                        }
                        if (b.indexOf("login") == -1 && b.indexOf("logout") == -1 && b != "connectionRemoved" && b != "connectionAdded") {
                            _dispatchFromMaps(f);
                            var S = window["GenesisExchange_Gigya"];
                            var E = window["gigya_omniture_conf"];
                            var C = window["myOmnitureIntegrationFunc"];
                            if (typeof S != "undefined" && typeof E != "undefined") {
                                var I = new S(E);
                                I.processAction(f);
                                if (typeof C != "undefined") {
                                    C(E, f);
                                }
                            }
                        }
                    }
                    return w;
                },
                dispatchEventObject: function dispatchEventObject1(f, p) {
                    var h;
                    try {
                        if (typeof f == "function") {
                            h = f(p);
                        } else if (!(f instanceof Array)) {
                            LegacyLogger_1.addLog("Not a function or function array registered to event", f);
                        } else {
                            arrayUtils.forEach(f, function(f) {
                                if (typeof f == "function") {
                                    f(p);
                                } else {
                                    LegacyLogger_1.addLog("Not a function registered to event: " + f, f);
                                }
                            });
                        }
                    } catch (v) {
                        LegacyLogger_1.addLog("Error invoking function registered to event", f);
                    }
                    return h;
                },
                _dispatchFromMaps: function _dispatchFromMaps1(f, p) {
                    if (p === void 0) {
                        p = false;
                    }
                    var h = [];
                    var v = false;
                    for(var w = 0; w < defaultEventMaps.length; w++){
                        var m = defaultEventMaps[w].eventMap;
                        var b = defaultEventMaps[w].defaultMethod;
                        for(var y = 0; y < m.length; y++){
                            var S = m[y];
                            var E = [];
                            if (!S.args) S.args = [];
                            for(var C = 0; C < S.args.length; C++){
                                if (S.args[C] == "$event") {
                                    E.push(f);
                                } else {
                                    E.push(templatesUtils.fill(S.args[C], f));
                                }
                            }
                            var I = "," + S.events.toLowerCase() + ",";
                            if (I.indexOf(",*,") != -1 || (I.indexOf("," + "on" + f.eventName.toLowerCase() + ",") != -1 || I.indexOf("," + f.eventName.toLowerCase() + ",") != -1) && (!f.source && !S.sources || !S.sources || S.sources.indexOf(f.source) != -1)) {
                                h.push(S);
                                var R = S.method ? S.method : b;
                                try {
                                    R.apply(this, E);
                                } catch (f) {
                                    LegacyLogger_1.addLog("Error invoking function registered to events map's method", R);
                                }
                                if (S.override) {
                                    v = true;
                                }
                            }
                        }
                        if (v) break;
                    }
                }
            },
            log: {
                CONSOLE_LOG_LEVELS: [
                    "debug",
                    "info",
                    "log",
                    "warn",
                    "error"
                ],
                selectedConsoleLogLevels: [],
                _log: [],
                enable: function enable1() {
                    cookie_1.default.set("_gig_dbgConsole_log", "1", null);
                },
                disable: function disable1() {
                    cookie_1.default.set("_gig_dbgConsole_log", "0", null);
                },
                _isEnabled: function _isEnabled1() {
                    var f = !localInfo.isNativeMobileApp && cookie_1.default.get("_gig_dbgConsole_log");
                    if (typeof f !== "undefined" && f != null) {
                        return f === "1";
                    }
                    return exports.selectedConsoleLogLevels.length > 0;
                },
                addLog: function addLog1(f, p, h) {
                    if (h === void 0) {
                        h = false;
                    }
                    if (_isEnabled() || h) {
                        var v = f;
                        p = objectUtils.clone(p, true, false, 4, null, true);
                        if (p != null) v += ":" + (typeof p == "object" ? "\n" : "") + JSONUtils.serialize(p, true, true);
                        if (h && typeof console == "object" && console.log) console.log(v);
                        if (_isEnabled()) {
                            exports._log.push(v);
                            if (document.getElementById("gigya_log") != null && show) show();
                            var w;
                            if (arrayUtils.indexOf(exports.CONSOLE_LOG_LEVELS, f) != -1) w = f;
                            else w = "log";
                            _.apiAdapter.onJSLog(w, v);
                        }
                    }
                },
                logCall: function logCall1(f, p, h) {
                    if (!h) h = p.lastSource;
                    addLog("Calling " + f + (h && h != f ? " for " + h : "") + (p.source && h != p.source ? " initiated from " + p.source : "") + " with these params", p);
                },
                debug: function debug1() {
                    scriptUtils.load(cdn_1.getCdnResource("/js/gigya.services.socialize.plugins.log.min.js"), null, function() {
                        showConfig();
                    }, true);
                },
                showLog: function showLog1() {
                    scriptUtils.load(cdn_1.getCdnResource("/js/gigya.services.socialize.plugins.log.min.js"), null, function() {
                        show();
                    }, true);
                },
                show: function show1() {},
                showConfig: function showConfig1() {}
            },
            legacyReports: {
                trackAddressBarShares: function trackAddressBarShares1() {
                    if (thisScript.globalConf["trackAddressBarShares"]) {
                        var f = _.apiAdapter.getTokenParam(thisScript.APIKey, "UUID");
                        var p = document.location.href.split("#");
                        if (p.length == 1 || p[1] == "" || p[1] == "guid=_") {
                            document.location.replace("#guid=" + (f ? f : "_"));
                        }
                    }
                },
                report: function report1(f, p, h, v, w, m, b) {
                    if (m === void 0) {
                        m = {};
                    }
                    if (b === void 0) {
                        b = false;
                    }
                    var y = objectUtils.removeUndefined({
                        name: f,
                        time: new Date().getTime().toString(),
                        source: v,
                        sourceData: w,
                        reportData: m,
                        cid: h
                    });
                    if (!b) {
                        if (!exports.queue) exports.queue = [];
                        exports.queue.push(y);
                    } else {
                        var S = [
                            y
                        ];
                        gscounters.sendReport({
                            reports: S,
                            noAuth: !isAuthDataRequired(S)
                        });
                    }
                },
                init: function init1() {
                    setInterval(sendReports, 5000);
                },
                reportLoad: function reportLoad1(f, p) {
                    if (!p._reportedLoad) {
                        p._reportedLoad = true;
                        var h = "load";
                        if (f == "gigya.socialize.plugins.reactions.showReactionsBarUI") return;
                        if (f == "gigya.socialize.plugins.simpleshare.showSimpleShareUI") {
                            h = "loadSimple";
                        }
                        report(h, p.APIKey, p.cid, p.source, p.sourceData);
                    }
                }
            },
            fidm: {
                saml: {
                    initSSO: function initSSO1(f, p) {
                        if (p === void 0) {
                            p = true;
                        }
                        var h = utils_1.getLoginTokenExpiration(apiKey);
                        if (!p) {
                            var v = getLoginToken();
                            return redirectToSamlEndPoint("idp/sso/init", tslib_1.__assign({
                                loginToken: v,
                                loginTokenExp: h
                            }, f));
                        }
                        var w = getProxyUrl();
                        window.location.href = URLUtils.addParamsToURL(w, objectUtils.merge([
                            {
                                mode: "initSSO"
                            },
                            tslib_1.__assign({
                                loginTokenExp: h
                            }, f)
                        ]));
                    },
                    continueSSO: function continueSSO1(f, p) {
                        if (f === void 0) {
                            f = {};
                        }
                        if (p === void 0) {
                            p = true;
                        }
                        var h = URLUtils.getParamsFromURL(location.href);
                        var v = h["samlContext"];
                        var w = utils_1.getLoginTokenExpiration(apiKey);
                        if (!p) {
                            var m = getLoginToken();
                            return redirectToSamlEndPoint("idp/sso/continue", tslib_1.__assign({
                                loginToken: m,
                                samlContext: v,
                                loginTokenExp: w
                            }, f));
                        }
                        var b = getProxyUrl();
                        window.location.href = URLUtils.addParamsToURL(b, {
                            mode: "afterLogin",
                            samlContext: v,
                            loginTokenExp: w
                        });
                    },
                    cancelSSO: function cancelSSO1(f, p) {
                        if (p === void 0) {
                            p = true;
                        }
                        var h = URLUtils.getParamsFromURL(location.href);
                        var v = h["samlContext"];
                        if (!p) {
                            return redirectToSamlEndPoint("idp/sso/cancel", tslib_1.__assign(tslib_1.__assign({
                                samlContext: v
                            }, f), {
                                cancelCode: encodeURIComponent(f.cancelCode),
                                statusCode: encodeURIComponent(f.statusCode)
                            }));
                        }
                        var w = getProxyUrl();
                        window.location.href = URLUtils.addParamsToURL(w, {
                            mode: "cancel",
                            samlContext: v,
                            cancelCode: f === null || f === void 0 ? void 0 : f.cancelCode,
                            statusCode: f === null || f === void 0 ? void 0 : f.statusCode
                        });
                    },
                    logoutSSO: function logoutSSO1(f, p) {
                        if (p === void 0) {
                            p = true;
                        }
                        var h = URLUtils.getParamsFromURL(location.href);
                        var v = h["samlContext"];
                        var onLogoutResponse1 = function(h) {
                            if (h.errorCode === GSErrors_1.GSErrors.OK && !p) {
                                return redirectToSamlEndPoint("idp/slo/finalize", tslib_1.__assign({
                                    samlContext: v
                                }, f));
                            }
                            var w = getProxyUrl();
                            window.location.href = URLUtils.addParamsToURL(w, {
                                mode: "logout",
                                samlContext: v
                            });
                        };
                        socialize.logout({
                            callback: onLogoutResponse1,
                            samlContext: v
                        });
                    }
                },
                oidc: {
                    op: {
                        getContext: function(f) {
                            var p = f.opKey, h = tslib_1.__rest(f, [
                                "opKey"
                            ]);
                            return tslib_1.__awaiter(this, void 0, gigya.Promise, function() {
                                return tslib_1.__generator(this, function(f) {
                                    return [
                                        2,
                                        Uri_1.Uri.parse(OidcOpApi.baseUrl(p) + "/sso/getContext").addToSearch(h).fetch()
                                    ];
                                });
                            });
                        },
                        redirectToContinue: function(f) {
                            var p = f.opKey, h = tslib_1.__rest(f, [
                                "opKey"
                            ]);
                            HTTP_1.redirect(OidcOpApi.baseUrl(p) + "/authorize/continue", [
                                h
                            ], "GET");
                        },
                        deviceContinue: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        },
                        getContextData: function() {
                            var f = [];
                            for(var p = 0; p < arguments.length; p++){
                                f[p] = arguments[p];
                            }
                            var h = objectUtils.merge([
                                f
                            ]);
                            var fnRun1 = function() {
                                if (h.lang) {
                                    h._explicitLang = true;
                                }
                                var f = objectUtils.merge([
                                    thisScript.globalConf,
                                    h
                                ]);
                                _this.run(f, h);
                            };
                            if (!thisScript || !thisScript.globalConf) {
                                queueUtils.queueForExecution("API", fnRun1);
                            } else {
                                fnRun1();
                            }
                        }
                    }
                }
            },
            globalAccount: {},
            isReady: true,
            GSErrors: {
                0: "OK",
                100001: "DATA_PENDING",
                200001: "OPERATION_CANCELED",
                200002: "PERMISSION_GRANTED",
                200003: "PERMISSION_NOT_GRANTED",
                200004: "REDIRECT",
                200005: "NEW_USER",
                200006: "OPERATION_DONE",
                200007: "UPDATE_USER",
                200008: "OK_WITH_ERRORS",
                200009: "ACCOUNTS_LINKED",
                200010: "OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS",
                206001: "ACCOUNT_PENDING_REGISTRATION",
                206002: "ACCOUNT_PENDING_VERIFICATION",
                206003: "ACCOUNT_MISSING_LOGINID",
                206004: "IDENTITY_ALREADY_ASSIGNED",
                206005: "AFTER_EMAIL_VERIFICATION",
                206006: "PENDING_CODE_VERIFICATION",
                300001: "CLIENT_LOG",
                301001: "INVALID_DATA_CENTER",
                400001: "INVALID_REQUEST_FORMAT",
                400002: "MISSING_REQUIRED_PARAMETER",
                400003: "UNIQUE_IDENTIFIER_EXISTS",
                400004: "INVALID_PARAMETER_FORMAT",
                400006: "INVALID_PARAMETER_VALUE",
                400007: "DUPLICATE_VALUE",
                400008: "INVALID_AUTHENTICATION_HEADER",
                400009: "VALIDATION_ERROR",
                400011: "INVALID_REDIRECT_URI",
                400012: "INVALID_RESPONSE_TYPE",
                400013: "UNSUPPORTED_GRANT_TYPE",
                400014: "INVALID_GRANT",
                400015: "CODE_EXPIRED",
                400020: "SCHEMA_VALIDATION_FAILED",
                400021: "CAPTCHA_VERIFICATION_FAILED",
                400022: "UNIQUE_INDEX_VALIDATION_ERROR",
                400023: "INVALID_TYPE_VALIDATION_ERROR",
                400024: "DYNAMIC_FIELDS_VALIDATION_ERROR",
                400025: "WRITE_ACCESS_VALIDATION_ERROR",
                400026: "INVALID_FORMAT_VALIDATION_ERROR",
                400027: "REQUIRED_VALUE_VALIDATION_ERROR",
                400028: "EMAIL_NOT_VERIFIED",
                400029: "SCHEMA_CONFLICT_ERROR",
                400030: "OPERATION_NOT_ALLOWED",
                400050: "SECURITY_VERIFICATION_FAILED",
                400093: "INVALID_APIKEY_PARAMETER",
                400096: "NOT_SUPPORTED",
                400097: "UNSUPPORTED_USER_AGENT",
                400100: "NO_PROVIDERS",
                400101: "POPUP_BLOCKED",
                400102: "INVALID_EVENT_HANDLER",
                400103: "INVALID_CONTAINERID",
                400106: "NOT_CONNECTED",
                400120: "INVALID_SITE_DOMAIN",
                400122: "PROVIDER_CONFIGURATION_ERROR",
                400124: "LIMIT_REACHED",
                400125: "FREQUENCY_LIMIT_REACHED",
                400126: "INVALID_ACTION",
                400127: "INSUFFICIENT_POINTS_TO_REDEEM",
                400128: "SIGNATURE_TIMESTAMP_EXPIRED",
                400130: "PASSKEY_AUTHENTICATOR_REGISTERED",
                400131: "PASSKEY_ABORTED",
                400302: "Error_During_Extensions_Operation",
                400303: "Extension_Point_Custom_Error",
                401000: "INVALID_POLICY_CONFIGURATION",
                401001: "MEDIA_ITEMS_NOT_SUPPORTED",
                401010: "SUSPECTED_SPAM",
                401020: "LOGIN_FAILED_CAPTCHA_REQUIRED",
                401021: "LOGIN_FAILED_WRONG_CAPTCHA",
                401023: "REQUEST_FAILED_CAPTCHA_REQUIRED",
                401030: "OLD_PASSWORD_USED",
                403000: "FORBIDDEN",
                403001: "INVALID_SESSION_TOKEN",
                403002: "REQUEST_HAS_EXPIRED",
                403003: "INVALID_REQUEST_SIGNATURE",
                403004: "DUPLICATE_NONCE",
                403005: "UNAUTHORIZED_USER",
                403006: "SENSITIVE_DATA_SENT_OVER_HTTP",
                403007: "PERMISSION_DENIED",
                403008: "INVALID_OPENID_URL",
                403009: "PROVIDER_SESSION_EXPIRED",
                403010: "INVALID_SECRET",
                403011: "SESSION_HAS_EXPIRED",
                403012: "NO_VALID_SESSION",
                403013: "UNVERIFIED_USER",
                403015: "MISSING_REQUEST_REFERRER",
                403017: "UNEXPECTED_PROVIDER_USER",
                403022: "PERMISSION_NOT_REQUESTED",
                403023: "NO_USER_PERMISSION",
                403024: "PROVIDER_LIMIT_REACHED",
                403025: "INVALID_TOKEN",
                403026: "UNAUTHORIZED_ACCESS_ERROR",
                403027: "DIFFERENT_USER_FOR_REAUTH",
                403030: "SESSION_EXPIRED_RETRY",
                403031: "APPROVED_BY_MODERATOR",
                403032: "TOKEN_HAS_RENEWED",
                403035: "NO_USER_COOKIE",
                403036: "UNAUTHORIZED_PARTNER",
                403037: "POST_DENIED",
                403040: "NO_LOGIN_TICKET",
                403041: "ACCOUNT_DISABLED",
                403042: "INVALID_LOGINID",
                403043: "LOGIN_IDENTIFIER_EXISTS",
                403044: "UNDERAGE_USER",
                403045: "INVALID_SITE_CONFIGURATION_ERROR",
                403047: "LOGINID_DOES_NOT_EXIST",
                403048: "API_RATE_LIMIT_EXCEEDED",
                403100: "PENDING_PASSWORD_CHANGE",
                403101: "ACCOUNT_PENDING_TFA_VERIFICATION",
                403102: "ACCOUNT_PENDING_TFA_REGISTRATION",
                403110: "ACCOUNT_PENDING_RECENT_LOGIN",
                403120: "ACCOUNT_TEMPORARILY_LOCKED_OUT",
                403200: "REDUNDANT_OPERATION",
                403201: "INVALID_APPLICATION_ID",
                403300: "THIS_AUTHENTICATION_METHOD_IS_CURRENTLY_DISABLED",
                404000: "NOT_FOUND",
                404001: "FRIEND_NOT_FOUND",
                404002: "CATEGORY_NOT_FOUND",
                404003: "UID_NOT_FOUND",
                404004: "INVALID_URL",
                405001: "INVALID_API_METHOD",
                409001: "IDENTITY_EXISTS",
                409003: "FORCE_LINK_LOGIN_IDENTIFIER_EXISTS",
                409010: "MISSING_USER_PHOTO",
                409011: "COUNTER_NOT_REGISTERED",
                409012: "INVALID_GMID_TICKET",
                409013: "SAML_MAPPED_ATTRIBUTE_NOT_FOUND",
                409014: "SAML_CERTIFICATE_NOT_FOUND",
                409015: "SAML_MESSAGE_NOT_FOUND",
                410000: "GONE",
                413001: "REQUEST_ENTITY_TOO_LARGE",
                413002: "COMMENT_TEXT_TOO_LARGE",
                413003: "OBJECT_TOO_LARGE",
                413004: "PROFILE_PHOTO_TOO_LARGE",
                414000: "REQUEST_URI_TOO_LONG",
                500001: "GENERAL_SERVER_ERROR",
                500002: "SERVER_LOGIN_ERROR",
                500003: "DEFAULT_APPLICATION_CONFIGURATION_ERROR",
                500014: "SESSION_MIGRATION_ERROR",
                500023: "PROVIDER_ERROR",
                500026: "NETWORK_ERROR",
                500028: "DATABASE_ERROR",
                500029: "USERNAME_REQUIRED",
                500031: "NO_PROVIDER_APPLICATION",
                500032: "LOAD_FAILED",
                500033: "INVALID_ENVIRONMENT_CONFIG",
                500034: "ERROR_DURING_BACKEND_OPERATION",
                500131: "PASSKEY_ERROR",
                504001: "TIMEOUT",
                504002: "CLIENTTIMEOUT",
                599999: "MISSING_ERROR_CODE",
                OK: 0,
                Data_Pending: 100001,
                NETWORK_ERROR: 500026,
                DATA_PENDING: 100001,
                OPERATION_CANCELED: 200001,
                PERMISSION_GRANTED: 200002,
                PERMISSION_NOT_GRANTED: 200003,
                REDIRECT: 200004,
                NEW_USER: 200005,
                OPERATION_DONE: 200006,
                UPDATE_USER: 200007,
                OK_WITH_ERRORS: 200008,
                ACCOUNTS_LINKED: 200009,
                OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS: 200010,
                ACCOUNT_PENDING_REGISTRATION: 206001,
                ACCOUNT_PENDING_VERIFICATION: 206002,
                ACCOUNT_MISSING_LOGINID: 206003,
                IDENTITY_ALREADY_ASSIGNED: 206004,
                AFTER_EMAIL_VERIFICATION: 206005,
                PENDING_CODE_VERIFICATION: 206006,
                CLIENT_LOG: 300001,
                INVALID_DATA_CENTER: 301001,
                INVALID_REQUEST_FORMAT: 400001,
                MISSING_REQUIRED_PARAMETER: 400002,
                UNIQUE_IDENTIFIER_EXISTS: 400003,
                INVALID_PARAMETER_FORMAT: 400004,
                INVALID_PARAMETER_VALUE: 400006,
                DUPLICATE_VALUE: 400007,
                INVALID_AUTHENTICATION_HEADER: 400008,
                VALIDATION_ERROR: 400009,
                INVALID_REDIRECT_URI: 400011,
                INVALID_RESPONSE_TYPE: 400012,
                UNSUPPORTED_GRANT_TYPE: 400013,
                INVALID_GRANT: 400014,
                CODE_EXPIRED: 400015,
                SCHEMA_VALIDATION_FAILED: 400020,
                CAPTCHA_VERIFICATION_FAILED: 400021,
                UNIQUE_INDEX_VALIDATION_ERROR: 400022,
                INVALID_TYPE_VALIDATION_ERROR: 400023,
                DYNAMIC_FIELDS_VALIDATION_ERROR: 400024,
                WRITE_ACCESS_VALIDATION_ERROR: 400025,
                INVALID_FORMAT_VALIDATION_ERROR: 400026,
                REQUIRED_VALUE_VALIDATION_ERROR: 400027,
                EMAIL_NOT_VERIFIED: 400028,
                SCHEMA_CONFLICT_ERROR: 400029,
                OPERATION_NOT_ALLOWED: 400030,
                SECURITY_VERIFICATION_FAILED: 400050,
                INVALID_APIKEY_PARAMETER: 400093,
                NOT_SUPPORTED: 400096,
                UNSUPPORTED_USER_AGENT: 400097,
                NO_PROVIDERS: 400100,
                POPUP_BLOCKED: 400101,
                INVALID_EVENT_HANDLER: 400102,
                INVALID_CONTAINERID: 400103,
                NOT_CONNECTED: 400106,
                INVALID_SITE_DOMAIN: 400120,
                PROVIDER_CONFIGURATION_ERROR: 400122,
                LIMIT_REACHED: 400124,
                FREQUENCY_LIMIT_REACHED: 400125,
                INVALID_ACTION: 400126,
                INSUFFICIENT_POINTS_TO_REDEEM: 400127,
                SIGNATURE_TIMESTAMP_EXPIRED: 400128,
                Error_During_Extensions_Operation: 400302,
                Extension_Point_Custom_Error: 400303,
                INVALID_POLICY_CONFIGURATION: 401000,
                SUSPECTED_SPAM: 401010,
                LOGIN_FAILED_CAPTCHA_REQUIRED: 401020,
                REQUEST_FAILED_CAPTCHA_REQUIRED: 401023,
                LOGIN_FAILED_WRONG_CAPTCHA: 401021,
                OLD_PASSWORD_USED: 401030,
                FORBIDDEN: 403000,
                INVALID_SESSION_TOKEN: 403001,
                REQUEST_HAS_EXPIRED: 403002,
                INVALID_REQUEST_SIGNATURE: 403003,
                DUPLICATE_NONCE: 403004,
                UNAUTHORIZED_USER: 403005,
                SENSITIVE_DATA_SENT_OVER_HTTP: 403006,
                PERMISSION_DENIED: 403007,
                INVALID_OPENID_URL: 403008,
                PROVIDER_SESSION_EXPIRED: 403009,
                INVALID_SECRET: 403010,
                SESSION_HAS_EXPIRED: 403011,
                NO_VALID_SESSION: 403012,
                UNVERIFIED_USER: 403013,
                MISSING_REQUEST_REFERRER: 403015,
                UNEXPECTED_PROVIDER_USER: 403017,
                PERMISSION_NOT_REQUESTED: 403022,
                NO_USER_PERMISSION: 403023,
                PROVIDER_LIMIT_REACHED: 403024,
                INVALID_TOKEN: 403025,
                UNAUTHORIZED_ACCESS_ERROR: 403026,
                DIFFERENT_USER_FOR_REAUTH: 403027,
                SESSION_EXPIRED_RETRY: 403030,
                APPROVED_BY_MODERATOR: 403031,
                TOKEN_HAS_RENEWED: 403032,
                NO_USER_COOKIE: 403035,
                UNAUTHORIZED_PARTNER: 403036,
                POST_DENIED: 403037,
                NO_LOGIN_TICKET: 403040,
                ACCOUNT_DISABLED: 403041,
                INVALID_LOGINID: 403042,
                LOGIN_IDENTIFIER_EXISTS: 403043,
                UNDERAGE_USER: 403044,
                INVALID_SITE_CONFIGURATION_ERROR: 403045,
                LOGINID_DOES_NOT_EXIST: 403047,
                API_RATE_LIMIT_EXCEEDED: 403048,
                PENDING_PASSWORD_CHANGE: 403100,
                ACCOUNT_PENDING_TFA_VERIFICATION: 403101,
                ACCOUNT_PENDING_TFA_REGISTRATION: 403102,
                ACCOUNT_PENDING_RECENT_LOGIN: 403110,
                ACCOUNT_TEMPORARILY_LOCKED_OUT: 403120,
                REDUNDANT_OPERATION: 403200,
                INVALID_APPLICATION_ID: 403201,
                NOT_FOUND: 404000,
                FRIEND_NOT_FOUND: 404001,
                CATEGORY_NOT_FOUND: 404002,
                UID_NOT_FOUND: 404003,
                RESOURCE_NOT_FOUND: 404004,
                INVALID_API_METHOD: 405001,
                IDENTITY_EXISTS: 409001,
                GONE: 410000,
                REQUEST_ENTITY_TOO_LARGE: 413001,
                COMMENT_TEXT_TOO_LARGE: 413002,
                OBJECT_TOO_LARGE: 413003,
                PROFILE_PHOTO_TOO_LARGE: 413004,
                REQUEST_URI_TOO_LONG: 414000,
                MISSING_USER_PHOTO: 409010,
                COUNTER_NOT_REGISTERED: 409011,
                INVALID_GMID_TICKET: 409012,
                SAML_MAPPED_ATTRIBUTE_NOT_FOUND: 409013,
                SAML_CERTIFICATE_NOT_FOUND: 409014,
                SAML_MESSAGE_NOT_FOUND: 409015,
                GENERAL_SERVER_ERROR: 500001,
                SERVER_LOGIN_ERROR: 500002,
                DEFAULT_APPLICATION_CONFIGURATION_ERROR: 500003,
                SESSION_MIGRATION_ERROR: 500014,
                PROVIDER_ERROR: 500023,
                DATABASE_ERROR: 500028,
                USERNAME_REQUIRED: 500029,
                NO_PROVIDER_APPLICATION: 500031,
                LOAD_FAILED: 500032,
                INVALID_ENVIRONMENT_CONFIG: 500033,
                ERROR_DURING_BACKEND_OPERATION: 500034,
                TIMEOUT: 504001,
                CLIENTTIMEOUT: 504002,
                INVALID_URL: 404004,
                MEDIA_ITEMS_NOT_SUPPORTED: 401001,
                MISSING_ERROR_CODE: 599999,
                THIS_AUTHENTICATION_METHOD_IS_CURRENTLY_DISABLED: 403300,
                FORCE_LINK_LOGIN_IDENTIFIER_EXISTS: 409003,
                PASSKEY_AUTHENTICATOR_REGISTERED: 400130,
                PASSKEY_ABORTED: 400131,
                PASSKEY_ERROR: 500131
            },
            GSErrorDetails: {
                0: "None",
                100001: "Same_password",
                100002: "Invalid_password",
                100003: "Invalid_counters_query_with_cursor",
                None: 0,
                Same_password: 100001,
                Invalid_password: 100002,
                Invalid_counters_query_with_cursor: 100003
            },
            localInfo: {
                baseDomain: "local.pyzlo.in",
                isBrowserSupportsFilesAPI: true,
                initTime: "2023-12-06T14:49:49.667Z",
                version: 0,
                pageDomain: "local.pyzlo.in",
                protocol: "https",
                userAgent: "mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/119.0.0.0 safari/537.36",
                isWin: false,
                isIE: false,
                isIE6: false,
                isIE7: false,
                isIE8: false,
                isIE9: false,
                isIE10: false,
                isIE11: false,
                isEdgeLegacy: false,
                isEdge: false,
                isIOS: false,
                isSafari534: false,
                isWeChat: false,
                iosVersion: 0,
                isAndroid: false,
                isAndroidBrowser: false,
                currentBrowser: "mac chrome",
                androidVersion: 0,
                isChrome: true,
                isGoogleBot: false,
                isFF: false,
                isOpera: false,
                isSafari: false,
                isIOSWebView: false,
                isIOSChrome: false,
                isMAC: true,
                isWindowsPhone: false,
                isFacebookBrowser: false,
                supportsPostMessage: true,
                supportsLocalStorage: true,
                supportsSessionStorage: true,
                supportsFlash: false,
                quirksMode: false,
                backCompat: false,
                isMobile: false,
                isMobileApp: true,
                isNativeMobileApp: false,
                isTouch: false,
                isOnLine: function() {
                    return navigator.onLine;
                },
                messagingMethod: 1
            },
            ClientFeature: function ClientFeature1(f, p) {
                if (f === void 0) {
                    f = _.WindowProvider.navigator();
                }
                if (p === void 0) {
                    p = _.WindowProvider.screen();
                }
                this.navigator = f;
                this.screen = p;
                this.collectData();
            },
            defaultEventMaps: [
                {
                    id: "screen-set-report-events-map",
                    defaultMethod: function report1(f) {
                        var p = f.abTesting, h = f.screenSetID, v = f.eventName;
                        if (!p || !h || !v) {
                            return;
                        }
                        var w = p.requestedScreenId;
                        var m = p.variantId;
                        var b = p.testId;
                        if (!m || !b || !w) {
                            return;
                        }
                        var y = h + "/" + w + "/" + b;
                        var S = {
                            eventCategory: exports.REPORT_EVENT_CATEGORIES.screenSets,
                            eventTime: Date.now(),
                            eventType: v,
                            eventData: m,
                            eventId: Reports_1.replaceNotAllowedReportChars(y, REPLACING_CHAR_FOR_AB_TESTING_REPORT)
                        };
                        Reports_1.queue.push(S);
                    },
                    eventMap: [
                        {
                            events: "afterScreenLoad,submit",
                            args: [
                                function(f) {
                                    return f;
                                }
                            ]
                        }
                    ]
                }
            ],
            flow: function flow1(f, p) {
                return new Flow(f, p);
            },
            oauth: {
                register: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                connect: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                disconnect: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                authorize: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                token: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            },
            auth: {
                token: {
                    authenticationContext: function() {
                        var f = [];
                        for(var p = 0; p < arguments.length; p++){
                            f[p] = arguments[p];
                        }
                        var h = objectUtils.merge([
                            f
                        ]);
                        var fnRun1 = function() {
                            if (h.lang) {
                                h._explicitLang = true;
                            }
                            var f = objectUtils.merge([
                                thisScript.globalConf,
                                h
                            ]);
                            _this.run(f, h);
                        };
                        if (!thisScript || !thisScript.globalConf) {
                            queueUtils.queueForExecution("API", fnRun1);
                        } else {
                            fnRun1();
                        }
                    }
                },
                loginToken: {
                    getTokenParam: function(f, p) {
                        return tokenStore.getTokenParam(f, p);
                    },
                    get: function get1(f) {
                        if (f === void 0) {
                            f = thisScript.APIKey;
                        }
                        var p = utils.cookie.get(_getTokenCookieName(f));
                        if (p) {
                            return p.split("|")[0];
                        } else {
                            return null;
                        }
                    }
                }
            },
            ds: {
                store: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                get: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                search: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                getSchema: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                delete: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            },
            ids: {
                getAccountInfo: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                setAccountInfo: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                },
                search: function() {
                    var f = [];
                    for(var p = 0; p < arguments.length; p++){
                        f[p] = arguments[p];
                    }
                    var h = objectUtils.merge([
                        f
                    ]);
                    var fnRun1 = function() {
                        if (h.lang) {
                            h._explicitLang = true;
                        }
                        var f = objectUtils.merge([
                            thisScript.globalConf,
                            h
                        ]);
                        _this.run(f, h);
                    };
                    if (!thisScript || !thisScript.globalConf) {
                        queueUtils.queueForExecution("API", fnRun1);
                    } else {
                        fnRun1();
                    }
                }
            },
            showDebugUI: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            external: {
                facebook: {
                    isLoggedIn: false,
                    isConnected: false,
                    isLoaded: function isLoaded1() {
                        return exports.initializedTime != null;
                    },
                    load: function load1(f) {
                        if (exports.initializedTime) return;
                        exports.initializedTime = null;
                        window.setInterval(function() {
                            refreshSession();
                        }, 45 * 60 * 1000);
                        window["fbAsyncInit"] = function() {
                            var p = objectUtils.clone(thisScript.globalConf["facebookInitParams"]);
                            if (!p) p = {};
                            if (providersConfig.facebook) {
                                p.appId = providersConfig.facebook.appID;
                                p.version = providersConfig.facebook.version;
                            } else {
                                p.version = "v1.0";
                            }
                            p.status = false;
                            p.cookie = true;
                            p.xfbml = true;
                            p.oauth = true;
                            FB.init(p);
                            if (f != true) {
                                FB.getLoginStatus(function(f) {
                                    exports.initializedTime = new Date();
                                    exports.isConnected = f.status == "connected";
                                    exports.isLoggedIn = f.status != "unknown";
                                    globalEvents.dispatch({
                                        eventName: "facebookLoaded",
                                        isLoggedIn: exports.isLoggedIn,
                                        isConnected: exports.isConnected
                                    });
                                    socialize.addEventHandlers({
                                        listenerType: "component"
                                    }, {
                                        listenerDescription: "listener for updating Facebook Connect session",
                                        onLogin: function() {
                                            refreshSession();
                                        },
                                        onConnect: function() {
                                            refreshSession();
                                        },
                                        onLogout: function() {
                                            refreshSession();
                                        }
                                    });
                                }, true);
                            } else {
                                exports.initializedTime = new Date();
                                globalEvents.dispatch({
                                    eventName: "facebookLoaded",
                                    isLoggedIn: exports.isLoggedIn,
                                    isConnected: exports.isConnected
                                });
                            }
                        };
                        var p = document.createElement("div");
                        p.id = "fb-root";
                        DOMUtils.appendToBody(p);
                        scriptUtils.load(LocalInfo_1.localInfo.protocol + "://connect.facebook.net/" + thisScript.lang.full.replace("-", "_") + "/sdk.js", null, function() {
                            if (document.documentElement.style.display == "none") {
                                document.documentElement.style.display = "";
                            }
                        }, true);
                    },
                    refreshSession: function refreshSession1() {
                        if (typeof FB == "undefined") return;
                        var fncCallback1 = function(f) {
                            exports.initializedTime = new Date();
                            exports.isConnected = f.status == "connected";
                            exports.isLoggedIn = f.status != "unknown";
                            globalEvents.dispatch({
                                eventName: "FBCRefreshed"
                            });
                        };
                        if (providersConfig.facebook && providersConfig.facebook.appID && FB && FB.getLoginStatus) {
                            FB.getLoginStatus(fncCallback1, true);
                        }
                    },
                    retryPending: function retryPending1() {
                        var f = _waitingForService;
                        for(var p = 0; p < f.length; p++){
                            f[p]();
                        }
                        _waitingForService = [];
                    },
                    runWhenLoaded: function runWhenLoaded1(f) {
                        _waitingForService.push(f);
                    },
                    getParams: function getParams1() {
                        var f = {};
                        if (typeof FB != "undefined" && FB.getAuthResponse) {
                            try {
                                var p = FB.getAuthResponse();
                                if (p) {
                                    if (p.userID != null) f["fb_UID"] = p.userID;
                                    if (p.accessToken != null) f["fb_at"] = p.accessToken;
                                    if (p.expiresIn != null) f["fb_exp"] = p.expiresIn;
                                }
                            } catch (h) {}
                        }
                        return f;
                    },
                    autoLogin: function autoLogin1() {
                        socialize.waitForService({
                            service: "facebook",
                            callback: function() {
                                _.apiAdapter.isSessionValid(thisScript.globalConf, function(f) {
                                    var p = getParams();
                                    if (!f && p && p["fb_at"] && !_.autoLoginInProgress) {
                                        _.autoLoginInProgress = true;
                                        socialize.notifyLogin({
                                            regSource: "autoLogin",
                                            providerSessions: {
                                                facebook: {
                                                    authToken: p["fb_at"],
                                                    tokenExpiresIn: p["fb_exp"]
                                                }
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                },
                googlePlus: {
                    isLoaded: function isLoaded1() {
                        return exports.initializedTime != null;
                    },
                    load: function load1() {
                        var f = this;
                        if (exports.initializedTime) return;
                        if (!providersConfig.googlePlus) return;
                        exports.initializedTime = null;
                        var p = document.createElement("script");
                        p.type = "text/javascript";
                        p.async = true;
                        window["__gigya_handleClientLoad"] = function() {
                            return f.handleClientLoad();
                        };
                        p.src = "https://apis.google.com/js/client.js?onload=__gigya_handleClientLoad";
                        var h = document.getElementsByTagName("script")[0];
                        h.parentNode.insertBefore(p, h);
                    },
                    handleClientLoad: function handleClientLoad1() {
                        try {
                            delete window["__gigya_handleClientLoad"];
                        } catch (f) {
                            window["__gigya_handleClientLoad"] = undefined;
                        }
                        exports.initializedTime = new Date();
                        globalEvents.dispatch({
                            eventName: "googlePlusLoaded"
                        });
                    },
                    refreshSession: function refreshSession1() {
                        if (typeof gapi == "undefined") return;
                    },
                    autoLogin: function autoLogin1() {
                        socialize.waitForService({
                            service: "googlePlus",
                            callback: function() {
                                _.apiAdapter.isSessionValid(thisScript.globalConf, function(f) {
                                    if (!f) {
                                        gapi.auth.authorize({
                                            client_id: providersConfig.googlePlus.clientId,
                                            scope: providersConfig.googlePlus.scopes,
                                            immediate: true,
                                            response_type: "token"
                                        }, function(f) {
                                            if (f && f.access_token && !_.autoLoginInProgress) {
                                                _.autoLoginInProgress = true;
                                                socialize.notifyLogin({
                                                    regSource: "autoLogin",
                                                    providerSessions: {
                                                        googlePlus: {
                                                            authToken: f.access_token
                                                        }
                                                    }
                                                });
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                },
                opengraph: {
                    getMetaTag: function getMetaTag1(f) {
                        var p = document.getElementsByTagName("meta");
                        for(var h = 0; h < p.length; h++){
                            if (p[h].getAttribute("property") == f && p[h].getAttribute("content")) {
                                return p[h].getAttribute("content");
                            }
                        }
                    }
                }
            },
            thisScript: {
                scriptElement: {},
                protocol: "https",
                baseDomain: "cdns.gigya.com",
                APIKey: "4_aeFS_UyzRnmP5k_MI59ejg",
                lang: {
                    full: "en-US",
                    langCode: "en",
                    countryCode: "US",
                    originalLang: "en"
                },
                globalConf: {
                    connectWithoutLoginBehavior: "alwaysLogin",
                    defaultRegScreenSet: "Default-RegistrationLogin",
                    defaultMobileRegScreenSet: "Default-RegistrationLogin",
                    sessionExpiration: 0,
                    rememberSessionExpiration: 0,
                    apiDomain: "eu1.gigya.com",
                    lang: "en",
                    APIKey: "4_aeFS_UyzRnmP5k_MI59ejg"
                },
                URLParams: {
                    apikey: "4_aeFS_UyzRnmP5k_MI59ejg",
                    pretty: "true",
                    debug: "true",
                    dbg: "1"
                }
            },
            global: {
                addCSS: function(f, p) {
                    if (f && "" != f) {
                        f instanceof Array && (f = f.join(" ")), p && (f = f.replace(/([^\s}]*\.gig)/g, p + " $1"));
                        var h = document.createElement("style");
                        h.type = "text/css";
                        var v = document.createTextNode(f);
                        h.styleSheet ? null != v.value ? h.styleSheet.cssText = v.value : h.styleSheet.cssText = v.nodeValue : h.appendChild(v);
                        var w = document.getElementsByTagName("head"), m = document.body;
                        (w.length > 0 ? w[0] : m).appendChild(h);
                    }
                },
                date: {
                    getISODate: function(f) {
                        var p = null;
                        if (localInfo.isIE8) p = function(f) {
                            var p, h, v = /^(\d{4}\-\d\d\-\d\d([tT ][\d:\.]*)?)([zZ]|([+\-])(\d\d):(\d\d))?$/.exec(f) || [];
                            if (v[1]) {
                                p = v[1].split(/\D/);
                                for(var w = 0, m = p.length; w < m; w++)p[w] = parseInt(p[w], 10) || 0;
                                return p[1] -= 1, (p = new Date(Date.UTC.apply(Date, p))).getDate() ? (v[5] && (h = 60 * parseInt(v[5], 10), v[6] && (h += parseInt(v[6], 10)), "+" == v[4] && (h *= -1), h && p.setUTCMinutes(p.getUTCMinutes() + h)), p) : null;
                            }
                            return null;
                        }(f);
                        else {
                            if ((/^(\d{4}\-\d\d\-\d\d([tT ][\d:\.]*)?)([zZ]|([+\-])(\d\d):(\d\d))?$/.exec(f) || [])[1]) {
                                var h = Date.parse(f);
                                p = new Date(h);
                            }
                        }
                        return p;
                    }
                },
                XMLUtils: {
                    CreateXMLFromString: function(f) {
                        var p = null;
                        if (window.ActiveXObject && (localInfo.isIE8 || localInfo.isIE9)) try {
                            (p = new ActiveXObject("Microsoft.XMLDOM")).async = "false", p.loadXML(f);
                        } catch (h) {
                            log.addLog("Failed to create Microsoft.XMLDOM ActiveX parser", h);
                        }
                        else p = (new DOMParser).parseFromString(f, "text/xml");
                        return p;
                    },
                    CopyProperties: function(f, p, h, v) {
                        if (void 0 === h && (h = ""), void 0 === p && (p = {}), null != v) for(var w in f)p[h + w] = v(w, f[w]);
                        else for(var m in f)p[h + m] = f[m];
                        return p;
                    },
                    CollectAttributesFromXMLPathToObject: function(f, p, h, v, w) {
                        for(var m = 0; m < p.length && void 0 !== f; m++)null != (f = f.childNodes[p[m]]) && v && this.CopyProperties(f.attributes, h, "", w);
                        void 0 !== f && this.CopyProperties(f.attributes, h, "", w);
                    },
                    mergeNodes: function(f, p) {
                        void 0 === p.attributes && (p.attributes = {}), void 0 === p.childNodes && (p.childNodes = {});
                        var h, v = p.attributes, w = f.attributes;
                        if (w) for(var m = 0; m < w.length; m++)null != w[m].value ? v[w[m].nodeName] = w[m].value : v[w[m].nodeName] = w[m].nodeValue;
                        for(var b = 0; b < f.childNodes.length; b++){
                            var y = f.childNodes[b];
                            void 0 === (h = p.childNodes[y.nodeName]) && (h = p.childNodes[y.nodeName] = {
                                attributes: {},
                                childNodes: {}
                            }), this.mergeNodes(y, h);
                        }
                        return p;
                    }
                },
                resolver: function(f) {
                    this.configurations = [], this.mergedConfig = {}, this.isMerged = !0, this._processor = f, this.merge = function() {
                        if (!this.isMerged) {
                            this.mergedConfig = {
                                attributes: {},
                                childNodes: {}
                            };
                            for(var f = 0; f < this.configurations.length; f++){
                                var p = this.configurations[f];
                                i.mergeNodes(p, this.mergedConfig);
                            }
                            this.isMerged = !0;
                        }
                    }, this.Resolve = function(f, p) {
                        this.merge && this.merge();
                        var h = {};
                        "object" == typeof arguments[arguments.length - 1] && (h = arguments[arguments.length - 1]);
                        for(var v = 0; v < arguments.length; v++){
                            var w = arguments[v], m = w.constructor;
                            if (m == String) for(var b = w.split("|"), y = b.length - 1; y >= 0; y--){
                                var S = this.trimCharsAtSuffix(this.trimCharsAtPrefix(b[y], " \n\r	"), " \n\r	"), E = "+" == S.charAt(0), C = S.split("/").slice(1);
                                E && (S = S.substring(1)), i.CollectAttributesFromXMLPathToObject(this.mergedConfig, C, h, E, this._processor);
                            }
                            else if (m == Array) for(var I = 0; I < w.length; I++)this.Resolve(w[I], h);
                        }
                        return h;
                    }, this.trimCharsAtPrefix = function(f, p) {
                        var h = 0;
                        if (void 0 === f || 0 == f.length) return "";
                        for(var v = f.length; h <= v && p.indexOf(f.charAt(h)) > -1;)h++;
                        return f.substring(h, v);
                    }, this.trimCharsAtSuffix = function(f, p) {
                        if (void 0 === f || 0 == f.length) return "";
                        for(var h = f.length - 1; h >= 0 && p.indexOf(f.charAt(h)) > -1;)h--;
                        return f.substring(0, h + 1);
                    }, this.addConfig = function(f) {
                        "string" == typeof f && (this.configurations.push(i.CreateXMLFromString(f)), this.isMerged = !1);
                    }, this.getTextFromKey = function(f) {
                        return this.Resolve("/config/lang/" + f).text;
                    };
                },
                getCombination: function e1(f, p) {
                    if (void 0 === p && (p = 0), p || (p = 0), !f || 0 == f.length) return [];
                    var h = f[p];
                    if (p == f.length - 1) {
                        for(var v = [], w = 0; w < h.length; w++)v.push([
                            h[w]
                        ]);
                        return v;
                    }
                    v = [];
                    var m = e1(f, p + 1);
                    if (h) for(w = 0; w < h.length; w++)for(var b = 0; b < m.length; b++)v.push([
                        h[w]
                    ].concat(m[b]));
                    return v;
                },
                resolveProviders: function(f, p, h) {
                    for(var v = utils.array.getArrayFromString(f, ",", !0), w = utils.array.getArrayFromString(p, ",", !0), m = utils.array.getArrayFromString(h, ",", !0), b = 0; b < w.length; b++)utils.array.removeByValue(v, w[b]);
                    var y = _.providers.getProvidersByName(v.join(","));
                    for(b = 0; b < w.length; b++)utils.array.removeByProperty(y, "name", w[b]);
                    return socialize.getProvidersForRequiredCapabilities(y, m);
                },
                showLoader: function(f, p, h) {
                    void 0 === p && (p = ""), void 0 === h && (h = void 0), f && (h || (h = parseInt(i.getStyle(f, "height"))), f.innerHTML = '<div class="' + p + '" style="height:' + h + "px;background-image:url('" + _.getCdnResource("/gs/i/gm/loader.gif") + "'); background-repeat:no-repeat;background-position:center center\"></div>");
                },
                fadeIn: function l1(f) {
                    f.interval && clearInterval(f.interval), f.style.opacity = "0", f.interval = setInterval(function() {
                        var p = parseFloat(f.style.opacity);
                        p >= 1 && clearInterval(f.interval), f.style.opacity = p + .1;
                    }, 10);
                },
                getBalloonHTML: function s1(f, p, h, v, w, m, b, y, S) {
                    global.addedBalloonCSS || (global.addCSS([
                        ".gig-balloons *, div.gig-balloons, .gig-balloons span, .gig-balloons a:hover, .gig-balloons a:visited, .gig-balloons a:link, .gig-balloons a:active{",
                        "border:none; line-height:normal;padding:0px;margin:0px;color:inherit;text-decoration:none;width:auto;float:none;-moz-border-radius:0;border-radius:0;",
                        "font-family:arial;font-size:10px;color:#797979;background:none;text-align:left}",
                        "div.gig-balloon-frame {",
                        "zoom:1;padding:15px 10px 10px 10px; border:1px solid #b4b4b4; min-height:80px; background-color:#FFFFFF; z-index:" + utils.DOM.getNextZIndex() + ";",
                        "box-shadow:0 0 5px RGBA(0,0,0,0.6);-webkit-box-shadow:0 0 5px RGBA(0,0,0,0.6);-moz-box-shadow:0 0 5px RGBA(0,0,0,0.6);}",
                        'div.gig-balloon-nub {left:+1px; position:relative;background-image:url("' + _.getCdnResource("/gs/i/gm/nub.png") + '");width:13px;height:25px; z-index:' + utils.DOM.getNextZIndex() + " }",
                        'div.gig-balloon-nub-right { left:-1px; position:relative;background-image:url("' + _.getCdnResource("/gs/i/gm/nub_right.png") + '");width:13px;height:25px; z-index:' + utils.DOM.getNextZIndex() + " }",
                        'div.gig-balloon-nub-up { top:+1px; position:relative;background-image:url("' + _.getCdnResource("/gs/i/gm/nub_up.png") + '");width:25px;height:13px; z-index:' + utils.DOM.getNextZIndex() + " }",
                        'div.gig-balloon-nub-down { top:-1px; position:relative;background-image:url("' + _.getCdnResource("/gs/i/gm/nub_down.png") + '");width:25px;height:13px; z-index:' + utils.DOM.getNextZIndex() + " }",
                        'span.gig-balloon-closeImage { cursor:pointer; float:right;background-image:url("' + _.getCdnResource("/gs/i/gm/CloseButton.png") + '"); width:14px;height:14px; margin:-7px -2px 0 0  }',
                        "div.gig-balloon-caption {font-family:arial; font-size: 12px; font-weight:bold; color: #0b81c1; border-bottom: 1px solid #e8e8e8;padding-bottom:2px;}",
                        "span.gig-balloon-caption-text {float:left}"
                    ]), !localInfo.isIE || !localInfo.quirksMode && localInfo.isIE9 || global.addCSS([
                        "div.gig-balloon-frame {",
                        "-ms-filter: \"progid:DXImageTransform.Microsoft.Shadow(Strength=4, Direction=135, Color='#B4B4B4');\";",
                        "filter: progid:DXImageTransform.Microsoft.Shadow(Strength=4, Direction=135, Color='#B4B4B4');}",
                        "}",
                        "div.gig-balloon-nub-right { left:-5px;}"
                    ]), global.addedBalloonCSS = !0);
                    var E = "";
                    if (localInfo.quirksMode) {
                        var C = i.getClassBordersAndPaddings("gig-balloon-frame");
                        h && (h += C.w), v && (v += C.h);
                    }
                    h && (E += "width: " + h + "px;"), v && (E += "height: " + v + "px;");
                    var I = "";
                    w && (I += "left" === m || "right" === m ? "top: " + w + "px;" : "left: " + w + "px;");
                    var R, A = "";
                    return A += p ? '<div class="gig-balloon-caption"><span class="gig-balloon-caption-text" style="width:' + (h - 20) + 'px">' + p + "</span>" : '<div class="gig-balloon-caption" style="border-bottom:none">', !b && y && (A += '<span tabindex="0" role="button" class="gig-balloon-closeImage" onclick="' + y + '" onkeydown="if((event.which || event.keyCode) == 13) ' + y + '"></span>'), A += '<div style="clear:both;height:0;width:0;font-size:1px;"><!-- empty divs=100% height IE --></div></div><div class="gig-balloon-body">' + f + "</div>", w ? (R = '<table role="presentation" cellpadding="0" cellspacing="0" class="gig-balloon"><tr>', "up" === m && (R += '<td style=""><div class="gig-balloon-nub-up" style="' + I + '"></div></td></tr><tr>'), "left" === m && (R += '<td style="vertical-align:top"><div class="gig-balloon-nub" style="' + I + '"></div></td>'), R += '<td style="vertical-align:top"><div id="' + S + '" class="gig-balloon-frame" style="' + E + '">' + A + "</div></td>", "right" === m && (R += '<td style="vertical-align:top"><div class="gig-balloon-nub-right" style="' + I + '"></div></td>'), "down" === m && (R += '</tr><tr><td style="vertical-align:top"><div class="gig-balloon-nub-down" style="' + I + '"></div></td>'), R += "</tr></table>", R += '<div style="clear:both;height:0;width:0;font-size:1px;"><!-- empty divs=100% height IE --></div>') : R = '<div class="gig-balloon gig-balloon-frame" style="' + E + '">' + A + "</div>", R;
                },
                createGMBalloon: function g1(f, p, h, v, w, m, b, y, S, E) {
                    E = E ? "gig-balloon " + E : "gig-balloon", d();
                    var C = "gig_gmBalloon_" + (new Date).getTime();
                    y && (C = y);
                    var I = s(f, p, h, v, w, m, b, "gigya.global.removeGMBalloon()", C + "_frame"), R = document.createElement("div");
                    return R.className = E, R.style.position = "absolute", R.style.zIndex = utils.DOM.getNextZIndex().toString(), R.innerHTML = I, R.id = C, R.setAttribute("role", "alert"), R.setAttribute("aria-live", "assertive"), R.setAttribute("aria-atomic", "true"), l(R), utils.DOM.prependToBody(R), global.divGMBalloon = R, S || window.setTimeout(function() {
                        o.removeElementOnDocClickOrEscape(R);
                    }, 50), R;
                },
                removeGMBalloon: function d1(f) {
                    var p;
                    if (f) for((p = f.target) || (p = f.srcElement); null != p && p.offsetParent && -1 == p.id.indexOf(global.divGMBalloon.id);)p = p.offsetParent;
                    if (!p || -1 == p.id.indexOf(global.divGMBalloon.id)) try {
                        a.removeIframeShim(document.getElementById(global.divGMBalloon.id + "_frame")), global.divGMBalloon.parentNode.removeChild(global.divGMBalloon), document.detachEvent ? document.detachEvent("onclick", d1) : document.removeEventListener && document.removeEventListener("click", d1, !1);
                    } catch (h) {}
                },
                putGMBalloonNextTo: function(f, p, h, v, w, m, b, y, S, E) {
                    void 0 === S && (S = [
                        "left",
                        "right",
                        "up",
                        "down"
                    ]), void 0 === E && (E = "");
                    for(var C = {
                        body: p,
                        caption: h,
                        w: v,
                        h: w,
                        hideClose: m,
                        id: b,
                        dontHideOnClick: y,
                        balloonClass: E
                    }, I = 0; I < S.length && !this.positionGMBalloonNextTo(f, S[I], C); I++);
                },
                positionGMBalloonNextTo: function(f, p, h) {
                    "left" === p || "right" === p ? g(h.body, h.caption, h.w, h.h, 47, "left", h.hideClose, h.id, h.dontHideOnClick, h.balloonClass) : g(h.body, h.caption, h.w, h.h, 10, "down", h.hideClose, h.id, h.dontHideOnClick, h.balloonClass);
                    var v, w, m = global.divGMBalloon.offsetWidth, b = global.divGMBalloon.offsetHeight, y = r._GetElementPos(f), S = document.documentElement, E = document.body, C = S.clientHeight;
                    0 == C && (C = E.clientHeight);
                    var I = S.clientWidth;
                    0 == I && (I = E.clientWidth), window.innerHeight && (C = E.scrollHeight && E.scrollHeight < window.innerHeight ? E.scrollHeight : window.innerHeight, I = E.scrollWidth && E.scrollWidth < window.innerWidth ? E.scrollWidth : window.innerWidth);
                    var R, A, U = utils.viewport.getScroll().top + C;
                    if ("left" === p || "right" === p) {
                        A = 47, (w = y.top + f.offsetHeight / 2 - 47 - 12.5) + b > U && (w = U - b - 10);
                        var x = y.left - m - 5, N = y.left + f.offsetWidth + 5;
                        if ("left" === p) {
                            if (!(x > 10)) return null;
                            v = x, R = "right", h.balloonClass += " gig-balloon-left";
                        } else {
                            if (!(I - N - m > 10)) return null;
                            v = N, R = "left", h.balloonClass += " gig-balloon-right";
                        }
                    } else {
                        if ("up" !== p && "down" !== p) return null;
                        A = 10, v = y.left;
                        var P = y.top - b - 10, O = y.top + f.offsetHeight + 5;
                        if ("up" === p) {
                            if (!(P > 5)) return null;
                            w = P, R = "down", h.balloonClass += " gig-balloon-up";
                        } else w = O, R = "up", h.balloonClass += " gig-balloon-down";
                    }
                    var D = g(h.body, h.caption, h.w, h.h, A, R, h.hideClose, h.id, h.dontHideOnClick, h.balloonClass);
                    if (v < 10 && (v = 10), w < 10 && (w = 10), global.divGMBalloon.style.left = v + "px", global.divGMBalloon.style.top = w + "px", localInfo.isIE) {
                        var L = document.getElementById(global.divGMBalloon.id + "_frame");
                        L && a.addIframeShim(L);
                    }
                    return D;
                },
                scrollToElement: function(f) {
                    if (f) {
                        var p = r._GetElementPos(f);
                        window.scrollTo(p.left, p.top);
                    }
                },
                addIframeShim: function(f, p) {
                    if (!f.shim) {
                        var h = document.createElement("IFRAME");
                        h.frameborder = "0", h.frameBorder = "0", h.allowtransparency = !0, h.style.position = "absolute", h.update = function(v) {
                            if (h && f) {
                                if (p) h.style.left = f.offsetLeft + "px", h.style.top = f.offsetTop + "px";
                                else {
                                    var w = i._GetElementPos(f);
                                    h.style.left = w.left + "px", h.style.top = w.top + "px";
                                }
                                v && (h.style.width = f.offsetWidth + "px", h.style.height = f.offsetHeight + "px");
                            }
                        }, h.update(!0), p ? (h.style.zIndex = utils.DOM.getNextZIndex().toString(), f.style.zIndex = utils.DOM.getNextZIndex().toString(), p.appendChild(h)) : utils.DOM.prependToBody(h), f.shim = h;
                    }
                },
                removeIframeShim: function(f) {
                    f && f.shim && f.shim.parentNode && (f.shim.parentNode.removeChild(f.shim), f.shim = null);
                },
                scaleImage: function(f, p, h, v) {
                    var w = f;
                    f.width && f.height || ((w = new Image).src = f.src);
                    var a1 = function() {
                        0 == w.width ? window.setTimeout(a1, 100) : (w.width > w.height ? f.style.width = p + "px" : f.style.height = p + "px", f.style.display = "", v && v(f), h || (f.style.marginTop = (p - f.offsetHeight) / 2 + "px", f.style.marginLeft = (p - f.offsetWidth) / 2 + "px"));
                    };
                    w.width > 0 ? a1() : (f.style.display = "none", w.onload = function() {
                        window.setTimeout(a1, 50);
                    });
                },
                fillUserActionTemplate: function(f, p) {
                    for(var h in f){
                        var v = f[h];
                        if ("string" == typeof v && (f[h] = utils.templates.fill(f[h], p)), "mediaItems" == h) for(var w = 0; w < v.length; w++)v[w].src && (v[w].src = utils.templates.fill(v[w].src, p));
                    }
                    return f;
                },
                setPlaceholder: function(f, p, h) {
                    if (f) {
                        var i1 = function() {
                            "" == this.value && (h ? utils.DOM.addClassToElement(f, h) : f.style.color = "#585858", this.value = p, this.placeholderCleared = !1);
                        };
                        f.refreshPlaceholder = function() {
                            f.value ? (h ? utils.DOM.removeClassFromElement(f, h) : f.style.color = "", this.placeholderCleared = !0) : (h ? utils.DOM.addClassToElement(f, h) : f.style.color = "#585858", f.value = p, this.placeholderCleared = !1);
                        }, utils.DOM.addEventListener(f, "blur", i1), utils.DOM.addEventListener(f, "focus", function() {
                            if (!this.placeholderCleared) {
                                if (h ? utils.DOM.removeClassFromElement(f, h) : f.style.color = "", this.value = "", this.placeholderCleared = !0, f.setSelectionRange) f.focus(), f.setSelectionRange(0, 0);
                                else if (f.createTextRange) {
                                    var p = f.createTextRange();
                                    p.collapse(!0), p.moveEnd("character", 0), p.moveStart("character", 0), p.select();
                                }
                            }
                        }), utils.DOM.addEventListener(f, "change", i1), f.refreshPlaceholder();
                    }
                },
                getClassBordersAndPaddings: function(f) {
                    var p = document.createElement("div");
                    p.className = f, utils.DOM.prependToBody(p);
                    var h = a(p);
                    return p.parentNode.removeChild(p), h;
                },
                getBordersAndPaddings: function a1(f) {
                    var n1 = function(p) {
                        var h = parseInt(r(f, p));
                        return isNaN(h) && (h = 0), h;
                    };
                    return {
                        w: n1("border-left-width") + n1("border-right-width") + n1("padding-right") + n1("padding-left"),
                        h: n1("border-top-width") + n1("border-bottom-width") + n1("padding-top") + n1("padding-bottom")
                    };
                },
                getStyle: function r1(f, p) {
                    return f.currentStyle ? f.currentStyle[p] : window.getComputedStyle ? document.defaultView.getComputedStyle(f, null).getPropertyValue(p) : void 0;
                },
                scaleImageToContainer: function(f, p, h) {
                    p || (f.parentNode.style.textAlign = "left", f.parentNode.style.verticalAlign = "top");
                    var o1 = function(p) {
                        for(var h = f.parentNode, v = r(h, p); "auto" == v;)v = r(h = h.parentNode, p);
                        var w = parseInt(v);
                        return isNaN(w) && (w = 0), w;
                    }, v = Math.min(o1("width"), o1("height"));
                    if (localInfo.quirksMode) {
                        var w = a(f.parentNode), m = o1("width") - w.w, b = o1("height") - w.h;
                        v = Math.min(m, b);
                    }
                    i.scaleImage(f, v, p, h);
                },
                getClassInnerSize: function(f, p, h) {
                    var v = document.createElement("div");
                    v.className = f, utils.DOM.prependToBody(v);
                    var w = a(v);
                    return p -= w.w, h -= w.h, v.parentNode.removeChild(v), {
                        w: p,
                        h: h
                    };
                },
                SpriteRenderer: function l1(f, p, h, v, w, m, b) {
                    this.src = f, this.srcTemplate = p, this.spriteData = h, this.spriteW = v, this.spriteH = w, this.pixelRatio = m, this.spriteLength = b;
                },
                getSpriteRenderers: function(f) {
                    var p = [], h = 0, v = {};
                    for(var w in f){
                        (b = f[w]).pixelRatio || (b.pixelRatio = 1), p.push(b.path + "|" + b.w * b.pixelRatio + "," + b.h * b.pixelRatio);
                    }
                    var m = _.getCdnResource("/gs/GetSprite.ashx?path=" + encodeURIComponent(p.join("^").replace(/\[\]/, "")));
                    for(var w in f){
                        var b = f[w], y = {
                            spriteData: {}
                        }, S = [], E = 0;
                        y.srcTemplate = _.getCdnResource("/gs/i" + b.path.replace(/\[(.*?)\]/g, function(f, p) {
                            return S.push(p.split(",")), "{" + E++ + "}";
                        }));
                        var C = o.getCombination(S);
                        0 == C.length && C.push([
                            ""
                        ]);
                        for(var I = 0; I < C.length; I++){
                            var R = C[I].join("-");
                            "" == R && (R = "default"), y.spriteData[R] = {
                                groupId: w,
                                id: R,
                                x: h,
                                w: b.w,
                                h: b.h
                            }, h += b.w;
                        }
                        v[w] = new l(m, y.srcTemplate, y.spriteData, b.w, b.h, b.pixelRatio, C.length);
                    }
                    return v;
                },
                preloadImages: function(f, p) {
                    for(var h = [], v = 0, o1 = function() {
                        ++v == f.length && p();
                    }, w = 0; w < f.length; w++)if (null == f[w]) o1();
                    else {
                        var m = new Image;
                        m.onload = o1, m.onerror = o1, m.src = f[w], h.push(m);
                    }
                },
                applyEllipsis: function(f, p) {
                    for(var h = "", v = [], w = /\<(\/)?([^ \/>]+)[ ]?[^>]*(\/)?\>/i, m = 0, b = 0; b < f.length && (m < p || 0 == p);){
                        var y = f.substr(b, 1);
                        if ("<" == y) {
                            var S = f.indexOf(">", b), E = f.substring(b, S + 1);
                            w.lastIndex = 0;
                            var C = w.exec(E), I = C[2].toLowerCase();
                            if ("/" == C[1]) v.length > 0 && v[v.length - 1].tagname == I && v.pop();
                            else if ("/" == C[3]) ;
                            else {
                                var R = "</" + C[2] + ">";
                                v.length > 0 && (R += v[v.length - 1].cl), v.push({
                                    tagname: C[2],
                                    cl: R
                                });
                            }
                            h += C[0], b += C[0].length - 1;
                        } else if ("&" == y) {
                            var A = f.indexOf(";", b);
                            A - b > 8 ? h += "&" : (h += f.substring(b, A + 1), b = A), m++;
                        } else h += y, m++;
                        b++;
                    }
                    return m < p ? f : h + "&#133;" + (v.length > 0 ? v[v.length - 1].cl : "");
                },
                getPhotoURL: function(f, p) {
                    if (p && !f && (f = p), !f) return f;
                    var h = document.createElement("a");
                    return h.href = f, "http:" === h.protocol && "https" === localInfo.protocol ? -1 !== utils.array.indexOf(_.CDN_HOSTS.http, h.host) ? _.getCdnResource(h.pathname + h.search + h.hash) : _.getCdnResource("/proxy/photos.ashx?u=" + utils.URL.URLEncode(f)) : f;
                },
                wbr: function(f, p) {
                    for(var h = (f = f.replace(/\n/g, "\n ")).split(" "), v = 0; v < h.length; v++)if (h[v].length > p) {
                        for(var w, m = h[v].split(""), b = !1, y = -1, S = 0; S < m.length; S += 1)b || y++, y == p && (m.splice(S, 0, "&#173;"), y = -1), "&" == m[S] ? (b = !0, w = ";") : "<" == m[S] && (b = !0, w = ">"), b && m[S] == w && (b = !1);
                        h[v] = m.join("");
                    }
                    return h.join(" ").replace(/\n /g, "\n");
                },
                getPos: function t1(f) {
                    var p = navigator.userAgent.toLowerCase(), h = -1 != p.indexOf("opera");
                    p.indexOf("msie");
                    if (null === f.parentNode || "none" == f.style.display) return !1;
                    var v, w = null, m = [];
                    if (f.getBoundingClientRect) {
                        v = f.getBoundingClientRect();
                        var b = Math.max(document.documentElement.scrollTop, document.body.scrollTop), y = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
                        return {
                            x: v.left + y,
                            y: v.top + b
                        };
                    }
                    if (document.getBoxObjectFor) {
                        v = document.getBoxObjectFor(f);
                        var S = f.style.borderLeftWidth ? parseInt(f.style.borderLeftWidth) : 0, E = f.style.borderTopWidth ? parseInt(f.style.borderTopWidth) : 0;
                        m = [
                            v.x - S,
                            v.y - E
                        ];
                    } else {
                        if (m = [
                            f.offsetLeft,
                            f.offsetTop
                        ], (w = f.offsetParent) != f) for(; w;)m[0] += w.offsetLeft, m[1] += w.offsetTop, w = w.offsetParent;
                        (-1 != p.indexOf("opera") || -1 != p.indexOf("safari") && "absolute" == f.style.position) && (m[0] -= document.body.offsetLeft, m[1] -= document.body.offsetTop);
                    }
                    for(w = f.parentNode ? f.parentNode : null; w && "BODY" != w.tagName && "HTML" != w.tagName;)m[0] -= w.scrollLeft, m[1] -= w.scrollTop, w = w.parentNode ? w.parentNode : null;
                    return {
                        x: m[0],
                        y: m[1]
                    };
                },
                _GetElementPos: function(f) {
                    var p = t(f);
                    return {
                        left: p.x,
                        top: p.y
                    };
                },
                isEmail: function(f) {
                    if (f.indexOf(" ") >= 0) return !1;
                    var p = f.split("@");
                    if (2 != p.length) return !1;
                    if (0 == p[0].length) return !1;
                    if (0 == p[1].length) return !1;
                    var h = p[1].split(".");
                    if (h.length < 2) return !1;
                    for(var v = 0; v < h.length; v++)if (0 == h[v].length || h[v].indexOf(" ") > 0) return !1;
                    return !0;
                }
            },
            pluginUtils: {
                css: {
                    fixCss: function(f) {
                        return (localInfo.isIE7 || localInfo.isIE && localInfo.quirksMode) && (f = f.replace(/display:inline-block/g, "display:inline-block;zoom:1;*display:inline")), f.replace(/gradient\((.*?),(.*?)\)/g, 'filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="$1", endColorstr="$2");background: linear-gradient(top,  $1,  $2);background: -ms-linear-gradient(top left, $1, $2);background: -webkit-gradient(linear, left top, left bottom, from($1), to($2));background: -moz-linear-gradient(top,  $1,  $2)');
                    }
                },
                lang: {
                    getLocalizedText: function e1(f, p, h, v, w) {
                        var m, b, y;
                        if ("te-st" == h) return "TEST_" + p.substring(0, 10);
                        h || (h = "en");
                        var S = i18n[f][h];
                        if (!S) return e1(f, p, t(h, "en"), v, w);
                        var E = S[p], C = null === (y = null === (b = null === (m = i18n) || void 0 === m ? void 0 : m["gigya.services.accounts.plugins.screenSet.js"]) || void 0 === b ? void 0 : b[h]) || void 0 === y ? void 0 : y[p];
                        return !E && C && (E = C), E && v && (E = E.replace(v, w)), E;
                    },
                    getTranslationsFromContainer: function e1(f, p, h, v) {
                        if (void 0 === h && (h = !0), void 0 === v && (v = "en"), f && f.translations) {
                            for(var w = (null == p ? void 0 : p.split(",").map(function(f) {
                                return f.trim();
                            })) || [], m = 0, b = w; m < b.length; m++){
                                var y = b[m];
                                if (f.translations[y]) return {
                                    langKey: y,
                                    translations: f.translations[y]
                                };
                                var S = t(y, y);
                                if (S) {
                                    var E = e1(f, S);
                                    if (h && E) return E;
                                }
                            }
                            var C = t(w[0], v);
                            return h && C ? e1(f, C) : void 0;
                        }
                    },
                    getFallbackLang: function t1(f, p) {
                        var h = f.indexOf("-");
                        return h > 0 ? f.substr(0, h) : f !== p ? p : void 0;
                    },
                    getDateString: function(f, p) {
                        if (f && f.dateFormat) {
                            var h = f.dateFormat, v = p.getDate(), w = p.getMonth() + 1, m = [
                                "January",
                                "February",
                                "March",
                                "April",
                                "May",
                                "June",
                                "July",
                                "August",
                                "September",
                                "October",
                                "November",
                                "December"
                            ][p.getMonth()], b = p.getFullYear();
                            return h.replace(/%dd/g, ("0" + v).slice(-2)).replace(/%d/g, v).replace(/%MMMM/g, m).replace(/%MMM/g, m.substr(0, 3)).replace(/%MM/g, ("0" + w).slice(-2)).replace(/%M/g, w).replace(/%yyyy/g, b).replace(/%yy/g, b.toString().slice(-2));
                        }
                    }
                },
                animation: {
                    fadeIn: function(f, p) {
                        void 0 === p && (p = 1), null == f.style.opacity ? f.style.filter = "alpha(opacity=0)" : f.style.opacity = "0", window.setTimeout(function() {
                            null == f.style.opacity ? f.style.filter = "alpha(opacity=" + 100 * p + ")" : f.style.opacity = p + "";
                        }, 10);
                    },
                    slideDown: function(f) {
                        var p = i.getClassBordersAndPaddings(f.className), h = f.offsetHeight - p.h, v = f.style.transitionProperty;
                        f.style.maxHeight = "1px", f.style.transitionProperty = f.style.webkitTransitionProperty = "max-height", window.setTimeout(function() {
                            f.style.maxHeight = h + "px", f.style.transitionProperty = f.style.webkitTransitionProperty = v;
                        }, 100);
                        var a1 = function() {
                            f.style.maxHeight = "999px", utils.DOM.removeEventListener(f, "transitionend", a1), utils.DOM.removeEventListener(f, "webkitTransitionEnd", a1);
                        };
                        utils.DOM.addEventListener(f, "transitionend", a1), utils.DOM.addEventListener(f, "webkitTransitionEnd", a1), window.setTimeout(a1, 500);
                    }
                },
                DOM: {
                    addBrowserInfoClassesToElement: function(f) {
                        var p = "gigya-" + localInfo.currentBrowser;
                        localInfo.isIOS && (p += " ios"), p = p.replace(/ /g, " gigya-"), localInfo.isNativeMobileApp && (p = "gigya-native-mobile-app " + p), utils.DOM.addClassToElement(f, p);
                    },
                    setTextboxSubmitButton: function(f, p) {
                        var t1 = function(f) {
                            13 == (f && f.which ? (f = f).which : (f = event).keyCode) && p.click();
                        };
                        utils.DOM.addEventListener(f, "keyup", t1), utils.DOM.addEventListener(p, "keyup", t1);
                    },
                    getRelativePosition: function o1(f, p, h, v, w) {
                        var m = {
                            top: 0,
                            left: 0,
                            bottom: 0,
                            right: 0
                        };
                        return "bottom" === h ? (m.top = f.bottom + v, m.left = w ? f.right - p.w : f.left) : "top" === h ? (m.top = f.top - p.h - v, m.left = w ? f.right - p.w : f.left) : "left" === h ? (m.top = w ? f.bottom - p.h : f.top, m.left = f.left - p.w - v) : (m.top = w ? f.bottom - p.h : f.top, m.left = f.right + v), m.bottom = m.top + p.h, m.right = m.left + p.w, m;
                    },
                    placePopoverNearElement: function a1(f, p, h, v, w, m) {
                        var b = utils.DOM.getElementPosition(f), y = {
                            w: p.offsetWidth,
                            h: p.offsetHeight
                        }, S = o(b, y, h, v, w);
                        if (m && !utils.viewport.isRectFullyVisible(S)) {
                            var E = o(b, y, {
                                bottom: "top",
                                left: "right",
                                right: "left",
                                top: "bottom"
                            }[h], v, !1);
                            utils.viewport.isRectHorizontallyVisible(E) && (S = E);
                        }
                        if (!utils.viewport.isRectHorizontallyVisible(S)) {
                            E = o(b, y, h, v, !w);
                            utils.viewport.isRectHorizontallyVisible(E) && (S = E);
                        }
                        p.style.left = S.left + "px", p.style.top = S.top + "px";
                    },
                    addPopoverNearElement: function(f, p, h, v, w, m, b, y, S) {
                        if (void 0 === h && (h = "bottom"), void 0 === v && (v = 0), void 0 === w && (w = !1), void 0 === m && (m = !0), void 0 === b && (b = null), void 0 === y && (y = null), void 0 === S && (S = null), f && p) {
                            var E = document.createElement("div");
                            return E.appendChild(p), E.style.position = "absolute", E.style.zIndex = utils.DOM.getNextZIndex().toString(), E.style.left = "-1000px", document.body.appendChild(E), a(f, E, h, v, w, m), r(E, function(p) {
                                f.focus(), y(p);
                            }, S), b && "function" == typeof pluginUtils.animation[b] && pluginUtils.animation[b](p), E;
                        }
                    },
                    removeElementOnDocClickOrEscape: function r1(f, p, h) {
                        if (void 0 === p && (p = null), void 0 === h && (h = null), f) {
                            var v = [
                                f
                            ];
                            h && (v = v.concat(h)), s(function(h) {
                                var v = f && f.parentNode;
                                v && f.parentNode.removeChild(f), p && p(h, v);
                            }, v);
                        }
                    },
                    hideElementOnDocClick: function(f, p, h) {
                        if (void 0 === p && (p = null), void 0 === h && (h = null), f) {
                            var v = [
                                f
                            ];
                            h && v.concat(h), s(function() {
                                f.style.display = "none", p && p();
                            }, v);
                        }
                    },
                    performOnDocClickOrEscape: function s1(f, p) {
                        void 0 === f && (f = null), void 0 === p && (p = null);
                        var t1 = function(p) {
                            utils.DOM.removeClassFromElement(document.body, "gig-clickable"), utils.DOM.removeEventListener(document, "mousedown", o1), utils.DOM.removeEventListener(document, "keydown", a1), f && f(p);
                        }, o1 = function(f) {
                            for(var h = f.target || f.srcElement, v = !1; h && h.parentNode;){
                                if (p && -1 != p.indexOf(h)) {
                                    v = !0;
                                    break;
                                }
                                h = h.parentNode;
                            }
                            v || t1(f);
                        }, a1 = function(f) {
                            27 == (f.which || f.keyCode) && t1(f);
                        };
                        (localInfo.isIOS && localInfo.isSafari || localInfo.isIOSWebView) && (l || (i.addCss("*.gig-clickable {cursor: pointer;}", null), l = !0), utils.DOM.addClassToElement(document.body, "gig-clickable")), utils.DOM.addEventListener(document, "mousedown", o1), utils.DOM.addEventListener(document, "keydown", a1);
                    },
                    hideElement: function(f) {
                        f.style.display = "none";
                    },
                    showElement: function(f) {
                        f.style.display = "block";
                    }
                },
                layout: {
                    measureText: function(f, p, h) {
                        void 0 === h && (h = 0), (isNaN(h) || h < 0) && (h = 0);
                        var v = document.getElementById("gigya_ruler"), w = document.getElementById("gigya_ruler_text");
                        null == v && (v = document.createElement("div"), w = document.createElement("span"), v.id = "gigya_ruler", w.id = "gigya_ruler_text", v.style.visibility = "hidden", v.style.position = "absolute", v.style.margin = "0px", v.style.padding = "0px", v.appendChild(w), utils.DOM.prependToBody(v)), p && (v.style.lineHeight = p.size + "px", v.style.fontFamily = p.font, v.style.fontSize = p.size + "px", v.style.fontWeight = "true" == ("" + p.bold).toLowerCase() ? "bold" : ""), h ? (v.style.whiteSpace = "", v.style.width = h + "px") : (v.style.whiteSpace = "nowrap", v.style.width = "auto"), v.style.overflow = "hidden", v.style.display = "", w.innerHTML = f;
                        var m = w.offsetWidth, b = w.offsetHeight;
                        return 0 != m && 0 != b || (m = v.offsetWidth, b = v.offsetHeight), v.style.display = "none", {
                            w: m,
                            h: b
                        };
                    }
                },
                text: {
                    normalizeLinebreaks: function(f) {
                        return void 0 === f && (f = void 0), f && f.replace ? f.replace(/\r/, "").replace(/\n/g, "\r\n") : f;
                    },
                    fixTextWidows: function(f) {
                        var p = f.lastIndexOf(" ");
                        return -1 === p ? f : f.substr(0, p) + "&nbsp;" + f.substr(p + 1);
                    }
                },
                validation: {
                    isValidEmailLoginID: function(f) {
                        var p = new RegExp("^(?=(.{1,64}@.{1,255}))([!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9}]{1,64}(\\.[!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9]{1,}){0,})@((\\[(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\\])|([a-zA-Z0-9-]{1,63}(\\.[a-zA-Z0-9-]{1,63}){1,}))$", "ig").test(f);
                        return logger.info("LoginID validation with email : " + f + ", passed : " + p), p;
                    },
                    isEmailValid: function(f) {
                        return t(f);
                    },
                    isEmailListValid: function t1(f) {
                        for(var p = new RegExp("((\"[^<]+<(((?=([^.].{0,63}@.{1,255}))([!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9}]{1,64}(\\.[!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9]{1,}){0,})@((\\[(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\\])|([a-zA-Z0-9-]{1,63}(\\.[a-zA-Z0-9-]{1,63}){1,}))))>\")|((\"[^\"]*\" *)?<(((?=([^.].{0,63}@.{1,255}))([!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9}]{1,64}(\\.[!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9]{1,}){0,})@((\\[(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\\])|([a-zA-Z0-9-]{1,63}(\\.[a-zA-Z0-9-]{1,63}){1,}))))>)|(((?=([^.].{0,63}@.{1,255}))([!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9}]{1,64}(\\.[!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9]{1,}){0,})@((\\[(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\\])|([a-zA-Z0-9-]{1,63}(\\.[a-zA-Z0-9-]{1,63}){1,})))))"), h = f.split(","), v = 0; v < h.length; v++)if (!p.test(h[v])) return !1;
                        return !0;
                    }
                },
                domain: {
                    isInDomain: function(f, p) {
                        if (void 0 === f && (f = void 0), void 0 === p && (p = thisScript.globalConf.topDomain || document.domain), f) {
                            var h = "^" + f.replace(/\./g, "\\.").replace(/\*\\./g, "([a-zA-Z0-9]+\\.)*") + "$";
                            return new RegExp(h).test(p);
                        }
                    }
                }
            },
            i18n: {
                "gigya.services.accounts.plugins.screenSet.js": {
                    en: {
                        login_identifier_exists: "Login identifier exists",
                        unique_identifier_exists: "Unique identifier exists",
                        account_temporarily_locked_out: "Account temporarily locked out",
                        wrong_password: "Wrong password",
                        old_password_cannot_be_the_same_as_new_password: "You've already used that password. Please create a new one.",
                        old_password_used: "It seems like you're trying to log in with a password that was changed. If you don't remember the new one, reset your password.",
                        choose_file: "Choose File",
                        no_file_chosen: "No file chosen",
                        "maximum_size_of_3mb.": "Maximum size of 3MB.",
                        there_are_errors_in_your_form_please_try_again: "There are errors in your form, please try again",
                        sorry_we_are_not_able_to_process_your_registration: "Sorry, we are not able to process your registration",
                        invalid_login_or_password: "Invalid login or password",
                        account_is_disabled: "Account is disabled",
                        email_already_exists: "Email already exists",
                        there_is_no_user_with_that_username_or_email: "There is no user with that username or email",
                        password_must_contain_at_least: "Password must contain at least",
                        and: "and",
                        num_of_the_following_groups: "%num of the following: An uppercase letter, a lowercase letter, a number, a special symbol",
                        num_characters_total: "%num characters",
                        too_weak: "Too weak",
                        checking: "Checking",
                        email_address_is_invalid: "E-mail address is invalid.",
                        password_does_not_meet_complexity_requirements: "Password does not meet complexity requirements",
                        username_already_exists: "Username already exists",
                        passwords_do_not_match: "Passwords do not match",
                        please_enter_fieldname: "Please enter %fieldname",
                        this_field_is_required: "This field is required",
                        invalid_fieldname: "Invalid %fieldname",
                        very_strong: "Very strong",
                        strong: "Strong",
                        fair: "Fair",
                        weak: "Weak",
                        password_strength_colon: "Password strength:",
                        not_available: "Not available",
                        available: "Available",
                        network_error: "Network error, please try again later.",
                        profilePhoto_fileSizeError: "Photo format: JPG/GIF/PNG. Size: up to 3MB.",
                        subscription_pending_confirmation: "Pending Confirmation",
                        login_captcha_error: "To login, confirm you are not a robot",
                        register_captcha_error: "To register, confirm you are not a robot",
                        phone_number_exists: "This phone number already exists",
                        please_enter_a_valid_code: "Please enter a valid code",
                        invalid_password_reset_token: "Uh-oh, your link is not valid. Restart the reset password flow to get a new link. ",
                        otp_code_expired: "Code has expired. Resend a new code.",
                        invalid_login_identifier: "Invalid login identifier",
                        code_frequency_limit_reached: "Send limit reached. Please try again in a few minutes",
                        forbidden_error: "Too many requests: please wait before you try again",
                        request_captcha_error: "To continue, confirm you are not a robot",
                        unauthorized_user: "Unauthorized user",
                        permission_denied: "Permission denied",
                        account_pending_registration: "Account Pending Registration",
                        phone_not_verified: "Number must be verified",
                        phone_not_verified_enter_code: "Verification has not been completed. Please enter a valid code.",
                        sms_subscription_error: "To subscribe, please provide a verified phone number",
                        device_code_incorrect: "Device code incorrect, Please re-enter your device code",
                        not_supported: "Operation not supported",
                        passkey_authenticator_already_registered: "Passkey already exists on the device",
                        operation_canceled: "The request was canceled by the user or timed out",
                        invalid_site_configuration: "Invalid site configuration",
                        passkey_authenticator_error: "Something went wrong",
                        passkey_register_success: "Passkey register successfully",
                        general_error: "Something went wrong, please try again later",
                        no_data_available: "No Data Available",
                        missing_dqm_credentials: "Missing user credentials. Please ensure that you have configured your site's SAP DQM correctly.",
                        dqm_general_error: "There was an unknown error at the Provider. Please try again later.",
                        dqm_selection_error: "You must choose an address from the list of available options.",
                        organization_context_saved: "Organization context was successfully updated",
                        subscription_missing_dependson_fields: "To subscribe, please provide the missing required field(s)",
                        device_limit_reached: "You cannot add any more authenticators to your account.",
                        tfa_registration_expired: "Rescan the QR code or enter the secret again.",
                        please_try_again_later: "Please try again later.",
                        user_enable_2fa_error: "Enabling 2-Factor Authentication failed. Please try again.",
                        user_enable_2fa_success: "You enabled 2-Factor Authentication successfully",
                        custom_identifier_already_exists: "Custom identifier already exists: %fieldname"
                    }
                },
                "gigya.services.socialize.plugins.login.js": {
                    en: {
                        social_by: "Social by",
                        edit: "Edit",
                        add_more_connections_to_your_account: "Add more connections to your account.",
                        you_can_use_your_account_from_one_of_these_services_to_sign_into_the_site: "You can use your account from one of these services to sign into the site",
                        whats_this: "What's this?",
                        not_you: "Not you?",
                        sign_in_using_a_different_network: "Sign in using a different network",
                        welcome_back_user: "Welcome back, %user",
                        welcome_back: "Welcome back",
                        copy_link: "Copy link:",
                        copy_this_link_to_a_new_browser_window: "Copy this link to a new browser window:",
                        no_available_providers: "No available providers",
                        login: "Login",
                        logout: "Logout",
                        terms: "Terms",
                        connect_to: "Connect to",
                        no_social_network_application_key: "No Social network application key available for this domain. please contact Gigya to get application keys",
                        connect_with_your_friends: "Connect with your friends",
                        network_error: "Network error, please try again later.",
                        unknown_error: "Unknown Error",
                        ok: "OK",
                        copyButton: "Copy"
                    }
                }
            },
            __screenSetPluginCache: {
                "Default-RegistrationLogin": {
                    javascript: "",
                    translations: {
                        en: {
                            SUBMIT_142674579108303380_VALUE: "Submit",
                            CHECKBOX_76374189532411820_LABEL: "Keep me logged-in",
                            HEADER_131443300282291300_LABEL: "Log in with your email and password:",
                            LABEL_48902362044111190_LABEL: "or",
                            LINK_105018431100429140_LABEL: "Don't have an account yet?",
                            LINK_146308315993881860_LABEL: "Forgot password?",
                            LOGINID_1311311543682226_PLACEHOLDER: "Email",
                            PASSWORD_132128826476804690_PLACEHOLDER: "Password",
                            GIGYA_LOGIN_SCREEN_CAPTION: "Login",
                            SUBMIT_7667737432077126_VALUE: "Submit",
                            CHECKBOX_11798816851057300_LABEL: "Subscribe to our newsletter",
                            CHECKBOX_79786885293367740_LABEL: 'I have read and understood the\n <a class="gigya-terms-of-use" href="#">Terms of Use</a>',
                            HEADER_108728337563591200_LABEL: "Quickly register with your social network:",
                            HEADER_63695688742051540_LABEL: "Register with your email and password:",
                            LABEL_139978773486588850_LABEL: "or",
                            LINK_55817364832410216_LABEL: "Have an account already?",
                            LOGINID_126653578050634370_PLACEHOLDER: "Email",
                            PASSWORD_18495765554860224_PLACEHOLDER: "Retype password",
                            PASSWORD_92109928057504110_PLACEHOLDER: "Password",
                            GIGYA_REGISTER_SCREEN_CAPTION: "Registration",
                            TEXTBOX_72105706170970860_PLACEHOLDER: "First name",
                            TEXTBOX_75385478551382400_PLACEHOLDER: "Last name",
                            SUBMIT_31429658457676556_VALUE: "Submit",
                            CHECKBOX_76245746717438300_LABEL: "Subscribe to our newsletter",
                            DROPDOWN_16234574578704520_CHOICES_0004D0B59E19461FF126E3A08A814C33: "1970",
                            DROPDOWN_16234574578704520_CHOICES_008BD5AD93B754D500338C253D9C1770: "1994",
                            DROPDOWN_16234574578704520_CHOICES_03E7D2EBEC1E820AC34D054DF7E68F48: "1950",
                            DROPDOWN_16234574578704520_CHOICES_06964DCE9ADDB1C5CB5D6E3D9838F733: "1997",
                            DROPDOWN_16234574578704520_CHOICES_08F90C1A417155361A5C4B8D297E0D78: "2000",
                            DROPDOWN_16234574578704520_CHOICES_0950CA92A4DCF426067CFD2246BB5FF3: "1925",
                            DROPDOWN_16234574578704520_CHOICES_11108A3DBFE4636CB40B84B803B2FFF6: "1936",
                            DROPDOWN_16234574578704520_CHOICES_1113D7A76FFCECA1BB350BFE145467C6: "1952",
                            DROPDOWN_16234574578704520_CHOICES_136F951362DAB62E64EB8E841183C2A9: "1937",
                            DROPDOWN_16234574578704520_CHOICES_139F0874F2DED2E41B0393C4AC5644F7: "1929",
                            DROPDOWN_16234574578704520_CHOICES_15D185EAA7C954E77F5343D941E25FBD: "1931",
                            DROPDOWN_16234574578704520_CHOICES_1B36EA1C9B7A1C3AD668B8BB5DF7963F: "1984",
                            DROPDOWN_16234574578704520_CHOICES_1E4D36177D71BBB3558E43AF9577D70E: "1983",
                            DROPDOWN_16234574578704520_CHOICES_1E913E1B06EAD0B66E30B6867BF63549: "1933",
                            DROPDOWN_16234574578704520_CHOICES_1F36C15D6A3D18D52E8D493BC8187CB9: "1985",
                            DROPDOWN_16234574578704520_CHOICES_1F71E393B3809197ED66DF836FE833E5: "1946",
                            DROPDOWN_16234574578704520_CHOICES_277A78FC05C8864A170E9A56CEEABC4C: "1957",
                            DROPDOWN_16234574578704520_CHOICES_29530DE21430B7540EC3F65135F7323C: "1930",
                            DROPDOWN_16234574578704520_CHOICES_2D00F43F07911355D4151F13925FF292: "1945",
                            DROPDOWN_16234574578704520_CHOICES_333222170AB9EDCA4785C39F55221FE7: "1922",
                            DROPDOWN_16234574578704520_CHOICES_3683AF9D6F6C06ACEE72992F2977F67E: "1966",
                            DROPDOWN_16234574578704520_CHOICES_36AC8E558AC7690B6F44E2CB5EF93322: "1949",
                            DROPDOWN_16234574578704520_CHOICES_378A063B8FDB1DB941E34F4BDE584C7D: "1955",
                            DROPDOWN_16234574578704520_CHOICES_39DCAF7A053DC372FBC391D4E6B5D693: "1964",
                            DROPDOWN_16234574578704520_CHOICES_3D863B367AA379F71C7AFC0C9CDCA41D: "1974",
                            DROPDOWN_16234574578704520_CHOICES_3F088EBEDA03513BE71D34D214291986: "1995",
                            DROPDOWN_16234574578704520_CHOICES_405E28906322882C5BE9B4B27F4C35FD: "1978",
                            DROPDOWN_16234574578704520_CHOICES_414E773D5B7E5C06D564F594BF6384D0: "1923",
                            DROPDOWN_16234574578704520_CHOICES_44968AECE94F667E4095002D140B5896: "1920",
                            DROPDOWN_16234574578704520_CHOICES_4A3E00961A08879C34F91CA0070EA2F5: "1989",
                            DROPDOWN_16234574578704520_CHOICES_4AFD521D77158E02AED37E2274B90C9C: "1977",
                            DROPDOWN_16234574578704520_CHOICES_4BA29B9F9E5732ED33761840F4BA6C53: "2002",
                            DROPDOWN_16234574578704520_CHOICES_4D8556695C262AB91FF51A943FDD6058: "1969",
                            DROPDOWN_16234574578704520_CHOICES_5103C3584B063C431BD1268E9B5E76FB: "1926",
                            DROPDOWN_16234574578704520_CHOICES_519C84155964659375821F7CA576F095: "1942",
                            DROPDOWN_16234574578704520_CHOICES_52D2752B150F9C35CCB6869CBF074E48: "1932",
                            DROPDOWN_16234574578704520_CHOICES_5A7F963E5E0504740C3A6B10BB6D4FA5: "1954",
                            DROPDOWN_16234574578704520_CHOICES_5BCE843DD76DB8C939D5323DD3E54EC9: "1928",
                            DROPDOWN_16234574578704520_CHOICES_5EC829DEBE54B19A5F78D9A65B900A39: "1999",
                            DROPDOWN_16234574578704520_CHOICES_6351BF9DCE654515BF1DDBD6426DFA97: "1996",
                            DROPDOWN_16234574578704520_CHOICES_6A508A60AA3BF9510EA6ACB021C94B48: "1951",
                            DROPDOWN_16234574578704520_CHOICES_6F2688A5FCE7D48C8D19762B88C32C3B: "1944",
                            DROPDOWN_16234574578704520_CHOICES_798CEBCCB32617AD94123450FD137104: "1979",
                            DROPDOWN_16234574578704520_CHOICES_7AF6266CC52234B5AA339B16695F7FC4: "1941",
                            DROPDOWN_16234574578704520_CHOICES_7CA57A9F85A19A6E4B9A248C1DACA185: "1948",
                            DROPDOWN_16234574578704520_CHOICES_7D2B92B6726C241134DAE6CD3FB8C182: "1975",
                            DROPDOWN_16234574578704520_CHOICES_7F16109F1619FD7A733DAF5A84C708C1: "1960",
                            DROPDOWN_16234574578704520_CHOICES_8562AE5E286544710B2E7EBE9858833B: "1934",
                            DROPDOWN_16234574578704520_CHOICES_8C249675AEA6C3CBD91661BBAE767FF1: "1986",
                            DROPDOWN_16234574578704520_CHOICES_8D55A249E6BAA5C06772297520DA2051: "1935",
                            DROPDOWN_16234574578704520_CHOICES_95E6834D0A3D99E9EA8811855AE9229D: "1940",
                            DROPDOWN_16234574578704520_CHOICES_95F6870FF3DCD442254E334A9033D349: "1962",
                            DROPDOWN_16234574578704520_CHOICES_96055F5B06BF9381AC43879351642CF5: "1991",
                            DROPDOWN_16234574578704520_CHOICES_98C7242894844ECD6EC94AF67AC8247D: "1968",
                            DROPDOWN_16234574578704520_CHOICES_9D7311BA459F9E45ED746755A32DCD11: "1988",
                            DROPDOWN_16234574578704520_CHOICES_9F6992966D4C363EA0162A056CB45FE5: "1921",
                            DROPDOWN_16234574578704520_CHOICES_A38B16173474BA8B1A95BCBC30D3B8A5: "1953",
                            DROPDOWN_16234574578704520_CHOICES_A591024321C5E2BDBD23ED35F0574DDE: "2003",
                            DROPDOWN_16234574578704520_CHOICES_A82D922B133BE19C1171534E6594F754: "1967",
                            DROPDOWN_16234574578704520_CHOICES_AD4CC1FB9B068FAECFB70914ACC63395: "1938",
                            DROPDOWN_16234574578704520_CHOICES_B139E104214A08AE3F2EBCCE149CDF6E: "1924",
                            DROPDOWN_16234574578704520_CHOICES_B3B4D2DBEDC99FE843FD3DEDB02F086F: "1981",
                            DROPDOWN_16234574578704520_CHOICES_B8B4B727D6F5D1B61FFF7BE687F7970F: "2004",
                            DROPDOWN_16234574578704520_CHOICES_C215B446BCDF956D848A8419C1B5A920: "1963",
                            DROPDOWN_16234574578704520_CHOICES_C3395DD46C34FA7FD8D729D8CF88B7A8: "1943",
                            DROPDOWN_16234574578704520_CHOICES_C4DE8CED6214345614D33FB0B16A8ACD: "1972",
                            DROPDOWN_16234574578704520_CHOICES_C5A4E7E6882845EA7BB4D9462868219B: "1993",
                            DROPDOWN_16234574578704520_CHOICES_C5B2CEBF15B205503560C4E8E6D1EA78: "1998",
                            DROPDOWN_16234574578704520_CHOICES_D0FB963FF976F9C37FC81FE03C21EA7B: "2001",
                            DROPDOWN_16234574578704520_CHOICES_D46E1FCF4C07CE4A69EE07E4134BCEF1: "1965",
                            DROPDOWN_16234574578704520_CHOICES_D5C186983B52C4551EE00F72316C6EAA: "1992",
                            DROPDOWN_16234574578704520_CHOICES_D68A18275455AE3EAA2C291EEBB46E6D: "1987",
                            DROPDOWN_16234574578704520_CHOICES_D77F00766FD3BE3F2189C843A6AF3FB2: "1958",
                            DROPDOWN_16234574578704520_CHOICES_DC513EA4FBDAA7A14786FFDEBC4EF64E: "1990",
                            DROPDOWN_16234574578704520_CHOICES_DD055F53A45702FE05E449C30AC80DF9: "1976",
                            DROPDOWN_16234574578704520_CHOICES_DE03BEFFEED9DA5F3639A621BCAB5DD4: "1947",
                            DROPDOWN_16234574578704520_CHOICES_DE73998802680548B916F1947FFBAD76: "1971",
                            DROPDOWN_16234574578704520_CHOICES_DEB54FFB41E085FD7F69A75B6359C989: "1973",
                            DROPDOWN_16234574578704520_CHOICES_E3408432C1A48A52FB6C74D926B38886: "1956",
                            DROPDOWN_16234574578704520_CHOICES_E4DD5528F7596DCDF871AA55CFCCC53C: "1959",
                            DROPDOWN_16234574578704520_CHOICES_E5B294B70C9647DCF804D7BAA1903918: "1927",
                            DROPDOWN_16234574578704520_CHOICES_F106B7F99D2CB30C3DB1C3CC0FDE9CCB: "1961",
                            DROPDOWN_16234574578704520_CHOICES_F22E4747DA1AA27E363D86D40FF442FE: "1939",
                            DROPDOWN_16234574578704520_CHOICES_F80BF05527157A8C2A7BB63B22F49AAA: "1980",
                            DROPDOWN_16234574578704520_CHOICES_FB87582825F9D28A8D42C5E5E5E8B23D: "1982",
                            DROPDOWN_16234574578704520_LABEL: "Year of birth:",
                            LABEL_82751524717670350_LABEL: "We still need a few more details:",
                            GIGYA_COMPLETE_REGISTRATION_SCREEN_CAPTION: "Profile Completion",
                            TEXTBOX_136884197726350880_LABEL: "Email:",
                            TEXTBOX_65559603100946710_LABEL: "Postcode:",
                            SUBMIT_314293454325435_VALUE: "Get The Code",
                            LABEL_1555592368664_LABEL: "A code will be sent to your mobile phone number.",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_0000C04B6A11CB01FA6C351D96951A94: "Anguilla (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_018AE104E95A884C0EF61987A4BCA33B: "Solomon Islands (+677)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_019E354FDE6080C71A2078D7689D015C: "Brazil (+55)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_02CC7D66E001C3E70D74755B7C3B8CC4: "Philippines (+63)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_044E84571F705B4449CC30F9010B7457: "Greenland (+299)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_049C0FEF53053801CD4B2DD07D27E34E: "Denmark (+45)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_093A60D935C4B98FE0974318EFEFBD2A: "Georgia (+995)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_09DFBAA95005C05961464F3FD07A73C9: "Gabon (+241)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_0A07706D6AAE7D5FAC405E73DCA5A230: "Ghana (+233)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_0A86459132D51157F5B110A28785FAB1: "Swaziland (+268)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_0B67E604B8FE452617CFA3B1CE27D771: "Rwanda (+250)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_0B6D697F2C0204573A65988CC05949CA: "Venezuela (+58)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_0B7991BC3D17112C050AD75D7002BE4A: "French Polynesia (+689)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_0C7DD38E5919A23F0FE33ED8E7B61BCD: "Iraq (+964)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_0EB55A926D3F16275DC53B4BD9559107: "East Timor (+670)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_0FB4FEC2BA2CA49124958FB16365B9E6: "Nicaragua (+505)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_10491CB01667EED09F957CD7975032CB: "Puerto Rico (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_10B0F24A19EEF030C3E26DCA73A591A5: "Macedonia (+389)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_1179A92EC9A28334E0A559C64F6BBC78: "Mali (+223)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_12308CC3D4CC2FB855383A8DC9D728BF: "Lithuania (+370)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_1324137F09564ED3F8370A56C4C646CF: "Togo (+228)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_15610E11E4FB7489E79C6D1E245B2BDF: "Serbia (+381)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_17E9204B939277581EA401F786E4D705: "Morocco (+212)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_183B1E1C670D1EF64D74E32EC4E9348D: "Australia (+61)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_1AC4BB54E5F417A8ED8BD80D0601696B: "Spain (+34)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_1C85B37F22E56195407271C65E12F6B2: "Egypt (+20)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_203161DAE0F2145386430C8F78A054C0: "United Kingdom (+44)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_20D20D19C28939EFBD7E6E36A8D3D3FF: "Barbados (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_212B0D7C2256FEB06EE9F0663ECACD1C: "South Africa (+27)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_232618C6FA5A962C6547DEF41609CE3E: "Ukraine (+380)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_23EFB14ABF1868AE2C351B956FE12278: "Botswana (+267)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_25F2BA239B091210CA080D221FFBD51D: "Sierra Leone (+232)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_2655ED45019A53E98278854C1800A41A: "Liechtenstein (+423)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_267C3D5900A14625CCEBF843E1113579: "Pakistan (+92)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_26CF7DE002149E85347C2CDDD34C43FB: "Costa Rica (+506)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_275C81699C9CA9DD1BD589A82F09AFF2: "French Guiana (+594)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_278EC1E91DBD6DA31A9546BC16FF9ACF: "Cuba (+53)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_27E4A0C1E5118EA9EB28DC68BB44A389: "Saint Lucia (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_27FD3852136408B2E80C42ABE85FE888: "Benin (+229)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_28DB04EFD361DC70B1230CDC1A84CF7A: "Brunei (+673)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_29D4173C28F9BA028E1FEFD8F5B17607: "Jordan (+962)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_2B7FC2C51021C92E461A91BCD4C77222: "Panama (+507)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_2B9C96E2E465F06B1E947A1ABF1F82CC: "Latvia (+371)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_2C494EFCF244731678FD8C2EF14F3B66: "Bhutan (+975)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_2D2E0B57E53318D06A3A989618595D2D: "Yemen (+967)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_2D309595E0F8C76A69FC6B66E3AEE2DE: "Malta (+356)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_302F0A2BDDB3285A0D7E26676109FC06: "Montenegro (+382)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_311CFD698E0DC61134CBB6F3B9C91BAE: "Gambia (+220)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_32ABF11FB772561B45FAE98173CEF6F6: "New Caledonia (+687)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_32C902FF3266E8A06D44121EB60F070B: "United States (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_3345950E1892B722E378BFE9D845872F: "Slovenia (+386)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_371CEACF25ED39729BBFCC06C0908BFC: "Ireland (+353)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_382B4143D3FB755C6553E796350644D3: "Jersey (+44)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_3A3F7B3A7C161BFE383D008E10FCCD4C: "Armenia (+374)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_3A4A6140CF0EA62D25A9DE1A6079458D: "Slovakia (+421)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_3A78A91CFFA196DEE4A8454FAE5271D4: "Azerbaijan (+994)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_3C70E69BE44A86FC852EF8EC2D3C3D2A: "Tanzania (+255)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_3CCC0920ECF6AA39031E2309F848F0FC: "British Indian Ocean Territory (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_3CF400C815B9F3EE81CDA1CE6E6AED05: "Greece (+30)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_3E3C87B19BA3BC4BCF454945C29B6125: "Bermuda (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_3EE9B3C1AD61A60F5593FF19EB4CB887: "Madagascar (+261)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_3F689BEAE4FF52B7021C755FC5AC99E7: "Ecuador (+593)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_3FC6ED9787B1B760CEABF91679C26878: "Congo (+242)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_42495073B157F93E836B72B07DEF2F2C: "Qatar (+974)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_42F14FD8C4866C266D51EC4718A19158: "Saint Kitts and Nevis (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_440D1471CBAB9266505137C1C45F3ED4: "Uganda (+256)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_44744C30C3DB65036EBB94079C58B6E3: "Colombia (+57)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_45C9B64A3CECCCCE49843DBAFE6ADB64: "Czech Republic (+420)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_45EB8706E13C8E358D97C730312E90AE: "Grenada (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_4921A12350B932D23D31D8B5868D6F04: "Lesotho (+266)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_4955C9C5078A1B26DA786E00D4C71829: "Sudan (+249)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_4A67165A23BF87C2823AF4D85209A854: "Hong Kong (+852)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_4A73DF4C96B5D4DA40C2A7254604C1BA: "Libya (+218)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_4B98171607BC7FF3007BABEC7F3E47DA: "Kyrgyzstan (+996)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_4F0B7F8EB20FB16D579581FB4FD438F6: "Sweden (+46)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_530F4E0E790A543D9EC308072314BEBA: "Paraguay (+595)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_55B7D584F14D787E069917CBCAD8F858: "Cameroon (+237)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_55BB4B263289FF947007A2FF574B8A54: "Moldova (+373)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_55F06B247EA51B5534CB9B58C530703E: "Gibraltar (+350)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_58A4655174124FCBEC0EA83ED121901E: "Kenya (+254)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_5A263C957067F1868ED88CF1DB1F9691: "China (+86)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_5AE79DDDA6F16ECF9450EBE8C41E268F: "Tajikistan (+992)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_5C8745A9652FA0FB450E22EEE803E8F8: "Chile (+56)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_5D14311DD7B2184B182ECED0DB4F2A23: "Suriname (+597)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_5DFC83751AB9D5CE392283E37225CEEB: "Kazakhstan (+7)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6115FC90431687F6FC349BF5BFE58F60: "Burkina Faso (+226)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_61817BC8A708B5AAB1D0DD9467CEABED: "Mauritania (+222)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_61EF21FDC5515A90CFAA8BABFC3CDDAC: "Singapore (+65)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_64089EFC30466CD81B53E16EA08C67BF: "Belize (+501)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6554B2FF3A5978291C0F7376AB26C848: "Syria (+963)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6562C71449C1704C676A13E1A5C18BFB: "Congo, The Democratic Republic Of The (+243)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_65CEC708B5D89D0D2457855B9D6A94AC: "Fiji (+679)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6674F7653960BBCB2814203115668763: "Wallis And Futuna (+681)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_669B9B9BBAF86E1A8FC4D8902FC77026: "Italy (+39)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_66C3CA97838B58714792C897B385EDC6: "Mozambique (+258)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_67927B31BE826B2D544F23B3F3D115D7: "Cape Verde (+238)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6A75EE0F96C5B8DB62A17B1F861E1B5E: "Equatorial Guinea (+240)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6B2AA1100BFB1887DA27C9CD384E09FE: "Finland (+358)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6B7E29C7A90813B182E4E993A44086FF: "Liberia (+231)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6BCC55C5EADBDED564CF32359773CBFE: "Guernsey (+44)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6D27A5E78ECCD03EE33D87BF3D2B2CC8: "Reunion (+262)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6D3EB5C5A30DC5B6FD0035201CAD19E0: "Estonia (+372)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6D8723CF044BAEBE059B9D2D7330CA42: "United Arab Emirates (+971)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6EED2E14CCF08F75AE0A55DB12E9C653: "Honduras (+504)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6F2ECC1C256C31FD43ED1157BCCC95B0: "Saint Vincent (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_6F4C92C83FC32220ED8152AE62BDE311: "Romania (+40)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_7087D94E0DD6463EC57A0F1A55A46CFD: "Haiti (+509)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_71E3FEFDC6441C1C112EF263DE1BF8ED: "Mexico (+52)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_72DACE1C7D7C48FE87AD9EF93DA8880E: "Palestine (+970)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_730A5D1990016281CB11952A3F377F69: "Trinidad And Tobago (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_731FB8DCDFCEF1D997AA13322DA40476: "Seychelles (+248)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_749B0CD97119801FF9880E5768AE1ED7: "Turkmenistan (+993)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_75037F764CB144B6889A5F8171C1A27C: "Cayman Islands (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_7D307FBC5EBE3972706E3D898CC4BE25: "Hungary (+36)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_7DB34BA7AFCCF77C4EB1AE5E3F530503: "Bolivia (+591)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_7EEA32ECAF8C58BC414082080B65DBB3: "Kuwait (+965)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_8192604E90D83CBA3DCCBAD2EDDF1641: "Albania (+355)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_87BB8668CB0004CE94F6AEDC96AF8267: "Ethiopia (+251)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_88C55D93F6412DAC30AFEF87EC950DD0: "Maldives (+960)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_8D8D9F79DC287C775BB06FFFC8AE1916: "Burundi (+257)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_8E64EA7E5AFBEC88581B9E3C5874C142: "Russia (+7)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_9072A83B2E107216CEBD634A35592127: "Saudi Arabia (+966)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_92307F98981C17DA9FCD08A423B23C19: "Djibouti (+253)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_92C3161EF8C78034409B97DBA2732119: "Guatemala (+502)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_94A38FCF50215C63446441275BD91CBC: "Poland (+48)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_950483525AA1ECAF75BB5491F351F24E: "Martinique (+596)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_990E8ACE85837FCCD2DEB0A7AE3321A2: "Senegal (+221)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_9D79DE4E7E64235407D4F3133FE392BC: "Malawi (+265)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_9F466DB3D9D9BACD7CF95E5B1E8E5441: "Israel (+972)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_A0B099B5CD051341B3BF75BEB79C2FF8: "Viet Nam (+84)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_A11FED9A6570C0647A1BAAC8C1DAC6D7: "India (+91)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_A65485C739F76BFF7E05413D23E7A03E: "Bahrain (+973)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_A7739D75D45B95186806F13F033335FD: "Vanuatu (+678)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_A87B73B3E1DBA418432EB94A08432244: "Angola (+244)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_A8BAA0E29D70F8AD7DFC86916FB39346: "Portugal (+351)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_A9DC19BB94C6904A27D41EF904232199: "Tonga (+676)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_AAF2B5C1AFC80BEF1A58A669FA7DC9BF: "Belgium (+32)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_AB5694A7D9AB79112FE99D42CBC7A0EF: "Argentina (+54)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_AC2CEC8FFF07429F388098BB9AAB86A4: "Cambodia (+855)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_ACC738496F403A6822EB6B395C0EA4EE: "Thailand (+66)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_AD51C2F6E99DB2DB0DA65EEFC00273AA: "Sri Lanka (+94)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_AFD663CCF14CE0EE7F81613B40B78D18: "Montserrat (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_AFFB5ABFA8F1922289CC313EDF80B231: "Macao (+853)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_B042BD504749951EBB8FC489795A286F: "Uruguay (+598)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_B1B400960194AB272577C6B573DB2D9C: "Bangladesh (+880)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_B6507BB6F51B01321A3B87B8D0ACC714: "Luxembourg (+352)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_BA08CDF6C826861E2A337576DF8FE264: "Switzerland (+41)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_BA27C72455163E3EB029847D532650C6: "Dominica (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_BA6CD9FE5A3AC9438F09F845773BC2B7: "Falkland Islands (Malvinas) (+500)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_BC6935C7C49AB605DDA2D1DB14D391D4: "Andorra (+376)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_BCDB41B851402FA9C47DBB0E4BDFA28D: "Afghanistan (+93)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_BCDED8077CA928B0AC5D7B6DD244B9F3: "Tunisia (+216)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_BD7B017B83C86393D5AFBCCF09B39535: "Belarus (+375)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_BE31195109C26343B81ACA710E3F08BE: "Northern Mariana Islands (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_C0593B6D09969BF4C32A684DF2AC4A7D: "Guam (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_C0F4C393ADE23E94388A619D2D28469C: "Cyprus (+357)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_C12934B2FB7A79F37D8D2730A02FF325: "Bosnia And Herzegovina (+387)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_C2445CA2ADAA6D2352E6B5342C51848A: "Myanmar (+95)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_C5DD5AADB4791D0799DDF499FBACFD3A: "Turkey (+90)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_C6008329DEF3854AB786638735E3DCF8: "Virgin Islands, British (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_C683D0ED1E24DA7B22C9C5283C1C0822: "Iran (+98)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_C87C486958DCD8CFB22F6FAC15BD3C36: "Aruba (+297)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_C9530E692E6C6B0631172C859262CE15: "Antigua and Barbuda (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_C9F85D89F977D07694B8847B2F21C17A: "Niger (+227)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_CB3868A3DF027A768524B1799256D7E9: "Bulgaria (+359)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_CB425265B02770CBF6AA66D862BF17D5: "Jamaica (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_CC6ED73BF623AEB7707047AE998D364A: "Canada (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_CE097694C2EB14AD8DED90D528CB1B5A: "Malaysia (+60)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_CE79906B4A47AEA9FAA59151BD0A8C06: "Faroe Islands (+298)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_D07D47EA18447405DEC7CE0D8D61A448: "Zimbabwe (+263)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_D08B3F47C06392C08C3863C3E8453FFC: "Cote d\\'Ivoire (+225)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_D239539B3277579FA37285D30B9C4C3E: "Algeria (+213)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_D6318A3F72BB34864386B79EDBC391C7: "Peru (+51)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_D654E0248440598C819C9E1CEC040605: "Laos (+856)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_D67B6F9FE85B2BC4969D07B757ED28AC: "Japan (+81)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_D9CED68E11939C33CE6512548DE5473E: "Indonesia (+62)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_DC134898CC21C30FA1A767DC889BC9C7: "Norway (+47)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_DE08EFFC4128AEDD10379EA73823D5CC: "Nepal (+977)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_DE435B513CCDA1AC711FF10954CB25BD: "New Zealand (+64)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_DE9675F429C298A1D3823E8CB122D99B: "Somalia (+252)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_E0836B3330A25A9B8E6B90060CB95A5E: "Nigeria (+234)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_E1329E5B6318C778116918397EBC9C4F: "Uzbekistan (+998)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_E154E7A6DE015871C40A71C833BBD32B: "Guadeloupe (+590)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_E3B73CA00640A2E9CC7819C373365F1D: "Chad (+235)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_E40528D8028F52E2724182C93E5AA385: "Netherlands Antilles (+599)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_E62457F72D933DBCB44AAB91DFDA8874: "Mongolia (+976)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_E63EEB8515DBB9E3BC9AF51AD6583A55: "El Salvador (+503)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_E6F770859FDE5760CBCF83BEAF9EB993: "Guyana (+592)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_E6FFC6D8240E701ECE6599EC8CF45CF4: "Taiwan (+886)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_E8258AB6DE76B8219D7102F1B44C845D: "Isle Of Man (+44)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_E909C2D7067EA37437CF97FE11D91BD0: "country",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_EC63C956DEFBD581C0FD9518E2AA3D41: "Lebanon (+961)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_EE3D98F7EE6C591A0102FD475FAC8AA3: "France (+33)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_EFD933F4DECB4BB1004E4241E0731ED4: "Dominican Republic (+1)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_F0E7F4C4B4E525EE7957A3FEA865118A: "Mauritius (+230)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_F0E977F8E3C559A6A21B06AC12CFD149: "Monaco (+377)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_F163162463D352FF5C3C24301C39A702: "Germany (+49)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_F265600C9D75B9386B863D2D74F56959: "Namibia (+264)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_F29A808E9BB2C0BAA651FF9EF78AD4C4: "Guinea (+224)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_F3B0EEC83FB9F59726A0A52920ACAA13: "Oman (+968)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_F73F1D7BA0CAF645118A9E8149EC346B: "Zambia (+260)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_F9096B7627DD12471BC163CB0E1392BB: "Korea, South (+82)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_FA4671E2748A698F1B80A643827F5FA1: "Croatia (+385)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_FB7B615AB2121EC76CECB5FA2CAD104E: "Austria (+43)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_FCACDE06C2B867E33FBC821F32D4C765: "Iceland (+354)",
                            PHONE_NUMBER_INPUT_15254487288447762_CHOICES_FEC85FEEA479735D94A3F27756825567: "Netherlands (+31)",
                            PHONE_NUMBER_INPUT_15254487288447762_DISPLAY_NAME: "phone number",
                            PHONE_NUMBER_INPUT_15254487288447762_LEGEND: "Enter your mobile number:",
                            PHONE_NUMBER_INPUT_15254487288447762_PLACEHOLDER: "subscriber number",
                            GIGYA_MOBILE_LOGIN_SCREEN_CAPTION: "Log In With Your Mobile Phone",
                            SUBMIT_31429890890890_VALUE: "Verify",
                            LABEL_1555593146287_LABEL: 'Enter the code sent to your phone <a data-binding="true" data-switch-screen="gigya-mobile-login-screen"> {{accountInfo.phoneNumber}}\n <i class="gigya-pencil"></i></a>',
                            LABEL_546546790858_LABEL: 'Didn\'t get the code? <a data-disable-on-render="true" data-gigya-api-link="accounts.otp.sendCode">Click Here</a>',
                            GIGYA_MOBILE_VERIFICATION_SCREEN_CAPTION: "Enter The Code",
                            SUBMIT_137794634987176350_VALUE: "Get The Code",
                            LABEL_56426764264083580_LABEL: "A code will be sent to the new email for\n verification. If you don't validate with the code, your email will remain unchanged.",
                            GIGYA_CHANGE_EMAIL_SCREEN_CAPTION: "Change Your Email",
                            TEXTBOX_20913098960397852_LABEL: "Email",
                            SUBMIT_106757411555670860_VALUE: "Verify",
                            LABEL_124580104205672500_LABEL: 'Enter the code sent to your email <a data-binding="true" data-switch-screen="gigya-change-email-screen"> {{accountInfo.email}}\n <i class="gigya-pencil"></i></a>',
                            LABEL_45421446589093550_LABEL: 'Didn\'t get the code? <a data-disable-on-render="true" data-gigya-api-link="accounts.otp.sendCode">Click Here</a>',
                            GIGYA_EMAIL_CODE_VERIFICATION_SCREEN_CAPTION: "Enter The Code",
                            SUBMIT_81725475708397440_VALUE: "Submit",
                            LABEL_47776247120507590_LABEL: "Please enter your email address to reset your password:",
                            LINK_125263109889403890_LABEL: "Back to Login",
                            LOGINID_1762354922073180_LABEL: "Email:",
                            GIGYA_FORGOT_PASSWORD_SCREEN_CAPTION: "Forgot Password",
                            LABEL_32342199862391930_LABEL: "An email regarding your password change has been sent to your email address.",
                            LINK_64563424514074200_LABEL: '<input tabindex="0" type="button" value="Back to Login">',
                            GIGYA_FORGOT_PASSWORD_SUCCESS_SCREEN_CAPTION: "Forgot Password",
                            SUBMIT_1640252814218_VALUE: "Get The Code",
                            LABEL_1640252757841_LABEL: "A code will be sent to your mobile phone number.",
                            GIGYA_MOBILE_FORGOT_PASSWORD_SCREEN_CAPTION: "Forgot Password",
                            SUBMIT_1640253788797_VALUE: "Verify",
                            LABEL_1640253752471_LABEL: 'Enter the code sent to your phone <a data-binding="true" data-switch-screen="gigya-mobile-forgot-password-screen"> {{accountInfo.phoneNumber}}\n <i class="gigya-pencil"></i></a>',
                            LABEL_1640253816271_LABEL: 'Didn\'t get the code? <a data-disable-on-render="true" data-gigya-api-link="accounts.otp.sendCode">Click Here</a>',
                            GIGYA_MOBILE_FORGOT_PASSWORD_VERIFICATION_SCREEN_CAPTION: "Enter The Code",
                            SUBMIT_48518527117736720_VALUE: "Submit",
                            LABEL_31901611131936240_LABEL: "Please enter a new password:",
                            PASSWORD_24487772290225964_LABEL: "New password:",
                            PASSWORD_53816046531769560_LABEL: "Confirm password:",
                            GIGYA_RESET_PASSWORD_SCREEN_CAPTION: "Reset Password",
                            LABEL_43754194743648540_LABEL: "Your password has been changed successfully.<br>Log in with your new password.",
                            LINK_122104312720648740_LABEL: '<input tabindex="0" type="button" value="Back to Login">',
                            GIGYA_RESET_PASSWORD_SUCCESS_SCREEN_CAPTION: "Reset Password",
                            SUBMIT_65931489860940900_VALUE: "Submit",
                            LABEL_16240548663414458_LABEL: "For security reasons, your password needs changing:",
                            PASSWORD_101426512808638880_LABEL: "Current password:",
                            PASSWORD_17036595420608126_LABEL: "New password:",
                            PASSWORD_19612919353342308_LABEL: "Confirm new password:",
                            GIGYA_PASSWORD_CHANGE_REQUIRED_SCREEN_CAPTION: "Password Change",
                            SUBMIT_59040383411520670_VALUE: "Submit",
                            LABEL_114745734160901840_LABEL: "For your security, a verification email has been sent to you. Please follow the instructions in the\n email to verify your account.<br><br>To resend the verification email, please enter your email\n address below and click Submit.",
                            LABEL_135099439990555600_LABEL: '<a data-switch-screen="gigya-login-screen">Log in with a different account</a>',
                            GIGYA_VERIFICATION_PENDING_SCREEN_CAPTION: "Email Verification",
                            TEXTBOX_53553186815043370_LABEL: "Email:",
                            GIGYA_TFA_REGISTRATION_SCREEN_CAPTION: "Securing Your Account",
                            GIGYA_TFA_VERIFICATION_SCREEN_CAPTION: "Verifying Your Account",
                            LABEL_4529849558267223_LABEL: "A verification email with a link to verify your account has been sent to you.",
                            LINK_19224603862200704_LABEL: '<input type="button" class="gigya-button" value="OK" tabindex="0">',
                            GIGYA_VERIFICATION_SENT_SCREEN_CAPTION: "Email Verification",
                            SUBMIT_55211342470297420_VALUE: "Submit",
                            CHECKBOX_78285840404140770_LABEL: 'I have read and understood the <a class="gigya-terms-of-use" href="#">Terms of Use</a>',
                            HEADER_51697213698355980_LABEL: "Provide a password:",
                            PASSWORD_107891164873405600_PLACEHOLDER: "Password",
                            PASSWORD_76732333762278900_PLACEHOLDER: "Confirm password",
                            GIGYA_LITE_ACCOUNT_PROGRESSION_SCREEN_CAPTION: "Complete Your Account",
                            SUBMIT_1656946025416_VALUE: "Register Device",
                            LABEL_1656946025416_LABEL: "Please enter the verification code you see on your device",
                            GIGYA_DEVICE_CODE_VERIFICATION_SCREEN_CAPTION: "Device Registration",
                            TEXTBOX_1656946025416_PLACEHOLDER: "Enter Verification Code",
                            LABEL_1656948542313_LABEL: "<p>Thank you!</p>\n <p>Your device has been successfully registered.</p>",
                            LINK_1656954205211_LABEL: '<input type="button" class="gigya-button" value="Done" tabindex="0">',
                            GIGYA_DEVICE_CODE_THANK_YOU_SCREEN_CAPTION: "Registration Successful",
                            PASSKEY_REGISTER_WIDGET_148589704012182200_VALUE: "Add Passkey",
                            HEADER_1941735297197556_LABEL: "Sign in with passkey",
                            HEADER_2741570414924430_LABEL: "Better security and account protection",
                            HEADER_8427604072677286_LABEL: "No need to remember a password",
                            LABEL_126523004556259340_LABEL: "Passkeys are secure and phishing resistant",
                            LABEL_85984667306998110_LABEL: "Passkeys allow you to log in using fingerprint or face recognition",
                            LINK_63641313208939464_LABEL: "Continue",
                            GIGYA_PASSKEY_REGISTRATION_SCREEN_CAPTION: "Passkey Register",
                            submit_142674579108303380_value: "Submit",
                            checkbox_76374189532411820_label: "Keep me logged-in",
                            header_131443300282291300_label: "Log in with your email and password:",
                            label_48902362044111190_label: "or",
                            link_105018431100429140_label: "Don't have an account yet?",
                            link_146308315993881860_label: "Forgot password?",
                            loginid_1311311543682226_placeholder: "Email",
                            password_132128826476804690_placeholder: "Password",
                            gigya_login_screen_caption: "Login",
                            submit_7667737432077126_value: "Submit",
                            checkbox_11798816851057300_label: "Subscribe to our newsletter",
                            checkbox_79786885293367740_label: 'I have read and understood the\n <a class="gigya-terms-of-use" href="#">Terms of Use</a>',
                            header_108728337563591200_label: "Quickly register with your social network:",
                            header_63695688742051540_label: "Register with your email and password:",
                            label_139978773486588850_label: "or",
                            link_55817364832410216_label: "Have an account already?",
                            loginid_126653578050634370_placeholder: "Email",
                            password_18495765554860224_placeholder: "Retype password",
                            password_92109928057504110_placeholder: "Password",
                            gigya_register_screen_caption: "Registration",
                            textbox_72105706170970860_placeholder: "First name",
                            textbox_75385478551382400_placeholder: "Last name",
                            submit_31429658457676556_value: "Submit",
                            checkbox_76245746717438300_label: "Subscribe to our newsletter",
                            dropdown_16234574578704520_choices_0004d0b59e19461ff126e3a08a814c33: "1970",
                            dropdown_16234574578704520_choices_008bd5ad93b754d500338c253d9c1770: "1994",
                            dropdown_16234574578704520_choices_03e7d2ebec1e820ac34d054df7e68f48: "1950",
                            dropdown_16234574578704520_choices_06964dce9addb1c5cb5d6e3d9838f733: "1997",
                            dropdown_16234574578704520_choices_08f90c1a417155361a5c4b8d297e0d78: "2000",
                            dropdown_16234574578704520_choices_0950ca92a4dcf426067cfd2246bb5ff3: "1925",
                            dropdown_16234574578704520_choices_11108a3dbfe4636cb40b84b803b2fff6: "1936",
                            dropdown_16234574578704520_choices_1113d7a76ffceca1bb350bfe145467c6: "1952",
                            dropdown_16234574578704520_choices_136f951362dab62e64eb8e841183c2a9: "1937",
                            dropdown_16234574578704520_choices_139f0874f2ded2e41b0393c4ac5644f7: "1929",
                            dropdown_16234574578704520_choices_15d185eaa7c954e77f5343d941e25fbd: "1931",
                            dropdown_16234574578704520_choices_1b36ea1c9b7a1c3ad668b8bb5df7963f: "1984",
                            dropdown_16234574578704520_choices_1e4d36177d71bbb3558e43af9577d70e: "1983",
                            dropdown_16234574578704520_choices_1e913e1b06ead0b66e30b6867bf63549: "1933",
                            dropdown_16234574578704520_choices_1f36c15d6a3d18d52e8d493bc8187cb9: "1985",
                            dropdown_16234574578704520_choices_1f71e393b3809197ed66df836fe833e5: "1946",
                            dropdown_16234574578704520_choices_277a78fc05c8864a170e9a56ceeabc4c: "1957",
                            dropdown_16234574578704520_choices_29530de21430b7540ec3f65135f7323c: "1930",
                            dropdown_16234574578704520_choices_2d00f43f07911355d4151f13925ff292: "1945",
                            dropdown_16234574578704520_choices_333222170ab9edca4785c39f55221fe7: "1922",
                            dropdown_16234574578704520_choices_3683af9d6f6c06acee72992f2977f67e: "1966",
                            dropdown_16234574578704520_choices_36ac8e558ac7690b6f44e2cb5ef93322: "1949",
                            dropdown_16234574578704520_choices_378a063b8fdb1db941e34f4bde584c7d: "1955",
                            dropdown_16234574578704520_choices_39dcaf7a053dc372fbc391d4e6b5d693: "1964",
                            dropdown_16234574578704520_choices_3d863b367aa379f71c7afc0c9cdca41d: "1974",
                            dropdown_16234574578704520_choices_3f088ebeda03513be71d34d214291986: "1995",
                            dropdown_16234574578704520_choices_405e28906322882c5be9b4b27f4c35fd: "1978",
                            dropdown_16234574578704520_choices_414e773d5b7e5c06d564f594bf6384d0: "1923",
                            dropdown_16234574578704520_choices_44968aece94f667e4095002d140b5896: "1920",
                            dropdown_16234574578704520_choices_4a3e00961a08879c34f91ca0070ea2f5: "1989",
                            dropdown_16234574578704520_choices_4afd521d77158e02aed37e2274b90c9c: "1977",
                            dropdown_16234574578704520_choices_4ba29b9f9e5732ed33761840f4ba6c53: "2002",
                            dropdown_16234574578704520_choices_4d8556695c262ab91ff51a943fdd6058: "1969",
                            dropdown_16234574578704520_choices_5103c3584b063c431bd1268e9b5e76fb: "1926",
                            dropdown_16234574578704520_choices_519c84155964659375821f7ca576f095: "1942",
                            dropdown_16234574578704520_choices_52d2752b150f9c35ccb6869cbf074e48: "1932",
                            dropdown_16234574578704520_choices_5a7f963e5e0504740c3a6b10bb6d4fa5: "1954",
                            dropdown_16234574578704520_choices_5bce843dd76db8c939d5323dd3e54ec9: "1928",
                            dropdown_16234574578704520_choices_5ec829debe54b19a5f78d9a65b900a39: "1999",
                            dropdown_16234574578704520_choices_6351bf9dce654515bf1ddbd6426dfa97: "1996",
                            dropdown_16234574578704520_choices_6a508a60aa3bf9510ea6acb021c94b48: "1951",
                            dropdown_16234574578704520_choices_6f2688a5fce7d48c8d19762b88c32c3b: "1944",
                            dropdown_16234574578704520_choices_798cebccb32617ad94123450fd137104: "1979",
                            dropdown_16234574578704520_choices_7af6266cc52234b5aa339b16695f7fc4: "1941",
                            dropdown_16234574578704520_choices_7ca57a9f85a19a6e4b9a248c1daca185: "1948",
                            dropdown_16234574578704520_choices_7d2b92b6726c241134dae6cd3fb8c182: "1975",
                            dropdown_16234574578704520_choices_7f16109f1619fd7a733daf5a84c708c1: "1960",
                            dropdown_16234574578704520_choices_8562ae5e286544710b2e7ebe9858833b: "1934",
                            dropdown_16234574578704520_choices_8c249675aea6c3cbd91661bbae767ff1: "1986",
                            dropdown_16234574578704520_choices_8d55a249e6baa5c06772297520da2051: "1935",
                            dropdown_16234574578704520_choices_95e6834d0a3d99e9ea8811855ae9229d: "1940",
                            dropdown_16234574578704520_choices_95f6870ff3dcd442254e334a9033d349: "1962",
                            dropdown_16234574578704520_choices_96055f5b06bf9381ac43879351642cf5: "1991",
                            dropdown_16234574578704520_choices_98c7242894844ecd6ec94af67ac8247d: "1968",
                            dropdown_16234574578704520_choices_9d7311ba459f9e45ed746755a32dcd11: "1988",
                            dropdown_16234574578704520_choices_9f6992966d4c363ea0162a056cb45fe5: "1921",
                            dropdown_16234574578704520_choices_a38b16173474ba8b1a95bcbc30d3b8a5: "1953",
                            dropdown_16234574578704520_choices_a591024321c5e2bdbd23ed35f0574dde: "2003",
                            dropdown_16234574578704520_choices_a82d922b133be19c1171534e6594f754: "1967",
                            dropdown_16234574578704520_choices_ad4cc1fb9b068faecfb70914acc63395: "1938",
                            dropdown_16234574578704520_choices_b139e104214a08ae3f2ebcce149cdf6e: "1924",
                            dropdown_16234574578704520_choices_b3b4d2dbedc99fe843fd3dedb02f086f: "1981",
                            dropdown_16234574578704520_choices_b8b4b727d6f5d1b61fff7be687f7970f: "2004",
                            dropdown_16234574578704520_choices_c215b446bcdf956d848a8419c1b5a920: "1963",
                            dropdown_16234574578704520_choices_c3395dd46c34fa7fd8d729d8cf88b7a8: "1943",
                            dropdown_16234574578704520_choices_c4de8ced6214345614d33fb0b16a8acd: "1972",
                            dropdown_16234574578704520_choices_c5a4e7e6882845ea7bb4d9462868219b: "1993",
                            dropdown_16234574578704520_choices_c5b2cebf15b205503560c4e8e6d1ea78: "1998",
                            dropdown_16234574578704520_choices_d0fb963ff976f9c37fc81fe03c21ea7b: "2001",
                            dropdown_16234574578704520_choices_d46e1fcf4c07ce4a69ee07e4134bcef1: "1965",
                            dropdown_16234574578704520_choices_d5c186983b52c4551ee00f72316c6eaa: "1992",
                            dropdown_16234574578704520_choices_d68a18275455ae3eaa2c291eebb46e6d: "1987",
                            dropdown_16234574578704520_choices_d77f00766fd3be3f2189c843a6af3fb2: "1958",
                            dropdown_16234574578704520_choices_dc513ea4fbdaa7a14786ffdebc4ef64e: "1990",
                            dropdown_16234574578704520_choices_dd055f53a45702fe05e449c30ac80df9: "1976",
                            dropdown_16234574578704520_choices_de03beffeed9da5f3639a621bcab5dd4: "1947",
                            dropdown_16234574578704520_choices_de73998802680548b916f1947ffbad76: "1971",
                            dropdown_16234574578704520_choices_deb54ffb41e085fd7f69a75b6359c989: "1973",
                            dropdown_16234574578704520_choices_e3408432c1a48a52fb6c74d926b38886: "1956",
                            dropdown_16234574578704520_choices_e4dd5528f7596dcdf871aa55cfccc53c: "1959",
                            dropdown_16234574578704520_choices_e5b294b70c9647dcf804d7baa1903918: "1927",
                            dropdown_16234574578704520_choices_f106b7f99d2cb30c3db1c3cc0fde9ccb: "1961",
                            dropdown_16234574578704520_choices_f22e4747da1aa27e363d86d40ff442fe: "1939",
                            dropdown_16234574578704520_choices_f80bf05527157a8c2a7bb63b22f49aaa: "1980",
                            dropdown_16234574578704520_choices_fb87582825f9d28a8d42c5e5e5e8b23d: "1982",
                            dropdown_16234574578704520_label: "Year of birth:",
                            label_82751524717670350_label: "We still need a few more details:",
                            gigya_complete_registration_screen_caption: "Profile Completion",
                            textbox_136884197726350880_label: "Email:",
                            textbox_65559603100946710_label: "Postcode:",
                            submit_314293454325435_value: "Get The Code",
                            label_1555592368664_label: "A code will be sent to your mobile phone number.",
                            phone_number_input_15254487288447762_choices_0000c04b6a11cb01fa6c351d96951a94: "Anguilla (+1)",
                            phone_number_input_15254487288447762_choices_018ae104e95a884c0ef61987a4bca33b: "Solomon Islands (+677)",
                            phone_number_input_15254487288447762_choices_019e354fde6080c71a2078d7689d015c: "Brazil (+55)",
                            phone_number_input_15254487288447762_choices_02cc7d66e001c3e70d74755b7c3b8cc4: "Philippines (+63)",
                            phone_number_input_15254487288447762_choices_044e84571f705b4449cc30f9010b7457: "Greenland (+299)",
                            phone_number_input_15254487288447762_choices_049c0fef53053801cd4b2dd07d27e34e: "Denmark (+45)",
                            phone_number_input_15254487288447762_choices_093a60d935c4b98fe0974318efefbd2a: "Georgia (+995)",
                            phone_number_input_15254487288447762_choices_09dfbaa95005c05961464f3fd07a73c9: "Gabon (+241)",
                            phone_number_input_15254487288447762_choices_0a07706d6aae7d5fac405e73dca5a230: "Ghana (+233)",
                            phone_number_input_15254487288447762_choices_0a86459132d51157f5b110a28785fab1: "Swaziland (+268)",
                            phone_number_input_15254487288447762_choices_0b67e604b8fe452617cfa3b1ce27d771: "Rwanda (+250)",
                            phone_number_input_15254487288447762_choices_0b6d697f2c0204573a65988cc05949ca: "Venezuela (+58)",
                            phone_number_input_15254487288447762_choices_0b7991bc3d17112c050ad75d7002be4a: "French Polynesia (+689)",
                            phone_number_input_15254487288447762_choices_0c7dd38e5919a23f0fe33ed8e7b61bcd: "Iraq (+964)",
                            phone_number_input_15254487288447762_choices_0eb55a926d3f16275dc53b4bd9559107: "East Timor (+670)",
                            phone_number_input_15254487288447762_choices_0fb4fec2ba2ca49124958fb16365b9e6: "Nicaragua (+505)",
                            phone_number_input_15254487288447762_choices_10491cb01667eed09f957cd7975032cb: "Puerto Rico (+1)",
                            phone_number_input_15254487288447762_choices_10b0f24a19eef030c3e26dca73a591a5: "Macedonia (+389)",
                            phone_number_input_15254487288447762_choices_1179a92ec9a28334e0a559c64f6bbc78: "Mali (+223)",
                            phone_number_input_15254487288447762_choices_12308cc3d4cc2fb855383a8dc9d728bf: "Lithuania (+370)",
                            phone_number_input_15254487288447762_choices_1324137f09564ed3f8370a56c4c646cf: "Togo (+228)",
                            phone_number_input_15254487288447762_choices_15610e11e4fb7489e79c6d1e245b2bdf: "Serbia (+381)",
                            phone_number_input_15254487288447762_choices_17e9204b939277581ea401f786e4d705: "Morocco (+212)",
                            phone_number_input_15254487288447762_choices_183b1e1c670d1ef64d74e32ec4e9348d: "Australia (+61)",
                            phone_number_input_15254487288447762_choices_1ac4bb54e5f417a8ed8bd80d0601696b: "Spain (+34)",
                            phone_number_input_15254487288447762_choices_1c85b37f22e56195407271c65e12f6b2: "Egypt (+20)",
                            phone_number_input_15254487288447762_choices_203161dae0f2145386430c8f78a054c0: "United Kingdom (+44)",
                            phone_number_input_15254487288447762_choices_20d20d19c28939efbd7e6e36a8d3d3ff: "Barbados (+1)",
                            phone_number_input_15254487288447762_choices_212b0d7c2256feb06ee9f0663ecacd1c: "South Africa (+27)",
                            phone_number_input_15254487288447762_choices_232618c6fa5a962c6547def41609ce3e: "Ukraine (+380)",
                            phone_number_input_15254487288447762_choices_23efb14abf1868ae2c351b956fe12278: "Botswana (+267)",
                            phone_number_input_15254487288447762_choices_25f2ba239b091210ca080d221ffbd51d: "Sierra Leone (+232)",
                            phone_number_input_15254487288447762_choices_2655ed45019a53e98278854c1800a41a: "Liechtenstein (+423)",
                            phone_number_input_15254487288447762_choices_267c3d5900a14625ccebf843e1113579: "Pakistan (+92)",
                            phone_number_input_15254487288447762_choices_26cf7de002149e85347c2cddd34c43fb: "Costa Rica (+506)",
                            phone_number_input_15254487288447762_choices_275c81699c9ca9dd1bd589a82f09aff2: "French Guiana (+594)",
                            phone_number_input_15254487288447762_choices_278ec1e91dbd6da31a9546bc16ff9acf: "Cuba (+53)",
                            phone_number_input_15254487288447762_choices_27e4a0c1e5118ea9eb28dc68bb44a389: "Saint Lucia (+1)",
                            phone_number_input_15254487288447762_choices_27fd3852136408b2e80c42abe85fe888: "Benin (+229)",
                            phone_number_input_15254487288447762_choices_28db04efd361dc70b1230cdc1a84cf7a: "Brunei (+673)",
                            phone_number_input_15254487288447762_choices_29d4173c28f9ba028e1fefd8f5b17607: "Jordan (+962)",
                            phone_number_input_15254487288447762_choices_2b7fc2c51021c92e461a91bcd4c77222: "Panama (+507)",
                            phone_number_input_15254487288447762_choices_2b9c96e2e465f06b1e947a1abf1f82cc: "Latvia (+371)",
                            phone_number_input_15254487288447762_choices_2c494efcf244731678fd8c2ef14f3b66: "Bhutan (+975)",
                            phone_number_input_15254487288447762_choices_2d2e0b57e53318d06a3a989618595d2d: "Yemen (+967)",
                            phone_number_input_15254487288447762_choices_2d309595e0f8c76a69fc6b66e3aee2de: "Malta (+356)",
                            phone_number_input_15254487288447762_choices_302f0a2bddb3285a0d7e26676109fc06: "Montenegro (+382)",
                            phone_number_input_15254487288447762_choices_311cfd698e0dc61134cbb6f3b9c91bae: "Gambia (+220)",
                            phone_number_input_15254487288447762_choices_32abf11fb772561b45fae98173cef6f6: "New Caledonia (+687)",
                            phone_number_input_15254487288447762_choices_32c902ff3266e8a06d44121eb60f070b: "United States (+1)",
                            phone_number_input_15254487288447762_choices_3345950e1892b722e378bfe9d845872f: "Slovenia (+386)",
                            phone_number_input_15254487288447762_choices_371ceacf25ed39729bbfcc06c0908bfc: "Ireland (+353)",
                            phone_number_input_15254487288447762_choices_382b4143d3fb755c6553e796350644d3: "Jersey (+44)",
                            phone_number_input_15254487288447762_choices_3a3f7b3a7c161bfe383d008e10fccd4c: "Armenia (+374)",
                            phone_number_input_15254487288447762_choices_3a4a6140cf0ea62d25a9de1a6079458d: "Slovakia (+421)",
                            phone_number_input_15254487288447762_choices_3a78a91cffa196dee4a8454fae5271d4: "Azerbaijan (+994)",
                            phone_number_input_15254487288447762_choices_3c70e69be44a86fc852ef8ec2d3c3d2a: "Tanzania (+255)",
                            phone_number_input_15254487288447762_choices_3ccc0920ecf6aa39031e2309f848f0fc: "British Indian Ocean Territory (+1)",
                            phone_number_input_15254487288447762_choices_3cf400c815b9f3ee81cda1ce6e6aed05: "Greece (+30)",
                            phone_number_input_15254487288447762_choices_3e3c87b19ba3bc4bcf454945c29b6125: "Bermuda (+1)",
                            phone_number_input_15254487288447762_choices_3ee9b3c1ad61a60f5593ff19eb4cb887: "Madagascar (+261)",
                            phone_number_input_15254487288447762_choices_3f689beae4ff52b7021c755fc5ac99e7: "Ecuador (+593)",
                            phone_number_input_15254487288447762_choices_3fc6ed9787b1b760ceabf91679c26878: "Congo (+242)",
                            phone_number_input_15254487288447762_choices_42495073b157f93e836b72b07def2f2c: "Qatar (+974)",
                            phone_number_input_15254487288447762_choices_42f14fd8c4866c266d51ec4718a19158: "Saint Kitts and Nevis (+1)",
                            phone_number_input_15254487288447762_choices_440d1471cbab9266505137c1c45f3ed4: "Uganda (+256)",
                            phone_number_input_15254487288447762_choices_44744c30c3db65036ebb94079c58b6e3: "Colombia (+57)",
                            phone_number_input_15254487288447762_choices_45c9b64a3cecccce49843dbafe6adb64: "Czech Republic (+420)",
                            phone_number_input_15254487288447762_choices_45eb8706e13c8e358d97c730312e90ae: "Grenada (+1)",
                            phone_number_input_15254487288447762_choices_4921a12350b932d23d31d8b5868d6f04: "Lesotho (+266)",
                            phone_number_input_15254487288447762_choices_4955c9c5078a1b26da786e00d4c71829: "Sudan (+249)",
                            phone_number_input_15254487288447762_choices_4a67165a23bf87c2823af4d85209a854: "Hong Kong (+852)",
                            phone_number_input_15254487288447762_choices_4a73df4c96b5d4da40c2a7254604c1ba: "Libya (+218)",
                            phone_number_input_15254487288447762_choices_4b98171607bc7ff3007babec7f3e47da: "Kyrgyzstan (+996)",
                            phone_number_input_15254487288447762_choices_4f0b7f8eb20fb16d579581fb4fd438f6: "Sweden (+46)",
                            phone_number_input_15254487288447762_choices_530f4e0e790a543d9ec308072314beba: "Paraguay (+595)",
                            phone_number_input_15254487288447762_choices_55b7d584f14d787e069917cbcad8f858: "Cameroon (+237)",
                            phone_number_input_15254487288447762_choices_55bb4b263289ff947007a2ff574b8a54: "Moldova (+373)",
                            phone_number_input_15254487288447762_choices_55f06b247ea51b5534cb9b58c530703e: "Gibraltar (+350)",
                            phone_number_input_15254487288447762_choices_58a4655174124fcbec0ea83ed121901e: "Kenya (+254)",
                            phone_number_input_15254487288447762_choices_5a263c957067f1868ed88cf1db1f9691: "China (+86)",
                            phone_number_input_15254487288447762_choices_5ae79ddda6f16ecf9450ebe8c41e268f: "Tajikistan (+992)",
                            phone_number_input_15254487288447762_choices_5c8745a9652fa0fb450e22eee803e8f8: "Chile (+56)",
                            phone_number_input_15254487288447762_choices_5d14311dd7b2184b182eced0db4f2a23: "Suriname (+597)",
                            phone_number_input_15254487288447762_choices_5dfc83751ab9d5ce392283e37225ceeb: "Kazakhstan (+7)",
                            phone_number_input_15254487288447762_choices_6115fc90431687f6fc349bf5bfe58f60: "Burkina Faso (+226)",
                            phone_number_input_15254487288447762_choices_61817bc8a708b5aab1d0dd9467ceabed: "Mauritania (+222)",
                            phone_number_input_15254487288447762_choices_61ef21fdc5515a90cfaa8babfc3cddac: "Singapore (+65)",
                            phone_number_input_15254487288447762_choices_64089efc30466cd81b53e16ea08c67bf: "Belize (+501)",
                            phone_number_input_15254487288447762_choices_6554b2ff3a5978291c0f7376ab26c848: "Syria (+963)",
                            phone_number_input_15254487288447762_choices_6562c71449c1704c676a13e1a5c18bfb: "Congo, The Democratic Republic Of The (+243)",
                            phone_number_input_15254487288447762_choices_65cec708b5d89d0d2457855b9d6a94ac: "Fiji (+679)",
                            phone_number_input_15254487288447762_choices_6674f7653960bbcb2814203115668763: "Wallis And Futuna (+681)",
                            phone_number_input_15254487288447762_choices_669b9b9bbaf86e1a8fc4d8902fc77026: "Italy (+39)",
                            phone_number_input_15254487288447762_choices_66c3ca97838b58714792c897b385edc6: "Mozambique (+258)",
                            phone_number_input_15254487288447762_choices_67927b31be826b2d544f23b3f3d115d7: "Cape Verde (+238)",
                            phone_number_input_15254487288447762_choices_6a75ee0f96c5b8db62a17b1f861e1b5e: "Equatorial Guinea (+240)",
                            phone_number_input_15254487288447762_choices_6b2aa1100bfb1887da27c9cd384e09fe: "Finland (+358)",
                            phone_number_input_15254487288447762_choices_6b7e29c7a90813b182e4e993a44086ff: "Liberia (+231)",
                            phone_number_input_15254487288447762_choices_6bcc55c5eadbded564cf32359773cbfe: "Guernsey (+44)",
                            phone_number_input_15254487288447762_choices_6d27a5e78eccd03ee33d87bf3d2b2cc8: "Reunion (+262)",
                            phone_number_input_15254487288447762_choices_6d3eb5c5a30dc5b6fd0035201cad19e0: "Estonia (+372)",
                            phone_number_input_15254487288447762_choices_6d8723cf044baebe059b9d2d7330ca42: "United Arab Emirates (+971)",
                            phone_number_input_15254487288447762_choices_6eed2e14ccf08f75ae0a55db12e9c653: "Honduras (+504)",
                            phone_number_input_15254487288447762_choices_6f2ecc1c256c31fd43ed1157bccc95b0: "Saint Vincent (+1)",
                            phone_number_input_15254487288447762_choices_6f4c92c83fc32220ed8152ae62bde311: "Romania (+40)",
                            phone_number_input_15254487288447762_choices_7087d94e0dd6463ec57a0f1a55a46cfd: "Haiti (+509)",
                            phone_number_input_15254487288447762_choices_71e3fefdc6441c1c112ef263de1bf8ed: "Mexico (+52)",
                            phone_number_input_15254487288447762_choices_72dace1c7d7c48fe87ad9ef93da8880e: "Palestine (+970)",
                            phone_number_input_15254487288447762_choices_730a5d1990016281cb11952a3f377f69: "Trinidad And Tobago (+1)",
                            phone_number_input_15254487288447762_choices_731fb8dcdfcef1d997aa13322da40476: "Seychelles (+248)",
                            phone_number_input_15254487288447762_choices_749b0cd97119801ff9880e5768ae1ed7: "Turkmenistan (+993)",
                            phone_number_input_15254487288447762_choices_75037f764cb144b6889a5f8171c1a27c: "Cayman Islands (+1)",
                            phone_number_input_15254487288447762_choices_7d307fbc5ebe3972706e3d898cc4be25: "Hungary (+36)",
                            phone_number_input_15254487288447762_choices_7db34ba7afccf77c4eb1ae5e3f530503: "Bolivia (+591)",
                            phone_number_input_15254487288447762_choices_7eea32ecaf8c58bc414082080b65dbb3: "Kuwait (+965)",
                            phone_number_input_15254487288447762_choices_8192604e90d83cba3dccbad2eddf1641: "Albania (+355)",
                            phone_number_input_15254487288447762_choices_87bb8668cb0004ce94f6aedc96af8267: "Ethiopia (+251)",
                            phone_number_input_15254487288447762_choices_88c55d93f6412dac30afef87ec950dd0: "Maldives (+960)",
                            phone_number_input_15254487288447762_choices_8d8d9f79dc287c775bb06fffc8ae1916: "Burundi (+257)",
                            phone_number_input_15254487288447762_choices_8e64ea7e5afbec88581b9e3c5874c142: "Russia (+7)",
                            phone_number_input_15254487288447762_choices_9072a83b2e107216cebd634a35592127: "Saudi Arabia (+966)",
                            phone_number_input_15254487288447762_choices_92307f98981c17da9fcd08a423b23c19: "Djibouti (+253)",
                            phone_number_input_15254487288447762_choices_92c3161ef8c78034409b97dba2732119: "Guatemala (+502)",
                            phone_number_input_15254487288447762_choices_94a38fcf50215c63446441275bd91cbc: "Poland (+48)",
                            phone_number_input_15254487288447762_choices_950483525aa1ecaf75bb5491f351f24e: "Martinique (+596)",
                            phone_number_input_15254487288447762_choices_990e8ace85837fccd2deb0a7ae3321a2: "Senegal (+221)",
                            phone_number_input_15254487288447762_choices_9d79de4e7e64235407d4f3133fe392bc: "Malawi (+265)",
                            phone_number_input_15254487288447762_choices_9f466db3d9d9bacd7cf95e5b1e8e5441: "Israel (+972)",
                            phone_number_input_15254487288447762_choices_a0b099b5cd051341b3bf75beb79c2ff8: "Viet Nam (+84)",
                            phone_number_input_15254487288447762_choices_a11fed9a6570c0647a1baac8c1dac6d7: "India (+91)",
                            phone_number_input_15254487288447762_choices_a65485c739f76bff7e05413d23e7a03e: "Bahrain (+973)",
                            phone_number_input_15254487288447762_choices_a7739d75d45b95186806f13f033335fd: "Vanuatu (+678)",
                            phone_number_input_15254487288447762_choices_a87b73b3e1dba418432eb94a08432244: "Angola (+244)",
                            phone_number_input_15254487288447762_choices_a8baa0e29d70f8ad7dfc86916fb39346: "Portugal (+351)",
                            phone_number_input_15254487288447762_choices_a9dc19bb94c6904a27d41ef904232199: "Tonga (+676)",
                            phone_number_input_15254487288447762_choices_aaf2b5c1afc80bef1a58a669fa7dc9bf: "Belgium (+32)",
                            phone_number_input_15254487288447762_choices_ab5694a7d9ab79112fe99d42cbc7a0ef: "Argentina (+54)",
                            phone_number_input_15254487288447762_choices_ac2cec8fff07429f388098bb9aab86a4: "Cambodia (+855)",
                            phone_number_input_15254487288447762_choices_acc738496f403a6822eb6b395c0ea4ee: "Thailand (+66)",
                            phone_number_input_15254487288447762_choices_ad51c2f6e99db2db0da65eefc00273aa: "Sri Lanka (+94)",
                            phone_number_input_15254487288447762_choices_afd663ccf14ce0ee7f81613b40b78d18: "Montserrat (+1)",
                            phone_number_input_15254487288447762_choices_affb5abfa8f1922289cc313edf80b231: "Macao (+853)",
                            phone_number_input_15254487288447762_choices_b042bd504749951ebb8fc489795a286f: "Uruguay (+598)",
                            phone_number_input_15254487288447762_choices_b1b400960194ab272577c6b573db2d9c: "Bangladesh (+880)",
                            phone_number_input_15254487288447762_choices_b6507bb6f51b01321a3b87b8d0acc714: "Luxembourg (+352)",
                            phone_number_input_15254487288447762_choices_ba08cdf6c826861e2a337576df8fe264: "Switzerland (+41)",
                            phone_number_input_15254487288447762_choices_ba27c72455163e3eb029847d532650c6: "Dominica (+1)",
                            phone_number_input_15254487288447762_choices_ba6cd9fe5a3ac9438f09f845773bc2b7: "Falkland Islands (Malvinas) (+500)",
                            phone_number_input_15254487288447762_choices_bc6935c7c49ab605dda2d1db14d391d4: "Andorra (+376)",
                            phone_number_input_15254487288447762_choices_bcdb41b851402fa9c47dbb0e4bdfa28d: "Afghanistan (+93)",
                            phone_number_input_15254487288447762_choices_bcded8077ca928b0ac5d7b6dd244b9f3: "Tunisia (+216)",
                            phone_number_input_15254487288447762_choices_bd7b017b83c86393d5afbccf09b39535: "Belarus (+375)",
                            phone_number_input_15254487288447762_choices_be31195109c26343b81aca710e3f08be: "Northern Mariana Islands (+1)",
                            phone_number_input_15254487288447762_choices_c0593b6d09969bf4c32a684df2ac4a7d: "Guam (+1)",
                            phone_number_input_15254487288447762_choices_c0f4c393ade23e94388a619d2d28469c: "Cyprus (+357)",
                            phone_number_input_15254487288447762_choices_c12934b2fb7a79f37d8d2730a02ff325: "Bosnia And Herzegovina (+387)",
                            phone_number_input_15254487288447762_choices_c2445ca2adaa6d2352e6b5342c51848a: "Myanmar (+95)",
                            phone_number_input_15254487288447762_choices_c5dd5aadb4791d0799ddf499fbacfd3a: "Turkey (+90)",
                            phone_number_input_15254487288447762_choices_c6008329def3854ab786638735e3dcf8: "Virgin Islands, British (+1)",
                            phone_number_input_15254487288447762_choices_c683d0ed1e24da7b22c9c5283c1c0822: "Iran (+98)",
                            phone_number_input_15254487288447762_choices_c87c486958dcd8cfb22f6fac15bd3c36: "Aruba (+297)",
                            phone_number_input_15254487288447762_choices_c9530e692e6c6b0631172c859262ce15: "Antigua and Barbuda (+1)",
                            phone_number_input_15254487288447762_choices_c9f85d89f977d07694b8847b2f21c17a: "Niger (+227)",
                            phone_number_input_15254487288447762_choices_cb3868a3df027a768524b1799256d7e9: "Bulgaria (+359)",
                            phone_number_input_15254487288447762_choices_cb425265b02770cbf6aa66d862bf17d5: "Jamaica (+1)",
                            phone_number_input_15254487288447762_choices_cc6ed73bf623aeb7707047ae998d364a: "Canada (+1)",
                            phone_number_input_15254487288447762_choices_ce097694c2eb14ad8ded90d528cb1b5a: "Malaysia (+60)",
                            phone_number_input_15254487288447762_choices_ce79906b4a47aea9faa59151bd0a8c06: "Faroe Islands (+298)",
                            phone_number_input_15254487288447762_choices_d07d47ea18447405dec7ce0d8d61a448: "Zimbabwe (+263)",
                            phone_number_input_15254487288447762_choices_d08b3f47c06392c08c3863c3e8453ffc: "Cote d\\'Ivoire (+225)",
                            phone_number_input_15254487288447762_choices_d239539b3277579fa37285d30b9c4c3e: "Algeria (+213)",
                            phone_number_input_15254487288447762_choices_d6318a3f72bb34864386b79edbc391c7: "Peru (+51)",
                            phone_number_input_15254487288447762_choices_d654e0248440598c819c9e1cec040605: "Laos (+856)",
                            phone_number_input_15254487288447762_choices_d67b6f9fe85b2bc4969d07b757ed28ac: "Japan (+81)",
                            phone_number_input_15254487288447762_choices_d9ced68e11939c33ce6512548de5473e: "Indonesia (+62)",
                            phone_number_input_15254487288447762_choices_dc134898cc21c30fa1a767dc889bc9c7: "Norway (+47)",
                            phone_number_input_15254487288447762_choices_de08effc4128aedd10379ea73823d5cc: "Nepal (+977)",
                            phone_number_input_15254487288447762_choices_de435b513ccda1ac711ff10954cb25bd: "New Zealand (+64)",
                            phone_number_input_15254487288447762_choices_de9675f429c298a1d3823e8cb122d99b: "Somalia (+252)",
                            phone_number_input_15254487288447762_choices_e0836b3330a25a9b8e6b90060cb95a5e: "Nigeria (+234)",
                            phone_number_input_15254487288447762_choices_e1329e5b6318c778116918397ebc9c4f: "Uzbekistan (+998)",
                            phone_number_input_15254487288447762_choices_e154e7a6de015871c40a71c833bbd32b: "Guadeloupe (+590)",
                            phone_number_input_15254487288447762_choices_e3b73ca00640a2e9cc7819c373365f1d: "Chad (+235)",
                            phone_number_input_15254487288447762_choices_e40528d8028f52e2724182c93e5aa385: "Netherlands Antilles (+599)",
                            phone_number_input_15254487288447762_choices_e62457f72d933dbcb44aab91dfda8874: "Mongolia (+976)",
                            phone_number_input_15254487288447762_choices_e63eeb8515dbb9e3bc9af51ad6583a55: "El Salvador (+503)",
                            phone_number_input_15254487288447762_choices_e6f770859fde5760cbcf83beaf9eb993: "Guyana (+592)",
                            phone_number_input_15254487288447762_choices_e6ffc6d8240e701ece6599ec8cf45cf4: "Taiwan (+886)",
                            phone_number_input_15254487288447762_choices_e8258ab6de76b8219d7102f1b44c845d: "Isle Of Man (+44)",
                            phone_number_input_15254487288447762_choices_e909c2d7067ea37437cf97fe11d91bd0: "country",
                            phone_number_input_15254487288447762_choices_ec63c956defbd581c0fd9518e2aa3d41: "Lebanon (+961)",
                            phone_number_input_15254487288447762_choices_ee3d98f7ee6c591a0102fd475fac8aa3: "France (+33)",
                            phone_number_input_15254487288447762_choices_efd933f4decb4bb1004e4241e0731ed4: "Dominican Republic (+1)",
                            phone_number_input_15254487288447762_choices_f0e7f4c4b4e525ee7957a3fea865118a: "Mauritius (+230)",
                            phone_number_input_15254487288447762_choices_f0e977f8e3c559a6a21b06ac12cfd149: "Monaco (+377)",
                            phone_number_input_15254487288447762_choices_f163162463d352ff5c3c24301c39a702: "Germany (+49)",
                            phone_number_input_15254487288447762_choices_f265600c9d75b9386b863d2d74f56959: "Namibia (+264)",
                            phone_number_input_15254487288447762_choices_f29a808e9bb2c0baa651ff9ef78ad4c4: "Guinea (+224)",
                            phone_number_input_15254487288447762_choices_f3b0eec83fb9f59726a0a52920acaa13: "Oman (+968)",
                            phone_number_input_15254487288447762_choices_f73f1d7ba0caf645118a9e8149ec346b: "Zambia (+260)",
                            phone_number_input_15254487288447762_choices_f9096b7627dd12471bc163cb0e1392bb: "Korea, South (+82)",
                            phone_number_input_15254487288447762_choices_fa4671e2748a698f1b80a643827f5fa1: "Croatia (+385)",
                            phone_number_input_15254487288447762_choices_fb7b615ab2121ec76cecb5fa2cad104e: "Austria (+43)",
                            phone_number_input_15254487288447762_choices_fcacde06c2b867e33fbc821f32d4c765: "Iceland (+354)",
                            phone_number_input_15254487288447762_choices_fec85feea479735d94a3f27756825567: "Netherlands (+31)",
                            phone_number_input_15254487288447762_display_name: "phone number",
                            phone_number_input_15254487288447762_legend: "Enter your mobile number:",
                            phone_number_input_15254487288447762_placeholder: "subscriber number",
                            gigya_mobile_login_screen_caption: "Log In With Your Mobile Phone",
                            submit_31429890890890_value: "Verify",
                            label_1555593146287_label: 'Enter the code sent to your phone <a data-binding="true" data-switch-screen="gigya-mobile-login-screen"> {{accountInfo.phoneNumber}}\n <i class="gigya-pencil"></i></a>',
                            label_546546790858_label: 'Didn\'t get the code? <a data-disable-on-render="true" data-gigya-api-link="accounts.otp.sendCode">Click Here</a>',
                            gigya_mobile_verification_screen_caption: "Enter The Code",
                            submit_137794634987176350_value: "Get The Code",
                            label_56426764264083580_label: "A code will be sent to the new email for\n verification. If you don't validate with the code, your email will remain unchanged.",
                            gigya_change_email_screen_caption: "Change Your Email",
                            textbox_20913098960397852_label: "Email",
                            submit_106757411555670860_value: "Verify",
                            label_124580104205672500_label: 'Enter the code sent to your email <a data-binding="true" data-switch-screen="gigya-change-email-screen"> {{accountInfo.email}}\n <i class="gigya-pencil"></i></a>',
                            label_45421446589093550_label: 'Didn\'t get the code? <a data-disable-on-render="true" data-gigya-api-link="accounts.otp.sendCode">Click Here</a>',
                            gigya_email_code_verification_screen_caption: "Enter The Code",
                            submit_81725475708397440_value: "Submit",
                            label_47776247120507590_label: "Please enter your email address to reset your password:",
                            link_125263109889403890_label: "Back to Login",
                            loginid_1762354922073180_label: "Email:",
                            gigya_forgot_password_screen_caption: "Forgot Password",
                            label_32342199862391930_label: "An email regarding your password change has been sent to your email address.",
                            link_64563424514074200_label: '<input tabindex="0" type="button" value="Back to Login">',
                            gigya_forgot_password_success_screen_caption: "Forgot Password",
                            submit_1640252814218_value: "Get The Code",
                            label_1640252757841_label: "A code will be sent to your mobile phone number.",
                            gigya_mobile_forgot_password_screen_caption: "Forgot Password",
                            submit_1640253788797_value: "Verify",
                            label_1640253752471_label: 'Enter the code sent to your phone <a data-binding="true" data-switch-screen="gigya-mobile-forgot-password-screen"> {{accountInfo.phoneNumber}}\n <i class="gigya-pencil"></i></a>',
                            label_1640253816271_label: 'Didn\'t get the code? <a data-disable-on-render="true" data-gigya-api-link="accounts.otp.sendCode">Click Here</a>',
                            gigya_mobile_forgot_password_verification_screen_caption: "Enter The Code",
                            submit_48518527117736720_value: "Submit",
                            label_31901611131936240_label: "Please enter a new password:",
                            password_24487772290225964_label: "New password:",
                            password_53816046531769560_label: "Confirm password:",
                            gigya_reset_password_screen_caption: "Reset Password",
                            label_43754194743648540_label: "Your password has been changed successfully.<br>Log in with your new password.",
                            link_122104312720648740_label: '<input tabindex="0" type="button" value="Back to Login">',
                            gigya_reset_password_success_screen_caption: "Reset Password",
                            submit_65931489860940900_value: "Submit",
                            label_16240548663414458_label: "For security reasons, your password needs changing:",
                            password_101426512808638880_label: "Current password:",
                            password_17036595420608126_label: "New password:",
                            password_19612919353342308_label: "Confirm new password:",
                            gigya_password_change_required_screen_caption: "Password Change",
                            submit_59040383411520670_value: "Submit",
                            label_114745734160901840_label: "For your security, a verification email has been sent to you. Please follow the instructions in the\n email to verify your account.<br><br>To resend the verification email, please enter your email\n address below and click Submit.",
                            label_135099439990555600_label: '<a data-switch-screen="gigya-login-screen">Log in with a different account</a>',
                            gigya_verification_pending_screen_caption: "Email Verification",
                            textbox_53553186815043370_label: "Email:",
                            gigya_tfa_registration_screen_caption: "Securing Your Account",
                            gigya_tfa_verification_screen_caption: "Verifying Your Account",
                            label_4529849558267223_label: "A verification email with a link to verify your account has been sent to you.",
                            link_19224603862200704_label: '<input type="button" class="gigya-button" value="OK" tabindex="0">',
                            gigya_verification_sent_screen_caption: "Email Verification",
                            submit_55211342470297420_value: "Submit",
                            checkbox_78285840404140770_label: 'I have read and understood the <a class="gigya-terms-of-use" href="#">Terms of Use</a>',
                            header_51697213698355980_label: "Provide a password:",
                            password_107891164873405600_placeholder: "Password",
                            password_76732333762278900_placeholder: "Confirm password",
                            gigya_lite_account_progression_screen_caption: "Complete Your Account",
                            submit_1656946025416_value: "Register Device",
                            label_1656946025416_label: "Please enter the verification code you see on your device",
                            gigya_device_code_verification_screen_caption: "Device Registration",
                            textbox_1656946025416_placeholder: "Enter Verification Code",
                            label_1656948542313_label: "<p>Thank you!</p>\n <p>Your device has been successfully registered.</p>",
                            link_1656954205211_label: '<input type="button" class="gigya-button" value="Done" tabindex="0">',
                            gigya_device_code_thank_you_screen_caption: "Registration Successful",
                            passkey_register_widget_148589704012182200_value: "Add Passkey",
                            header_1941735297197556_label: "Sign in with passkey",
                            header_2741570414924430_label: "Better security and account protection",
                            header_8427604072677286_label: "No need to remember a password",
                            label_126523004556259340_label: "Passkeys are secure and phishing resistant",
                            label_85984667306998110_label: "Passkeys allow you to log in using fingerprint or face recognition",
                            link_63641313208939464_label: "Continue",
                            gigya_passkey_registration_screen_caption: "Passkey Register"
                        }
                    }
                }
            }
        },
        resolver: {
            defaultProccessor: function(f, p) {
                var h = f.toLowerCase(), v = h.indexOf("-");
                switch(-1 != v && (h = h.substring(v + 1, h.length)), h){
                    case "bold":
                    case "italic":
                    case "underline":
                        return "true" == p.toString().toLowerCase();
                    case "width":
                    case "height":
                        return p.replace("%", "");
                    case "size":
                        return parseInt(p);
                    default:
                        return p;
                }
            }
        }
    },
    _currColorIdx: 0,
    configKey: "gig_loggerConfig",
    _random: function() {
        return Math.random() * 100;
    },
    _jsonp: function loggerJsonp1(f, p) {
        var h = document.createElement("script");
        h.src = f + "?" + p;
        h.type = "text/javascript";
        h.onload = function() {
            document.getElementsByTagName("head")[0].removeChild(h);
        };
        document.getElementsByTagName("head")[0].appendChild(h);
    }
};
export const events = {
    global: {
        _activeNamespaces: {
            socialize: 1
        },
        add: function add1(f, p, h, v, w, m) {
            if (h === void 0) {
                h = "other";
            }
            if (w === void 0) {
                w = "socialize";
            }
            var b = w + "_" + getEventHandlerName(f);
            if (!_eventHandlers[b]) {
                _eventHandlers[b] = [];
            }
            var y = {
                handler: p,
                type: h,
                context: v,
                params: m,
                fullEventName: b
            };
            _eventHandlers[b].push(y);
            if (!this._activeNamespaces[w] && _.apiAdapter) {
                _.apiAdapter.registerForNamespaceEvents(w);
            }
            this._activeNamespaces[w] = 1;
            var S = _pendingEvents[b];
            if (S && h == "other") {
                _pendingEvents[b] = [];
                for(var E = 0; E < S.length; E++){
                    var C = S[E];
                    dispatchRegisteredHandlers(C.eventObj, C.params, C.preProcess);
                }
            }
            return y;
        },
        remove: function remove1(f, p) {
            if (_eventHandlers[f]) {
                arrayUtils.removeByValue(_eventHandlers[f], p);
            }
        },
        dispatch: function dispatch1(f, p) {
            var h = 0;
            var v = f.isInternal;
            var w = f["eventName"].split(",");
            LegacyLogger_1.addLog('Dispatching global event "' + f["eventName"] + '" with this event object', f);
            for(var m = 0; m < w.length; m++){
                var b = w[m].split(".");
                var y = b.length > 1 ? b.shift() : "socialize";
                var S = b[0];
                var E = getEventHandlerName(S);
                var C = y + "_" + E;
                var I = objectUtils.clone(_eventHandlers[C]) || [];
                var R = objectUtils.clone(f);
                R["isGlobal"] = true;
                R.eventName = S;
                R.fullEventName = w[m];
                if (p) {
                    if (p.source) R.source = p.source;
                    if (p.sourceData) R.sourceData = p.sourceData;
                    if (p.context) R.context = p.context;
                }
                var A = [
                    "component"
                ];
                if (!v) A.push("other");
                for(var U = 0; U < A.length; U++){
                    var x = A[U];
                    for(var N = 0; N < I.length; N++){
                        var P = I[N];
                        if (P.type == x) {
                            var O = objectUtils.clone(R);
                            if (!O["context"] && P.context) {
                                O["context"] = P["context"];
                            }
                            if (!O["context"]) {
                                delete O["context"];
                            }
                            if (x !== "component") {
                                h++;
                                InternalFlows_1.handleSpecialFields(O);
                            }
                            if (P.params && P.params["signKey"]) {
                                O["UIDSignature"] = f["signKeysUIDSignature"][P.params["signKey"]];
                                delete O["signKeysUIDSignature"];
                            }
                            try {
                                P.handler(O);
                            } catch (p) {
                                LegacyLogger_1.addLog('Error while trying to invoke "' + f["eventName"] + '" global event handler', p);
                            }
                        }
                    }
                }
                if (!v) {
                    events._dispatchFromMaps(R, true);
                }
                var D = window["GenesisExchange_Gigya"];
                var L = window["gigya_omniture_conf"];
                var T = window["myOmnitureIntegrationFunc"];
                if (!v && typeof D != "undefined" && typeof L != "undefined" && y == "socialize") {
                    var F = new D(L);
                    F.processAction(R);
                    if (typeof T != "undefined") {
                        T(L, R);
                    }
                }
            }
            return h;
        },
        dispatchWhenHandlerAdded: function dispatchWhenHandlerAdded1(f, p, h) {
            if (p === void 0) {
                p = {};
            }
            var v = f["eventName"].split(".");
            var w = v.length > 1 ? v.shift() : "socialize";
            var m = v[0];
            dispatchRegisteredHandlers(f, p, h, function(v) {
                if (v == 0) {
                    var b = "on" + m.substring(0, 1).toUpperCase() + m.substring(1);
                    var y = w + "_" + b;
                    if (!_pendingEvents[y]) _pendingEvents[y] = [];
                    _pendingEvents[y].push({
                        eventObj: f,
                        params: p,
                        preProcess: h
                    });
                }
            });
        },
        dispatchWhenHandlersAdded: function dispatchWhenHandlersAdded1(f, p, h, v) {
            if (h === void 0) {
                h = {};
            }
            for(var w = 0, m = f; w < m.length; w++){
                var b = m[w];
                dispatchWhenHandlerAdded(tslib_1.__assign({
                    eventName: b
                }, p), h, v);
            }
        },
        getEventsForOperation: function getEventsForOperation1(f) {
            var p = [];
            if (f.toLowerCase().indexOf("login") != -1) {
                if (this._activeNamespaces.socialize) p.push("socialize.login");
                if (this._activeNamespaces.accounts) p.push("accounts.login");
            } else if (f.toLowerCase().indexOf("addconnection") != -1) {
                if (this._activeNamespaces.socialize) p.push("socialize.connectionAdded");
            }
            return p.join(",");
        }
    },
    addMap: function addMap1(f) {
        defaultEventMaps.splice(0, 0, f);
    },
    dispatchErrorFromResponse: function dispatchErrorFromResponse1(f, p, h) {
        if (!p) {
            p = {};
        }
        var v = p;
        if (v.response) {
            v = v.response;
        }
        var w = {
            eventName: "error",
            status: v.status ? v.status : "FAIL",
            statusMessage: v.statusMessage ? v.statusMessage : "General Server Error",
            errorMessage: v.errorMessage ? v.errorMessage : "General Server Error",
            errorDetails: v.errorDetails ? v.errorDetails : "",
            errorCode: v.errorCode ? v.errorCode : 500001,
            response: p
        };
        objectUtils.add(w, h);
        return dispatchForWidget(w, f);
    },
    dispatchInvalidParamError: function dispatchInvalidParamError1(f, p) {
        var h = {
            eventName: "error"
        };
        if (typeof f[p] == "undefined" || f[p] == null) {
            h.errorCode = GSErrors_1.GSErrors.MISSING_REQUIRED_PARAMETER;
            h.errorMessage = "Missing_required_parameter (" + p + ")";
        } else {
            h.errorCode = GSErrors_1.GSErrors.INVALID_PARAMETER_VALUE;
            h.errorMessage = "Invalid_parameter_value (" + p + ")";
        }
        h.status = h.errorCode;
        h.statusMessage = h.errorMessage;
        dispatchForWidget(h, f);
    },
    dispatchForWidget: function dispatchForWidget1(f, p) {
        if (!f || !f.eventName) return;
        var h = f.eventName;
        LegacyLogger_1.addLog('Dispatching widget event "' + h + '" for ' + p.lastSource + " with this event object", f);
        InternalFlows_1.handleSpecialFields(f);
        var v = h.split(",");
        var w;
        for(var m = 0; m < v.length; m++){
            var b = v[m];
            var y = getEventHandlerName(b);
            if (p) {
                if (p.context) {
                    f.context = p.context;
                }
                if (p.source) {
                    f.source = p.source;
                }
                if (p.sourceData) {
                    f.sourceData = p.sourceData;
                }
                if (p.containerID) {
                    f.sourceContainerID = p.containerID;
                }
                if (p.instanceID) {
                    f.instanceID = p.instanceID;
                }
            }
            if (p[y]) {
                w = dispatchEventObject(p[y], f);
            }
            if (typeof w === "undefined") {
                w = true;
            }
            if (b.indexOf("login") == -1 && b.indexOf("logout") == -1 && b != "connectionRemoved" && b != "connectionAdded") {
                _dispatchFromMaps(f);
                var S = window["GenesisExchange_Gigya"];
                var E = window["gigya_omniture_conf"];
                var C = window["myOmnitureIntegrationFunc"];
                if (typeof S != "undefined" && typeof E != "undefined") {
                    var I = new S(E);
                    I.processAction(f);
                    if (typeof C != "undefined") {
                        C(E, f);
                    }
                }
            }
        }
        return w;
    },
    dispatchEventObject: function dispatchEventObject1(f, p) {
        var h;
        try {
            if (typeof f == "function") {
                h = f(p);
            } else if (!(f instanceof Array)) {
                LegacyLogger_1.addLog("Not a function or function array registered to event", f);
            } else {
                arrayUtils.forEach(f, function(f) {
                    if (typeof f == "function") {
                        f(p);
                    } else {
                        LegacyLogger_1.addLog("Not a function registered to event: " + f, f);
                    }
                });
            }
        } catch (v) {
            LegacyLogger_1.addLog("Error invoking function registered to event", f);
        }
        return h;
    },
    _dispatchFromMaps: function _dispatchFromMaps1(f, p) {
        if (p === void 0) {
            p = false;
        }
        var h = [];
        var v = false;
        for(var w = 0; w < defaultEventMaps.length; w++){
            var m = defaultEventMaps[w].eventMap;
            var b = defaultEventMaps[w].defaultMethod;
            for(var y = 0; y < m.length; y++){
                var S = m[y];
                var E = [];
                if (!S.args) S.args = [];
                for(var C = 0; C < S.args.length; C++){
                    if (S.args[C] == "$event") {
                        E.push(f);
                    } else {
                        E.push(templatesUtils.fill(S.args[C], f));
                    }
                }
                var I = "," + S.events.toLowerCase() + ",";
                if (I.indexOf(",*,") != -1 || (I.indexOf("," + "on" + f.eventName.toLowerCase() + ",") != -1 || I.indexOf("," + f.eventName.toLowerCase() + ",") != -1) && (!f.source && !S.sources || !S.sources || S.sources.indexOf(f.source) != -1)) {
                    h.push(S);
                    var R = S.method ? S.method : b;
                    try {
                        R.apply(this, E);
                    } catch (f) {
                        LegacyLogger_1.addLog("Error invoking function registered to events map's method", R);
                    }
                    if (S.override) {
                        v = true;
                    }
                }
            }
            if (v) break;
        }
    }
};
export const log = {
    CONSOLE_LOG_LEVELS: [
        "debug",
        "info",
        "log",
        "warn",
        "error"
    ],
    selectedConsoleLogLevels: [],
    _log: [],
    enable: function enable1() {
        cookie_1.default.set("_gig_dbgConsole_log", "1", null);
    },
    disable: function disable1() {
        cookie_1.default.set("_gig_dbgConsole_log", "0", null);
    },
    _isEnabled: function _isEnabled1() {
        var f = !localInfo.isNativeMobileApp && cookie_1.default.get("_gig_dbgConsole_log");
        if (typeof f !== "undefined" && f != null) {
            return f === "1";
        }
        return exports.selectedConsoleLogLevels.length > 0;
    },
    addLog: function addLog1(f, p, h) {
        if (h === void 0) {
            h = false;
        }
        if (_isEnabled() || h) {
            var v = f;
            p = objectUtils.clone(p, true, false, 4, null, true);
            if (p != null) v += ":" + (typeof p == "object" ? "\n" : "") + JSONUtils.serialize(p, true, true);
            if (h && typeof console == "object" && console.log) console.log(v);
            if (_isEnabled()) {
                exports._log.push(v);
                if (document.getElementById("gigya_log") != null && show) show();
                var w;
                if (arrayUtils.indexOf(exports.CONSOLE_LOG_LEVELS, f) != -1) w = f;
                else w = "log";
                _.apiAdapter.onJSLog(w, v);
            }
        }
    },
    logCall: function logCall1(f, p, h) {
        if (!h) h = p.lastSource;
        addLog("Calling " + f + (h && h != f ? " for " + h : "") + (p.source && h != p.source ? " initiated from " + p.source : "") + " with these params", p);
    },
    debug: function debug1() {
        scriptUtils.load(cdn_1.getCdnResource("/js/gigya.services.socialize.plugins.log.min.js"), null, function() {
            showConfig();
        }, true);
    },
    showLog: function showLog1() {
        scriptUtils.load(cdn_1.getCdnResource("/js/gigya.services.socialize.plugins.log.min.js"), null, function() {
            show();
        }, true);
    },
    show: function show1() {},
    showConfig: function showConfig1() {}
};
export const legacyReports = {
    trackAddressBarShares: function trackAddressBarShares1() {
        if (thisScript.globalConf["trackAddressBarShares"]) {
            var f = _.apiAdapter.getTokenParam(thisScript.APIKey, "UUID");
            var p = document.location.href.split("#");
            if (p.length == 1 || p[1] == "" || p[1] == "guid=_") {
                document.location.replace("#guid=" + (f ? f : "_"));
            }
        }
    },
    report: function report1(f, p, h, v, w, m, b) {
        if (m === void 0) {
            m = {};
        }
        if (b === void 0) {
            b = false;
        }
        var y = objectUtils.removeUndefined({
            name: f,
            time: new Date().getTime().toString(),
            source: v,
            sourceData: w,
            reportData: m,
            cid: h
        });
        if (!b) {
            if (!exports.queue) exports.queue = [];
            exports.queue.push(y);
        } else {
            var S = [
                y
            ];
            gscounters.sendReport({
                reports: S,
                noAuth: !isAuthDataRequired(S)
            });
        }
    },
    init: function init1() {
        setInterval(sendReports, 5000);
    },
    reportLoad: function reportLoad1(f, p) {
        if (!p._reportedLoad) {
            p._reportedLoad = true;
            var h = "load";
            if (f == "gigya.socialize.plugins.reactions.showReactionsBarUI") return;
            if (f == "gigya.socialize.plugins.simpleshare.showSimpleShareUI") {
                h = "loadSimple";
            }
            report(h, p.APIKey, p.cid, p.source, p.sourceData);
        }
    }
};
export const fidm = {
    saml: {
        initSSO: function initSSO1(f, p) {
            if (p === void 0) {
                p = true;
            }
            var h = utils_1.getLoginTokenExpiration(apiKey);
            if (!p) {
                var v = getLoginToken();
                return redirectToSamlEndPoint("idp/sso/init", tslib_1.__assign({
                    loginToken: v,
                    loginTokenExp: h
                }, f));
            }
            var w = getProxyUrl();
            window.location.href = URLUtils.addParamsToURL(w, objectUtils.merge([
                {
                    mode: "initSSO"
                },
                tslib_1.__assign({
                    loginTokenExp: h
                }, f)
            ]));
        },
        continueSSO: function continueSSO1(f, p) {
            if (f === void 0) {
                f = {};
            }
            if (p === void 0) {
                p = true;
            }
            var h = URLUtils.getParamsFromURL(location.href);
            var v = h["samlContext"];
            var w = utils_1.getLoginTokenExpiration(apiKey);
            if (!p) {
                var m = getLoginToken();
                return redirectToSamlEndPoint("idp/sso/continue", tslib_1.__assign({
                    loginToken: m,
                    samlContext: v,
                    loginTokenExp: w
                }, f));
            }
            var b = getProxyUrl();
            window.location.href = URLUtils.addParamsToURL(b, {
                mode: "afterLogin",
                samlContext: v,
                loginTokenExp: w
            });
        },
        cancelSSO: function cancelSSO1(f, p) {
            if (p === void 0) {
                p = true;
            }
            var h = URLUtils.getParamsFromURL(location.href);
            var v = h["samlContext"];
            if (!p) {
                return redirectToSamlEndPoint("idp/sso/cancel", tslib_1.__assign(tslib_1.__assign({
                    samlContext: v
                }, f), {
                    cancelCode: encodeURIComponent(f.cancelCode),
                    statusCode: encodeURIComponent(f.statusCode)
                }));
            }
            var w = getProxyUrl();
            window.location.href = URLUtils.addParamsToURL(w, {
                mode: "cancel",
                samlContext: v,
                cancelCode: f === null || f === void 0 ? void 0 : f.cancelCode,
                statusCode: f === null || f === void 0 ? void 0 : f.statusCode
            });
        },
        logoutSSO: function logoutSSO1(f, p) {
            if (p === void 0) {
                p = true;
            }
            var h = URLUtils.getParamsFromURL(location.href);
            var v = h["samlContext"];
            var onLogoutResponse1 = function(h) {
                if (h.errorCode === GSErrors_1.GSErrors.OK && !p) {
                    return redirectToSamlEndPoint("idp/slo/finalize", tslib_1.__assign({
                        samlContext: v
                    }, f));
                }
                var w = getProxyUrl();
                window.location.href = URLUtils.addParamsToURL(w, {
                    mode: "logout",
                    samlContext: v
                });
            };
            socialize.logout({
                callback: onLogoutResponse1,
                samlContext: v
            });
        }
    },
    oidc: {
        op: {
            getContext: function(f) {
                var p = f.opKey, h = tslib_1.__rest(f, [
                    "opKey"
                ]);
                return tslib_1.__awaiter(this, void 0, gigya.Promise, function() {
                    return tslib_1.__generator(this, function(f) {
                        return [
                            2,
                            Uri_1.Uri.parse(OidcOpApi.baseUrl(p) + "/sso/getContext").addToSearch(h).fetch()
                        ];
                    });
                });
            },
            redirectToContinue: function(f) {
                var p = f.opKey, h = tslib_1.__rest(f, [
                    "opKey"
                ]);
                HTTP_1.redirect(OidcOpApi.baseUrl(p) + "/authorize/continue", [
                    h
                ], "GET");
            },
            deviceContinue: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            },
            getContextData: function() {
                var f = [];
                for(var p = 0; p < arguments.length; p++){
                    f[p] = arguments[p];
                }
                var h = objectUtils.merge([
                    f
                ]);
                var fnRun1 = function() {
                    if (h.lang) {
                        h._explicitLang = true;
                    }
                    var f = objectUtils.merge([
                        thisScript.globalConf,
                        h
                    ]);
                    _this.run(f, h);
                };
                if (!thisScript || !thisScript.globalConf) {
                    queueUtils.queueForExecution("API", fnRun1);
                } else {
                    fnRun1();
                }
            }
        }
    }
};
export const globalAccount = {};
export const GSErrors = {
    0: "OK",
    100001: "DATA_PENDING",
    200001: "OPERATION_CANCELED",
    200002: "PERMISSION_GRANTED",
    200003: "PERMISSION_NOT_GRANTED",
    200004: "REDIRECT",
    200005: "NEW_USER",
    200006: "OPERATION_DONE",
    200007: "UPDATE_USER",
    200008: "OK_WITH_ERRORS",
    200009: "ACCOUNTS_LINKED",
    200010: "OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS",
    206001: "ACCOUNT_PENDING_REGISTRATION",
    206002: "ACCOUNT_PENDING_VERIFICATION",
    206003: "ACCOUNT_MISSING_LOGINID",
    206004: "IDENTITY_ALREADY_ASSIGNED",
    206005: "AFTER_EMAIL_VERIFICATION",
    206006: "PENDING_CODE_VERIFICATION",
    300001: "CLIENT_LOG",
    301001: "INVALID_DATA_CENTER",
    400001: "INVALID_REQUEST_FORMAT",
    400002: "MISSING_REQUIRED_PARAMETER",
    400003: "UNIQUE_IDENTIFIER_EXISTS",
    400004: "INVALID_PARAMETER_FORMAT",
    400006: "INVALID_PARAMETER_VALUE",
    400007: "DUPLICATE_VALUE",
    400008: "INVALID_AUTHENTICATION_HEADER",
    400009: "VALIDATION_ERROR",
    400011: "INVALID_REDIRECT_URI",
    400012: "INVALID_RESPONSE_TYPE",
    400013: "UNSUPPORTED_GRANT_TYPE",
    400014: "INVALID_GRANT",
    400015: "CODE_EXPIRED",
    400020: "SCHEMA_VALIDATION_FAILED",
    400021: "CAPTCHA_VERIFICATION_FAILED",
    400022: "UNIQUE_INDEX_VALIDATION_ERROR",
    400023: "INVALID_TYPE_VALIDATION_ERROR",
    400024: "DYNAMIC_FIELDS_VALIDATION_ERROR",
    400025: "WRITE_ACCESS_VALIDATION_ERROR",
    400026: "INVALID_FORMAT_VALIDATION_ERROR",
    400027: "REQUIRED_VALUE_VALIDATION_ERROR",
    400028: "EMAIL_NOT_VERIFIED",
    400029: "SCHEMA_CONFLICT_ERROR",
    400030: "OPERATION_NOT_ALLOWED",
    400050: "SECURITY_VERIFICATION_FAILED",
    400093: "INVALID_APIKEY_PARAMETER",
    400096: "NOT_SUPPORTED",
    400097: "UNSUPPORTED_USER_AGENT",
    400100: "NO_PROVIDERS",
    400101: "POPUP_BLOCKED",
    400102: "INVALID_EVENT_HANDLER",
    400103: "INVALID_CONTAINERID",
    400106: "NOT_CONNECTED",
    400120: "INVALID_SITE_DOMAIN",
    400122: "PROVIDER_CONFIGURATION_ERROR",
    400124: "LIMIT_REACHED",
    400125: "FREQUENCY_LIMIT_REACHED",
    400126: "INVALID_ACTION",
    400127: "INSUFFICIENT_POINTS_TO_REDEEM",
    400128: "SIGNATURE_TIMESTAMP_EXPIRED",
    400130: "PASSKEY_AUTHENTICATOR_REGISTERED",
    400131: "PASSKEY_ABORTED",
    400302: "Error_During_Extensions_Operation",
    400303: "Extension_Point_Custom_Error",
    401000: "INVALID_POLICY_CONFIGURATION",
    401001: "MEDIA_ITEMS_NOT_SUPPORTED",
    401010: "SUSPECTED_SPAM",
    401020: "LOGIN_FAILED_CAPTCHA_REQUIRED",
    401021: "LOGIN_FAILED_WRONG_CAPTCHA",
    401023: "REQUEST_FAILED_CAPTCHA_REQUIRED",
    401030: "OLD_PASSWORD_USED",
    403000: "FORBIDDEN",
    403001: "INVALID_SESSION_TOKEN",
    403002: "REQUEST_HAS_EXPIRED",
    403003: "INVALID_REQUEST_SIGNATURE",
    403004: "DUPLICATE_NONCE",
    403005: "UNAUTHORIZED_USER",
    403006: "SENSITIVE_DATA_SENT_OVER_HTTP",
    403007: "PERMISSION_DENIED",
    403008: "INVALID_OPENID_URL",
    403009: "PROVIDER_SESSION_EXPIRED",
    403010: "INVALID_SECRET",
    403011: "SESSION_HAS_EXPIRED",
    403012: "NO_VALID_SESSION",
    403013: "UNVERIFIED_USER",
    403015: "MISSING_REQUEST_REFERRER",
    403017: "UNEXPECTED_PROVIDER_USER",
    403022: "PERMISSION_NOT_REQUESTED",
    403023: "NO_USER_PERMISSION",
    403024: "PROVIDER_LIMIT_REACHED",
    403025: "INVALID_TOKEN",
    403026: "UNAUTHORIZED_ACCESS_ERROR",
    403027: "DIFFERENT_USER_FOR_REAUTH",
    403030: "SESSION_EXPIRED_RETRY",
    403031: "APPROVED_BY_MODERATOR",
    403032: "TOKEN_HAS_RENEWED",
    403035: "NO_USER_COOKIE",
    403036: "UNAUTHORIZED_PARTNER",
    403037: "POST_DENIED",
    403040: "NO_LOGIN_TICKET",
    403041: "ACCOUNT_DISABLED",
    403042: "INVALID_LOGINID",
    403043: "LOGIN_IDENTIFIER_EXISTS",
    403044: "UNDERAGE_USER",
    403045: "INVALID_SITE_CONFIGURATION_ERROR",
    403047: "LOGINID_DOES_NOT_EXIST",
    403048: "API_RATE_LIMIT_EXCEEDED",
    403100: "PENDING_PASSWORD_CHANGE",
    403101: "ACCOUNT_PENDING_TFA_VERIFICATION",
    403102: "ACCOUNT_PENDING_TFA_REGISTRATION",
    403110: "ACCOUNT_PENDING_RECENT_LOGIN",
    403120: "ACCOUNT_TEMPORARILY_LOCKED_OUT",
    403200: "REDUNDANT_OPERATION",
    403201: "INVALID_APPLICATION_ID",
    403300: "THIS_AUTHENTICATION_METHOD_IS_CURRENTLY_DISABLED",
    404000: "NOT_FOUND",
    404001: "FRIEND_NOT_FOUND",
    404002: "CATEGORY_NOT_FOUND",
    404003: "UID_NOT_FOUND",
    404004: "INVALID_URL",
    405001: "INVALID_API_METHOD",
    409001: "IDENTITY_EXISTS",
    409003: "FORCE_LINK_LOGIN_IDENTIFIER_EXISTS",
    409010: "MISSING_USER_PHOTO",
    409011: "COUNTER_NOT_REGISTERED",
    409012: "INVALID_GMID_TICKET",
    409013: "SAML_MAPPED_ATTRIBUTE_NOT_FOUND",
    409014: "SAML_CERTIFICATE_NOT_FOUND",
    409015: "SAML_MESSAGE_NOT_FOUND",
    410000: "GONE",
    413001: "REQUEST_ENTITY_TOO_LARGE",
    413002: "COMMENT_TEXT_TOO_LARGE",
    413003: "OBJECT_TOO_LARGE",
    413004: "PROFILE_PHOTO_TOO_LARGE",
    414000: "REQUEST_URI_TOO_LONG",
    500001: "GENERAL_SERVER_ERROR",
    500002: "SERVER_LOGIN_ERROR",
    500003: "DEFAULT_APPLICATION_CONFIGURATION_ERROR",
    500014: "SESSION_MIGRATION_ERROR",
    500023: "PROVIDER_ERROR",
    500026: "NETWORK_ERROR",
    500028: "DATABASE_ERROR",
    500029: "USERNAME_REQUIRED",
    500031: "NO_PROVIDER_APPLICATION",
    500032: "LOAD_FAILED",
    500033: "INVALID_ENVIRONMENT_CONFIG",
    500034: "ERROR_DURING_BACKEND_OPERATION",
    500131: "PASSKEY_ERROR",
    504001: "TIMEOUT",
    504002: "CLIENTTIMEOUT",
    599999: "MISSING_ERROR_CODE",
    OK: 0,
    Data_Pending: 100001,
    NETWORK_ERROR: 500026,
    DATA_PENDING: 100001,
    OPERATION_CANCELED: 200001,
    PERMISSION_GRANTED: 200002,
    PERMISSION_NOT_GRANTED: 200003,
    REDIRECT: 200004,
    NEW_USER: 200005,
    OPERATION_DONE: 200006,
    UPDATE_USER: 200007,
    OK_WITH_ERRORS: 200008,
    ACCOUNTS_LINKED: 200009,
    OK_WITH_ERROR_LOGIN_IDENTIFIER_EXISTS: 200010,
    ACCOUNT_PENDING_REGISTRATION: 206001,
    ACCOUNT_PENDING_VERIFICATION: 206002,
    ACCOUNT_MISSING_LOGINID: 206003,
    IDENTITY_ALREADY_ASSIGNED: 206004,
    AFTER_EMAIL_VERIFICATION: 206005,
    PENDING_CODE_VERIFICATION: 206006,
    CLIENT_LOG: 300001,
    INVALID_DATA_CENTER: 301001,
    INVALID_REQUEST_FORMAT: 400001,
    MISSING_REQUIRED_PARAMETER: 400002,
    UNIQUE_IDENTIFIER_EXISTS: 400003,
    INVALID_PARAMETER_FORMAT: 400004,
    INVALID_PARAMETER_VALUE: 400006,
    DUPLICATE_VALUE: 400007,
    INVALID_AUTHENTICATION_HEADER: 400008,
    VALIDATION_ERROR: 400009,
    INVALID_REDIRECT_URI: 400011,
    INVALID_RESPONSE_TYPE: 400012,
    UNSUPPORTED_GRANT_TYPE: 400013,
    INVALID_GRANT: 400014,
    CODE_EXPIRED: 400015,
    SCHEMA_VALIDATION_FAILED: 400020,
    CAPTCHA_VERIFICATION_FAILED: 400021,
    UNIQUE_INDEX_VALIDATION_ERROR: 400022,
    INVALID_TYPE_VALIDATION_ERROR: 400023,
    DYNAMIC_FIELDS_VALIDATION_ERROR: 400024,
    WRITE_ACCESS_VALIDATION_ERROR: 400025,
    INVALID_FORMAT_VALIDATION_ERROR: 400026,
    REQUIRED_VALUE_VALIDATION_ERROR: 400027,
    EMAIL_NOT_VERIFIED: 400028,
    SCHEMA_CONFLICT_ERROR: 400029,
    OPERATION_NOT_ALLOWED: 400030,
    SECURITY_VERIFICATION_FAILED: 400050,
    INVALID_APIKEY_PARAMETER: 400093,
    NOT_SUPPORTED: 400096,
    UNSUPPORTED_USER_AGENT: 400097,
    NO_PROVIDERS: 400100,
    POPUP_BLOCKED: 400101,
    INVALID_EVENT_HANDLER: 400102,
    INVALID_CONTAINERID: 400103,
    NOT_CONNECTED: 400106,
    INVALID_SITE_DOMAIN: 400120,
    PROVIDER_CONFIGURATION_ERROR: 400122,
    LIMIT_REACHED: 400124,
    FREQUENCY_LIMIT_REACHED: 400125,
    INVALID_ACTION: 400126,
    INSUFFICIENT_POINTS_TO_REDEEM: 400127,
    SIGNATURE_TIMESTAMP_EXPIRED: 400128,
    Error_During_Extensions_Operation: 400302,
    Extension_Point_Custom_Error: 400303,
    INVALID_POLICY_CONFIGURATION: 401000,
    SUSPECTED_SPAM: 401010,
    LOGIN_FAILED_CAPTCHA_REQUIRED: 401020,
    REQUEST_FAILED_CAPTCHA_REQUIRED: 401023,
    LOGIN_FAILED_WRONG_CAPTCHA: 401021,
    OLD_PASSWORD_USED: 401030,
    FORBIDDEN: 403000,
    INVALID_SESSION_TOKEN: 403001,
    REQUEST_HAS_EXPIRED: 403002,
    INVALID_REQUEST_SIGNATURE: 403003,
    DUPLICATE_NONCE: 403004,
    UNAUTHORIZED_USER: 403005,
    SENSITIVE_DATA_SENT_OVER_HTTP: 403006,
    PERMISSION_DENIED: 403007,
    INVALID_OPENID_URL: 403008,
    PROVIDER_SESSION_EXPIRED: 403009,
    INVALID_SECRET: 403010,
    SESSION_HAS_EXPIRED: 403011,
    NO_VALID_SESSION: 403012,
    UNVERIFIED_USER: 403013,
    MISSING_REQUEST_REFERRER: 403015,
    UNEXPECTED_PROVIDER_USER: 403017,
    PERMISSION_NOT_REQUESTED: 403022,
    NO_USER_PERMISSION: 403023,
    PROVIDER_LIMIT_REACHED: 403024,
    INVALID_TOKEN: 403025,
    UNAUTHORIZED_ACCESS_ERROR: 403026,
    DIFFERENT_USER_FOR_REAUTH: 403027,
    SESSION_EXPIRED_RETRY: 403030,
    APPROVED_BY_MODERATOR: 403031,
    TOKEN_HAS_RENEWED: 403032,
    NO_USER_COOKIE: 403035,
    UNAUTHORIZED_PARTNER: 403036,
    POST_DENIED: 403037,
    NO_LOGIN_TICKET: 403040,
    ACCOUNT_DISABLED: 403041,
    INVALID_LOGINID: 403042,
    LOGIN_IDENTIFIER_EXISTS: 403043,
    UNDERAGE_USER: 403044,
    INVALID_SITE_CONFIGURATION_ERROR: 403045,
    LOGINID_DOES_NOT_EXIST: 403047,
    API_RATE_LIMIT_EXCEEDED: 403048,
    PENDING_PASSWORD_CHANGE: 403100,
    ACCOUNT_PENDING_TFA_VERIFICATION: 403101,
    ACCOUNT_PENDING_TFA_REGISTRATION: 403102,
    ACCOUNT_PENDING_RECENT_LOGIN: 403110,
    ACCOUNT_TEMPORARILY_LOCKED_OUT: 403120,
    REDUNDANT_OPERATION: 403200,
    INVALID_APPLICATION_ID: 403201,
    NOT_FOUND: 404000,
    FRIEND_NOT_FOUND: 404001,
    CATEGORY_NOT_FOUND: 404002,
    UID_NOT_FOUND: 404003,
    RESOURCE_NOT_FOUND: 404004,
    INVALID_API_METHOD: 405001,
    IDENTITY_EXISTS: 409001,
    GONE: 410000,
    REQUEST_ENTITY_TOO_LARGE: 413001,
    COMMENT_TEXT_TOO_LARGE: 413002,
    OBJECT_TOO_LARGE: 413003,
    PROFILE_PHOTO_TOO_LARGE: 413004,
    REQUEST_URI_TOO_LONG: 414000,
    MISSING_USER_PHOTO: 409010,
    COUNTER_NOT_REGISTERED: 409011,
    INVALID_GMID_TICKET: 409012,
    SAML_MAPPED_ATTRIBUTE_NOT_FOUND: 409013,
    SAML_CERTIFICATE_NOT_FOUND: 409014,
    SAML_MESSAGE_NOT_FOUND: 409015,
    GENERAL_SERVER_ERROR: 500001,
    SERVER_LOGIN_ERROR: 500002,
    DEFAULT_APPLICATION_CONFIGURATION_ERROR: 500003,
    SESSION_MIGRATION_ERROR: 500014,
    PROVIDER_ERROR: 500023,
    DATABASE_ERROR: 500028,
    USERNAME_REQUIRED: 500029,
    NO_PROVIDER_APPLICATION: 500031,
    LOAD_FAILED: 500032,
    INVALID_ENVIRONMENT_CONFIG: 500033,
    ERROR_DURING_BACKEND_OPERATION: 500034,
    TIMEOUT: 504001,
    CLIENTTIMEOUT: 504002,
    INVALID_URL: 404004,
    MEDIA_ITEMS_NOT_SUPPORTED: 401001,
    MISSING_ERROR_CODE: 599999,
    THIS_AUTHENTICATION_METHOD_IS_CURRENTLY_DISABLED: 403300,
    FORCE_LINK_LOGIN_IDENTIFIER_EXISTS: 409003,
    PASSKEY_AUTHENTICATOR_REGISTERED: 400130,
    PASSKEY_ABORTED: 400131,
    PASSKEY_ERROR: 500131
};
export const GSErrorDetails = {
    0: "None",
    100001: "Same_password",
    100002: "Invalid_password",
    100003: "Invalid_counters_query_with_cursor",
    None: 0,
    Same_password: 100001,
    Invalid_password: 100002,
    Invalid_counters_query_with_cursor: 100003
};
export const localInfo = {
    baseDomain: "local.pyzlo.in",
    isBrowserSupportsFilesAPI: true,
    initTime: "2023-12-06T14:49:49.667Z",
    version: 0,
    pageDomain: "local.pyzlo.in",
    protocol: "https",
    userAgent: "mozilla/5.0 (macintosh; intel mac os x 10_15_7) applewebkit/537.36 (khtml, like gecko) chrome/119.0.0.0 safari/537.36",
    isWin: false,
    isIE: false,
    isIE6: false,
    isIE7: false,
    isIE8: false,
    isIE9: false,
    isIE10: false,
    isIE11: false,
    isEdgeLegacy: false,
    isEdge: false,
    isIOS: false,
    isSafari534: false,
    isWeChat: false,
    iosVersion: 0,
    isAndroid: false,
    isAndroidBrowser: false,
    currentBrowser: "mac chrome",
    androidVersion: 0,
    isChrome: true,
    isGoogleBot: false,
    isFF: false,
    isOpera: false,
    isSafari: false,
    isIOSWebView: false,
    isIOSChrome: false,
    isMAC: true,
    isWindowsPhone: false,
    isFacebookBrowser: false,
    supportsPostMessage: true,
    supportsLocalStorage: true,
    supportsSessionStorage: true,
    supportsFlash: false,
    quirksMode: false,
    backCompat: false,
    isMobile: false,
    isMobileApp: true,
    isNativeMobileApp: false,
    isTouch: false,
    isOnLine: function() {
        return navigator.onLine;
    },
    messagingMethod: 1
};
export const defaultEventMaps = {
    0: {
        id: "screen-set-report-events-map",
        defaultMethod: function report1(f) {
            var p = f.abTesting, h = f.screenSetID, v = f.eventName;
            if (!p || !h || !v) {
                return;
            }
            var w = p.requestedScreenId;
            var m = p.variantId;
            var b = p.testId;
            if (!m || !b || !w) {
                return;
            }
            var y = h + "/" + w + "/" + b;
            var S = {
                eventCategory: exports.REPORT_EVENT_CATEGORIES.screenSets,
                eventTime: Date.now(),
                eventType: v,
                eventData: m,
                eventId: Reports_1.replaceNotAllowedReportChars(y, REPLACING_CHAR_FOR_AB_TESTING_REPORT)
            };
            Reports_1.queue.push(S);
        },
        eventMap: [
            {
                events: "afterScreenLoad,submit",
                args: [
                    function(f) {
                        return f;
                    }
                ]
            }
        ]
    }
};
export const oauth = {
    register: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    connect: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    disconnect: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    authorize: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    token: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    }
};
export const auth = {
    token: {
        authenticationContext: function() {
            var f = [];
            for(var p = 0; p < arguments.length; p++){
                f[p] = arguments[p];
            }
            var h = objectUtils.merge([
                f
            ]);
            var fnRun1 = function() {
                if (h.lang) {
                    h._explicitLang = true;
                }
                var f = objectUtils.merge([
                    thisScript.globalConf,
                    h
                ]);
                _this.run(f, h);
            };
            if (!thisScript || !thisScript.globalConf) {
                queueUtils.queueForExecution("API", fnRun1);
            } else {
                fnRun1();
            }
        }
    },
    loginToken: {
        getTokenParam: function(f, p) {
            return tokenStore.getTokenParam(f, p);
        },
        get: function get1(f) {
            if (f === void 0) {
                f = thisScript.APIKey;
            }
            var p = utils.cookie.get(_getTokenCookieName(f));
            if (p) {
                return p.split("|")[0];
            } else {
                return null;
            }
        }
    }
};
export const ds = {
    store: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    get: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    search: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    getSchema: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    delete: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    }
};
export const ids = {
    getAccountInfo: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    setAccountInfo: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    },
    search: function() {
        var f = [];
        for(var p = 0; p < arguments.length; p++){
            f[p] = arguments[p];
        }
        var h = objectUtils.merge([
            f
        ]);
        var fnRun1 = function() {
            if (h.lang) {
                h._explicitLang = true;
            }
            var f = objectUtils.merge([
                thisScript.globalConf,
                h
            ]);
            _this.run(f, h);
        };
        if (!thisScript || !thisScript.globalConf) {
            queueUtils.queueForExecution("API", fnRun1);
        } else {
            fnRun1();
        }
    }
};
export const external = {
    facebook: {
        isLoggedIn: false,
        isConnected: false,
        isLoaded: function isLoaded1() {
            return exports.initializedTime != null;
        },
        load: function load1(f) {
            if (exports.initializedTime) return;
            exports.initializedTime = null;
            window.setInterval(function() {
                refreshSession();
            }, 45 * 60 * 1000);
            window["fbAsyncInit"] = function() {
                var p = objectUtils.clone(thisScript.globalConf["facebookInitParams"]);
                if (!p) p = {};
                if (providersConfig.facebook) {
                    p.appId = providersConfig.facebook.appID;
                    p.version = providersConfig.facebook.version;
                } else {
                    p.version = "v1.0";
                }
                p.status = false;
                p.cookie = true;
                p.xfbml = true;
                p.oauth = true;
                FB.init(p);
                if (f != true) {
                    FB.getLoginStatus(function(f) {
                        exports.initializedTime = new Date();
                        exports.isConnected = f.status == "connected";
                        exports.isLoggedIn = f.status != "unknown";
                        globalEvents.dispatch({
                            eventName: "facebookLoaded",
                            isLoggedIn: exports.isLoggedIn,
                            isConnected: exports.isConnected
                        });
                        socialize.addEventHandlers({
                            listenerType: "component"
                        }, {
                            listenerDescription: "listener for updating Facebook Connect session",
                            onLogin: function() {
                                refreshSession();
                            },
                            onConnect: function() {
                                refreshSession();
                            },
                            onLogout: function() {
                                refreshSession();
                            }
                        });
                    }, true);
                } else {
                    exports.initializedTime = new Date();
                    globalEvents.dispatch({
                        eventName: "facebookLoaded",
                        isLoggedIn: exports.isLoggedIn,
                        isConnected: exports.isConnected
                    });
                }
            };
            var p = document.createElement("div");
            p.id = "fb-root";
            DOMUtils.appendToBody(p);
            scriptUtils.load(LocalInfo_1.localInfo.protocol + "://connect.facebook.net/" + thisScript.lang.full.replace("-", "_") + "/sdk.js", null, function() {
                if (document.documentElement.style.display == "none") {
                    document.documentElement.style.display = "";
                }
            }, true);
        },
        refreshSession: function refreshSession1() {
            if (typeof FB == "undefined") return;
            var fncCallback1 = function(f) {
                exports.initializedTime = new Date();
                exports.isConnected = f.status == "connected";
                exports.isLoggedIn = f.status != "unknown";
                globalEvents.dispatch({
                    eventName: "FBCRefreshed"
                });
            };
            if (providersConfig.facebook && providersConfig.facebook.appID && FB && FB.getLoginStatus) {
                FB.getLoginStatus(fncCallback1, true);
            }
        },
        retryPending: function retryPending1() {
            var f = _waitingForService;
            for(var p = 0; p < f.length; p++){
                f[p]();
            }
            _waitingForService = [];
        },
        runWhenLoaded: function runWhenLoaded1(f) {
            _waitingForService.push(f);
        },
        getParams: function getParams1() {
            var f = {};
            if (typeof FB != "undefined" && FB.getAuthResponse) {
                try {
                    var p = FB.getAuthResponse();
                    if (p) {
                        if (p.userID != null) f["fb_UID"] = p.userID;
                        if (p.accessToken != null) f["fb_at"] = p.accessToken;
                        if (p.expiresIn != null) f["fb_exp"] = p.expiresIn;
                    }
                } catch (h) {}
            }
            return f;
        },
        autoLogin: function autoLogin1() {
            socialize.waitForService({
                service: "facebook",
                callback: function() {
                    _.apiAdapter.isSessionValid(thisScript.globalConf, function(f) {
                        var p = getParams();
                        if (!f && p && p["fb_at"] && !_.autoLoginInProgress) {
                            _.autoLoginInProgress = true;
                            socialize.notifyLogin({
                                regSource: "autoLogin",
                                providerSessions: {
                                    facebook: {
                                        authToken: p["fb_at"],
                                        tokenExpiresIn: p["fb_exp"]
                                    }
                                }
                            });
                        }
                    });
                }
            });
        }
    },
    googlePlus: {
        isLoaded: function isLoaded1() {
            return exports.initializedTime != null;
        },
        load: function load1() {
            var f = this;
            if (exports.initializedTime) return;
            if (!providersConfig.googlePlus) return;
            exports.initializedTime = null;
            var p = document.createElement("script");
            p.type = "text/javascript";
            p.async = true;
            window["__gigya_handleClientLoad"] = function() {
                return f.handleClientLoad();
            };
            p.src = "https://apis.google.com/js/client.js?onload=__gigya_handleClientLoad";
            var h = document.getElementsByTagName("script")[0];
            h.parentNode.insertBefore(p, h);
        },
        handleClientLoad: function handleClientLoad1() {
            try {
                delete window["__gigya_handleClientLoad"];
            } catch (f) {
                window["__gigya_handleClientLoad"] = undefined;
            }
            exports.initializedTime = new Date();
            globalEvents.dispatch({
                eventName: "googlePlusLoaded"
            });
        },
        refreshSession: function refreshSession1() {
            if (typeof gapi == "undefined") return;
        },
        autoLogin: function autoLogin1() {
            socialize.waitForService({
                service: "googlePlus",
                callback: function() {
                    _.apiAdapter.isSessionValid(thisScript.globalConf, function(f) {
                        if (!f) {
                            gapi.auth.authorize({
                                client_id: providersConfig.googlePlus.clientId,
                                scope: providersConfig.googlePlus.scopes,
                                immediate: true,
                                response_type: "token"
                            }, function(f) {
                                if (f && f.access_token && !_.autoLoginInProgress) {
                                    _.autoLoginInProgress = true;
                                    socialize.notifyLogin({
                                        regSource: "autoLogin",
                                        providerSessions: {
                                            googlePlus: {
                                                authToken: f.access_token
                                            }
                                        }
                                    });
                                }
                            });
                        }
                    });
                }
            });
        }
    },
    opengraph: {
        getMetaTag: function getMetaTag1(f) {
            var p = document.getElementsByTagName("meta");
            for(var h = 0; h < p.length; h++){
                if (p[h].getAttribute("property") == f && p[h].getAttribute("content")) {
                    return p[h].getAttribute("content");
                }
            }
        }
    }
};
export const thisScript = {
    scriptElement: {},
    protocol: "https",
    baseDomain: "cdns.gigya.com",
    APIKey: "4_aeFS_UyzRnmP5k_MI59ejg",
    lang: {
        full: "en-US",
        langCode: "en",
        countryCode: "US",
        originalLang: "en"
    },
    globalConf: {
        connectWithoutLoginBehavior: "alwaysLogin",
        defaultRegScreenSet: "Default-RegistrationLogin",
        defaultMobileRegScreenSet: "Default-RegistrationLogin",
        sessionExpiration: 0,
        rememberSessionExpiration: 0,
        apiDomain: "eu1.gigya.com",
        workflow: {
            path: "workflow/resources/js/entryPoint.js"
        },
        lang: "en",
        APIKey: "4_aeFS_UyzRnmP5k_MI59ejg"
    },
    URLParams: {
        apikey: "4_aeFS_UyzRnmP5k_MI59ejg",
        pretty: "true",
        debug: "true",
        dbg: "1"
    }
};
export const global = {
    addCSS: function(f, p) {
        if (f && "" != f) {
            f instanceof Array && (f = f.join(" ")), p && (f = f.replace(/([^\s}]*\.gig)/g, p + " $1"));
            var h = document.createElement("style");
            h.type = "text/css";
            var v = document.createTextNode(f);
            h.styleSheet ? null != v.value ? h.styleSheet.cssText = v.value : h.styleSheet.cssText = v.nodeValue : h.appendChild(v);
            var w = document.getElementsByTagName("head"), m = document.body;
            (w.length > 0 ? w[0] : m).appendChild(h);
        }
    },
    date: {
        getISODate: function(f) {
            var p = null;
            if (localInfo.isIE8) p = function(f) {
                var p, h, v = /^(\d{4}\-\d\d\-\d\d([tT ][\d:\.]*)?)([zZ]|([+\-])(\d\d):(\d\d))?$/.exec(f) || [];
                if (v[1]) {
                    p = v[1].split(/\D/);
                    for(var w = 0, m = p.length; w < m; w++)p[w] = parseInt(p[w], 10) || 0;
                    return p[1] -= 1, (p = new Date(Date.UTC.apply(Date, p))).getDate() ? (v[5] && (h = 60 * parseInt(v[5], 10), v[6] && (h += parseInt(v[6], 10)), "+" == v[4] && (h *= -1), h && p.setUTCMinutes(p.getUTCMinutes() + h)), p) : null;
                }
                return null;
            }(f);
            else {
                if ((/^(\d{4}\-\d\d\-\d\d([tT ][\d:\.]*)?)([zZ]|([+\-])(\d\d):(\d\d))?$/.exec(f) || [])[1]) {
                    var h = Date.parse(f);
                    p = new Date(h);
                }
            }
            return p;
        }
    },
    XMLUtils: {
        CreateXMLFromString: function(f) {
            var p = null;
            if (window.ActiveXObject && (localInfo.isIE8 || localInfo.isIE9)) try {
                (p = new ActiveXObject("Microsoft.XMLDOM")).async = "false", p.loadXML(f);
            } catch (h) {
                log.addLog("Failed to create Microsoft.XMLDOM ActiveX parser", h);
            }
            else p = (new DOMParser).parseFromString(f, "text/xml");
            return p;
        },
        CopyProperties: function(f, p, h, v) {
            if (void 0 === h && (h = ""), void 0 === p && (p = {}), null != v) for(var w in f)p[h + w] = v(w, f[w]);
            else for(var m in f)p[h + m] = f[m];
            return p;
        },
        CollectAttributesFromXMLPathToObject: function(f, p, h, v, w) {
            for(var m = 0; m < p.length && void 0 !== f; m++)null != (f = f.childNodes[p[m]]) && v && this.CopyProperties(f.attributes, h, "", w);
            void 0 !== f && this.CopyProperties(f.attributes, h, "", w);
        },
        mergeNodes: function(f, p) {
            void 0 === p.attributes && (p.attributes = {}), void 0 === p.childNodes && (p.childNodes = {});
            var h, v = p.attributes, w = f.attributes;
            if (w) for(var m = 0; m < w.length; m++)null != w[m].value ? v[w[m].nodeName] = w[m].value : v[w[m].nodeName] = w[m].nodeValue;
            for(var b = 0; b < f.childNodes.length; b++){
                var y = f.childNodes[b];
                void 0 === (h = p.childNodes[y.nodeName]) && (h = p.childNodes[y.nodeName] = {
                    attributes: {},
                    childNodes: {}
                }), this.mergeNodes(y, h);
            }
            return p;
        }
    },
    resolver: function(f) {
        this.configurations = [], this.mergedConfig = {}, this.isMerged = !0, this._processor = f, this.merge = function() {
            if (!this.isMerged) {
                this.mergedConfig = {
                    attributes: {},
                    childNodes: {}
                };
                for(var f = 0; f < this.configurations.length; f++){
                    var p = this.configurations[f];
                    i.mergeNodes(p, this.mergedConfig);
                }
                this.isMerged = !0;
            }
        }, this.Resolve = function(f, p) {
            this.merge && this.merge();
            var h = {};
            "object" == typeof arguments[arguments.length - 1] && (h = arguments[arguments.length - 1]);
            for(var v = 0; v < arguments.length; v++){
                var w = arguments[v], m = w.constructor;
                if (m == String) for(var b = w.split("|"), y = b.length - 1; y >= 0; y--){
                    var S = this.trimCharsAtSuffix(this.trimCharsAtPrefix(b[y], " \n\r	"), " \n\r	"), E = "+" == S.charAt(0), C = S.split("/").slice(1);
                    E && (S = S.substring(1)), i.CollectAttributesFromXMLPathToObject(this.mergedConfig, C, h, E, this._processor);
                }
                else if (m == Array) for(var I = 0; I < w.length; I++)this.Resolve(w[I], h);
            }
            return h;
        }, this.trimCharsAtPrefix = function(f, p) {
            var h = 0;
            if (void 0 === f || 0 == f.length) return "";
            for(var v = f.length; h <= v && p.indexOf(f.charAt(h)) > -1;)h++;
            return f.substring(h, v);
        }, this.trimCharsAtSuffix = function(f, p) {
            if (void 0 === f || 0 == f.length) return "";
            for(var h = f.length - 1; h >= 0 && p.indexOf(f.charAt(h)) > -1;)h--;
            return f.substring(0, h + 1);
        }, this.addConfig = function(f) {
            "string" == typeof f && (this.configurations.push(i.CreateXMLFromString(f)), this.isMerged = !1);
        }, this.getTextFromKey = function(f) {
            return this.Resolve("/config/lang/" + f).text;
        };
    },
    getCombination: function e1(f, p) {
        if (void 0 === p && (p = 0), p || (p = 0), !f || 0 == f.length) return [];
        var h = f[p];
        if (p == f.length - 1) {
            for(var v = [], w = 0; w < h.length; w++)v.push([
                h[w]
            ]);
            return v;
        }
        v = [];
        var m = e1(f, p + 1);
        if (h) for(w = 0; w < h.length; w++)for(var b = 0; b < m.length; b++)v.push([
            h[w]
        ].concat(m[b]));
        return v;
    },
    resolveProviders: function(f, p, h) {
        for(var v = utils.array.getArrayFromString(f, ",", !0), w = utils.array.getArrayFromString(p, ",", !0), m = utils.array.getArrayFromString(h, ",", !0), b = 0; b < w.length; b++)utils.array.removeByValue(v, w[b]);
        var y = _.providers.getProvidersByName(v.join(","));
        for(b = 0; b < w.length; b++)utils.array.removeByProperty(y, "name", w[b]);
        return socialize.getProvidersForRequiredCapabilities(y, m);
    },
    showLoader: function(f, p, h) {
        void 0 === p && (p = ""), void 0 === h && (h = void 0), f && (h || (h = parseInt(i.getStyle(f, "height"))), f.innerHTML = '<div class="' + p + '" style="height:' + h + "px;background-image:url('" + _.getCdnResource("/gs/i/gm/loader.gif") + "'); background-repeat:no-repeat;background-position:center center\"></div>");
    },
    fadeIn: function l1(f) {
        f.interval && clearInterval(f.interval), f.style.opacity = "0", f.interval = setInterval(function() {
            var p = parseFloat(f.style.opacity);
            p >= 1 && clearInterval(f.interval), f.style.opacity = p + .1;
        }, 10);
    },
    getBalloonHTML: function s1(f, p, h, v, w, m, b, y, S) {
        global.addedBalloonCSS || (global.addCSS([
            ".gig-balloons *, div.gig-balloons, .gig-balloons span, .gig-balloons a:hover, .gig-balloons a:visited, .gig-balloons a:link, .gig-balloons a:active{",
            "border:none; line-height:normal;padding:0px;margin:0px;color:inherit;text-decoration:none;width:auto;float:none;-moz-border-radius:0;border-radius:0;",
            "font-family:arial;font-size:10px;color:#797979;background:none;text-align:left}",
            "div.gig-balloon-frame {",
            "zoom:1;padding:15px 10px 10px 10px; border:1px solid #b4b4b4; min-height:80px; background-color:#FFFFFF; z-index:" + utils.DOM.getNextZIndex() + ";",
            "box-shadow:0 0 5px RGBA(0,0,0,0.6);-webkit-box-shadow:0 0 5px RGBA(0,0,0,0.6);-moz-box-shadow:0 0 5px RGBA(0,0,0,0.6);}",
            'div.gig-balloon-nub {left:+1px; position:relative;background-image:url("' + _.getCdnResource("/gs/i/gm/nub.png") + '");width:13px;height:25px; z-index:' + utils.DOM.getNextZIndex() + " }",
            'div.gig-balloon-nub-right { left:-1px; position:relative;background-image:url("' + _.getCdnResource("/gs/i/gm/nub_right.png") + '");width:13px;height:25px; z-index:' + utils.DOM.getNextZIndex() + " }",
            'div.gig-balloon-nub-up { top:+1px; position:relative;background-image:url("' + _.getCdnResource("/gs/i/gm/nub_up.png") + '");width:25px;height:13px; z-index:' + utils.DOM.getNextZIndex() + " }",
            'div.gig-balloon-nub-down { top:-1px; position:relative;background-image:url("' + _.getCdnResource("/gs/i/gm/nub_down.png") + '");width:25px;height:13px; z-index:' + utils.DOM.getNextZIndex() + " }",
            'span.gig-balloon-closeImage { cursor:pointer; float:right;background-image:url("' + _.getCdnResource("/gs/i/gm/CloseButton.png") + '"); width:14px;height:14px; margin:-7px -2px 0 0  }',
            "div.gig-balloon-caption {font-family:arial; font-size: 12px; font-weight:bold; color: #0b81c1; border-bottom: 1px solid #e8e8e8;padding-bottom:2px;}",
            "span.gig-balloon-caption-text {float:left}"
        ]), !localInfo.isIE || !localInfo.quirksMode && localInfo.isIE9 || global.addCSS([
            "div.gig-balloon-frame {",
            "-ms-filter: \"progid:DXImageTransform.Microsoft.Shadow(Strength=4, Direction=135, Color='#B4B4B4');\";",
            "filter: progid:DXImageTransform.Microsoft.Shadow(Strength=4, Direction=135, Color='#B4B4B4');}",
            "}",
            "div.gig-balloon-nub-right { left:-5px;}"
        ]), global.addedBalloonCSS = !0);
        var E = "";
        if (localInfo.quirksMode) {
            var C = i.getClassBordersAndPaddings("gig-balloon-frame");
            h && (h += C.w), v && (v += C.h);
        }
        h && (E += "width: " + h + "px;"), v && (E += "height: " + v + "px;");
        var I = "";
        w && (I += "left" === m || "right" === m ? "top: " + w + "px;" : "left: " + w + "px;");
        var R, A = "";
        return A += p ? '<div class="gig-balloon-caption"><span class="gig-balloon-caption-text" style="width:' + (h - 20) + 'px">' + p + "</span>" : '<div class="gig-balloon-caption" style="border-bottom:none">', !b && y && (A += '<span tabindex="0" role="button" class="gig-balloon-closeImage" onclick="' + y + '" onkeydown="if((event.which || event.keyCode) == 13) ' + y + '"></span>'), A += '<div style="clear:both;height:0;width:0;font-size:1px;"><!-- empty divs=100% height IE --></div></div><div class="gig-balloon-body">' + f + "</div>", w ? (R = '<table role="presentation" cellpadding="0" cellspacing="0" class="gig-balloon"><tr>', "up" === m && (R += '<td style=""><div class="gig-balloon-nub-up" style="' + I + '"></div></td></tr><tr>'), "left" === m && (R += '<td style="vertical-align:top"><div class="gig-balloon-nub" style="' + I + '"></div></td>'), R += '<td style="vertical-align:top"><div id="' + S + '" class="gig-balloon-frame" style="' + E + '">' + A + "</div></td>", "right" === m && (R += '<td style="vertical-align:top"><div class="gig-balloon-nub-right" style="' + I + '"></div></td>'), "down" === m && (R += '</tr><tr><td style="vertical-align:top"><div class="gig-balloon-nub-down" style="' + I + '"></div></td>'), R += "</tr></table>", R += '<div style="clear:both;height:0;width:0;font-size:1px;"><!-- empty divs=100% height IE --></div>') : R = '<div class="gig-balloon gig-balloon-frame" style="' + E + '">' + A + "</div>", R;
    },
    createGMBalloon: function g1(f, p, h, v, w, m, b, y, S, E) {
        E = E ? "gig-balloon " + E : "gig-balloon", d();
        var C = "gig_gmBalloon_" + (new Date).getTime();
        y && (C = y);
        var I = s(f, p, h, v, w, m, b, "gigya.global.removeGMBalloon()", C + "_frame"), R = document.createElement("div");
        return R.className = E, R.style.position = "absolute", R.style.zIndex = utils.DOM.getNextZIndex().toString(), R.innerHTML = I, R.id = C, R.setAttribute("role", "alert"), R.setAttribute("aria-live", "assertive"), R.setAttribute("aria-atomic", "true"), l(R), utils.DOM.prependToBody(R), global.divGMBalloon = R, S || window.setTimeout(function() {
            o.removeElementOnDocClickOrEscape(R);
        }, 50), R;
    },
    removeGMBalloon: function d1(f) {
        var p;
        if (f) for((p = f.target) || (p = f.srcElement); null != p && p.offsetParent && -1 == p.id.indexOf(global.divGMBalloon.id);)p = p.offsetParent;
        if (!p || -1 == p.id.indexOf(global.divGMBalloon.id)) try {
            a.removeIframeShim(document.getElementById(global.divGMBalloon.id + "_frame")), global.divGMBalloon.parentNode.removeChild(global.divGMBalloon), document.detachEvent ? document.detachEvent("onclick", d1) : document.removeEventListener && document.removeEventListener("click", d1, !1);
        } catch (h) {}
    },
    putGMBalloonNextTo: function(f, p, h, v, w, m, b, y, S, E) {
        void 0 === S && (S = [
            "left",
            "right",
            "up",
            "down"
        ]), void 0 === E && (E = "");
        for(var C = {
            body: p,
            caption: h,
            w: v,
            h: w,
            hideClose: m,
            id: b,
            dontHideOnClick: y,
            balloonClass: E
        }, I = 0; I < S.length && !this.positionGMBalloonNextTo(f, S[I], C); I++);
    },
    positionGMBalloonNextTo: function(f, p, h) {
        "left" === p || "right" === p ? g(h.body, h.caption, h.w, h.h, 47, "left", h.hideClose, h.id, h.dontHideOnClick, h.balloonClass) : g(h.body, h.caption, h.w, h.h, 10, "down", h.hideClose, h.id, h.dontHideOnClick, h.balloonClass);
        var v, w, m = global.divGMBalloon.offsetWidth, b = global.divGMBalloon.offsetHeight, y = r._GetElementPos(f), S = document.documentElement, E = document.body, C = S.clientHeight;
        0 == C && (C = E.clientHeight);
        var I = S.clientWidth;
        0 == I && (I = E.clientWidth), window.innerHeight && (C = E.scrollHeight && E.scrollHeight < window.innerHeight ? E.scrollHeight : window.innerHeight, I = E.scrollWidth && E.scrollWidth < window.innerWidth ? E.scrollWidth : window.innerWidth);
        var R, A, U = utils.viewport.getScroll().top + C;
        if ("left" === p || "right" === p) {
            A = 47, (w = y.top + f.offsetHeight / 2 - 47 - 12.5) + b > U && (w = U - b - 10);
            var x = y.left - m - 5, N = y.left + f.offsetWidth + 5;
            if ("left" === p) {
                if (!(x > 10)) return null;
                v = x, R = "right", h.balloonClass += " gig-balloon-left";
            } else {
                if (!(I - N - m > 10)) return null;
                v = N, R = "left", h.balloonClass += " gig-balloon-right";
            }
        } else {
            if ("up" !== p && "down" !== p) return null;
            A = 10, v = y.left;
            var P = y.top - b - 10, O = y.top + f.offsetHeight + 5;
            if ("up" === p) {
                if (!(P > 5)) return null;
                w = P, R = "down", h.balloonClass += " gig-balloon-up";
            } else w = O, R = "up", h.balloonClass += " gig-balloon-down";
        }
        var D = g(h.body, h.caption, h.w, h.h, A, R, h.hideClose, h.id, h.dontHideOnClick, h.balloonClass);
        if (v < 10 && (v = 10), w < 10 && (w = 10), global.divGMBalloon.style.left = v + "px", global.divGMBalloon.style.top = w + "px", localInfo.isIE) {
            var L = document.getElementById(global.divGMBalloon.id + "_frame");
            L && a.addIframeShim(L);
        }
        return D;
    },
    scrollToElement: function(f) {
        if (f) {
            var p = r._GetElementPos(f);
            window.scrollTo(p.left, p.top);
        }
    },
    addIframeShim: function(f, p) {
        if (!f.shim) {
            var h = document.createElement("IFRAME");
            h.frameborder = "0", h.frameBorder = "0", h.allowtransparency = !0, h.style.position = "absolute", h.update = function(v) {
                if (h && f) {
                    if (p) h.style.left = f.offsetLeft + "px", h.style.top = f.offsetTop + "px";
                    else {
                        var w = i._GetElementPos(f);
                        h.style.left = w.left + "px", h.style.top = w.top + "px";
                    }
                    v && (h.style.width = f.offsetWidth + "px", h.style.height = f.offsetHeight + "px");
                }
            }, h.update(!0), p ? (h.style.zIndex = utils.DOM.getNextZIndex().toString(), f.style.zIndex = utils.DOM.getNextZIndex().toString(), p.appendChild(h)) : utils.DOM.prependToBody(h), f.shim = h;
        }
    },
    removeIframeShim: function(f) {
        f && f.shim && f.shim.parentNode && (f.shim.parentNode.removeChild(f.shim), f.shim = null);
    },
    scaleImage: function(f, p, h, v) {
        var w = f;
        f.width && f.height || ((w = new Image).src = f.src);
        var a1 = function() {
            0 == w.width ? window.setTimeout(a1, 100) : (w.width > w.height ? f.style.width = p + "px" : f.style.height = p + "px", f.style.display = "", v && v(f), h || (f.style.marginTop = (p - f.offsetHeight) / 2 + "px", f.style.marginLeft = (p - f.offsetWidth) / 2 + "px"));
        };
        w.width > 0 ? a1() : (f.style.display = "none", w.onload = function() {
            window.setTimeout(a1, 50);
        });
    },
    fillUserActionTemplate: function(f, p) {
        for(var h in f){
            var v = f[h];
            if ("string" == typeof v && (f[h] = utils.templates.fill(f[h], p)), "mediaItems" == h) for(var w = 0; w < v.length; w++)v[w].src && (v[w].src = utils.templates.fill(v[w].src, p));
        }
        return f;
    },
    setPlaceholder: function(f, p, h) {
        if (f) {
            var i1 = function() {
                "" == this.value && (h ? utils.DOM.addClassToElement(f, h) : f.style.color = "#585858", this.value = p, this.placeholderCleared = !1);
            };
            f.refreshPlaceholder = function() {
                f.value ? (h ? utils.DOM.removeClassFromElement(f, h) : f.style.color = "", this.placeholderCleared = !0) : (h ? utils.DOM.addClassToElement(f, h) : f.style.color = "#585858", f.value = p, this.placeholderCleared = !1);
            }, utils.DOM.addEventListener(f, "blur", i1), utils.DOM.addEventListener(f, "focus", function() {
                if (!this.placeholderCleared) {
                    if (h ? utils.DOM.removeClassFromElement(f, h) : f.style.color = "", this.value = "", this.placeholderCleared = !0, f.setSelectionRange) f.focus(), f.setSelectionRange(0, 0);
                    else if (f.createTextRange) {
                        var p = f.createTextRange();
                        p.collapse(!0), p.moveEnd("character", 0), p.moveStart("character", 0), p.select();
                    }
                }
            }), utils.DOM.addEventListener(f, "change", i1), f.refreshPlaceholder();
        }
    },
    getClassBordersAndPaddings: function(f) {
        var p = document.createElement("div");
        p.className = f, utils.DOM.prependToBody(p);
        var h = a(p);
        return p.parentNode.removeChild(p), h;
    },
    getBordersAndPaddings: function a1(f) {
        var n1 = function(p) {
            var h = parseInt(r(f, p));
            return isNaN(h) && (h = 0), h;
        };
        return {
            w: n1("border-left-width") + n1("border-right-width") + n1("padding-right") + n1("padding-left"),
            h: n1("border-top-width") + n1("border-bottom-width") + n1("padding-top") + n1("padding-bottom")
        };
    },
    getStyle: function r1(f, p) {
        return f.currentStyle ? f.currentStyle[p] : window.getComputedStyle ? document.defaultView.getComputedStyle(f, null).getPropertyValue(p) : void 0;
    },
    scaleImageToContainer: function(f, p, h) {
        p || (f.parentNode.style.textAlign = "left", f.parentNode.style.verticalAlign = "top");
        var o1 = function(p) {
            for(var h = f.parentNode, v = r(h, p); "auto" == v;)v = r(h = h.parentNode, p);
            var w = parseInt(v);
            return isNaN(w) && (w = 0), w;
        }, v = Math.min(o1("width"), o1("height"));
        if (localInfo.quirksMode) {
            var w = a(f.parentNode), m = o1("width") - w.w, b = o1("height") - w.h;
            v = Math.min(m, b);
        }
        i.scaleImage(f, v, p, h);
    },
    getClassInnerSize: function(f, p, h) {
        var v = document.createElement("div");
        v.className = f, utils.DOM.prependToBody(v);
        var w = a(v);
        return p -= w.w, h -= w.h, v.parentNode.removeChild(v), {
            w: p,
            h: h
        };
    },
    SpriteRenderer: function l1(f, p, h, v, w, m, b) {
        this.src = f, this.srcTemplate = p, this.spriteData = h, this.spriteW = v, this.spriteH = w, this.pixelRatio = m, this.spriteLength = b;
    },
    getSpriteRenderers: function(f) {
        var p = [], h = 0, v = {};
        for(var w in f){
            (b = f[w]).pixelRatio || (b.pixelRatio = 1), p.push(b.path + "|" + b.w * b.pixelRatio + "," + b.h * b.pixelRatio);
        }
        var m = _.getCdnResource("/gs/GetSprite.ashx?path=" + encodeURIComponent(p.join("^").replace(/\[\]/, "")));
        for(var w in f){
            var b = f[w], y = {
                spriteData: {}
            }, S = [], E = 0;
            y.srcTemplate = _.getCdnResource("/gs/i" + b.path.replace(/\[(.*?)\]/g, function(f, p) {
                return S.push(p.split(",")), "{" + E++ + "}";
            }));
            var C = o.getCombination(S);
            0 == C.length && C.push([
                ""
            ]);
            for(var I = 0; I < C.length; I++){
                var R = C[I].join("-");
                "" == R && (R = "default"), y.spriteData[R] = {
                    groupId: w,
                    id: R,
                    x: h,
                    w: b.w,
                    h: b.h
                }, h += b.w;
            }
            v[w] = new l(m, y.srcTemplate, y.spriteData, b.w, b.h, b.pixelRatio, C.length);
        }
        return v;
    },
    preloadImages: function(f, p) {
        for(var h = [], v = 0, o1 = function() {
            ++v == f.length && p();
        }, w = 0; w < f.length; w++)if (null == f[w]) o1();
        else {
            var m = new Image;
            m.onload = o1, m.onerror = o1, m.src = f[w], h.push(m);
        }
    },
    applyEllipsis: function(f, p) {
        for(var h = "", v = [], w = /\<(\/)?([^ \/>]+)[ ]?[^>]*(\/)?\>/i, m = 0, b = 0; b < f.length && (m < p || 0 == p);){
            var y = f.substr(b, 1);
            if ("<" == y) {
                var S = f.indexOf(">", b), E = f.substring(b, S + 1);
                w.lastIndex = 0;
                var C = w.exec(E), I = C[2].toLowerCase();
                if ("/" == C[1]) v.length > 0 && v[v.length - 1].tagname == I && v.pop();
                else if ("/" == C[3]) ;
                else {
                    var R = "</" + C[2] + ">";
                    v.length > 0 && (R += v[v.length - 1].cl), v.push({
                        tagname: C[2],
                        cl: R
                    });
                }
                h += C[0], b += C[0].length - 1;
            } else if ("&" == y) {
                var A = f.indexOf(";", b);
                A - b > 8 ? h += "&" : (h += f.substring(b, A + 1), b = A), m++;
            } else h += y, m++;
            b++;
        }
        return m < p ? f : h + "&#133;" + (v.length > 0 ? v[v.length - 1].cl : "");
    },
    getPhotoURL: function(f, p) {
        if (p && !f && (f = p), !f) return f;
        var h = document.createElement("a");
        return h.href = f, "http:" === h.protocol && "https" === localInfo.protocol ? -1 !== utils.array.indexOf(_.CDN_HOSTS.http, h.host) ? _.getCdnResource(h.pathname + h.search + h.hash) : _.getCdnResource("/proxy/photos.ashx?u=" + utils.URL.URLEncode(f)) : f;
    },
    wbr: function(f, p) {
        for(var h = (f = f.replace(/\n/g, "\n ")).split(" "), v = 0; v < h.length; v++)if (h[v].length > p) {
            for(var w, m = h[v].split(""), b = !1, y = -1, S = 0; S < m.length; S += 1)b || y++, y == p && (m.splice(S, 0, "&#173;"), y = -1), "&" == m[S] ? (b = !0, w = ";") : "<" == m[S] && (b = !0, w = ">"), b && m[S] == w && (b = !1);
            h[v] = m.join("");
        }
        return h.join(" ").replace(/\n /g, "\n");
    },
    getPos: function t1(f) {
        var p = navigator.userAgent.toLowerCase(), h = -1 != p.indexOf("opera");
        p.indexOf("msie");
        if (null === f.parentNode || "none" == f.style.display) return !1;
        var v, w = null, m = [];
        if (f.getBoundingClientRect) {
            v = f.getBoundingClientRect();
            var b = Math.max(document.documentElement.scrollTop, document.body.scrollTop), y = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
            return {
                x: v.left + y,
                y: v.top + b
            };
        }
        if (document.getBoxObjectFor) {
            v = document.getBoxObjectFor(f);
            var S = f.style.borderLeftWidth ? parseInt(f.style.borderLeftWidth) : 0, E = f.style.borderTopWidth ? parseInt(f.style.borderTopWidth) : 0;
            m = [
                v.x - S,
                v.y - E
            ];
        } else {
            if (m = [
                f.offsetLeft,
                f.offsetTop
            ], (w = f.offsetParent) != f) for(; w;)m[0] += w.offsetLeft, m[1] += w.offsetTop, w = w.offsetParent;
            (-1 != p.indexOf("opera") || -1 != p.indexOf("safari") && "absolute" == f.style.position) && (m[0] -= document.body.offsetLeft, m[1] -= document.body.offsetTop);
        }
        for(w = f.parentNode ? f.parentNode : null; w && "BODY" != w.tagName && "HTML" != w.tagName;)m[0] -= w.scrollLeft, m[1] -= w.scrollTop, w = w.parentNode ? w.parentNode : null;
        return {
            x: m[0],
            y: m[1]
        };
    },
    _GetElementPos: function(f) {
        var p = t(f);
        return {
            left: p.x,
            top: p.y
        };
    },
    isEmail: function(f) {
        if (f.indexOf(" ") >= 0) return !1;
        var p = f.split("@");
        if (2 != p.length) return !1;
        if (0 == p[0].length) return !1;
        if (0 == p[1].length) return !1;
        var h = p[1].split(".");
        if (h.length < 2) return !1;
        for(var v = 0; v < h.length; v++)if (0 == h[v].length || h[v].indexOf(" ") > 0) return !1;
        return !0;
    }
};
export const pluginUtils = {
    css: {
        fixCss: function(f) {
            return (localInfo.isIE7 || localInfo.isIE && localInfo.quirksMode) && (f = f.replace(/display:inline-block/g, "display:inline-block;zoom:1;*display:inline")), f.replace(/gradient\((.*?),(.*?)\)/g, 'filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="$1", endColorstr="$2");background: linear-gradient(top,  $1,  $2);background: -ms-linear-gradient(top left, $1, $2);background: -webkit-gradient(linear, left top, left bottom, from($1), to($2));background: -moz-linear-gradient(top,  $1,  $2)');
        }
    },
    lang: {
        getLocalizedText: function e1(f, p, h, v, w) {
            var m, b, y;
            if ("te-st" == h) return "TEST_" + p.substring(0, 10);
            h || (h = "en");
            var S = i18n[f][h];
            if (!S) return e1(f, p, t(h, "en"), v, w);
            var E = S[p], C = null === (y = null === (b = null === (m = i18n) || void 0 === m ? void 0 : m["gigya.services.accounts.plugins.screenSet.js"]) || void 0 === b ? void 0 : b[h]) || void 0 === y ? void 0 : y[p];
            return !E && C && (E = C), E && v && (E = E.replace(v, w)), E;
        },
        getTranslationsFromContainer: function e1(f, p, h, v) {
            if (void 0 === h && (h = !0), void 0 === v && (v = "en"), f && f.translations) {
                for(var w = (null == p ? void 0 : p.split(",").map(function(f) {
                    return f.trim();
                })) || [], m = 0, b = w; m < b.length; m++){
                    var y = b[m];
                    if (f.translations[y]) return {
                        langKey: y,
                        translations: f.translations[y]
                    };
                    var S = t(y, y);
                    if (S) {
                        var E = e1(f, S);
                        if (h && E) return E;
                    }
                }
                var C = t(w[0], v);
                return h && C ? e1(f, C) : void 0;
            }
        },
        getFallbackLang: function t1(f, p) {
            var h = f.indexOf("-");
            return h > 0 ? f.substr(0, h) : f !== p ? p : void 0;
        },
        getDateString: function(f, p) {
            if (f && f.dateFormat) {
                var h = f.dateFormat, v = p.getDate(), w = p.getMonth() + 1, m = [
                    "January",
                    "February",
                    "March",
                    "April",
                    "May",
                    "June",
                    "July",
                    "August",
                    "September",
                    "October",
                    "November",
                    "December"
                ][p.getMonth()], b = p.getFullYear();
                return h.replace(/%dd/g, ("0" + v).slice(-2)).replace(/%d/g, v).replace(/%MMMM/g, m).replace(/%MMM/g, m.substr(0, 3)).replace(/%MM/g, ("0" + w).slice(-2)).replace(/%M/g, w).replace(/%yyyy/g, b).replace(/%yy/g, b.toString().slice(-2));
            }
        }
    },
    animation: {
        fadeIn: function(f, p) {
            void 0 === p && (p = 1), null == f.style.opacity ? f.style.filter = "alpha(opacity=0)" : f.style.opacity = "0", window.setTimeout(function() {
                null == f.style.opacity ? f.style.filter = "alpha(opacity=" + 100 * p + ")" : f.style.opacity = p + "";
            }, 10);
        },
        slideDown: function(f) {
            var p = i.getClassBordersAndPaddings(f.className), h = f.offsetHeight - p.h, v = f.style.transitionProperty;
            f.style.maxHeight = "1px", f.style.transitionProperty = f.style.webkitTransitionProperty = "max-height", window.setTimeout(function() {
                f.style.maxHeight = h + "px", f.style.transitionProperty = f.style.webkitTransitionProperty = v;
            }, 100);
            var a1 = function() {
                f.style.maxHeight = "999px", utils.DOM.removeEventListener(f, "transitionend", a1), utils.DOM.removeEventListener(f, "webkitTransitionEnd", a1);
            };
            utils.DOM.addEventListener(f, "transitionend", a1), utils.DOM.addEventListener(f, "webkitTransitionEnd", a1), window.setTimeout(a1, 500);
        }
    },
    DOM: {
        addBrowserInfoClassesToElement: function(f) {
            var p = "gigya-" + localInfo.currentBrowser;
            localInfo.isIOS && (p += " ios"), p = p.replace(/ /g, " gigya-"), localInfo.isNativeMobileApp && (p = "gigya-native-mobile-app " + p), utils.DOM.addClassToElement(f, p);
        },
        setTextboxSubmitButton: function(f, p) {
            var t1 = function(f) {
                13 == (f && f.which ? (f = f).which : (f = event).keyCode) && p.click();
            };
            utils.DOM.addEventListener(f, "keyup", t1), utils.DOM.addEventListener(p, "keyup", t1);
        },
        getRelativePosition: function o1(f, p, h, v, w) {
            var m = {
                top: 0,
                left: 0,
                bottom: 0,
                right: 0
            };
            return "bottom" === h ? (m.top = f.bottom + v, m.left = w ? f.right - p.w : f.left) : "top" === h ? (m.top = f.top - p.h - v, m.left = w ? f.right - p.w : f.left) : "left" === h ? (m.top = w ? f.bottom - p.h : f.top, m.left = f.left - p.w - v) : (m.top = w ? f.bottom - p.h : f.top, m.left = f.right + v), m.bottom = m.top + p.h, m.right = m.left + p.w, m;
        },
        placePopoverNearElement: function a1(f, p, h, v, w, m) {
            var b = utils.DOM.getElementPosition(f), y = {
                w: p.offsetWidth,
                h: p.offsetHeight
            }, S = o(b, y, h, v, w);
            if (m && !utils.viewport.isRectFullyVisible(S)) {
                var E = o(b, y, {
                    bottom: "top",
                    left: "right",
                    right: "left",
                    top: "bottom"
                }[h], v, !1);
                utils.viewport.isRectHorizontallyVisible(E) && (S = E);
            }
            if (!utils.viewport.isRectHorizontallyVisible(S)) {
                E = o(b, y, h, v, !w);
                utils.viewport.isRectHorizontallyVisible(E) && (S = E);
            }
            p.style.left = S.left + "px", p.style.top = S.top + "px";
        },
        addPopoverNearElement: function(f, p, h, v, w, m, b, y, S) {
            if (void 0 === h && (h = "bottom"), void 0 === v && (v = 0), void 0 === w && (w = !1), void 0 === m && (m = !0), void 0 === b && (b = null), void 0 === y && (y = null), void 0 === S && (S = null), f && p) {
                var E = document.createElement("div");
                return E.appendChild(p), E.style.position = "absolute", E.style.zIndex = utils.DOM.getNextZIndex().toString(), E.style.left = "-1000px", document.body.appendChild(E), a(f, E, h, v, w, m), r(E, function(p) {
                    f.focus(), y(p);
                }, S), b && "function" == typeof pluginUtils.animation[b] && pluginUtils.animation[b](p), E;
            }
        },
        removeElementOnDocClickOrEscape: function r1(f, p, h) {
            if (void 0 === p && (p = null), void 0 === h && (h = null), f) {
                var v = [
                    f
                ];
                h && (v = v.concat(h)), s(function(h) {
                    var v = f && f.parentNode;
                    v && f.parentNode.removeChild(f), p && p(h, v);
                }, v);
            }
        },
        hideElementOnDocClick: function(f, p, h) {
            if (void 0 === p && (p = null), void 0 === h && (h = null), f) {
                var v = [
                    f
                ];
                h && v.concat(h), s(function() {
                    f.style.display = "none", p && p();
                }, v);
            }
        },
        performOnDocClickOrEscape: function s1(f, p) {
            void 0 === f && (f = null), void 0 === p && (p = null);
            var t1 = function(p) {
                utils.DOM.removeClassFromElement(document.body, "gig-clickable"), utils.DOM.removeEventListener(document, "mousedown", o1), utils.DOM.removeEventListener(document, "keydown", a1), f && f(p);
            }, o1 = function(f) {
                for(var h = f.target || f.srcElement, v = !1; h && h.parentNode;){
                    if (p && -1 != p.indexOf(h)) {
                        v = !0;
                        break;
                    }
                    h = h.parentNode;
                }
                v || t1(f);
            }, a1 = function(f) {
                27 == (f.which || f.keyCode) && t1(f);
            };
            (localInfo.isIOS && localInfo.isSafari || localInfo.isIOSWebView) && (l || (i.addCss("*.gig-clickable {cursor: pointer;}", null), l = !0), utils.DOM.addClassToElement(document.body, "gig-clickable")), utils.DOM.addEventListener(document, "mousedown", o1), utils.DOM.addEventListener(document, "keydown", a1);
        },
        hideElement: function(f) {
            f.style.display = "none";
        },
        showElement: function(f) {
            f.style.display = "block";
        }
    },
    layout: {
        measureText: function(f, p, h) {
            void 0 === h && (h = 0), (isNaN(h) || h < 0) && (h = 0);
            var v = document.getElementById("gigya_ruler"), w = document.getElementById("gigya_ruler_text");
            null == v && (v = document.createElement("div"), w = document.createElement("span"), v.id = "gigya_ruler", w.id = "gigya_ruler_text", v.style.visibility = "hidden", v.style.position = "absolute", v.style.margin = "0px", v.style.padding = "0px", v.appendChild(w), utils.DOM.prependToBody(v)), p && (v.style.lineHeight = p.size + "px", v.style.fontFamily = p.font, v.style.fontSize = p.size + "px", v.style.fontWeight = "true" == ("" + p.bold).toLowerCase() ? "bold" : ""), h ? (v.style.whiteSpace = "", v.style.width = h + "px") : (v.style.whiteSpace = "nowrap", v.style.width = "auto"), v.style.overflow = "hidden", v.style.display = "", w.innerHTML = f;
            var m = w.offsetWidth, b = w.offsetHeight;
            return 0 != m && 0 != b || (m = v.offsetWidth, b = v.offsetHeight), v.style.display = "none", {
                w: m,
                h: b
            };
        }
    },
    text: {
        normalizeLinebreaks: function(f) {
            return void 0 === f && (f = void 0), f && f.replace ? f.replace(/\r/, "").replace(/\n/g, "\r\n") : f;
        },
        fixTextWidows: function(f) {
            var p = f.lastIndexOf(" ");
            return -1 === p ? f : f.substr(0, p) + "&nbsp;" + f.substr(p + 1);
        }
    },
    validation: {
        isValidEmailLoginID: function(f) {
            var p = new RegExp("^(?=(.{1,64}@.{1,255}))([!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9}]{1,64}(\\.[!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9]{1,}){0,})@((\\[(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\\])|([a-zA-Z0-9-]{1,63}(\\.[a-zA-Z0-9-]{1,63}){1,}))$", "ig").test(f);
            return logger.info("LoginID validation with email : " + f + ", passed : " + p), p;
        },
        isEmailValid: function(f) {
            return t(f);
        },
        isEmailListValid: function t1(f) {
            for(var p = new RegExp("((\"[^<]+<(((?=([^.].{0,63}@.{1,255}))([!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9}]{1,64}(\\.[!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9]{1,}){0,})@((\\[(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\\])|([a-zA-Z0-9-]{1,63}(\\.[a-zA-Z0-9-]{1,63}){1,}))))>\")|((\"[^\"]*\" *)?<(((?=([^.].{0,63}@.{1,255}))([!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9}]{1,64}(\\.[!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9]{1,}){0,})@((\\[(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\\])|([a-zA-Z0-9-]{1,63}(\\.[a-zA-Z0-9-]{1,63}){1,}))))>)|(((?=([^.].{0,63}@.{1,255}))([!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9}]{1,64}(\\.[!#$%&'*+\\-\\/=?\\^_`{|}~a-zA-Z0-9]{1,}){0,})@((\\[(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\\])|([a-zA-Z0-9-]{1,63}(\\.[a-zA-Z0-9-]{1,63}){1,})))))"), h = f.split(","), v = 0; v < h.length; v++)if (!p.test(h[v])) return !1;
            return !0;
        }
    },
    domain: {
        isInDomain: function(f, p) {
            if (void 0 === f && (f = void 0), void 0 === p && (p = thisScript.globalConf.topDomain || document.domain), f) {
                var h = "^" + f.replace(/\./g, "\\.").replace(/\*\\./g, "([a-zA-Z0-9]+\\.)*") + "$";
                return new RegExp(h).test(p);
            }
        }
    }
};
export const i18n = {
    "gigya.services.accounts.plugins.screenSet.js": {
        en: {
            login_identifier_exists: "Login identifier exists",
            unique_identifier_exists: "Unique identifier exists",
            account_temporarily_locked_out: "Account temporarily locked out",
            wrong_password: "Wrong password",
            old_password_cannot_be_the_same_as_new_password: "You've already used that password. Please create a new one.",
            old_password_used: "It seems like you're trying to log in with a password that was changed. If you don't remember the new one, reset your password.",
            choose_file: "Choose File",
            no_file_chosen: "No file chosen",
            "maximum_size_of_3mb.": "Maximum size of 3MB.",
            there_are_errors_in_your_form_please_try_again: "There are errors in your form, please try again",
            sorry_we_are_not_able_to_process_your_registration: "Sorry, we are not able to process your registration",
            invalid_login_or_password: "Invalid login or password",
            account_is_disabled: "Account is disabled",
            email_already_exists: "Email already exists",
            there_is_no_user_with_that_username_or_email: "There is no user with that username or email",
            password_must_contain_at_least: "Password must contain at least",
            and: "and",
            num_of_the_following_groups: "%num of the following: An uppercase letter, a lowercase letter, a number, a special symbol",
            num_characters_total: "%num characters",
            too_weak: "Too weak",
            checking: "Checking",
            email_address_is_invalid: "E-mail address is invalid.",
            password_does_not_meet_complexity_requirements: "Password does not meet complexity requirements",
            username_already_exists: "Username already exists",
            passwords_do_not_match: "Passwords do not match",
            please_enter_fieldname: "Please enter %fieldname",
            this_field_is_required: "This field is required",
            invalid_fieldname: "Invalid %fieldname",
            very_strong: "Very strong",
            strong: "Strong",
            fair: "Fair",
            weak: "Weak",
            password_strength_colon: "Password strength:",
            not_available: "Not available",
            available: "Available",
            network_error: "Network error, please try again later.",
            profilePhoto_fileSizeError: "Photo format: JPG/GIF/PNG. Size: up to 3MB.",
            subscription_pending_confirmation: "Pending Confirmation",
            login_captcha_error: "To login, confirm you are not a robot",
            register_captcha_error: "To register, confirm you are not a robot",
            phone_number_exists: "This phone number already exists",
            please_enter_a_valid_code: "Please enter a valid code",
            invalid_password_reset_token: "Uh-oh, your link is not valid. Restart the reset password flow to get a new link. ",
            otp_code_expired: "Code has expired. Resend a new code.",
            invalid_login_identifier: "Invalid login identifier",
            code_frequency_limit_reached: "Send limit reached. Please try again in a few minutes",
            forbidden_error: "Too many requests: please wait before you try again",
            request_captcha_error: "To continue, confirm you are not a robot",
            unauthorized_user: "Unauthorized user",
            permission_denied: "Permission denied",
            account_pending_registration: "Account Pending Registration",
            phone_not_verified: "Number must be verified",
            phone_not_verified_enter_code: "Verification has not been completed. Please enter a valid code.",
            sms_subscription_error: "To subscribe, please provide a verified phone number",
            device_code_incorrect: "Device code incorrect, Please re-enter your device code",
            not_supported: "Operation not supported",
            passkey_authenticator_already_registered: "Passkey already exists on the device",
            operation_canceled: "The request was canceled by the user or timed out",
            invalid_site_configuration: "Invalid site configuration",
            passkey_authenticator_error: "Something went wrong",
            passkey_register_success: "Passkey register successfully",
            general_error: "Something went wrong, please try again later",
            no_data_available: "No Data Available",
            missing_dqm_credentials: "Missing user credentials. Please ensure that you have configured your site's SAP DQM correctly.",
            dqm_general_error: "There was an unknown error at the Provider. Please try again later.",
            dqm_selection_error: "You must choose an address from the list of available options.",
            organization_context_saved: "Organization context was successfully updated",
            subscription_missing_dependson_fields: "To subscribe, please provide the missing required field(s)",
            device_limit_reached: "You cannot add any more authenticators to your account.",
            tfa_registration_expired: "Rescan the QR code or enter the secret again.",
            please_try_again_later: "Please try again later.",
            user_enable_2fa_error: "Enabling 2-Factor Authentication failed. Please try again.",
            user_enable_2fa_success: "You enabled 2-Factor Authentication successfully",
            custom_identifier_already_exists: "Custom identifier already exists: %fieldname"
        }
    },
    "gigya.services.socialize.plugins.login.js": {
        en: {
            social_by: "Social by",
            edit: "Edit",
            add_more_connections_to_your_account: "Add more connections to your account.",
            you_can_use_your_account_from_one_of_these_services_to_sign_into_the_site: "You can use your account from one of these services to sign into the site",
            whats_this: "What's this?",
            not_you: "Not you?",
            sign_in_using_a_different_network: "Sign in using a different network",
            welcome_back_user: "Welcome back, %user",
            welcome_back: "Welcome back",
            copy_link: "Copy link:",
            copy_this_link_to_a_new_browser_window: "Copy this link to a new browser window:",
            no_available_providers: "No available providers",
            login: "Login",
            logout: "Logout",
            terms: "Terms",
            connect_to: "Connect to",
            no_social_network_application_key: "No Social network application key available for this domain. please contact Gigya to get application keys",
            connect_with_your_friends: "Connect with your friends",
            network_error: "Network error, please try again later.",
            unknown_error: "Unknown Error",
            ok: "OK",
            copyButton: "Copy"
        }
    }
};
export const isGigya = true;
export const apiKey = "4_aeFS_UyzRnmP5k_MI59ejg";
export const defaultApiDomain = "gigya.com";
export const dataCenter = "eu1";
export const gmidVersion = "ver4";
export const bypassCaptchaV1 = true;
export const __initialized = true;
export const isReady = true;
function setAccountResidency() {}
function setGroupContext() {}
function setSSOToken() {}
function syncGroupGltExp() {}
function hasSession() {}
function Request() {}
function XhrRequest() {}
function Promise() {}
function debug() {}
function getLoginToken() {}
function updateConfiguration() {}
function getUrlParam() {}
function ClientFeature() {}
function flow() {}
function showDebugUI() {}
;
