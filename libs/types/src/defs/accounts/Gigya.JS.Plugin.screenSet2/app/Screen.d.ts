import { TemplateElement } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/TemplateElement';
import { IScreenOptions } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenOptions';
import { BaseForm } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm';
import { IMap, ForEach, getElementsByHavingAttribute, getElementsByHavingAttributePrefix, ForEachProp, Some, getUnitMeasurementType } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/utils';
import { ErrorDisplayElement } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement';
import { ProfilePhotoWidget } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/ProfilePhotoWidget';
import { CaptchaWidget } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/Widgets/CaptchaWidget';
import { IScreenWidget } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget';
import { ScreenSetPlugin } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/ScreenSetPlugin';
import { IFormInput } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput';
import { IBaseFormEvent } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/Events.d';
import { IErrorInfo } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/Errors';
import { IAbTestingData } from 'src/core/Gigya.Js/app/Interfaces';
import { GSErrors } from '../../../core/Gigya.Js/app/GSErrors';
import { IFormContext } from "./IFormContext";
export declare class Screen extends TemplateElement<HTMLDivElement> implements IScreenOptions {
    _screenSet: ScreenSetPlugin;
    templateElement: HTMLDivElement;
    accountsLinkedScreen: string;
    pendingTfaRegistrationScreen: string;
    pendingTfaVerificationScreen: string;
    pendingRegistrationScreen: string;
    existingLoginIdentifierScreen: string;
    pendingVerificationScreen: string;
    missingLoginIdScreen: string;
    pendingPasswordChangeScreen: string;
    pendingReAuthenticationScreen: string;
    pendingCodeVerificationScreen: string;
    _hasTfa: boolean;
    private _forms;
    _errorDisplayElements: IMap<Array<ErrorDisplayElement>>;
    _profilePhotos: ProfilePhotoWidget[];
    _captchas: CaptchaWidget[];
    private _widgets;
    private _others;
    width: string;
    height: string;
    caption: string;
    requestedScreenId: string;
    static utils: {
        ForEach: typeof ForEach;
        getElementsByHavingAttribute: typeof getElementsByHavingAttribute;
        getElementsByHavingAttributePrefix: typeof getElementsByHavingAttributePrefix;
        ForEachProp: typeof ForEachProp;
        Some: typeof Some;
        getUnitMeasurementType: typeof getUnitMeasurementType;
    };
    constructor(_screenSet: ScreenSetPlugin, templateElement: HTMLDivElement);
    private prepareBoundedToFormElements;
    get variantGroupId(): string;
    get abTestId(): string;
    get abTestingData(): IAbTestingData;
    get variantPercentage(): number | undefined;
    get isOriginalVariant(): boolean;
    get isScreenVariant(): boolean;
    get requestedScreen(): string;
    addSpecificErrorBinds(boundedElements?: Array<HTMLElement>): Array<ErrorDisplayElement>;
    removeSpecificErrorBinds(boundedErrors?: Array<ErrorDisplayElement>): void;
    addDynamicWidgets(rootEl: HTMLElement, params?: {
        exclude?: any[];
    }): IScreenWidget[];
    addDynamicWidgetsByType(rootEl: HTMLElement, widgetTypes: any[]): Array<IScreenWidget>;
    removeDynamicWidgets(widgetsToRemove: Array<IScreenWidget>): void;
    private prepareOtherElements;
    overrideTemplateCaption(caption: string): void;
    haveForms(): number | boolean;
    getFormByElement(element: HTMLElement): BaseForm | undefined;
    setCssClass(): void;
    unlinkTemplate(): void;
    linkInstanceElement(parent: HTMLElement): Promise<void>;
    legacyLinkInstanceElement(parent: HTMLElement): void;
    placeContentInElement(instanceElement: HTMLElement): void;
    unlinkInstanceElement(): void;
    getErrorMessage(errorCode: GSErrors, isBoundToField: boolean, field: IFormInput): string;
    dispatchEvent(eventName: string, event: IBaseFormEvent): any;
    performAutoSkip(formContext: IFormContext): Promise<BaseForm>;
    hideErrors(): void;
    showErrors(form: BaseForm, arErrors: IErrorInfo[], isServerError: boolean): void;
    dimScreen(): void;
    undimScreen(): void;
    setProfilePhoto(thumbnailUrl: string): void;
    getExtraProfileFields(missingOnly: boolean): string[];
    getNeededData(formContext: IFormContext): IMap<any>;
    hasConditionalAttributes(): boolean;
    evaluateConditionalAttributes(): void;
    resetLastConditionalValues(): void;
    setBeforeLoadData(eventData: any): void;
    getCaptchaData(): Promise<void | {
        token: string;
        type: string;
    }>;
    private getScreenDimensionsWithUnitType;
}
