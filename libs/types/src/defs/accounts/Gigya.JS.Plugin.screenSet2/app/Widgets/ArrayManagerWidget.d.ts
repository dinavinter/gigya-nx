import { BaseForm } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseForm';
import { IScreenWidget } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseScreenWidget';
import { FormInput } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/Inputs/FormInput';
import { IFormWidget, BaseFormWidget } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/BaseFormWidget';
import { ErrorDisplayElement } from 'src/accounts/Gigya.JS.Plugin.screenSet2/app/ErrorDisplayElement';
export declare const ArrayManager_CONST: {
    selector: string;
    containerSelector: string;
    formElSelector: string;
    addButtonSelector: string;
    removeButtonSelector: string;
    itemWrapperClass: string;
    inputsWrapperClass: string;
    buttonsWrapperClass: string;
    templateItemAttr: string;
    arrayManagerRootAttr: string;
    deleteDisabledClass: string;
    indexMatcher: RegExp;
};
export declare class ArrayManagerItem {
    arrayManager: ArrayManagerWidget;
    private _index;
    private _uniqueItemID;
    private _container;
    private _inputsWrapper;
    private _buttonsWrapper;
    private _form;
    private _screen;
    onDispose: Array<() => void>;
    screenWidgets: Array<IScreenWidget>;
    formInputs: Array<FormInput>;
    formWidgets: Array<IFormWidget>;
    boundedErrors: Array<ErrorDisplayElement>;
    constructor(arrayManager: ArrayManagerWidget, _index: number);
    getID(): string;
    getIndex(): number;
    setIndex(index: number): void;
    attachAddButton(addButton: HTMLButtonElement): void;
    linkInstance(): void;
    getContainer(): HTMLDivElement;
    dispose(): void;
    update(): void;
    private _getAllElements;
    private _indexNameBindings;
    private _linkToScreen;
    private _unlinkScreen;
    private _linkToForm;
    private _unlinkForm;
}
export declare class ArrayManagerWidget extends BaseFormWidget<HTMLDivElement> {
    static CONSTS: {
        selector: string;
        containerSelector: string;
        formElSelector: string;
        addButtonSelector: string;
        removeButtonSelector: string;
        itemWrapperClass: string;
        inputsWrapperClass: string;
        buttonsWrapperClass: string;
        templateItemAttr: string;
        arrayManagerRootAttr: string;
        deleteDisabledClass: string;
        indexMatcher: RegExp;
    };
    onDispose: (() => void)[];
    private _arrayRootName;
    private _inputsTemplate;
    private _buttonsTemplate;
    private _arrayContainer;
    private _minimumItems;
    private _addButton;
    private _items;
    private _fieldsNames;
    private _storeAsArrayRoots;
    constructor(_form: BaseForm, el: HTMLDivElement);
    getFieldsNamesNormalized(): any;
    private filterElements;
    createInputsWrapper(): DocumentFragment;
    attachRemoveButton(item: ArrayManagerItem): HTMLButtonElement;
    linkInstanceElement(parent: any): void;
    unlinkInstanceElement(): void;
    addItem(): void;
    removeItem(itemID: string): void;
    getFieldsNames(): string[];
    getStoreAsArrayRoots(): string[];
    private _reindexItems;
    private _applyCurrentState;
    getRootName(): string;
    update(): void;
    private _getButton;
}
export declare function addIndex(original: string, arrayRoot: string, index: number): string;
