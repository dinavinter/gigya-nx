import { IApiService } from 'src/core/ApiService/app/interfaces';
import { ApiAdapterSettings, IApiAdapter, IApiAdapterInitSettings } from 'src/core/Gigya.Js/interfaces/IApiAdapter';
import { BaseRequest } from 'src/core/Gigya.Js.Adapters.Web/app/BaseRequest';
import { AbstractLocalStorageAdapter } from '../../Gigya.Js/app/Utils/localStorage';
export declare let apiService: IApiService;
export declare const webAdapterName = "Web";
export declare function newApiAdapter(adapterSettings: IApiAdapterInitSettings): IApiAdapter;
export declare class WebAdapter implements IApiAdapter {
    private adapterSettings?;
    private _storage?;
    name: string;
    private _apiService;
    private _ssoService;
    private _gmidTicket;
    private _reBootstrapCount;
    private static serverGltToggleName;
    private static bootstrapIndicationCookieName;
    constructor(adapterSettings?: IApiAdapterInitSettings, _storage?: AbstractLocalStorageAdapter);
    getStorage(): AbstractLocalStorageAdapter;
    init(initCallback: () => void, retries?: number): Promise<void>;
    private bootstrapApiService;
    private syncCanaryWithSSO;
    private createApiService;
    isSessionValid(params?: Object, callback?: (isValid: boolean) => void): void;
    hasSessionToken(params?: Object): boolean;
    registerForNamespaceEvents(namespace: string): void;
    onPluginEvent(event: any): void;
    onJSLog(logType: string, logInfo: string): void;
    sendRequest(methodName: string, params: Object, callback?: (response: Object) => void, settings?: ApiAdapterSettings): Promise<void>;
    clearSession(params: Object, callback?: (res?: any) => void): void;
    setGltexpFromSSO(apiKey?: string): Promise<boolean>;
    sendOauthRequest(methodName: string, params: Object, callback?: (response: Object) => void, settings?: ApiAdapterSettings): void;
    beforeRequest(methodName: string, params: Object, settings?: ApiAdapterSettings): Promise<void>;
    private afterResponse;
    onSDKEvent(eventObject: Object): void;
    getTokenParam(APIKey: any, paramName: any): string;
    private establishSession;
    checkReturnFromURL(): Promise<void>;
    private handleMagicLink;
    private finalizeLinkAccounts;
    private shouldFinalizeLinkAccountsV2;
    private setNewLoginTokenFromResponse;
    private setLoginTokenIfNotExist;
    private isFakeToken;
    onInvalidTokenResponse(req: BaseRequest, callback: () => void): Promise<void>;
    handleTokenResponse(req: BaseRequest, res: Object, callback: () => void): Promise<void>;
    logoutSsoIfNeeded(req: BaseRequest, res: Object, callback: () => void): Promise<void>;
    loadLogoutUrls(logoutUrlsList: string, callback: () => void, queryStringParams: Object, removeAfter?: number | boolean): void;
    loadLogoutUrl(url: string, callback: () => void, removeAfter?: number | boolean): void;
    shouldWaitForService(request: BaseRequest, response: Object): boolean;
    getGmidTicket(): Promise<string>;
    private refreshGmidTicket;
    private setGmidTicket;
    private set bootstrapIndication(value);
    private get bootstrapIndication();
    private calculateGmidTicketNextRun;
    syncSsoLogin(ssoLoginParams: Object): void;
}
