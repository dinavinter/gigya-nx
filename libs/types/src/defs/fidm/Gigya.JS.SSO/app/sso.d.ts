import { GetGroupTokenResponse, CanaryIndicationResponse, GetLoginTokenExpResponse, ISsoService, SetLoginTokenExpResponse, GetGroupApiDomainResponse, SDKLogoutResponse } from 'src/fidm/Gigya.JS.SSO/app/interfaces';
import { SsoUtils } from "src/fidm/Gigya.JS.SSO/app/ssoUtils";
import { ISsoConfig } from 'src/core/Gigya.Js/interfaces/IWebSdkConfig';
export declare class Sso implements ISsoService {
    private _apiKey;
    private _siteApiKey;
    private _ssoSegment;
    private _ssoConfig;
    private _utils;
    private _storage;
    private readonly _storageKey;
    private readonly _canaryKey;
    private readonly _canaryVerKey;
    private _currentFragment;
    private _mode;
    private _requestDomain;
    private _lid;
    private _callbackID;
    constructor(_apiKey: string, _siteApiKey: string, _ssoSegment: string, _ssoConfig?: ISsoConfig, _utils?: SsoUtils, _storage?: import("../../../core/Gigya.Js/app/Utils/localStorage").AbstractLocalStorageAdapter);
    init(): void;
    private _checkFragment;
    private _start;
    getGroupApiDomain(): Promise<GetGroupApiDomainResponse>;
    setGroupApiDomain(domain: string): Promise<void>;
    logout(): Promise<SDKLogoutResponse>;
    removeToken(): Promise<void>;
    getToken(): Promise<GetGroupTokenResponse>;
    setToken(lt: string, expiration?: string | number, gltexp?: string): Promise<void>;
    setGroupContext(groupContext: any): Promise<void>;
    setTokenExpiration(gltexp: string): Promise<SetLoginTokenExpResponse>;
    getTokenExpiration(): Promise<GetLoginTokenExpResponse>;
    checkTokenRenew(loginToken: string): Promise<GetGroupTokenResponse>;
    syncCanaryIndication(isCanary: string, versionSignature: string): Promise<CanaryIndicationResponse>;
    private _markSiteVisited;
    private _markRevokedLoginToken;
    private _getLogoutURLs;
    private _createKey;
    private _parseCanaryVersionSignature;
}
